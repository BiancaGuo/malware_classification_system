import os
import re
import time

#API sequence
filepath="E:\\PE_dataset\\1\\3fc0cb3da9ab0e8f677b25a866a54753"
# filepath="E:\\PE_dataset\\7\\4399GameHallInstall1.1.0.2823.exe"
#
# start=time.clock()
# command = 'C:\\Python27\\Scripts\\cuckoo submit ' + filepath
# cuckoo_command = os.popen(command).read()
# cuckoo_num=str(cuckoo_command).split('#')[1].strip('\n')
# cuckoo_log_path = "C:\\Users\\47892\\.cuckoo\\storage\\analyses\\" + cuckoo_num + "\\reports\\report.json"
# while True:
#     if os.path.exists(cuckoo_log_path):
#         time.sleep(30)
#         get_api_sequence.extract_api_sequence_from_one_file(cuckoo_log_path)
#         break
#
# # print(dynamic_feature_result)
# end=time.clock()
# print(end-start)




# def getOpcodeSequence(filename):
#     opcode_seq = []
#     p = re.compile(r'[\s]{16}([a-z]+)$|[\s]{16}([a-z]+[\s]{2})')
#     with open(filename,encoding='utf-8') as f:
#         f=list(f)
#         for i in range(0,len(f)):
#             if str(f[i]).strip()=="; Segment type: Pure code":
#                 for j in range(i+1,len(f)):
#                     if re.match(r"; Segment type:*",str(f[j]).strip()) or j==len(f)-1:
#                         i=j
#                         break
#                     m = re.findall(p,str(f[j]))
#                     # print(str(f[j]))
#                     if m:
#                         # print(m)
#                         opc = str(m[0][1]).strip()
#                         opc2 = str(m[0][0]).strip()
#                         if opc!='' and opc != "align" and opc != "db":
#                             opcode_seq.append(opc)
#                         elif opc2!='' and opc2 != "align" and opc2 != "db":
#                             opcode_seq.append(opc2)
#             # if flag==1:
#             #     break
#
#     return opcode_seq
#
# start=time.clock()
# command = 'D:\\IDA7.0\\idat.exe -B ' + filepath
# os.system(command)
#
# opcode_sequence=getOpcodeSequence(filepath+".asm")
# op3gram = ngram.getOpcodeNgram(opcode_sequence)  # 获得ngram组
# selected_static_features=ngram.getStaticFeatures()
# standard = {}
# for feature in selected_static_features:#str
#     temp = feature.replace('(', '').replace(')', '').replace('\'', '')
#     feature_tuple = tuple([str(i).strip() for i in temp.split(',')])
#     if feature_tuple in op3gram:
#         standard[feature_tuple] = op3gram[feature_tuple]
#     else:
#         standard[feature_tuple] = 0
# end = time.clock()
# print(end-start)


key_list = {}

key_list["Name"]=[]
key_list["Malware"] = []
key_list["Magic"] = []
key_list["MajorLinkerVersion"] = []
key_list["MinorLinkerVersion"] = []
key_list["SizeOfCode"] = []
key_list["SizeOfInitializedData"] = []
key_list["SizeOfUninitializedData"] = []
key_list["AddressOfEntryPoint"] = []
key_list["BaseOfCode"] = []
key_list["BaseOfData"] = []
key_list["ImageBase"] = []
key_list["SectionAlignment"] = []
key_list["FileAlignment"] = []
key_list["MajorOSystemVersion"] = []
key_list["MinorOSystemVersion"] = []
key_list["MajorImageVersion"] = []
key_list["MinorImageVersion"] = []
key_list["MajorSubsystemVersion"] = []
key_list["MinorSubsystemVersion"] = []
key_list["Win32Version"] = []
key_list["SizeOfImage"] = []
key_list["SizeOfHeaders"] = []
key_list["CheckSum"] = []
key_list["Subsystem"] = []
key_list["DllCharacteristics"] = []
key_list["SizeOfStackReserve"] = []
key_list["SizeOfStackCommit"] = []
key_list["SizeOfHeapReserve"] = []
key_list["SizeOfHeapCommit"] = []
key_list["LoaderFlags"] = []
key_list["NumberOfRvaAndSizes"] = []
key_list["Name"].append(os.path.basename(filepath) + ".txt")
key_list["Malware"].append(1)
# 存储出现的头信息的名称
exit_key_list = []
exit_key_list.append("Name")
exit_key_list.append("Malware")

start = time.clock()
command = 'objdump -x ' + filepath
header_info = os.popen(command).read().strip()
p = r'.*\n'
header_info=re.findall(p,header_info)
for i in range(0,len(header_info)):
    if re.match(r'Magic*',str(header_info[i]).strip('\n')):
        for j in range(i,i+30):
            if str(header_info[j]).strip('\n')=="":
                break
            s=str(header_info[j]).strip('\n')
            s=s.split("\t")
            key = [x.strip() for x in s if x.strip() != ''][0]
            value=[x.strip() for x in s if x.strip() != ''][1]
            exit_key_list.append(key)

            if key=="MajorLinkerVersion" or key=="MinorLinkerVersion" or key=="MajorOSystemVersion" or key=="MinorOSystemVersion" or key=="MajorImageVersion" or key=="MinorImageVersion" or key=="MajorSubsystemVersion" or key=="MinorSubsystemVersion":
                key_list[key].append(int(value))
            else:
                key_list[key].append(int(value, 16))
        break
end = time.clock()
print(end-start)