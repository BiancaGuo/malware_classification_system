push
add
push
add
push
sub
sub
es push
sub
es push
add
inc
add
push
sub
sub
es push
sub
es push
add
inc
add
push
sub
sub
es push
sub
es push
add
cmp
add
sub
sub
es push
sub
es push
add
push
add
push
sub
sub
es push
sub
es push
add
and
add
sub
sub
es push
sub
es push
add
pop
add
push
sub
xor
add
add
add
add
sub
es push
sub
es push
sbb
pop
add
push
and
push
add
push
and
sub
add
and
sub
add
and
sub
add
and
jb
add
jo
sub
addb
add
add
add
add
push
sub
es push
add
sub
add
add
inc
add
push
sub
add
xor
add
add
add
add
adc
add
push
sub
add
push
cmp
add
sbb
add
(bad)  
(bad)  
lcall
push
cmp
add
add
rorb
cmp
add
sbb
push
inc
pop
add
add
add
sar
(bad)  
incl
add
add
add
sar
(bad)  
lcall
add
add
add
cmp
add
add
push
cmp
(bad)  
(bad)  
call
sub
add
or
cmp
(bad)  
(bad)  
call
cmp
(bad)  
(bad)  
ljmp
sbb
add
sub
add
push
cmp
(bad)  
(bad)  
jmp
sbb
stos
(bad)  
(bad)  
ljmp
das    
add
push
jb
add
jo
pop
sub
add
and
jno
add
and
add
sub
add
push
sub
push
and
add
and
add
push
sub
add
sbb
data16
(bad)  
ljmp
xor
add
fldl
add
add
fldl
add
add
xor
add
sub
add
adc
add
add
into   
rolb
push
add
add
adc
add
les
add
add
add
sub
es push
sbb
push
cmp
sub
add
push
cmp
add
add
sbb
add
add
add
add
add
push
push
cmp
add
sldt
push
pop
or
das    
add
add
jnp
add
add
out
(bad)  
(bad)  
cmp
add
sbb
sbb
add
cmp
add
add
push
add
add
cmp
add
add
push
inc
or
add
(bad)  
jmp
(bad)  
incl
add
add
add
add
(bad)  
jmp
(bad)  
jmp
add
sbb
int
(bad)  
call
push
add
push
sbb
cmp
(bad)  
(bad)  
jmp
sbb
add
add
(bad)  
(bad)  
call
cmp
xor
add
push
add
sub
add
or
add
add
xor
add
add
add
add
sub
es push
sub
add
sub
add
cmp
add
add
sbb
cmp
add
add
jae
add
push
sub
add
sbb
pop
add
add
add
pop
add
add
sbb
push
add
add
sub
add
or
aam
(bad)  
lcall
or
inc
push
add
add
(bad)  
(bad)  
dec
(bad)  
(bad)  
call
(bad)  
(bad)  
pushl
(bad)  
call
add
add
sub
add
cmp
(bad)  
(bad)  
(bad)  
cmp
(bad)  
(bad)  
ljmp
add
add
sub
es push
sub
es push
add
adc
add
sub
sub
es push
jae
add
push
sub
add
or
add
and
add
add
sub
add
push
jle
add
add
add
sub
es push
add
or
add
sub
sub
es push
add
sub
add
sub
add
xor
add
push
add
sub
add
sub
add
sub
es push
add
add
or
add
sub
add
sub
es push
push
sub
sub
add
push
jb
add
jo
add
add
push
add
add
add
push
sub
add
sub
es push
add
sub
add
push
sub
add
xor
add
push
add
sub
add
add
xor
add
add
adc
add
push
jle
add
add
or
push
and
add
add
imul
add
or
add
pop
and
outsb
add
push
push
pop
adc
outsb
add
push
and
add
sub
sub
es push
add
daa    
add
push
sub
sub
es push
add
sub
add
add
xor
add
add
add
add
sub
es push
jae
add
or
dec
add
push
or
add
inc
add
push
push
add
adc
add
and
add
and
add
or
add
push
and
add
push
sub
add
sub
add
and
xor
add
push
add
sub
add
or
add
add
sub
es push
add
adc
add
sub
sub
es push
add
adc
add
sub
add
push
add
add
push
add
dec
add
push
sub
add
xor
add
push
add
sub
add
add
add
push
add
add
jo
push
sub
add
sub
add
and
add
sub
sub
add
push
jb
add
jo
add
sub
es push
add
sub
add
push
sub
add
xor
add
push
add
outsl
push
add
or
add
add
sub
es push
add
pop
add
or
sub
es push
add
sbb
add
sub
sub
es push
add
es push
add
sub
add
or
add
add
sub
es push
add
sub
add
sub
add
sub
es push
add
cmp
add
sub
sub
es push
add
sbb
add
sub
sub
es push
add
adc
add
sub
sub
es push
jb
add
jo
add
sub
es push
add
sub
sub
es push
add
sub
add
push
sub
add
outsb
sub
es push
jb
add
jo
outsl
add
push
and
add
and
sub
sub
es push
add
add
or
sub
es push
add
sub
sub
es push
sub
add
push
and
add
sub
es push
add
sub
add
push
sub
add
sub
es push
add
pusha  
add
push
sub
sub
es push
add
adc
add
sub
sub
es push
add
sub
add
push
sub
add
sub
es push
add
sub
sub
es push
add
xor
sbb
add
push
pop
sub
adc
add
add
add
add
adc
add
push
pop
or
enter
add
push
add
sub
cmp
sub
or
cmp
add
sub
push
sbb
push
cmp
lea
add
add
incb
or
push
add
or
bound
add
pop
or
je
add
add
add
jo
and
add
sbb
arpl
add
add
sub
add
pop
or
add
sub
add
push
sub
add
push
sub
add
push
cmp
add
add
sbb
cmp
add
add
add
rolb
add
jae
add
or
inc
add
push
cmp
(bad)  
jmp
push
cmp
add
add
and
add
add
add
add
sub
pop
add
add
or
push
inc
push
add
add
(bad)  
(bad)  
decl
(bad)  
(bad)  
pushl
(bad)  
(bad)  
decl
(bad)  
decl
(bad)  
(bad)  
incl
add
add
(bad)  
(bad)  
lcall
add
add
(bad)  
jmp
(bad)  
(bad)  
sti    
(bad)  
(bad)  
jmp
or
mov
jb
add
jo
sub
add
sbb
stos
(bad)  
(bad)  
incl
push
sub
add
push
cmp
add
sub
es push
add
jb
add
sub
sub
es push
add
outsl
and
add
sub
add
xor
add
push
add
sub
add
or
add
add
sub
es push
add
sub
add
sub
add
sub
es push
add
adc
add
sub
xor
push
add
add
add
sub
es push
and
inc
add
sub
add
and
add
add
dec
add
push
or
sub
add
sub
es push
add
adc
add
sub
sub
es push
add
add
sub
sub
es push
jb
add
jo
add
sub
es push
add
sbb
add
sub
sub
es push
add
and
add
sub
sub
es push
add
sub
add
or
add
add
sub
es push
add
add
or
add
sub
add
sub
es push
add
add
or
inc
sub
es push
add
add
add
or
add
sub
es push
add
adc
add
sub
sub
es push
add
xor
add
sub
sub
es push
add
adc
add
sub
sub
es push
pop
sub
adc
pop
add
add
add
add
push
sub
add
sub
add
cmp
sbb
and
add
add
push
add
inc
add
push
and
inc
add
push
and
add
push
cmp
add
add
or
inc
pop
add
add
add
add
add
imul
add
add
add
add
add
add
sbb
fcos   
(bad)  
incl
push
add
inc
add
push
and
inc
add
push
and
sub
push
and
add
push
sbb
scas
(bad)  
(bad)  
incl
sub
add
and
inc
add
push
imul
push
and
pop
add
push
or
pop
cmp
add
push
push
add
inc
add
push
and
add
push
cmp
(bad)  
jmp
sbb
push
sub
add
sub
es push
add
add
or
sbb
add
push
pop
sub
sbb
add
push
push
sub
sbb
add
push
push
sub
xor
add
push
add
sub
add
add
sub
es push
add
add
or
add
sub
add
sub
es push
add
sub
add
push
sub
add
cmp
add
push
add
add
outsl
add
or
add
sub
es push
push
sub
adc
add
sbb
add
add
add
sub
es push
and
add
sub
add
push
and
add
pop
add
push
or
sub
sub
es push
add
adc
add
sub
xor
push
add
add
add
sub
es push
and
pop
add
sub
add
push
and
add
add
pop
add
push
or
sub
add
sub
es push
add
pop
add
push
sub
sub
es push
add
sub
add
or
add
add
sub
es push
add
add
or
sub
es push
add
add
or
push
sub
es push
add
es push
add
add
or
xor
add
push
add
sub
add
push
sub
add
sub
es push
add
add
or
sub
es push
add
add
or
add
sub
add
add
push
add
add
jo
sbb
sbb
add
sub
add
and
sbb
add
push
pop
sub
cmp
add
push
add
add
push
add
push
sub
cmp
add
push
add
add
and
add
sub
xor
add
push
add
outsl
sub
add
sub
add
xor
add
push
add
sub
add
sub
add
xor
add
push
add
sub
add
push
sub
add
sub
es push
add
inc
add
push
sub
sub
es push
add
sub
add
add
sub
es push
add
sub
add
or
add
add
sub
es push
add
sub
add
sub
add
sub
es push
sub
es push
add
add
add
sub
out
mov
xchg
add
add
jae
gs insl
cs push
gs jae
jne
arpl
cs push
gs jae
jne
arpl
gs popa 
fs gs jb
and
arpl
insb
imul
jae
outsl
outsb
cmp
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
aaa    
popa   
xor
cmp
xor
xor
cmp
push
jns
je
insl
cs push
gs jae
jne
arpl
cs push
jne
je
insl
gs push
gs jae
jne
arpl
add
add
inc
push
inc
inc
push
mov
add
mov
add
into   
lret
add
add
xchg
add
add
jae
gs insl
cs push
gs jae
jne
arpl
cs push
gs jae
jne
arpl
gs popa 
fs gs jb
and
arpl
insb
imul
jae
outsl
outsb
cmp
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
aaa    
popa   
xor
cmp
xor
xor
cmp
push
jns
je
insl
cs push
gs jae
jne
arpl
cs push
jne
je
insl
gs push
gs jae
jne
arpl
add
add
inc
push
inc
inc
push
mov
add
jg
pop
add
lret
add
add
xchg
add
add
jae
gs insl
cs push
gs jae
jne
arpl
cs push
gs jae
jne
arpl
gs popa 
fs gs jb
and
arpl
insb
imul
jae
outsl
outsb
cmp
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
aaa    
popa   
xor
cmp
xor
xor
cmp
push
jns
je
insl
cs push
gs jae
jne
arpl
cs push
jne
je
insl
gs push
gs jae
jne
arpl
gs je
add
add
add
add
add
add
jns
je
insl
cs inc
jb
ja
outsb
addr16 cs inc
imul
jns
je
insl
cs inc
jb
ja
outsb
addr16 sub
push
gs jb
imul
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
xor
data16 aaa 
xor
fs xor
push
inc
inc
push
inc
inc
or
and
sub
inc
adc
in
inc
adc
in
inc
adc
in
inc
adc
in
inc
adc
sub
inc
pop
sub
inc
sbb
in
inc
sbb
sub
inc
jno
in
inc
jb
in
inc
jae
in
inc
je
in
inc
jne
in
inc
jbe
in
inc
ja
in
inc
jle
in
inc
jg
in
inc
cmp
jle
stc    
dec
jle
stc    
dec
jle
stc    
dec
jle
stc    
dec
jle
stc    
dec
jle
stc    
dec
jle
stc    
dec
jle
stc    
dec
jle
stc    
dec
jle
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
inc
add
add
add
add
add
mov
add
into   
add
add
add
cwtl   
add
add
add
bound
add
pop
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
push
inc
add
add
outsb
add
add
add
add
add
data16 add
push
add
add
add
add
add
data16 add
push
add
add
add
add
push
add
add
data16 add
push
add
add
add
add
add
add
data16 add
push
add
add
add
add
add
push
add
add
data16 add
push
add
add
add
add
add
push
add
add
data16 add
push
add
add
add
add
add
push
add
add
data16 add
push
add
add
add
jge
add
push
add
add
data16 add
push
add
add
add
add
add
add
data16 add
push
add
add
add
add
add
add
data16 add
push
add
add
add
add
add
add
data16 add
push
add
add
add
add
insb
add
push
add
add
data16 add
push
add
add
add
add
stos
add
adc
add
add
data16 add
push
add
add
add
call
add
add
data16 add
push
add
add
add
add
daa    
add
push
add
add
data16 add
push
add
add
add
add
add
add
data16 add
push
add
add
add
add
mov
add
add
data16 add
push
add
add
add
add
add
push
add
add
data16 add
push
add
add
add
pop
pop
add
push
add
add
data16 add
push
add
add
add
add
add
add
data16 add
push
add
add
add
add
add
add
data16 add
push
add
add
add
add
add
add
data16 add
push
add
add
add
add
add
add
data16 add
push
add
add
add
add
add
add
data16 add
push
add
add
add
add
add
data16 add
push
add
add
enter
adc
add
add
data16 add
push
add
add
add
add
add
data16 add
push
add
add
add
sbb
add
add
add
data16 add
push
add
add
add
push
add
add
add
data16 add
push
add
add
add
xchg
push
add
add
add
data16 add
push
add
add
add
push
add
sbb
add
add
add
(bad)  
(bad)  
incl
add
add
add
add
add
add
jns
je
insl
cs inc
jb
ja
outsb
addr16 sub
push
gs jb
imul
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
xor
data16 aaa 
xor
fs xor
add
adc
gs insl
cs inc
jb
ja
outsb
addr16 cs inc
imul
add
popa   
je
pop
add
add
add
add
add
lsl
add
jno
add
add
or
or
add
or
add
add
add
dec
or
add
add
(bad)  
and
add
add
inc
dec
inc
add
mov
or
popa   
add
jo
pop
jae
add
ret    
add
push
ret    
add
outsl
test
add
cmp
push
push
test
xor
add
sbb
divl
jmp
inc
in
sbb
or
jne
adc
adcl
push
lods
popa   
push
into   
test
dec
pop
in
(bad)  
pop
sbb
xor
jns
das    
test
fsts
(bad)  
ja
fidivl
(bad)  
ficom
int3   
repnz mov
imul
cmp
(bad)  
fstpt
xchg
dec
out
call
inc
jbe
mov
sbb
test
pop
sbb
push
mov
mov
sub
add
push
xor
out
and
(bad)  
and
test
cmpsl
imul
rcrl
jbe
aaa    
or
(bad)  
pop
mov
arpl
aad
pop
lea
adc
adc
mov
fs sub
pop
mov
out
ret
jne
jae
adc
out
sahf   
pop
push
and
mov
push
les
cld    
in
and
hlt    
push
inc
cmc    
mov
or
js
enter
xchg
loop
push
mov
jecxz
mov
and
into   
add
mov
xchg
pushf  
test
imul
xchg
jnp
mov
rcrb
mov
jle
add
inc
ret
jle
sbbl
cmpsl
xor
or
adc
(bad)  
cmc    
push
mov
fildll
and
je
dec
xchg
ss out
inc
aad
push
fstpl
add
in
sub
xor
push
xchg
pusha  
jle
das    
imul
leave  
(bad)  
ds out
or
xor
xor
xchg
adc
mov
lods
adc
addl
(bad)  
and
and
and
cwtl   
data16 das 
ja
cltd   
adc
mov
sahf   
fldcw
mov
in
mov
ret
jecxz
rclb
push
iret   
sbb
cmp
dec
clc    
sbb
push
push
lcall
add
(bad)  
mov
fnstenv
push
lock in
aam
lcall
ljmp
call
xlat
lcall
sbb
adc
mov
mov
out
mov
js
jnp
cmp
pop
repnz lock icebp 
add
dec
cmp
and
jbe
rcll
push
jns
lods
or
les
inc
scas
lret   
lret   
cmp
cmp
sbb
xchg
lods
cmp
xor
lds
aas    
ret
dec
mov
(bad)  
or
push
sysenter 
mov
clc    
push
es hlt 
fstps
clc    
lea
jmp
push
or
fnstcw
gs cld 
(bad)  
(bad)  
push
aas    
cmp
push
xor
imul
lock mov
sbb
or
fmull
adc
adc
inc
mov
xlat
(bad)  
cmp
out
(bad)  
out
bnd jnp
xor
pop
fwait
cltd   
mov
in
push
addl
in
cmp
nop
fcmovbe
push
sbb
lret
in
jo
jne
movsl
clc    
cmp
mov
mov
fisttpll
pusha  
lds
repz push
aaa    
cmpsl
js
and
xchg
movl
sub
mov
add
(bad)  
repz shll
mov
dec
sbb
rclb
popf   
jmp
(bad)  
and
sarl
push
adc
fstpl
ja
(bad)  
enter
pop
outsb
cwtl   
push
sbb
stos
stc    
roll
mov
or
sahf   
add
and
loop
adc
loop
lods
sbbl
rorl
mov
cmp
mov
jl
add
or
xchg
adc
and
es addr16 and
pmaxub
dec
cltd   
pop
push
lahf   
shrb
(bad)  
lcall
push
std    
sub
(bad)  
ds aaa 
stc    
add
icebp  
mov
xor
xor
test
mov
test
fdiv
adc
insb
movsl
mov
jmp
lret
(bad)  
loop
xchg
jo
mov
cli    
inc
push
pusha  
in
outsb
ret
add
mov
leave  
testl
out
pushf  
daa    
sub
jns
(bad)  
push
xchg
dec
ds push
cmp
fs pusha 
or
addl
sub
push
lret
inc
ficom
decb
inc
or
dec
xor
aad
stos
mov
aad
jnp
inc
cmpsl
or
iret   
aaa    
imul
decb
jg
(bad)  
mov
sub
xor
pop
cmp
shll
xchg
fistpl
xor
pop
xchg
or
xor
sbb
and
ret    
mov
mov
push
ja
fwait
push
es test
pop
in
aas    
cmpsb
push
xchg
jmp
push
adc
das    
mov
mov
add
lret   
adc
xchg
xchg
mov
xlat
inc
pop
pop
mov
(bad)
and
movsb
imul
not
das    
dec
push
jae
(bad)  
mov
pushf  
pop
pop
aad
adc
dec
jns
mov
in
mulb
mov
jl
in
imulb
mov
add
(bad)  
dec
(bad)  
push
in
movsl
sub
in
fadds
cli    
int
cmp
mov
test
dec
add
(bad)  
or
add
and
jle
adc
addr16
(bad)  
insb
xor
xor
ret
dec
or
testl
outsl
notl
jbe
pusha  
negb
mov
xchg
push
pop
xchg
movsb
push
frstor
adc
outsl
loope
enter
(bad)  
sbb
in
inc
mov
ja
add
lahf   
inc
data16 icebp 
cmp
or
mov
mov
mov
lods
xor
dec
lcall
push
pop
ret    
add
jno
outsl
push
popf   
sub
fnstenv
std    
test
fildll
rcrl
aam
repz dec
mov
xor
pop
inc
sbb
dec
js
aam
and
mulb
out
sbb
mov
fisubrl
pop
fnsave
and
lcall
jp
in
out
lock aad
sub
test
jmp
pop
jo
or
xchg
cmp
or
(bad)  
movsl
sub
cwtl   
adc
mov
js
iret   
js
dec
cmc    
push
(bad)  
xor
inc
push
imul
outsl
into   
inc
jne
cld    
jp
pop
or
mov
mov
aas    
gs jbe
pushf  
push
out
jp
nop
dec
sti    
mov
aas    
push
mov
dec
dec
adcl
xor
fldcw
dec
jae
in
addr16 inc
pop
jae
lods
mov
int3   
fidivrl
sbb
jne
rorb
mov
and
sti    
xchg
pop
(bad)  
inc
mov
cli    
jge
ljmp
movsl
cmpsl
dec
dec
fisubrl
test
mov
mov
test
add
call
je
inc
adc
arpl
mov
xchg
rorl
ljmp
dec
shr
lea
or
es aam
fidivr
decl
mov
or
imul
cmp
insl
xchg
fldenv
out
add
mov
icebp  
adc
mov
push
inc
comiss
rcrl
int
mov
imul
sub
xlat
mov
jns
dec
jns
inc
cwtl   
adc
fs icebp 
xchg
shr
cmp
movl
adc
cmp
push
cmp
dec
pop
stos
in
fs inc
fcoml
ss jmp
and
std    
jnp
fsubr
hlt    
fwait
imul
xor
push
leave  
jle
out
mov
sub
jecxz
and
in
pop
fs aas 
loope
pop
pop
aas    
inc
(bad)  
aaa    
ret    
jle
cmp
call
pop
push
movsb
mov
push
sbb
mov
mov
adc
test
pop
roll
adc
addr16 jmp
and
push
mov
cmp
sbb
push
cmp
movsb
and
xchg
insb
pop
xchg
repz pop
mov
xchg
dec
lcall
cwtl   
and
jne
es
movsl
sub
mov
(bad)  
(bad)  
leave  
es or
xor
adc
and
mov
in
fwait
loopne
mov
mov
out
loopne
xchg
std    
push
pop
clc    
(bad)  
sbb
repz fist
mull
or
mov
adc
out
add
xchg
mov
leave  
lods
lock and
mov
and
call
mov
inc
xlat
xchg
lods
sub
cltd   
jo
add
pop
mov
bound
add
shrb
push
sbb
mov
mov
jno
std    
push
int
adc
sub
sub
or
push
sahf   
add
mov
(bad)
loope,pt
loope
loopew
dec
xchg
and
sti    
int
popf   
inc
mov
testl
xchg
fldenv
mov
mov
cmp
adc
mov
repnz sahf 
cmc    
lcall
xor
mov
lret   
in
add
or
xor
cmpsb
fsubl
cmp
unpckhps
sarb
xlat
lret
push
push
lcall
aad
pushf  
mov
mov
cld    
add
mov
mov
sti    
jg
aaa    
pop
inc
fsubrs
mov
cmpsb
cmp
ficoml
addr16 adc
cli    
enter
ja
jl
into   
lods
lcall
push
jle
stos
xchg
cmp
inc
(bad)  
add
inc
fs dec
mov
pop
add
adc
cmp
add
push
xor
clc    
(bad)  
adc
jecxz
(bad)  
xor
repnz cwtl 
test
sbb
inc
leave  
fs cltd 
mov
xor
repz pop
mov
mov
int3   
pop
cmp
lcall
dec
in
in
push
loopne
pop
idivb
fs adc
mov
pop
mov
fsubrl
xor
cltd   
fidivl
and
sub
mov
mov
pop
dec
inc
mov
test
mov
test
xchg
mov
leave  
lods
pop
pushf  
in
mov
stos
or
loope
insb
cmc    
add
inc
mov
sbb
imul
and
xchg
(bad)  
sub
popa   
sti    
jle
stc    
mov
cmpsl
fsub
(bad)  
repnz into 
adc
push
(bad)  
cmc    
ret    
add
insl
je
push
mov
sub
adc
pop
repz ffree
call
arpl
push
(bad)  
loope
xchg
dec
adc
adcl
pusha  
push
push
ljmp
add
dec
movb
and
push
push
in
daa    
jno
(bad)  
sbb
nop
push
jae
insl
std    
xor
pop
fistp
sub
test
push
stos
or
(bad)  
adc
sub
xchg
aas    
mov
in
inc
movsb
jp
xor
(bad)  
push
popf   
hlt    
or
(bad)  
(bad)  
dec
mov
jae
sbb
mov
mov
cld    
into   
stc    
jg
adc
and
adc
imulb
mov
divl
or
psllw
inc
movsb
sbb
mov
iret   
jo
lahf   
fcompl
daa    
sbb
and
xorl
or
imul
bound
call
push
push
and
jno
mov
cmp
out
mov
xchg
inc
pop
loopne
pop
test
xchg
repz test
add
dec
pop
sbb
pop
jl
negb
xlat
push
or
insb
loop
lock xchg
jno
lods
ss scas
mov
nop
mov
(bad)  
inc
call
adc
(bad)  
cmp
push
xchg
mov
fistp
push
nop
cmp
fsubrl
and
mov
inc
ljmp
std    
mov
cmp
shrl
and
mov
add
in
movsb
push
ret    
testb
or
mov
jecxz
data16 xchg
and
and
(bad)  
or
repnz scas
(bad)  {%k7}{z}
add
or
pop
sub
dec
dec
movsb
lret
xchg
test
sbb
mov
cmp
and
es push
dec
mov
xchg
lea
inc
in
push
xchg
push
pop
sahf   
dec
sub
lods
pop
(bad)  
sbb
sub
cmp
mov
(bad)  {%k7}{z}
in
popa   
xor
mov
add
sti    
push
lret
test
std    
sub
cmp
lds
push
rcrl
pop
add
cltd   
fwait
(bad)  
ljmp
jbe
call
or
or
dec
jnp
or
mov
(bad)  
aas    
fwait
aad
mov
mov
outsb
mov
scas
add
jne
mov
and
jle
into   
sbb
add
ret
jns
cli    
xchg
sbb
(bad)  
xor
clc    
and
add
xor
and
lods
(bad)  
(bad)  
pop
gs xchg
mov
dec
fcoms
dec
popa   
dec
pop
fidiv
push
xchg
jp
sbb
adc
push
push
outsb
sub
push
mov
or
fstps
push
xchg
dec
dec
cmp
(bad)  
divl
iret   
pop
out
movsb
inc
cltd   
gs mov
pop
sti    
(bad)  
negb
cmp
lret
cmp
sub
xchg
test
(bad)  
and
pop
cmp
sub
sbb
scas
sbb
dec
mov
mov
cld    
push
xor
mov
mov
popf   
(bad)  
xlat
in
adc
je
xor
mov
and
fs into 
cmp
or
xchg
jbe
jl
sub
xor
inc
stos
cmp
repnz xchg
lcall
les
xor
push
std    
cmp
fisttpl
iret   
punpckhbw
mov
adc
lcall
mov
ret
rolb
outsb
mov
pushf  
shrb
outsb
cltd   
clc    
add
(bad)  
mov
dec
pop
jb
pop
rcl
cmp
jbe
push
adc
mov
test
add
iret   
inc
push
sub
out
push
pop
cltd   
jp
arpl
addr16 mov
out
aaa    
pushf  
inc
add
call
in
mov
stos
lods
outsb
mov
arpl
pop
pop
int3   
jmp
inc
fistpl
inc
inc
(bad)  
pusha  
dec
sub
inc
(bad)  
push
hlt    
pop
dec
popf   
aad
pusha  
push
sbb
sbb
sbb
adc
outsl
(bad)  
rolb
adc
arpl
fldl
test
int3   
xchg
jno
xor
test
jb
push
mov
inc
xor
fs push
inc
repnz aas 
mul
sar
mov
push
fmulp
sahf   
icebp  
(bad)  
lret   
rorl
and
jns
(bad)  
mov
ss pop
jae
shrl
dec
cmp
icebp  
cs
int3   
cmp
dec
iret   
pusha  
sbb
jge
jnp
ret    
inc
or
and
mov
dec
adc
add
jp
fist
ret    
adc
lods
xchg
(bad)
xor
dec
adc
dec
jle
dec
add
mov
jbe
mov
test
cmpsb
inc
(bad)  
ficomp
mov
roll
mov
icebp  
mov
mov
add
les
cli    
fcomps
flds
pop
js
les
xchg
(bad)  
jno
(bad)
(bad)  
xchg
sarb
cmpsl
rcrl
sub
aad
rcl
add
jl
mov
test
aaa    
cld    
(bad)  
xor
and
mov
subl
dec
add
cmp
(bad)  
clc    
in
or
(bad)  
push
push
les
inc
cmpsb
xchg
dec
dec
dec
fwait
imul
hlt    
adc
arpl
repz xchg
and
test
and
jbe
mov
mov
jbe
sbb
push
jno
pushl
and
repnz xchg
lds
pop
outsl
fucom
pushf  
fdivl
xchg
sub
std    
pusha  
in
imul
fsubrl
rep outsl
pop
inc
test
lods
fdivrs
es push
cmpl
push
lods
test
push
lahf   
push
je
ljmp
(bad)  
in
xchg
sbbb
fldl
dec
stc    
mov
int3   
xorl
cmp
int
sub
icebp  
pop
lret
xor
push
test
add
lods
hlt    
and
sahf   
sbb
pop
cld    
test
(bad)  
mov
cwtl   
call
ret
in
stos
cmp
es lret 
add
cmpsb
cltd   
je
and
fcomp
lock pop
movsl
sub
mull
stos
(bad)  
ds xchg
leave  
fwait
jg
mov
gs dec
psubq
imul
shrl
pop
test
das    
mov
int
call
inc
jo
and
lock sub
(bad)  
xor
pop
popf   
ds pop
or
cmpsb
sahf   
fsubrs
gs jp
fwait
sub
out
sbb
cmpsl
icebp  
xchg
mov
adcl
jge
andl
js
jmp
dec
loop
or
jp
push
mov
jne
sub
mov
dec
aad
mov
nop
cs fwait
mov
and
lret   
sbb
fistl
inc
mov
fsubr
cwtl   
out
sub
xchg
xchg
sub
test
xor
inc
jo
add
ret
mov
sbb
ss pushf 
sub
pop
out
add
in
push
aam
sub
add
jle
pushl
adcb
rorb
push
ret    
insl
jae
push
xorl
insl
cmp
negb
sti    
and
imul
add
into   
jp
cmpsb
jae
movsl
cmp
std    
fwait
cld    
mov
clc    
jge
inc
mov
enter
sbb
dec
push
jno
loopne
ret    
test
cmp
sub
xchg
sub
sbb
mov
mov
insb
sbb
push
or
jecxz
sti    
or
int3   
pop
adc
sub
xchg
dec
pop
cmp
xchg
sub
in
or
xlat
xchg
jecxz
mov
test
test
sti    
dec
aad
adc
pop
ss into 
push
push
aam
and
adc
repnz ljmp
push
fistpl
fbstp
inc
add
test
gs popf 
pusha  
mov
(bad)  
in
call
dec
push
stos
imul
repnz shll
jl
mov
fisubl
arpl
xchg
(bad)  
sbb
cli    
cwtl   
fldl
push
addr16 mov
arpl
scas
add
arpl
hlt    
jecxz
cmpsl
pusha  
mov
notl
pop
push
iret   
mov
xor
int
repnz add
add
inc
mov
fnstsw
cwtl   
mov
adc
cmp
mov
mov
int3   
sbb
movswl
bound
(bad)  
dec
xchg
sbb
movsb
bound
mov
and
std    
enter
inc
pop
xchg
insl
insl
sbb
negl
ret    
push
mov
sub
stos
js
mov
mov
mov
cwtl   
mov
pop
cltd   
nop
xchg
jg
xor
xchg
sbb
(bad)  
mov
(bad)  
stos
and
lahf   
push
cmp
fwait
aas    
push
daa    
stos
fisttpll
push
das    
add
and
add
insb
mov
lods
aaa    
push
stc    
out
outsb
or
add
jl
mov
fcomip
out
mov
out
mov
jg
adc
sbb
cs insb
mov
push
out
jl
add
adc
mov
or
stos
jo
or
and
mov
inc
in
(bad)  
roll
xchg
lds
xor
pop
jno
sbb
les
sbb
cli    
dec
arpl
std    
mov
je
mov
pop
pop
xchg
jbe
clc    
ss ret 
shl
dec
push
idiv
adc
test
popf   
outsl
int3   
shlb
mov
outsl
jne
jne
test
outsb
mov
repnz sub
mov
cmp
jge
adc
sub
insl
jmp
cmp
lea
movb
xor
(bad)  {%k7}{z}
in
cmp
enter
inc
data16 adc
call
mov
cmp
in
adcb
and
cmp
getsec 
sub
push
sbb
scas
or
mov
in
xchg
gs dec
subb
int
(bad)  
dec
lds
push
dec
aas    
insb
xor
nop
in
les
cmc    
pop
mov
int3   
test
jnp
xchg
or
xor
cmc    
push
and
sarb
jb
clc    
(bad)  
cmp
or
sbb
inc
test
div
movsl
shlb
pusha  
sbb
bound
int3   
push
(bad)  
mov
jo
xchg
jmp
decl
(bad)  
popf   
dec
aas    
cli    
loopne
out
das    
push
mov
cmp
sbb
movsl
ljmp
mov
addl
push
mov
pop
and
pop
sub
scas
mov
dec
(bad)  
(bad)  
repz push
mov
jmp
scas
lret   
hlt    
aaa    
add
cwtl   
(bad)  
mov
jb
jle
dec
jns
fwait
push
outsb
dec
inc
xchg
mov
xor
adc
xchg
add
and
shrb
scas
dec
or
in
xor
lock pop
inc
mov
jle
notl
pop
jo
sbb
xlat
(bad)  
pop
mov
push
repz popf 
mul
shl
into   
iret   
pop
aas    
dec
mov
pop
roll
(bad)  
pop
mov
push
push
shrb
pop
mov
outsb
xchg
adcl
lahf   
pusha  
xor
in
sub
jne
loopne
in
mov
in
out
fcoms
add
mov
ljmp
xchg
outsb
push
cmp
(bad)  
nop
cmc    
dec
mov
lret
xor
mov
imul
add
repz sahf 
aad
ja
popa   
adc
add
pushf  
out
(bad)  
xor
or
mov
into   
rcll
int
jmp
adc
inc
lret
add
fwait
lret
push
ret    
out
sbb
inc
or
jg
jb
fldcw
icebp  
das    
mov
jo
push
and
fneni(8087 only) 
mov
inc
dec
repnz scas
scas
lret   
adc
pop
push
mov
cmpsb
ss pop
sub
test
jbe
jnp
stos
lret   
cmp
sbbl
aam
decb
or
lods
dec
loop
aam
les
aam
shll
sbb
das    
int
push
push
(bad)  
lret   
fprem  
push
scas
push
pop
ficom
xor
popa   
sub
push
data16 sti 
and
mov
xchg
fwait
in
loopne,pn
aas    
push
mov
mov
in
cmp
mov
ds and
pop
push
inc
imul
dec
leave  
aam
lea
jge
movsl
repz mov
rorb
lock
loope
call
xchg
pop
mov
or
push
and
insb
imul
mov
inc
push
ja
ret
or
rcr
or
push
outsb
int
and
hlt    
insl
sbb
fild
loope
(bad)
push
pop
cli    
test
icebp  
clc    
ds enter
pop
in
scas
push
mov
int
mov
xchg
(bad)  
jl
stos
push
mov
xchg
adc
cmpsl
push
cmpsl
inc
jmp
mov
pop
leave  
or
push
lret   
imul
sti    
jg
sti    
xchg
xchg
clc    
outsl
lds
loop
orl
sbb
pop
lea
push
mov
movsb
popa   
mov
mov
dec
cmp
cld    
xor
imulb
add
out
jbe
xor
out
(bad)  
push
or
fdiv
mov
out
inc
cmp
mov
inc
daa    
mov
sub
movsl
mov
movsl
divb
add
jne
xchg
in
lds
adc
jne
inc
mov
adc
pop
jne
in
and
xchg
push
xlat
mov
xchg
dec
icebp  
or
fild
mov
jne
test
outsl
mov
out
sub
je
sub
out
(bad)  
sbb
sbb
cmp
(bad)  
icebp  
sbb
jmp
and
lret
lret   
rolb
lretw  
mov
jge
ret
xchg
adc
xor
mov
sbb
icebp  
out
call
loope
call
and
mov
dec
mov
js
cwtl   
sahf   
mov
es jo
dec
test
out
push
ret    
push
xor
aas    
fsubs
mov
xchg
leave  
mul
jb
fs repz jae
pop
or
sti    
push
inc
sarl
mov
pushf  
sbbl
inc
dec
sub
loope
add
les
lds
jnp
xlat
add
sbb
das    
lock sar
cmp
or
in
jg
iret   
xchg
cltd   
imul
mov
xchg
pop
cmp
iret   
ljmp
ficom
xchg
std    
iret   
adc
push
cwtl   
(bad)  
dec
dec
roll
imul
mov
jae
and
mov
mov
lock sub
inc
xlat
pop
inc
add
mov
adc
insb
mov
jns
push
pop
mov
sbb
mov
pop
jno
stc    
fsubr
call
push
out
inc
inc
dec
rorb
bound
or
je
out
add
popf   
fwait
orl
mov
jle
stos
pop
ja
pop
dec
inc
fsubr
loop
sub
mov
mov
cmp
push
jne
imul
insl
add
inc
(bad)  
fldl2e 
data16 sub
xchg
and
pusha  
popl
jle
jge
imul
cmp
aas    
test
mov
or
je
push
or
ja
dec
daa    
sbb
pop
imul
dec
(bad)  
xchg
dec
xchg
arpl
lcall
push
test
insb
push
ljmp
ret    
std    
aaa    
add
aam
(bad)  
xchg
idivl
cmc    
cmp
inc
fiaddl
adc
push
cmc    
inc
movsl
adc
movsl
and
sbb
push
test
out
or
stc    
xor
call
out
je
dec
add
scas
xchg
sbb
mov
dec
pop
out
dec
dec
std    
das    
sub
(bad)  
je
(bad)  {%k7}{z}
enter
push
push
fs insb
xchg
aam
imul
mov
mov
jns
or
push
inc
add
xlat
sub
jl
sbb
add
push
pop
mov
gs cltd 
enter
cmp
data16 in
xor
adc
push
or
fisub
int
jns
inc
xchg
ficomp
add
divl
push
test
inc
xor
inc
sub
inc
sub
jno
adc
xor
mov
xlat
jae
ret
rorb
aam
es ljmp
add
xchg
nop
psubsb
mov
ds cs es in
push
(bad)  
xchg
(bad)
sub
lds
movsb
push
xor
fadds
push
loop
fcomi
push
loop
mov
int3   
in
scas
ja
jg
xchg
jmp
data16 scas
loope
fcoms
sar
lds
or
(bad)  
cmpsb
rorl
lgdtl
ds out
mov
lock fcmovb
dec
shll
sbb
jns
fs lcall
mov
mov
pop
adc
pop
push
sbb
jmp
mov
loop
dec
sti    
popa   
nop
sbb
lds
iret   
fisttpll
adcb
jle
mov
(bad)  
push
or
pop
dec
test
inc
mov
notl
xchg
sub
xchg
lods
in
loopne
gs cmp
aam
cmc    
xor
fldenv
inc
push
andl
les
and
cmp
aas    
(bad)  
(bad)  
and
push
fildl
pop
jno
lcall
movsb
pop
jo
push
and
jns
js
dec
js
sahf   
and
push
fmull
mov
ret    
std    
lcall
dec
lods
popa   
cs mov
sub
aad
mov
loop
lock adc
fs push
or
push
dec
arpl
inc
(bad)  
test
push
in
mov
mov
lcall
xchg
dec
test
inc
pop
sar
jge
stos
xlat
push
lods
das    
cmp
fdivs
mov
mov
mov
call
iret   
mov
push
adc
lock sbb
lahf   
xlat
dec
(bad)  
arpl
and
xchg
lcall
jnp
adc
insb
cmpsb
inc
movsb
rorb
mov
jae
mov
mov
cmpsb
cli    
mov
aam
dec
sbb
mov
sbb
out
sub
fs
cmp
aaa    
add
jp
out
hlt    
call
dec
pusha  
xchg
cs
popa   
es data16 std 
stos
add
mov
pop
cmc    
inc
ficoml
out
addr16
ficoml
push
movsl
enter
cltd   
mov
lods
dec
fs out
lret   
cmpsb
imul
lods
and
daa    
mov
rorb
inc
xchg
cmpl
cmp
xchg
jno
mov
or
cmpl
cmp
push
stc    
pop
and
and
dec
jge
push
js
mov
fdivr
aaa    
xchg
xchg
dec
lods
fstpt
out
inc
pop
sbb
add
or
repnz cld 
inc
nop
mov
dec
mov
sbb
jbe
(bad)  
js
jge
nop
or
stc    
inc
daa    
mov
inc
insl
xlat
pop
fstl
jmp
mov
add
cs scas
(bad)  
pop
(bad)  
divb
add
stc    
fstl
xchg
jnp
into   
dec
cs lahf 
pop
xchg
(bad)  
fdivrs
xchg
pusha  
stos
pop
fwait
push
out
adc
mov
repnz
jnp
sahf   
mov
enter
fsubl
xchg
sbb
cld    
test
scas
addr16 mov
mov
std    
adc
cmp
test
pusha  
xor
sahf   
adc
stc    
rcrl
add
sbb
sub
xor
xchg
cmp
inc
xchg
or
jb
pop
ret
das    
ss test
jmp
mov
mov
mov
rorl
and
shl
ret    
dec
out
pop
stos
testl
test
jb
outsl
inc
test
mov
sti    
cmp
test
jnp
out
mov
mov
out
jnp
and
jns
dec
pop
faddl
rcrl
push
jae
pop
push
rolb
into   
je
add
add
das    
test
xchg
inc
bound
cmpsl
adc
adc
lahf   
mov
dec
sub
popf   
je
xchg
daa    
loope
mov
scas
add
jl
pop
sub
xchg
out
jno
jbe
sub
inc
mov
enter
repz mov
mov
das    
mov
fs push
(bad)  
icebp  
(bad)  
in
xor
push
xor
xchg
mov
(bad)  
jb
gs dec
mov
mov
ret    
jbe
cmp
cvtps2pi
and
xchg
push
ret
mov
stos
ss xchg
adc
cmpsl
adc
testl
loopne
mov
jnp
imul
jg
movsb
jnp
xchg
fildl
call
and
mov
xchg
shll
mov
(bad)  
insb
ss jmp
idivl
xchg
outsb
inc
mov
dec
inc
imul
out
cli    
sbb
andl
(bad)  
ss xor
xlat
or
in
cmpsl
idivl
jb
or
stos
enter
(bad)  
sbb
loopne
mov
sbb
mov
pop
inc
mov
mov
stos
mov
ficompl
test
cmpsl
adc
ljmp
xor
push
cltd   
and
mov
neg
mov
jno
jmp
test
jge
in
cwtl   
data16 std 
push
stc    
push
loope
dec
mov
icebp  
mov
rorl
dec
outsl
in
in
and
scas
mov
fiadd
ret
shrb
push
fiaddl
dec
mov
stos
in
(bad)  
or
mov
movsl
pop
(bad)  
cld    
xor
jmp
loopne
cli    
push
enter
sub
dec
dec
adc
lret
xchg
(bad)  
ja
push
pop
(bad)  
cmp
push
xchg
(bad)  
cmc    
stos
ror
mov
sub
and
ja
pop
xchg
cmp
add
fisubrl
and
adc
push
xchg
push
loopne
inc
inc
(bad)  
hlt    
dec
mov
ss cmp
push
sbb
rcl
mov
or
std    
xlat
inc
pop
(bad)  
fstpt
div
outsb
mov
sub
mov
cmp
cmpsb
insb
xor
xchg
adc
jle
adc
inc
sub
mov
jmp
in
push
movsb
lods
idivl
mov
bnd jb
and
mov
divl
mul
mov
mov
imul
push
imul
out
sahf   
mov
mov
call
lods
sub
jb
or
stos
ret    
add
ja
int
aaa    
test
into   
mov
popf   
pop
adc
lcall
fcmovne
pop
xchg
adc
mov
leave  
sbb
push
mov
cli    
mov
pop
or
push
inc
inc
repnz inc
aam
add
das    
sar
into   
inc
mov
pop
mov
and
cmovns
add
lods
int3   
xchg
inc
dec
int3   
adc
ss lret 
mov
lods
aam
insl
jmp
andl
andl
push
out
sti    
pop
mov
mov
repz sbb
lcall
das    
pop
in
je
daa    
mov
out
or
fwait
cmp
add
arpl
sbb
mov
cltd   
fcompl
dec
insl
gs repnz pop
xchg
inc
cmp
inc
xor
push
jecxz
addr16 icebp 
jmp
and
loop
xorb
inc
pop
popf   
sbb
or
xchg
pop
add
jb
and
xor
jge
sub
sar
ja
mov
and
pop
fdecstp 
clc    
cltd   
ret
jo
or
xchg
bound
lods
lods
sub
pushf  
jl
je
mov
mov
cmp
pop
mov
scas
inc
aas    
xor
rcrb
lods
adc
aam
fwait
in
ss nop
jle
popf   
fs int3 
pusha  
insl
dec
mov
ret
jle
lret
xchg
dec
mov
clc    
xor
fist
stos
mov
adc
out
adc
pop
lret   
out
mov
dec
jle
ljmp
cmp
into   
int3   
mov
mov
and
fnop   
aaa    
or
out
xor
inc
xchg
out
fs pop
nop
jno
lahf   
movsb
imul
inc
adc
(bad)  
push
stos
or
jbe
xlat
pop
fst
pop
ja
push
xor
imul
mov
pop
fist
sti    
icebp  
out
lret   
pop
inc
(bad)  {%k7}{z}
mov
dec
pop
enter
arpl
std    
and
mov
scas
(bad)  
std    
push
xchg
and
iret   
adc
push
adc
lahf   
adc
xchg
add
xor
cmp
clc    
dec
jnp
xchg
imul
push
dec
fwait
cmpsl
adc
into   
inc
imul
imul
mov
xor
adc
adcb
dec
cld    
jbe
mov
jg
sub
testb
test
sub
out
ret    
xor
inc
pop
in
sbb
js
or
or
cmp
sub
dec
add
sub
sbb
fucomip
xchg
dec
mov
lea
mov
jp
jo
stc    
daa    
adc
mov
mov
xor
loopne
jmp
jne
imul
(bad)  
xlat
inc
(bad)  
xor
adc
arpl
add
xor
or
jns
dec
fistl
fwait
nop
lods
pushf  
nop
mov
mov
cmpsb
xor
jp
sub
push
push
cmc    
pop
sbb
movsl
mov
bound
jnp
jmp
(bad)  
icebp  
movl
and
cs clc 
addl
mov
add
sub
dec
ficom
ror
jp
(bad)
or
add
jmp
jmp
flds
add
push
sub
pop
dec
mov
jns
arpl
(bad)  
repz add
xor
adc
cmpsl
adc
lret   
pop
scas
jns
stc    
int3   
mov
lods
nop
pop
sub
mov
adc
stos
jne
mov
and
sub
jbe
fwait
pop
xlat
xchg
cmc    
lods
sub
icebp  
jecxz
pop
pop
jo
mov
loope
je
scas
in
add
or
xchg
fdivs
(bad)  
repnz dec
mov
repnz push
cmp
lret
cmp
pop
enter
clc    
or
dec
fs fsubr
inc
(bad)  
jne
push
sahf   
mov
cld    
mov
dec
push
cltd   
sub
jp
ss push
sbb
ds
fsubs
mov
enter
jmp
cmpl
dec
cmp
jp
jbe
(bad)  
mov
add
push
jne
test
jne
and
mov
dec
imulb
rcrl
fdivs
sub
mov
mov
adc
(bad)  
(bad)  
sysret 
(bad)  
jns
pop
cmp
or
lret
shrb
push
cmpl
aam
cmpsb
and
push
xchg
and
dec
aas    
mov
cmp
sbb
aam
outsl
imul
or
jmp
jge
add
fmull
aas    
mov
jns
int3   
mov
sub
mov
mov
insl
movsb
popf   
aaa    
or
in
dec
rcrl
cmpsb
jp
pop
mov
xchg
ljmp
mov
cwtl   
mov
xlat
fwait
pop
xchg
cmp
out
jne
clc    
enter
das    
push
dec
lock xor
push
dec
outsb
shrl
icebp  
iret   
or
lock cld 
daa    
cld    
ljmp
mov
jge
push
dec
arpl
cmp
sub
xchg
pusha  
xchg
loopne
dec
or
push
nop
scas
test
lahf   
clc    
adc
xlat
inc
pop
bound
cmc    
dec
fcompl
arpl
pop
inc
insb
xor
arpl
sbb
xor
(bad)  
sbb
inc
mov
hlt    
bound
jle
test
incb
adc
movsl
call
rcrl
mov
fistpll
mov
gs push
fcoml
add
push
cmp
and
(bad)  
sti    
dec
addl
cli    
rcll
mov
lds
push
adc
xor
inc
lods
fs mov
stos
stos
ret
xor
aam
(bad)  
ja
hlt    
adc
sbb
jns
(bad)  
jno
xchg
jae
jnp
adc
or
inc
pop
stos
gs das 
aad
ror
ret    
cld    
ljmp
std    
sbb
iret   
sub
fist
popf   
sti    
es mov
andl
jnp
movsl
outsl
inc
push
test
jb
xor
cmc    
inc
rolb
(bad)
push
std    
lret
shrb
setbe
add
dec
dec
adc
dec
xor
fcoml
xor
in
and
out
xor
cwtl   
ret
cld    
pop
pusha  
mov
or
mov
inc
sahf   
lock in
aaa    
adc
sbb
mov
shr
cmpsl
dec
xor
fucomp
int
test
push
jne
jae
pushl
xor
cmp
jl
andb
dec
or
(bad)  
mov
adc
xor
sub
ret    
iret   
imul
into   
xchg
stos
movl
cmp
and
lret   
lahf   
je
mov
mov
jmp
xchg
(bad)  
(bad)  
push
sahf   
xlat
out
inc
and
jo
outsb
mov
or
scas
std    
test
in
hlt    
mov
cmpsb
add
call
pop
jne
pop
xchg
test
mov
pop
xor
mov
out
mov
inc
fsubl
fwait
jo
test
sbb
push
mov
pop
fcoms
push
jne
lock
(bad)  
mov
lret   
das    
jns
mov
sub
mov
lcall
add
and
adc
add
icebp  
cld    
arpl
clc    
pop
lods
iret   
repz sbb
xor
cmpsl
pop
push
mov
xchg
arpl
sub
pop
inc
cmp
push
repnz iret 
fwait
cld    
xor
pop
and
adc
jp
fnstcw
clc    
jne
(bad)  
lret   
add
sub
aam
push
pop
mov
pop
test
inc
cmpsl
in
mov
xchg
push
inc
enter
dec
lock mov
stos
outsb
push
xchg
mov
arpl
jg
inc
cmp
pop
popa   
and
sub
(bad)  
xor
ret    
and
lds
mov
sub
adc
mov
in
leave  
call
jns
inc
add
out
xchg
jmp
in
pushf  
sub
loopne
cmp
jp
mov
xor
test
and
loopne
mov
in
icebp  
mov
add
jbe
loopne
outsb
fptan  
or
sub
mov
mov
push
out
(bad)  
subl
push
adc
xor
(bad)
outsl
xchg
push
or
dec
addr16 mov
xchg
pop
inc
aad
xchg
inc
dec
mov
bound
aam
dec
mov
mov
addl
dec
xchg
shll
sbb
adc
cmp
jge
jl
mov
fs mov
push
(bad)  
(bad)  
loop
sub
leave  
or
rcrl
mov
mov
or
ret    
movsb
jmp
push
es pushf 
movsb
aas    
dec
mov
pop
mov
xchg
or
pop
jo
add
sub
daa    
js
mov
cmc    
dec
popa   
xlat
psubw
pushf  
in
mov
pop
dec
divb
les
pop
add
push
sbb
mov
push
jns
mov
fwait
les
mov
(bad)  
lret
jne
or
mov
cltd   
int3   
xor
push
sarl
jle
rcrl
xchg
movsl
fistpl
push
icebp  
das    
outsl
dec
test
sub
sub
shlb
mov
call
imul
dec
add
aam
mov
inc
sub
xchg
push
dec
sub
sub
cld    
std    
test
pop
dec
mov
inc
mov
mov
pusha  
jmp
mov
xchg
pop
xor
sub
pop
insl
pop
add
test
adc
push
pop
xchg
and
jmp
scas
push
bound
ljmp
sahf   
aam
orl
loopne
in
sbb
cmp
jbe
xchg
mov
stos
repz adc
pop
push
push
pop
mov
cmp
cltd   
jbe
inc
cmp
flds
cmp
(bad)  
xor
or
jbe
out
nop
fsubr
in
fidivrl
popf   
push
cmpsb
pop
dec
nop
mov
sarb
jne
stos
test
ljmp
shlb
adc
dec
(bad)  
cltd   
inc
xlat
inc
js
adc
sub
fsub
pop
test
pop
mov
push
dec
sub
roll
(bad)  
icebp  
fsubs
mov
ret
fbstp
cli    
rorb
insb
cmp
add
shrb
pop
pop
out
fmul
xchg
cmp
sbb
rcrl
jle
stos
push
bound
sbb
cmp
jmp
and
mov
sbb
(bad)  
push
es pusha 
pop
enter
iret   
lea
lock out
popf   
cli    
and
movsb
lret   
(bad)  
mov
xchg
repnz ds push
adc
inc
rcl
jp
lret   
xor
and
dec
clc    
sahf   
inc
bound
iret   
aam
adc
movsl
mov
mov
gs add
adc
ret
clc    
iret   
stos
imul
jp
divb
mov
loop
mov
loopne
push
(bad)  
mov
or
hlt    
test
push
add
push
ret
aam
dec
xchg
xchg
test
(bad)  
xchg
popf   
xchg
pusha  
add
lahf   
sti    
add
adc
pop
inc
xchg
pop
idiv
push
push
or
xchg
sub
stos
fdivp
push
cld    
aaa    
cmp
imul
arpl
aad
or
repnz add
pushl
or
lahf   
pop
xor
ljmp
stos
sbb
sbb
hlt    
lea
dec
pop
sub
or
gs into 
sub
xlat
adc
mov
mov
sub
adc
jmp
cmp
aad
outsl
scas
insb
and
pushf  
popf   
dec
out
jno
pop
out
push
cmp
push
xchg
inc
push
sub
dec
mov
(bad)  
mov
imul
jbe
popa   
clc    
daa    
jno
into   
mov
je
cmp
cwtl   
inc
popl
test
test
push
mov
arpl
dec
mov
mov
out
movl
out
notb
test
fucomip
out
lret
xor
outsl
dec
sbb
mov
(bad)  
in
fwait
cwtl   
pop
pop
mov
sbbb
add
dec
sub
sbb
jge
pop
mov
hlt    
loop
out
add
and
loopne
xchg
push
mov
jg
ss gs push
lock xchg
sub
(bad)  
and
subb
scas
scas
inc
cmpb
(bad)  
insl
outsl
mov
test
fdivrl
xor
inc
out
mov
pushf  
fsubl
addr16 mov
sbb
xor
mov
loop
idivl
jmp
xor
mov
push
xchg
xor
pop
(bad)  
fcomip
test
mov
mov
push
or
pop
pop
cmpsb
popf   
inc
scas
fdiv
cmp
setl
adc
dec
or
xchg
cmpsb
testb
xchg
cmc    
mov
into   
inc
mov
inc
add
jae
(bad)  
fist
mov
sub
test
ret    
mov
push
mov
mov
orb
push
shlb
lret
stos
xchg
push
ja
ss fs fwait
inc
sarl
(bad)  
xchg
and
pop
pop
jbe
xchg
scas
lea
in
mov
fisubrl
xchg
adc
pop
xor
(bad)  
push
loope
rcr
cmp
stos
xchg
inc
cmc    
cld    
lcall
ja
in
lds
in
lock mov
push
adc
adc
push
clc    
cld    
mov
pop
aam
adc
pop
pop
jb
(bad)  
aad
dec
ret    
fsub
jb
jge
dec
lcall
jne
or
daa    
or
pushf  
scas
mov
iret   
push
mov
push
popa   
and
jg
jge
mov
or
inc
mov
imul
shlb
out
add
mov
mov
(bad)  
stos
and
cli    
or
and
push
xchg
mov
pop
and
push
rcrl
push
pop
xor
jp
das    
xor
add
incw
fbld
mov
cmp
jo
(bad)  
push
or
jp
dec
xchg
sbb
int3   
scas
mov
xchg
sbb
push
dec
pop
divl
(bad)  
adc
into   
mov
in
mov
jo
xchg
(bad)  
mov
xor
daa    
insb
out
cmc    
sarb
sbb
adc
or
(bad)  
cmp
mov
std    
lods
adc
push
cs aam
pop
(bad)  
repnz outsl
push
push
mov
adc
sbb
lock
iret   
push
xchg
sahf   
out
sbb
repnz cmp
mov
sub
mov
xchg
das    
test
fistp
ljmp
push
popw
leave  
adc
and
(bad)  
xor
stos
(bad)  
(bad)  
cmc    
or
cli    
sbb
or
(bad)  
pop
and
lods
roll
insb
je
push
pusha  
aad
jmp
sti    
pop
add
js
hlt    
xchg
push
fwait
outsb
in
add
imul
mov
add
mov
iret   
popf   
push
aaa    
out
fcompl
es ljmp
adc
mov
pop
xor
cli    
pop
mov
mov
and
lret   
stos
adc
push
mov
jp
(bad)
sti    
mov
pop
dec
xchg
loop
push
pop
mov
negb
mov
int3   
pop
out
fcmovnbe
lahf   
shrb
pop
icebp  
xor
xchg
loop
inc
rcl
fimull
fwait
test
inc
je
outsb
shlb
(bad)
ret
mov
cmpsl
cmp
sbb
lods
fwait
push
movsb
mov
pop
mov
mov
xchg
out
fstpt
jecxz
jbe
xlat
std    
repnz sub
push
xor
pusha  
adcl
fcomp
inc
add
(bad)  {%k7}{z}
cli    
sarl
lea
sub
icebp  
out
(bad)  
stos
dec
(bad)  
(bad)  
mov
test
jo
aaa    
js
imul
stos
inc
xorb
sub
std    
sbbl
mov
dec
int3   
inc
int3   
xor
adc
loope
gs mov
mov
dec
pop
ja
pusha  
push
add
test
xor
repnz xchg
jmp
mov
adc
data16 jecxz
push
mov
jnp
andl
add
add
xor
out
add
cs test
pushf  
mov
lods
and
ret
lret   
mov
dec
mov
lods
(bad)  
loop
and
arpl
sub
lds
shll
sbb
lds
xchg
and
push
sbb
aam
sub
out
add
push
cld    
imull
popf   
arpl
lret
add
dec
lahf   
int3   
insb
or
push
sbb
jb
insl
orl
leave  
pop
test
push
imulb
sub
sbb
inc
xchg
inc
dec
les
and
pop
jle
in
or
dec
into   
push
lea
pop
cmp
inc
(bad)  
dec
sbb
sbb
or
cmc    
mov
mov
inc
(bad)  
rclb
lret
push
dec
(bad)  
scas
add
ror
daa    
imul
clc    
mov
add
adc
leave  
out
xacquire ds xchg
pop
loopne
jp
insl
or
insb
ret    
or
ficompl
test
(bad)  
les
adc
ret    
mov
adc
rdpmc  
add
mov
xchg
hlt    
mov
in
jp
aad
imull
push
mov
or
test
ret
call
or
mov
addb
sub
mov
adc
sahf   
pushf  
out
addl
mov
sbb
or
bswap
fcoms
cli    
mov
lea
jmp
or
aam
arpl
fwait
push
xor
xchg
cli    
jae
ljmp
imul
dec
stos
nop
int3   
fbstp
add
in
mov
imul
inc
jp
push
xchg
dec
lea
arpl
das    
mov
jp
adc
or
mov
test
push
adc
inc
daa    
cmp
lds
stc    
jp
cmp
mov
mov
movsl
xchg
outsb
mov
sbb
cmc    
cld    
cltd   
fiaddl
iret   
add
pop
adc
cmpsb
jmp
clc    
cli    
bound
push
andl
or
adc
shrb
mov
insl
xor
push
xchg
pop
inc
stos
cmp
(bad)  
xor
inc
jl
(bad)  
cmp
es add
inc
nop
and
ja
(bad)  
hlt    
int
sbb
and
and
jno
mov
incl
sub
(bad)  
jge
pop
in
lock pop
adc
in
loope
adc
jp
inc
push
sbb
lret
out
push
mov
pop
mov
xchg
insb
movsl
ret    
xchg
lret
mov
jmp
adc
sbb
scas
mov
cmp
out
xchg
jmp
les
scas
pop
jmp
jp
cmp
add
cmp
add
out
(bad)  
dec
adc
(bad)  
xor
xor
xchg
daa    
push
popf   
jl
xchg
push
mov
les
jl
adc
mov
xor
mov
mov
push
cltd   
cmp
inc
cmc    
mov
pusha  
lret
(bad)  
jbe
(bad)  
adc
inc
add
out
add
negb
fcompl
(bad)  
push
sub
rclb
test
sti    
int3   
shl
push
(bad)  
lods
jae
cltd   
std    
push
xchg
mov
orl
repz test
mov
jp
or
hlt    
mov
rdmsr  
adc
push
jge
xchg
les
lock mov
adc
idivb
out
adc
jo
dec
cmp
mov
xor
sub
nop
fdivrl
lods
add
adc
ret    
sub
jmp
sbb
aaa    
ret    
nop
fucom
push
sarl
mov
inc
out
inc
mov
pop
mov
inc
pop
lahf   
inc
(bad)  
(bad)  
int
jo
or
mov
loop
mov
ljmp
mov
sbb
arpl
lods
in
imul
movsl
jnp
fprem  
rcrl
mov
push
jmp
(bad)  
hlt    
and
push
pop
sbb
sti    
sub
adc
pop
iret   
sbb
outsb
mov
dec
adcb
popa   
lret
fidivrl
bound
mov
(bad)  
idiv
push
lods
or
aad
mov
xchg
mov
sbb
loopne
adc
xchg
and
or
(bad)
ret    
out
sub
je
icebp  
hlt    
pop
cld    
pusha  
xor
jnp
push
mov
loope
aas    
sub
cs in
sub
dec
mov
mov
adc
mull
out
dec
mov
mov
stos
inc
cmp
ljmp
inc
dec
mov
out
xor
repnz add
push
mov
cli    
mov
(bad)  
jb
outsl
rcr
cmc    
fidiv
sysexit 
add
aad
dec
pop
inc
ror
cmp
loope
in
xchg
fdivrs
mov
ret    
(bad)  
lahf   
ss inc
movsl
(bad)  
fisttp
adc
dec
and
mov
jle
xchg
jns
jle
movsb
imul
jb
or
fs inc
jbe
ret
loopne
dec
pop
in
inc
loope
es out
dec
dec
dec
jle
and
arpl
push
dec
(bad)  
in
roll
mov
or
mov
scas
pop
insb
jb
das    
imul
jmp
sub
lods
andl
dec
lcall
xchg
bound
mov
pop
adc
(bad)  
cmp
cmp
std    
push
mov
mov
add
sbb
or
or
int
and
cmpsb
fmull
aad
lea
jmp
xchg
mov
sbb
dec
out
or
xor
in
push
push
xor
add
adc
or
mov
jno
std    
mov
pop
dec
jge
fsubrl
insl
inc
loopne
xchg
pusha  
and
mov
cmpsb
(bad)  
arpl
std    
movsl
arpl
stc    
push
movsl
xchg
push
(bad)  
sbb
sbb
xchg
addr16 out
outsb
jae
push
inc
jmp
or
push
test
lahf   
fcmove
mov
lds
jl
add
dec
les
mov
and
sub
push
int3   
add
push
pop
loopne
in
jbe
ret    
fwait
es inc
arpl
test
test
and
and
xchg
movsl
or
add
xor
add
nop
adc
test
jp
rcrb
mov
aaa    
cld    
inc
pop
pop
cmpl
adc
aam
stc    
ret
xchg
mov
jbe
push
jp
lahf   
pusha  
mov
jecxz
inc
jnp
dec
hlt    
insl
imul
addr16 popf 
xchg
and
stos
mov
and
xorl
rcrb
inc
popa   
inc
or
or
jbe
jecxz
in
lret   
xchg
adc
sub
data16 adc
cmp
inc
pop
adc
dec
into   
dec
imul
mov
inc
ret    
hlt    
add
icebp  
mov
jge
test
xchg
mov
lock cmp
and
imul
pop
popa   
das    
push
lcall
cmc    
aam
adc
fwait
mov
cli    
jecxz
fbld
xchg
jns
jno
int
pop
std    
dec
jo
xlat
push
nop
adc
push
shr
pushl
aaa    
jns
sahf   
fisub
pushf  
call
mul
xchg
in
out
and
negb
scas
repnz pop
jne
xchg
ds pop
sti    
iret   
lret   
out
out
fisub
jbe
xor
scas
pop
jge
push
add
hlt    
faddl
out
ss cli 
iret   
dec
fnsave
lea
imul
fnsave
inc
repz push
in
or
fsubr
add
jno
jecxz
and
jo
out
xchg
movsb
dec
pop
movsb
mov
and
das    
and
mov
pop
rcll
push
(bad)  
roll
xchg
mov
(bad)  
movsb
add
sbb
jae
push
xchg
lock int
push
dec
add
je
lea
sbb
adc
lock in
stos
stc    
ss test
xchg
sub
push
mov
jle
pop
(bad)  
hlt    
test
int
push
jns
out
scas
xchg
inc
mov
out
ror
add
insb
push
adc
jecxz
jae
pusha  
jb
cmp
in
add
outsb
adc
mov
cmp
pop
mov
lret
ja
jnp
mov
xchg
aaa    
xor
or
mov
call
gs scas
ljmp
mov
sbb
int
cmp
mov
in
mov
push
jmp
popf   
and
into   
ds inc
int
adc
(bad)  
aaa    
out
popa   
jge
push
xor
dec
es inc
pop
cmp
scas
psrld
add
add
dec
inc
scas
inc
pusha  
(bad)  
or
add
add
(bad)  
(bad)  
(bad)  
incl
add
add
add
add
add
add
jns
je
insl
cs inc
jb
ja
outsb
addr16 sub
push
gs jb
imul
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
xor
data16 aaa 
xor
fs xor
add
adc
gs insl
cs inc
jb
ja
outsb
addr16 cs inc
imul
add
popa   
je
pop
add
add
add
add
add
lsl
add
jno
add
add
or
or
add
or
add
add
add
dec
or
add
add
(bad)  
and
add
add
inc
dec
inc
add
mov
or
popa   
add
jo
pop
jae
add
ret    
add
push
ret    
add
outsl
test
add
cmp
push
push
test
leave  
pusha  
add
cmc    
repz push
out
dec
cmp
inc
push
xlat
cwtl   
sti    
xor
(bad)
frstor
ljmp
dec
mov
fisub
cmc    
cmp
mov
jno
dec
inc
xchg
sbb
lods
icebp  
int3   
popf   
(bad)  
out
repnz shl
mov
xchg
shrl
roll
pop
cmc    
or
dec
fldenv
rcrb
sbb
movsb
les
pusha  
(bad)  
jp
std    
call
and
aam
cmp
push
cmp
cmpsl
jns
or
xor
(bad)  
mov
(bad)  
jle
xchg
sbb
mov
adc
cmpsb
ret    
xchg
js
push
add
sbb
outsl
jmp
fistl
or
cmp
es neg
lea
mov
cwtl   
or
mov
inc
xor
out
aam
pop
xchg
aad
fist
adc
bound
gs lahf 
and
scas
clc    
gs pop
pop
adc
xchg
lods
push
adc
in
pop
jl
pop
pop
inc
xchg
js
mulps
sbb
data16
mov
sub
pop
(bad)  
jb
cmp
adc
stos
ret
add
pop
int
and
jne
pop
lahf   
xor
in
and
mov
push
push
adc
mov
je
mov
xor
hlt    
enter
pop
(bad)  
stc    
mov
test
je
cmp
(bad)  
mov
cmp
pop
dec
mov
fdivr
xor
cli    
sbb
cmp
in
jno
imull
sub
mov
pop
sub
add
jmp
nop
adc
fsubrs
loopne
adc
xorl
fnstsw
in
jnp
xlat
sbb
mov
or
popa   
scas
es int3 
push
leave  
popa   
aaa    
jne
sbb
mov
leave  
xor
adc
bound
ret
aaa    
gs jnp
out
int
mov
fisttp
add
hlt    
xor
test
and
push
gs xchg
mov
push
sahf   
rcrl
sub
das    
lods
push
call
sub
mov
cmp
in
scas
fisubr
fisttpl
fisubrl
movsb
add
xchg
aad
inc
out
incl
rcll
fstps
push
xor
or
adc
(bad)  
clc    
(bad)  
adc
pop
cmp
(bad)  
pop
add
add
cmp
adcl
lret   
loop
lods
test
imul
jb
push
xlat
clc    
loop
mov
pop
mov
(bad)  
aas    
push
adc
addr16 xchg
into   
dec
(bad)  
jecxz
imul
push
and
dec
jmp
push
jb
mov
inc
mov
sti    
mov
(bad)  
shrb
lret
dec
mov
loope
inc
out
in
(bad)
scas
pop
subb
iret   
sahf   
sbb
dec
outsl
pushf  
add
jg
cmpsb
sub
xor
outsl
hlt    
cmp
and
adc
xlat
mov
test
ficomp
sub
mov
mov
xchg
pop
sbb
dec
jnp
sbb
cmp
movsb
fldt
or
push
jl
out
popa   
stos
aaa    
xlat
lock ds inc
sbb
mov
rolb
loopne
jo
scas
sub
sbb
fist
sti    
test
mov
test
loop
sbb
inc
insb
mov
cmp
mov
jbe
or
dec
popa   
fs out
mov
jmp
pop
rorl
jmp
ffree
adc
inc
jmp
and
outsl
sub
popf   
or
sbb
add
loope
add
(bad)  
mov
test
xchg
jb
and
out
ret    
ljmp
imul
lods
repnz mov
aaa    
and
sub
push
les
pop
sarb
icebp  
mov
cmp
jmp
lods
cmp
sbb
push
pop
into   
sbb
mov
xor
icebp  
inc
out
ljmp
lcall
cmc    
das    
pop
add
mov
xchg
dec
add
scas
lods
(bad)  
ss push
movsb
mov
es inc
jl
test
and
push
scas
imul
add
in
mov
inc
out
movsl
aam
sahf   
adc
or
jnp
insb
jns
das    
xor
sub
data16 and
inc
push
rorl
and
add
data16 int3 
or
mov
sbb
ss dec
into   
sub
je
adc
or
int3   
hlt    
cmpsl
enter
add
loopne
mov
mov
jae
jg
or
xchg
push
shr
pop
add
mov
mov
sbb
fisubl
push
xor
xchg
bndldx
jae
stc    
xchg
into   
call
popf   
xchg
insb
bt
dec
xlat
and
sbb
inc
ret
es xchg
std    
dec
jp
stos
in
and
pop
dec
fidivl
(bad)  
(bad)  
adc
lock cmp
mov
lods
mov
inc
(bad)  
imul
stc    
inc
push
aas    
push
pop
mov
xlat
aaa    
lods
mov
popa   
rcrb
(bad)  
loope
xchg
gs out
push
cmpsl
sarb
mov
cmp
cmp
mov
cld    
push
les
add
dec
xor
movsb
aad
arpl
hlt    
adc
fwait
ljmp
xchg
mov
daa    
icebp  
inc
xor
icebp  
jg
and
and
pop
inc
mov
pop
xchg
pushf  
out
std    
rcl
add
pop
pop
push
jae
cld    
jmp
ljmp
test
lods
test
les
aam
pop
push
cmc    
fwait
cmpsl
int3   
sub
mov
scas
faddl
mov
in
xor
cmp
cmpsl
das    
jl
mov
dec
aad
mov
mov
sbbl
ja
fs pop
jle
fisttpl
dec
pop
sbb
pop
lret
jns
xor
push
test
(bad)  
lcall
dec
div
xchg
mov
fsubrp
fistp
lods
pop
movsb
and
rcr
dec
rcl
es or
movsb
mov
movsb
loop
mov
inc
fidivl
and
or
lods
push
fstps
(bad)  
mov
loope
cmp
ljmp
xchg
dec
adc
push
(bad)  
cmp
jle
sub
ss
xchg
adc
or
sub
inc
repnz loope
cmp
test
mov
push
cmp
negb
(bad)  {%k7}{z}
loopne
push
mov
mov
lahf   
pop
mov
push
jp
out
xchg
stos
cmp
roll
std    
insb
mov
mov
ss test
xor
ss or
out
jbe
jg
lcall
xchg
aam
cwtl   
adc
scas
and
rcrl
mov
in
push
adc
add
dec
(bad)  
or
sub
cmp
sahf   
pop
or
sub
nop
out
les
adc
inc
mov
es clc 
sbb
xchg
lods
insl
insl
xchg
mov
inc
xchg
jecxz
adc
movb
mov
mov
cmp
mulb
inc
sar
jb
adc
hlt    
or
add
je
push
(bad)  
xchg
in
pop
movsb
ja
and
adc
(bad)  
stc    
in
adc
xchg
test
mov
imul
(bad)  
pop
testl
jg
cmc    
popa   
xchg
mov
push
mov
mov
adc
pop
xchg
push
popa   
subl
push
leave  
outsl
pop
out
jmp
imulb
adc
adc
mov
dec
inc
mov
xor
adc
std    
shrb
in
ret    
ficoml
cmpsb
data16 add
iret   
dec
jo
cmp
xchg
ss inc
add
inc
cmpsb
rcll
inc
jge
mov
and
adc
cmp
fnsave
sub
mov
mov
imul
ret
pop
xor
bound
xor
sbb
ljmp
iret   
mov
imul
(bad)  
xor
cs and
inc
mov
xchg
adc
pop
scas
add
cs test
ret
sar
adc
ss mov
pop
sbb
(bad)  
rol
nop
xlat
jle
or
in
sbbl
add
inc
adc
leave  
mov
dec
fs
mov
inc
xchg
sbb
jne
or
mov
xor
insl
xor
call
sbb
rolb
jmp
or
repz or
xchg
mov
xor
pop
pop
dec
push
sbb
popa   
mov
gs
sbb
add
push
or
push
lock pop
and
(bad)  
cmp
cmp
dec
sbb
lret   
in
jge
mov
xchg
(bad)  
xor
popf   
mov
(bad)  
cs
sbb
xchg
cmp
fsubrs
andl
lds
(bad)  
fisub
ret    
sub
and
or
data16 mov
add
cmp
mov
cmp
xchg
sub
xlat
or
push
movsb
push
sub
je
gs arpl
add
rcrl
mov
mov
lret
imul
mov
jae
movsb
cmp
xor
pop
or
xchg
popf   
ja
test
xor
sub
push
sbb
repnz outsl
jae
lret
mov
shr
adc
addr16 mov
sbb
mov
inc
jo
mov
test
leave  
mov
lds
enter
ljmp
out
out
sbb
cmp
addr16 into 
data16 xor
push
rclb
addr16 data16 jo
inc
xchg
jl
vcvtpd2psy
mov
ljmp
pop
xchg
cwtl   
stos
jb
mov
pop
loope
aaa    
dec
mov
jle
pop
pop
mov
mov
cmpsl
dec
sub
adc
ja
sub
mov
cmp
int
sbb
xor
mov
(bad)  
cli    
iret   
add
mov
repz pop
inc
ret
mov
test
mov
mov
rol
lret   
icebp  
jae
xchg
(bad)  
fwait
or
adc
jbe,pt
addr16 mov
inc
jbe
loope
mov
push
aam
add
cmovae
pop
cmp
jp
movsb
arpl
rcr
stos
pusha  
xchg
ljmp
lods
cli    
cld    
mov
(bad)  
or
ficoml
mulb
sub
xor
pop
icebp  
lods
icebp  
xor
aam
jecxz
cmp
and
sub
xor
imul
sarb
and
jnp
xor
mov
adc
mov
cld    
(bad)  
ja
jecxz
cmpl
pop
xchg
push
push
mov
test
push
(bad)  
sub
xor
scas
xchg
aas    
sbb
inc
sub
mov
mov
pop
std    
add
(bad)  
push
mov
pusha  
test
add
mov
pushf  
stc    
sub
lods
lds
es or
call
jg
inc
dec
add
call
arpl
cmp
add
and
(bad)
popa   
jo
and
pushf  
data16 hlt 
fdivrl
dec
sub
divl
sahf   
(bad)  
adc
cmp
sbb
popf   
push
jne
xor
mov
and
adc
fbstp
push
add
movsl
dec
stos
jbe
cmc    
xlat
pop
mov
pop
popf   
mov
or
adcb
inc
mov
lret
scas
adc
(bad)  
and
mov
sbb
sbb
jno
or
dec
pop
ljmp
adc
xlat
mov
push
inc
sub
or
fcompl
cmp
popa   
add
dec
ljmp
movb
cld    
sbb
(bad)  
fldt
xchg
daa    
lcall
out
dec
mov
xchg
data16 and
add
in
jns
mov
cmp
jg
pop
daa    
cmp
jp
in
inc
out
sbb
das    
sbb
mov
movsl
or
rorl
(bad)  
(bad)  {%k7}{z}
(bad)  
(bad)  
les
sub
bound
lret
inc
sub
int
lods
or
ja
push
or
pop
xchg
jns
adc
inc
or
mov
call
getsec 
imul
pop
fldcw
dec
addr16 ja
(bad)  
hlt    
aaa    
mov
adc
xchg
jno
jle
movsb
xchg
scas
xor
sub
lretw
adc
movsb
bsr
cmc    
(bad)  {%k1}
cltd   
subl
pop
and
cltd   
imul
bound
inc
rol
xchg
pop
addr16 xor
or
mov
sub
repz mov
je
popf   
pushw
or
movsl
popa   
repnz in
xor
cmc    
jo
test
lret
popf   
push
add
inc
stos
jmp
iret   
and
mov
pop
icebp  
lret
ljmp
dec
leave  
push
in
xor
mov
jle
mov
notb
sahf   
inc
xchg
cmp
jnp
or
(bad)  
test
faddl
mov
xor
mull
dec
cld    
mov
in
stos
stos
test
or
dec
je
fnsave
sub
cmc    
mov
aad
dec
out
adc
iret   
inc
or
sbb
icebp  
adc
xchg
fstpl
imul
in
inc
xchg
(bad)  
scas
add
mov
mov
in
enter
mov
push
js
fnsave
fcoml
idivl
xor
jmp
in
xor
aas    
xor
(bad)  
(bad)  
add
sahf   
stos
sbb
fbstp
cs scas
mov
adc
and
lret   
mov
cld    
add
adc
scas
push
xor
pop
xorb
push
imul
fnstcw
pop
out
adc
sub
cmp
push
mov
(bad)  
cs or
es sbb
add
push
sbb
mov
push
xor
dec
dec
mov
pop
and
(bad)  {%k1}
ljmp
jbe
stos
orb
mov
and
cmpsb
int3   
pop
push
push
aaa    
aad
add
xor
int3   
ds test
popa   
lea
sbb
out
f2xm1  
outsl
jg
ljmp
xor
clc    
mov
mov
jb
xlat
push
ret    
or
pop
fldt
(bad)  
outsb
imull
enter
xchg
adc
jle
mov
xor
insb
(bad)  
imul
std    
sbb
outsb
seta
shl
xchg
mov
dec
stos
stos
mov
es xor
push
or
mov
jg
sbb
push
pop
ret
add
pop
sarb
lret
xchg
pop
cmp
xor
push
sub
fcoms
mov
cmp
adc
int3   
sub
das    
mov
sarb
cli    
dec
out
xor
pop
fcmovnu
jmp
jp
mov
sub
mov
push
rclb
shrl
repz cmp
popf   
out
outsl
or
mov
lds
mov
cmp
push
sub
(bad)  
cmp
and
jmp
gs
ja
dec
push
inc
imul
push
push
(bad)  
add
ret
sbb
dec
lds
or
jnp
(bad)  
fs or
sbb
mov
loope
les
cmp
inc
dec
aam
sbb
sub
daa    
jmp
jge
jns
sti    
push
call
sub
fimul
sub
into   
pop
mov
fdivr
jl
daa    
lahf   
hlt    
xchg
aaa    
adc
cmp
roll
icebp  
imul
xchg
dec
push
mov
stos
icebp  
data16 cmc 
lods
mov
sub
mov
lahf   
mov
pop
adc
add
dec
leave  
addr16 push
xor
repz mov
dec
pushf  
pop
jmp
mov
rclb
jnp
out
jae
adcl
std    
movsl
push
mov
sbb
xchg
dec
cmpsb
cs xchg
xor
stos
daa    
xchg
cmpsb
sub
lea
dec
das    
push
pop
add
xor
(bad)  
es mov
les
test
imul
scas
mov
mov
cld    
shrb
mov
adc
mov
imul
(bad)  
cmc    
jle
test
mov
mov
adc
push
cmp
gs stos
lods
(bad)  
(bad)  
out
add
outsl
or
int
cmpsl
jnp
jmp
mov
loope
test
push
jnp
js
cmp
push
std    
cmp
sbb
and
xor
and
rcrl
xchg
outsb
insb
add
pop
push
dec
inc
imul
test
jno
push
mov
test
sub
cli    
cmp
xchg
pop
movsl
rorl
cmpsl
pop
adc
pop
pop
push
add
sbb
(bad)  
dec
mov
subl
xchg
xchg
rcll
movsb
les
movsl
lods
adc
cmp
lea
in
xor
pop
cs xor
(bad)  
insl
les
repnz scas
cmpsl
push
in
add
sub
fdivrs
dec
les
mov
and
je
jno
push
(bad)  
cwtl   
cli    
movsl
push
cmpsl
xchg
adc
(bad)
in
xchg
sub
clc    
lahf   
push
int
dec
mov
adc
imul
jns
aad
adc
in
push
lods
cmp
xor
iret   
popf   
sub
push
fwait
loop
mov
cmc    
and
pop
into   
(bad)  
and
nop
inc
stc    
push
xchg
jp
dec
add
notl
test
cli    
sub
xchg
inc
fldt
shrb
inc
xor
mov
push
jns
pop
xchg
out
scas
addr16 push
fstpt
inc
frstor
pop
pop
fcmovnu
and
adc
cmp
repnz pop
pushf  
push
cli    
lods
(bad)  
mov
add
lahf   
xchg
fcmovnbe
rcrb
fs dec
loope
imul
daa    
testl
mov
pop
pop
mov
inc
ljmp
add
aaa    
xlat
mov
sbbl
sbbb
andb
jp
and
jl
xor
xchg
arpl
ss repz jno
xor
jno
pop
outsl
sbb
sbb
sbb
xchg
add
testb
jne
adc
in
push
adc
popa   
pop
xor
jbe
jge
push
(bad)  
out
mov
dec
adc
jne
shrb
adc
inc
xor
mov
adc
jno
xchg
movsl
fwait
rcl
jne
mov
(bad)  
cli    
cli    
add
xor
xor
pop
jmp
cmp
aad
fwait
mov
pop
test
int3   
jg
add
rcll
jnp
out
cltd   
mov
pop
call
iret   
and
enter
sub
mov
popa   
mov
or
ret
rcr
xchg
inc
xorb
jae
mov
sub
push
faddl
mov
ja
out
cmpsl
jbe
xchg
xor
cmc    
int3   
cltd   
fstpt
sbb
notb
mov
adc
pop
scas
push
xchg
mov
push
cmc    
mov
jle
rcrb
pusha  
popa   
jo
in
sbb
mov
lret
xchg
icebp  
sub
imul
dec
dec
mov
fcomi
(bad)  
cli    
sbb
inc
add
outsl
dec
outsb
loopne
ret    
jnp
add
loopne
jb
int3   
xchg
(bad)  
idivl
adc
adc
pop
dec
test
cmp
aas    
xor
fucomip
mov
cmp
ljmp
aad
pop
xchg
in
lahf   
jns
mov
fnstcw
sub
addb
aam
sbb
and
sarl
cmp
imul
push
aaa    
in
subl
scas
cmp
inc
mov
jno
shl
cmp
xchg
shll
lcall
test
pop
fwait
xchg
cmc    
cmp
inc
ror
adc
inc
aas    
xchg
or
mov
mov
or
adc
cli    
adc
sub
fdivrp
mov
jle
or
adc
push
(bad)  
ss mov
or
(bad)  
mov
cmpsb
stos
ljmp
rcll
jnp
test
or
inc
inc
cmc    
sarb
mov
mov
and
sbb
push
dec
(bad)  
sub
sub
jecxz
dec
das    
negl
and
iret   
pop
add
es lret
push
clc    
push
sub
out
push
fiaddl
xor
xor
lea
nop
pop
dec
lods
xchg
imul
in
les
dec
sbb
loope
lea
insl
mov
insb
data16 out
icebp  
or
sbb
jmp
stc    
jo
ficomp
jno
sbb
inc
push
xchg
into   
dec
into   
es inc
lret   
repz and
ficompl
add
sbbl
fisttpll
or
jl
inc
pop
adc
loope
rclb
std    
pop
xor
add
out
int3   
stc    
mov
cs mov
nop
or
adc
inc
jp
pop
ret    
lods
movsb
add
enter
aad
std    
(bad)  
mov
leave  
cmp
std    
imul
enter
shrb
nop
adc
nop
mov
push
rcll
movsl
xchg
mov
mov
and
icebp  
outsb
popf   
inc
icebp  
out
lahf   
or
(bad)  
stos
add
pop
cmp
outsl
imul
(bad)  
jl
lea
push
push
pop
lock fs int
push
sub
in
sbbl
mov
roll
cmpsb
mov
js
push
out
or
cmc    
sbb
int
cmpsb
int3   
cmp
jmp
mov
push
adcl
sbb
sub
dec
inc
ds xchg
out
and
clc    
popa   
stos
add
loope
loop
ret
or
notb
mov
mov
out
jle
adc
xchg
mov
fcomps
andb
xor
lret   
call
sub
(bad)  
mov
fdivrs
stc    
movsl
xor
cmp
lea
push
call
cmp
mov
cmp
push
je
flds
mov
mov
(bad)  
add
pop
mov
mov
out
int
mov
das    
adc
or
movsl
test
gs mov
repnz dec
pop
aaa    
movb
fs push
dec
cmp
popf   
xchg
or
sti    
inc
movsb
push
add
scas
cs out
int3   
pop
inc
leave  
enter
mov
out
adc
sub
jmp
cmpsl
arpl
xor
call
pop
add
lods
jg
dec
and
fdivrl
mov
adc
cmpsb
or
mov
xchg
mov
ja
inc
mov
jns
bnd jb
adc
iret   
cmp
add
cmp
div
lods
xchg
iret   
inc
addr16
loope
mov
repnz and
fbstp
add
data16 jle
hlt    
aam
push
pushl
add
(bad)
and
ljmp
lret   
pop
add
dec
dec
xchg
lea
popl
push
mov
and
lock fstl
(bad)  
ja
mov
lock or
sbb
fwait
out
sti    
(bad)  
lahf   
out
scas
fildl
add
std    
jle
int
jnp
push
les
in
adc
push
test
adc
mov
dec
data16 jbe
xchg
and
iret   
(bad)  
mov
repz icebp 
int3   
mov
fwait
jg
out
(bad)  
movsl
into   
inc
mov
adc
and
xchg
and
test
shlb
sbb
sar
jno
lds
push
mov
or
(bad)  
push
push
in
nop
popl
cmp
push
dec
adc
adc
rorb
out
repnz das 
pop
loopne
popa   
cmc    
xchg
cwtl   
xor
xchg
sti    
enter
out
dec
jmp
or
or
orl
xchg
ret
iret   
and
push
push
ja
dec
mov
xor
mov
orl
test
sti    
out
scas
into   
mov
js
mov
mov
les
mov
fstps
jge
(bad)  
mov
lcall
or
jp
push
sub
daa    
and
pop
push
sub
jbe
lods
enter
aam
aas    
in
cmp
movl
cld    
lock lahf 
popa   
mov
bnd jle
jmp
vandnps
mov
inc
sbb
push
xor
(bad)  
and
or
xor
xchg
not
adc
mov
xlat
test
je
out
popf   
es mov
and
mov
pop
cltd   
mov
fwait
scas
jg
or
pop
cwtl   
add
xchg
aad
repnz das 
xchg
pop
arpl
adc
mov
(bad)  
mov
adc
in
scas
ja
mov
mov
dec
add
push
pop
mov
push
lret
arpl
adc
or
adc
adc
out
cmpsb
and
div
inc
pop
push
dec
nop
mov
cmc    
adc
inc
mov
jb
fwait
sti    
cmp
push
insb
mov
pop
pop
sarb
adc
int
aam
lea
hlt    
push
cmpsl
xchg
inc
jl
dec
push
mov
les
dec
or
out
sahf   
sbbb
arpl
cld    
out
lods
sub
xor
rcrb
adc
es sti 
int
dec
call
lds
push
call
jge
inc
(bad)  
into   
push
xor
jp
mov
das    
and
out
mov
es dec
or
das    
pop
mov
mov
cmp
(bad)  
jb
outsb
std    
in
push
arpl
aaa    
inc
mov
ja
mov
fistpl
out
dec
idivb
mov
jmp
(bad)  
scas
in
cmpsl
dec
popa   
adc
or
fwait
jno
shrl
push
(bad)  
mov
test
sbb
xor
gs aad
jl
jecxz
jg
sbb
pushf  
sarb
jne
lret
dec
lods
mov
jp
xor
dec
add
test
and
adcb
ds sub
and
or
fidiv
push
insb
push
xlat
(bad)  
ja
(bad)  
mov
pop
and
sbb
push
ds push
add
rorl
mov
jg
dec
daa    
sbb
ret
adcl
(bad)
in
inc
mov
push
mov
push
popa   
pop
push
mov
aas    
call
out
popa   
adc
(bad)  
out
aad
(bad)  
(bad)  
xchg
mov
icebp  
xchg
movb
add
jno
jp
popa   
jge
adc
hlt    
ja
jecxz
out
jno
enter
and
dec
js
push
jo
mov
data16
fmuls
outsl
dec
ret    
dec
mov
(bad)  
mov
adc
in
jle
cmp
ljmp
lret   
jl
lods
in
inc
xor
lea
mov
std    
(bad)  
iret   
mov
mov
inc
daa    
sub
xor
stos
adc
sti    
mov
sub
mov
sub
cltd   
jmp
out
jl
in
xor
inc
pop
mov
idivb
outsl
xchg
(bad)  
adc
mov
adc
xchg
popa   
mov
mov
scas
mov
inc
fcomps
aam
out
fnsave
rcll
pop
add
insw
xlat
test
push
les
ds std 
mov
adc
into   
out
push
in
hlt    
and
fcompl
sbb
sbb
cmpsb
in
xchg
idivb
out
pop
push
loope
and
lods
mov
sbb
leave  
mov
imul
out
fisubr
inc
inc
fidivr
pop
or
mov
jg
dec
or
pop
imul
and
cmc    
movsl
or
xchg
mov
mov
aam
cmpsb
sbb
dec
sub
mov
inc
xor
push
xor
and
ret    
(bad)  
sub
enter
aad
and
arpl
fsubp
cld    
cmc    
jns
icebp  
repz push
mov
rol
cmc    
sub
sub
pop
ret    
push
mov
or
jno,pn
test
push
and
call
call
cmp
mov
jne
repnz inc
andl
hlt    
mov
mov
sahf   
hlt    
das    
insl
fsts
pushw
inc
in
inc
sbb
cmp
imul
xlat
cmpsl
clc    
fistpl
push
xlat
(bad)  
sbb
pop
dec
lret   
sbb
push
or
test
iret   
cmp
rcrl
decl
cmp
and
mov
ret    
lcall
sub
add
andnpd
inc
mov
xchg
testb
push
mov
mov
leave  
std    
inc
jp
ds gs push
lret   
loope
sbb
push
sbb
inc
jnp
sbb
dec
in
mov
or
xlat
jecxz
fisubrl
push
sbb
ds or
sub
mov
mov
or
mov
xchg
icebp  
cmp
push
jne
fadd
mov
js
dec
mov
lret   
ljmp
or
shr
gs push
aad
cmp
push
daa    
pop
and
xlat
or
test
test
jg
pop
orb
mov
xor
int
sarl
or
movsb
mov
mov
gs and
jo
stos
in
push
stos
mov
daa    
adc
and
pop
mov
repnz out
cmp
xchg
sub
cld    
lret
leave  
lahf   
lret   
cli    
xchg
sbb
or
lret   
pop
mov
xlat
mov
add
xor
ds dec
xchg
mov
inc
into   
pop
adc
mov
and
adc
fsts
add
lret   
sarb
data16 cmp
xchg
lea
add
inc
fimull
addr16 clc 
sbb
pop
fndisi(8087 only) 
je
add
in
push
aad
jns
cltd   
mov
or
push
cmp
lods
push
fildll
and
cmp
jl
in
lret
mov
sti    
mov
fldenv
dec
lea
out
aam
fisttpll
nop
arpl
mov
repnz
das    
repz mov
jns
push
incl
ret
je
fild
sbb
sarb
pop
(bad)  
cli    
push
cld    
push
lods
ja
ret
rorb
fcoml
std    
ss dec
mov
mov
xchg
fdivrp
add
jno
and
test
ss out
xor
movsb
cmc    
jo
subl
cmp
(bad)  
movsb
push
aaa    
fs add
incl
sub
add
bound
cwtl   
pop
or
fistpl
or
fwait
lods
inc
jns
mov
fsubs
mov
pop
je
pop
(bad)  
fisttpll
dec
js
mov
daa    
lods
movsb
lods
and
dec
mov
push
adc
in
sbb
js
dec
mov
mov
mov
lods
mov
pop
movsb
scas
xchg
shr
in
pushw
or
xchg
shrl
push
lret   
mov
sbb
loopne
pop
push
dec
jg
out
mov
inc
iret   
mov
fmull
fiaddl
insl
sbb
in
push
loope
aaa    
movsb
imul
xchg
inc
push
clc    
push
(bad)  
repz add
incb
and
out
idiv
adc
test
mov
pop
add
stc    
or
mov
cs mov
jmp
jl
loope
sarb
fdivrs
hlt    
test
shr
push
mov
and
outsb
orl
inc
scas
mov
cmpsb
mov
jecxz
add
pop
dec
cmpsb
clc    
(bad)
jg
inc
neg
add
ss sbb
loope
cmpsb
sub
push
pop
es jp
test
fisub
pop
pop
call
push
mov
adc
jb
cmp
pop
sbb
sub
loopne
adc
xchg
stos
mov
ss dec
(bad)  
stos
test
es push
lea
cmp
cmp
jp
pop
push
jmp
sub
push
gs js
mov
in
xchg
imul
jmp
gs cmp
cmp
add
xlat
scas
es pop
shlb
(bad)  
repz cmp
cwtl   
pop
adcb
pop
mov
push
aas    
ficom
or
sbb
lods
cmp
lcall
inc
push
fs xor
cwtl   
in
mov
xchg
dec
and
loopne
add
test
out
ret    
cli    
subl
inc
dec
xchg
sarb
lods
mov
sbb
pop
adc
mov
clc    
icebp  
xchg
adc
push
or
add
nop
dec
pop
shlb
enter
fcomps
sbb
nop
inc
das    
int
xlat
dec
test
pop
xchg
popf   
or
inc
xor
and
lret
lods
(bad)  
mov
pushf  
scas
hlt    
ss push
jnp
inc
mov
xchg
jbe
push
insl
or
(bad)
(bad)  
pusha  
(bad)  
inc
lock mov
jns
je
mov
out
out
jae
and
sub
and
adc
cmpsl
test
pusha  
pop
lods
xchg
arpl
sbb
daa    
ficompl
enter
ret
out
test
fldcw
aas    
inc
pop
mov
addl
jmp
jmp
in
cmp
dec
sbb
cwtl   
mov
ljmp
add
push
inc
adc
stos
and
sub
push
sub
pop
sti    
ret    
clc    
das    
icebp  
mov
dec
sub
jmp
dec
xchg
out
mov
push
ret    
dec
sahf   
mov
xor
sub
xor
lahf   
cmpb
inc
test
jmp
mov
jns
jle
cmp
out
aad
cwtl   
jecxz
fsubrl
xor
push
adc
sub
jbe
mov
jmp
pop
popf   
out
(bad)  
fcmovnu
mov
cwtl   
and
sbb
cmp
scas
add
jmp
inc
movsb
sbb
push
jp
mov
push
mov
push
and
in
pop
mov
(bad)  
sub
dec
ret    
or
in
pop
xlat
outsl
ljmp
div
lods
hlt    
sbb
cmpsl
pusha  
movl
mov
iret   
repz jmp
nop
(bad)  
icebp  
in
aam
xchg
ret    
sbb
mov
cmpsb
push
mov
mov
(bad)  
inc
mov
pop
jno
dec
imul
or
jae
inc
lods
mov
inc
sti    
div
pusha  
stos
jb
sub
xchg
out
add
mov
mull
or
dec
pop
pop
rcr
pop
movsl
mov
lea
lahf   
add
pop
dec
movsb
insb
and
cwtl   
sahf   
add
sarl
and
das    
aad
leave  
xchg
adc
cmpsb
pop
push
mov
add
ss jecxz
fnstcw
or
adcl
jbe
(bad)  
dec
sub
cs push
mov
inc
dec
sti    
fistl
stos
hlt    
sbb
push
mov
or
sbb
xorl
inc
xor
dec
test
popf   
mov
push
xchg
test
repnz test
ficom
dec
dec
jo,pt
push
(bad)  
jns
mov
xorl
fidivr
dec
push
mov
mov
xchg
add
and
jge
xor
fwait
push
stos
mov
pop
cmp
mov
add
xchg
pushf  
outsl
xor
lcall
dec
repz pop
data16 aaa 
fnop   
outsb
ljmp
stos
push
jl
mov
aaa    
addr16 pushf 
sbb
mov
mov
lods
jnp
fwait
in
cmp
rcrb
insb
test
(bad)  
adc
scas
add
aas    
(bad)  
insl
push
test
mov
mov
jge,pt
addr16 sub
jns
lods
je
mov
mov
call
sbb
cwtl   
dec
xchg
xchg
ficom
loopne
inc
inc
xchg
fcomip
(bad)  
mull
insb
negl
lahf   
sbb
inc
les
mov
or
(bad)  
pop
and
inc
dec
iret   
mov
push
jg
push
jg
in
aaa    
mov
cmp
stos
cmpb
cmp
movsl
pop
xchg
(bad)  
or
add
scas
and
repnz xor
xor
mov
pop
add
lock xor
mov
push
jae
sahf   
xchg
cmp
testl
jns
lret
(bad)  
pop
rclb
pushf  
push
shlb
test
xchg
dec
(bad)  
mov
and
xor
dec
or
in
pushf  
fldenv
push
dec
push
mov
jp
into   
and
pop
in
xor
pusha  
std    
xchg
jecxz
test
xchg
inc
enter
dec
inc
std    
jp
inc
cmp
sub
popa   
ja
(bad)
pop
pop
insl
in
mov
imul
dec
cli    
sarl
pop
dec
in
sbb
mov
lea
cli    
pop
ret    
fldl
sahf   
js
arpl
iret   
fwait
lcall
add
adc
cmp
sahf   
orl
shll
insb
mov
pop
inc
in
ljmp
xorb
test
aas    
data16 shrb
push
or
or
dec
addl
adc
push
test
insl
aad
pop
lods
arpl
mov
xor
(bad)  
mov
mov
sub
cmp
out
imul
(bad)  
or
pushf  
imul
inc
shlb
repz jbe
in
mov
sahf   
mov
lods
lahf   
cs lock icebp 
mov
fildll
je
pop
pusha  
mov
xchg
dec
ljmp
mov
push
or
scas
add
inc
test
jnp
shrb
add
add
mov
and
pop
xor
pop
sub
movsb
outsl
es lahf 
dec
xor
mov
xor
and
cmpsb
jmp
xchg
cmc    
imul
popf   
test
pushf  
lea
mov
test
pushl
xchg
cs inc
cmp
div
or
fldl
sbb
mov
fwait
(bad)  
pop
xor
adc
cmp
or
lret
lea
and
xchg
xchg
adc
in
adc
or
insl
xor
dec
jecxz
fcompl
popf   
or
xor
push
jp
xchg
imul
pop
arpl
out
fsts
xchg
inc
jne
mov
mov
inc
xchg
and
icebp  
push
jl
lret
inc
icebp  
mov
mov
aaa    
ficoml
cmp
aas    
stos
mov
jp
inc
outsl
cmp
dec
add
lahf   
addr16 mov
dec
js
jo
jno
pop
xchg
lcall
imul
stos
mov
nop
add
adc
inc
jnp
into   
insl
inc
inc
mov
cmp
ljmp
ljmp
xchg
outsb
fdivl
sub
movsl
mov
aas    
jne
xor
cwtl   
loope
fisttpl
popa   
scas
push
int3   
leave  
insb
jl
(bad)  
xchg
pusha  
push
loop
aaa    
pop
jmp
mov
jb
add
add
dec
enter
stos
ret
pop
int3   
or
xchg
sbbl
mov
mov
dec
sbb
xchg
mov
fdivrs
sarb
pop
negl
sbb
test
mov
xor
mov
xchg
push
or
push
mov
xchg
add
jl
jle
xchg
jae
mov
pop
mov
mov
pop
mov
vpmulhw
iret   
loop
out
and
lods
shl
adc
call
imul
gs dec
sub
and
pop
jb
dec
dec
mov
sub
out
sahf   
sub
push
call
scas
mov
jae
scas
(bad)  
xor
jecxz
inc
mov
cli    
pop
push
pop
push
out
mov
mov
ss insb
add
xor
push
mov
js,pn
pop
cmc    
inc
mov
sbb
cmp
dec
pop
pop
pop
adc
mov
leave  
testb
icebp  
das    
cmp
xchg
mov
and
mov
daa    
lods
jl
push
pop
das    
add
add
in
cmp
cmp
jg
movsb
int3   
jne
jge
jge
nop
mov
dec
addr16 cwtl 
sbb
imull
mov
sti    
ljmp
jp
clc    
sbb
and
xchg
xchg
test
cmpsl
aas    
sub
mov
mov
insl
dec
call
aam
xlat
pop
mov
mov
iret   
push
scas
xchg
orb
std    
or
jnp
iret   
sub
push
lahf   
and
lods
xor
push
cmpsl
push
xchg
pop
cmpsl
jns
sbb
fild
aad
jmp
imul
or
in
pop
mov
aas    
mov
loope
bound
mov
fildl
xor
out
sub
sarb
add
or
adc
add
enter
mov
pop
in
sbb
je
mov
scas
or
nop
xchg
xchg
mov
pop
xor
jmp
cwtl   
mov
stc    
pop
cmpl
xchg
out
xlat
rcl
dec
scas
and
add
jae
sub
inc
push
cmp
gs inc
cwtl   
cmpl
es fndisi(8087 only) 
dec
push
loopew
xchg
idivl
pop
faddp
dec
dec
sbb
movsl
leave  
mov
push
pushf  
lret   
clc    
sbb
cs daa 
loop
test
mov
lods
and
jl
cmp
hlt    
stc    
adc
sbb
jns
popa   
dec
test
lock lods
jl
jp
mov
cmpsl
xchg
jge
icebp  
mov
jmp
test
dec
cltd   
and
int3   
push
cmpsl
push
int
add
xor
sub
pop
add
mov
xchg
inc
fs cld 
(bad)  
mov
xlat
push
sbb
shlb
xchg
cmpl
(bad)
lahf   
push
push
sahf   
out
mov
ret
and
xchg
icebp  
push
mov
mov
push
mov
sbb
sub
icebp  
xor
bnd jns
inc
dec
sbb
fwait
xchg
mov
sbb
fidivl
popa   
test
cmp
jae
out
xchg
jle
enter
dec
mov
call
pop
jnp
in
push
xchg
loop
out
add
sbb
rorb
cmp
pop
leave  
cmpl
clc    
cmp
addr16 cmpsb
push
(bad)  
dec
(bad)  
xchg
imul
sbbl
push
and
jp
pop
jnp
pop
adc
and
mov
or
or
inc
(bad)  
loop
dec
mov
xlat
sub
jp
xchg
mov
scas
xchg
mov
mov
jne
jg
lea
icebp  
mov
add
scas
stc    
aaa    
sub
out
aaa    
jne
xchg
in
test
sub
addr16 mov
add
xchg
mov
stos
shrl
test
mov
sub
sub
fwait
subl
adc
mov
(bad)  
ss
xchg
jno
cmpsl
xor
xor
decl
decl
lcall
les
pop
inc
xor
inc
int
(bad)  
pop
xchg
mov
or
add
clc    
aam
inc
repz mov
scas
clc    
test
dec
and
cltd   
xor
sub
test
sbb
cmpsb
ja
popa   
or
(bad)  
idiv
jp
leave  
sbb
xor
inc
and
xchg
ljmp
bound
addr16 mov
imul
dec
xchg
mov
lea
sbb
jns
xor
lret
(bad)  
(bad)  
cld    
cmc    
cmpsb
push
enter
push
ljmp
cmp
sbb
ret    
push
inc
sahf   
inc
notb
xchg
int
pop
lahf   
adc
mov
or
add
test
push
fnop   
sub
xchg
cmp
mov
mov
sti    
cmp
adc
loopne
ffree
mov
(bad)  
gs ret
adc
jecxz
jecxz
in
sbb
fsubrl
mov
dec
shll
int3   
mov
lret   
fdivl
mov
idivb
mov
adc
mov
xchg
ret    
dec
shlb
mov
andl
push
pop
cmpsb
pusha  
popf   
xor
ds dec
(bad)  
repz arpl
icebp  
ret    
loop
lods
pop
inc
insb
fcompl
lock and
add
(bad)
sub
sub
negl
cmovb
pop
cmp
jnp
rcrb
push
movsl
sub
ds enter
adc
int
arpl
scas
sub
stos
xlat
cmpsl
cmc    
dec
inc
xor
fdivl
inc
sarb
push
dec
fldl
and
enter
daa    
or
lds
ret    
xchg
mov
add
mov
xchg
mov
flds
(bad)  
push
mov
and
and
in
mov
fildll
jnp
mov
(bad)  
(bad)  
insl
dec
imul
xchg
push
test
inc
aaa    
inc
add
mov
pop
pop
cltd   
mov
mov
insl
sbb
divb
iret   
xor
daa    
insl
cmp
push
int
jne
pop
jb
xor
mov
or
inc
mov
lock and
lock
mov
inc
repz fldl2e 
add
push
lea
shrl
or
lock push
mov
sti    
jge
mov
push
pop
es mov
not
dec
inc
xchg
push
adc
aas    
popf   
mov
int
xor
add
mov
jo
sbb
sub
imul
mov
mov
mov
adc
movl
add
in
fwait
sbb
lea
orl
faddl
(bad)  
cmpsb
sub
cmc    
mov
jae
or
shrl
data16 rcrb
mov
cmpsl
testb
lds
cs mov
mov
inc
sub
sbb
dec
dec
stos
std    
dec
cmpsb
push
adc
je
xor
push
mov
jp
jne
fsubrs
shufps
and
xorb
or
and
add
into   
and
sbb
insl
ret    
call
outsb
or
sub
mov
cmpsl
lahf   
push
inc
cs mov
dec
cmp
stos
push
cmpsl
inc
or
jl
inc
imul
out
jp
cmp
lods
or
xchg
inc
mov
xchg
xchg
and
push
mov
adc
xchg
cmp
mov
pop
mov
add
xchg
loop
aam
ljmp
mov
push
jnp
push
or
sarl
or
jl
lods
push
int3   
cltd   
push
jns
xchg
insb
aas    
pushf  
stc    
(bad)  
dec
dec
(bad)  
loop
notb
gs mov
adc
fbld
or
xor
lret
(bad)
inc
push
mov
mov
mov
jl
add
xchg
and
adc
movntq
clc    
adc
xchg
pop
mov
lahf   
xor
mov
sbb
mov
adc
mov
push
dec
je
pop
jl
pop
mov
fsubrs
call
pop
rorb
arpl
bound
inc
mov
push
test
leave  
push
xchg
or
push
cltd   
faddl
repz cmpsb
mov
or
mov
mov
mov
cmp
push
ret
nop
jl
xor
add
aad
test
mov
sub
mov
sub
mov
mov
rcrb
or
xorl
addl
jns
xlat
clc    
lods
push
jbe
mov
fnstcw
add
sbb
jle
dec
sbb
push
test
mov
mov
mov
aaa    
mov
jnp
iret   
jmp
les
ja
push
xchg
sub
mov
mov
(bad)  
push
jg
cli    
stos
pop
mov
dec
fs
outsb
clc    
shrl
mov
jmp
(bad)  
or
ss ja
imul
adc
xchg
cmp
sbb
mov
jns
or
(bad)  
dec
fsubl
(bad)  
jb
pushf  
push
add
dec
in
xchg
cmp
jns
add
pusha  
mov
mov
add
cmc    
es insb
mov
mov
cmp
inc
fisubl
ds xchg
inc
cwtl   
mov
dec
cmp
enter
fisubr
rcr
pop
xchg
mov
cmp
push
and
repz cmp
sbb
adc
ret
andl
jecxz
es mov
pop
push
jmp
(bad)  
sub
(bad)  
adc
(bad)  
xor
inc
cmp
mov
popf   
(bad)  
jae
or
mov
inc
or
mov
add
dec
xchg
mov
or
pusha  
mov
int
push
outsb
(bad)  
push
xchg
dec
cmpsl
into   
clc    
dec
pop
push
jnp
or
ds adc
xchg
ret    
or
mov
add
imul
js
cmpl
pushf  
aas    
jns
sbb
cmp
out
ret
fstp
cltd   
js
add
xchg
(bad)  
lock test
repnz dec
les
xor
cwtl   
mov
pop
push
inc
jmp
mov
lods
cli    
inc
lds
out
cld    
repz and
sbb
mov
sti    
movsb
xor
loop
mov
cmc    
subb
xor
leave  
(bad)  
mov
xor
mov
mov
cltd   
out
adc
repnz mov
push
jbe
jmp
push
ret    
xor
and
not
loop
fcoml
out
pop
scas
cmp
lock add
xchg
dec
cwtl   
pushf  
sub
mov
xor
dec
adc
in
push
in
mov
imul
in
lea
push
vsubsd
outsl
inc
imul
scas
lret
pop
sbbl
sbb
stos
push
push
lahf   
andl
sbb
les
stos
das    
xchg
(bad)  
fsubl
cmp
(bad)  
cmp
xchg
std    
scas
clc    
sbb
les
sub
pusha  
mov
dec
sbb
mov
(bad)  
jp
orl
cmp
push
push
sub
xor
test
pop
pop
mov
cmp
push
add
ss xchg
ja
pop
jl
lahf   
push
push
cwtl   
or
jp
clc    
adc
mov
mov
cmp
pop
jl
xlat
cmp
imul
inc
aad
divl
and
push
ss jnp
idiv
out
push
adc
pop
icebp  
pusha  
xor
dec
jnp
bound
jl
push
scas
cli    
or
lock ljmp
xchg
pop
xchg
jns
into   
popa   
sub
pop
popf   
sub
pop
imul
out
jbe
test
addl
and
xor
(bad)
add
add
iret   
xchg
push
cs test
(bad)  
shll
xchg
rorb
or
cwtl   
clc    
test
(bad)  
movsl
push
jle
gs shl
pop
pop
mov
(bad)  
mov
or
lods
mov
cmp
add
cmp
mov
enter
or
push
adc
inc
(bad)  
test
addl
sarl
cli    
mov
ret
test
outsb
cmp
dec
sub
iret   
int
outsb
int3   
andl
inc
repz add
adc
sbb
dec
ja
mov
popl
call
push
(bad)
aam
xchg
inc
gs jecxz
xchg
inc
xor
push
mov
(bad)  
cmc    
mov
addr16 push
les
test
cli    
xchg
jle
xor
fisubrl
jle
xchg
std    
scas
add
push
ljmp
pop
jg
aas    
mov
add
pop
cmp
xchg
les
into   
cmp
movsl
sarb
in
(bad)  
repz inc
lretw
sbb
daa    
inc
pop
lea
out
nop/reserved
xchg
add
dec
out
jae
push
jne
test
outsb
adc
ljmp
xchg
push
popf   
fdivs
pop
dec
xchg
mov
jns
adc
ds inc
lock lret
clc    
repz mov
xlat
dec
jb
aam
dec
cmp
fist
jno
or
mov
inc
cs
mov
ret
cmp
mov
sbb
clc    
push
cmpsl
mov
pop
xor
lea
imulb
fnstsw
sub
push
add
mov
cltd   
movsl
test
in
in
shr
push
stc    
out
xor
add
sbb
(bad)
mov
mov
push
pusha  
push
pop
push
cwtl   
pop
inc
add
stos
mov
into   
addr16 into 
lahf   
mov
sbb
shrb
adc
(bad)  
or
daa    
mov
arpl
jno
mov
cmp
(bad)  
xor
sub
and
mov
xor
lock lods
out
out
lret
fs ja
xchg
mov
lods
add
mov
push
rcll
or
mov
pop
jno
mov
leave  
inc
es jecxz
mov
cmpsl
mov
xor
xor
mov
loop
ficompl
adc
adc
mov
lahf   
xchg
repz xchg
mov
add
ret
in
sbb
nop
cmp
stos
or
sbb
(bad)  
dec
mov
mov
int
shl
int3   
ds push
data16 sub
xor
xchg
xchg
xor
adc
into   
outsl
incb
lret   
outsl
idivl
or
idivl
sub
inc
cmp
mov
enter
in
jmp
or
rol
jmp
adc
sahf   
out
xor
popa   
mov
push
lret   
xor
outsl
mov
pop
divl
ftst   
repz push
test
jne
ret    
sbb
imul
out
or
dec
cmp
sub
inc
push
adc
repz add
addr16 ret 
pushf  
jge
push
into   
movsl
jae
stos
rclb
or
mov
in
icebp  
test
add
mov
dec
test
aaa    
(bad)  
popa   
in
cmp
xor
in
int3   
pusha  
push
je
sub
or
pop
sbb
push
aaa    
cmp
cmp
shlb
out
mov
jns
insb
(bad)  
pushf  
mov
std    
sahf   
xor
push
jg
sti    
inc
cmp
sbb
pop
add
inc
addr16 mov
sbb
mov
jg,pn
inc
cwtl   
mov
xor
sub
inc
test
sbbb
xchg
lods
xchg
pop
popa   
add
push
add
mov
push
jae
(bad)  
stos
sbb
in
sahf   
ret    
jns
xlat
jg
dec
nop
clc    
call
js
and
jg
xor
(bad)  
adc
or
rcr
out
xor
adc
in
xchg
daa    
test
(bad)  
cmp
or
sub
inc
cmp
mov
sbb
ds xchg
sub
sahf   
add
sub
mov
imul
es stos
xlat
push
push
pop
movsb
cli    
pushf  
xchg
xlat
pop
aaa    
aad
test
in
or
mov
popa   
fcmovnu
cmc    
fdivrl
add
das    
adc
or
xchg
sub
push
(bad)  
mov
in
stos
adc
fdiv
push
or
cmp
and
nop
adc
mov
xchg
fcmovnu
test
pop
testl
rorl
cltd   
in
aaa    
mov
aas    
out
loop
jmp
push
lock jb
cld    
fucom
addr16 int3 
loope
sub
add
lret
gs int3 
sbb
sub
je
arpl
add
cwtl   
insb
sbb
xchg
sahf   
add
dec
dec
aas    
(bad)  
push
fldcw
(bad)  
in
add
xlat
lret   
aaa    
xor
xorb
push
add
push
imul
xor
xchg
and
xchg
xlat
lret   
mov
xlat
cli    
jno
xor
add
pop
jmp
inc
xor
imul
xchg
sub
adc
out
ds ret
sbb
bnd jle
mov
leave  
rorl
xor
ret
arpl
lret   
or
pushf  
test
add
pusha  
pop
push
insl
push
ret
nop
mov
aad
mov
outsl
in
jg
ffree
(bad)  
dec
adc
jl
out
push
(bad)  
jne
pop
std    
xchg
scas
pushf  
cwtl   
test
(bad)  
pop
jo
jp
mov
jg
std    
cmp
jns
out
xor
sub
(bad)
test
add
or
in
sub
cmpsb
xor
adc
daa    
(bad)  
jb
add
mov
and
or
test
(bad)  
icebp  
push
ret
mull
(bad)  
lea
dec
pusha  
jb
mov
mov
popf   
rep movsb
stc    
aas    
in
scas
je
adc
push
fs push
sbb
mov
push
scas
jl
(bad)  
sbb
(bad)  
enter
xchg
(bad)  
mov
xchg
test
or
fwait
icebp  
jno
mov
jns
add
sahf   
cmp
sbb
mov
push
cs das 
ljmp
repz mov
int3   
adc
insl
cld    
out
enter
addl
cmp
dec
pop
(bad)  
rclb
sarl
stos
and
test
out
imull
mov
daa    
add
fidiv
cmpsl
push
inc
dec
fdivr
mov
pop
int
push
push
mov
or
dec
mov
and
je
std    
aam
push
or
dec
jo
loope
mov
dec
fcoms
test
jp
jbe
sbb
push
cltd   
ret    
and
lds
dec
std    
iret   
and
fnstcw
or
push
inc
inc
es mov
xor
movsb
rclb
(bad)  
test
cmp
outsb
hlt    
std    
ret
push
pop
jge
aam
(bad)  
scas
(bad)  
sbb
or
xor
dec
mov
js
and
pop
repnz push
or
sbb
(bad)  
loope
sahf   
sub
mov
ds
not
idivl
rolb
lret
loope
adc
mov
lcall
aaa    
dec
call
add
add
dec
inc
dec
inc
scas
inc
pusha  
(bad)  
or
add
add
(bad)  
(bad)  
(bad)  
incl
add
add
add
add
add
add
jns
je
insl
cs inc
jb
ja
outsb
addr16 sub
push
gs jb
imul
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
xor
data16 aaa 
xor
fs xor
add
adc
gs insl
cs inc
jb
ja
outsb
addr16 cs inc
imul
add
popa   
je
pop
add
add
add
add
add
lsl
add
jno
add
add
or
or
add
or
add
add
add
dec
or
add
add
(bad)  
and
add
add
inc
dec
inc
add
mov
or
popa   
add
jo
pop
jae
add
ret    
add
push
ret    
add
outsl
test
add
cmp
push
push
test
lret
sbb
inc
daa    
in
sbb
mov
pop
mov
les
repnz xchg
mov
out
or
stc    
inc
inc
pusha  
daa    
nop
pop
jbe
sbb
cmp
push
add
pop
leave  
jg
scas
(bad)  
adc
mov
(bad)  
push
icebp  
push
jge
add
xorb
xchg
mov
mov
popa   
(bad)  
dec
and
je
inc
rclb
fisttpll
xorb
std    
dec
inc
mov
mov
xor
dec
sahf   
cmc    
cwtl   
(bad)  
jl
fsubrs
cli    
dec
rorb
(bad)  
(bad)  
out
jae
lahf   
sbb
jl
out
jg
push
cwtl   
ja
popf   
cmp
dec
jecxz
jne
test
cmp
pop
mov
mov
add
fiadd
lcall
cli    
dec
adc
out
testl
fwait
xchg
fidivrl
fild
popf   
mov
add
mov
push
xchg
mov
adc
xchg
mov
outsb
push
jecxz
mov
jg
inc
pop
lret   
mov
xchg
repz pop
nop
test
(bad)  
mull
push
cmp
xchg
xchg
lahf   
push
das    
pop
enter
pop
ffreep
cltd   
shrl
insl
popa   
push
xchg
inc
popf   
dec
adcl
xchg
icebp  
stc    
aad
cmp
add
adc
xor
ret    
push
jle
test
das    
std    
and
hlt    
mov
inc
call
adc
fs inc
aad
popa   
pop
pop
mov
out
lahf   
cmp
push
inc
or
aaa    
cmp
test
fsubl
sub
inc
nop
mov
addr16 sbb
(bad)  
jbe
(bad)  {%k1}
pop
insl
nop
and
push
add
(bad)  
repz fisubr
(bad)  
xchg
add
pushf  
addr16 cld 
loope
dec
pusha  
lea
(bad)
mov
sub
(bad)  
out
into   
push
test
in
gs dec
mov
das    
cmp
int
gs mov
jo
dec
outsl
mov
jne
ja
or
xchg
lea
xor
in
add
cwtl   
imul
adc
mov
sbb
pop
lds
xorl
movsl
aam
or
test
add
in
mov
(bad)  
mov
push
xchg
pushf  
js
test
pop
mov
popf   
push
or
movsb
repz or
lods
add
(bad)  
and
add
push
xchg
insl
in
sub
(bad)  
cmp
and
pop
lea
test
mov
(bad)  
cmp
jmp
fwait
mov
iret   
xchg
mov
adc
into   
mov
or
icebp  
(bad)  
(bad)  
mov
(bad)  
jnp
jmp
jb
in
inc
gs jecxz
cmp
iret   
insl
or
fsub
movsb
enter
testl
rolb
fist
inc
mov
in
clc    
test
push
dec
xchg
ds fucomip
aam
xchg
into   
sub
fs out
xor
(bad)  
fs in
rclb
test
insl
gs mov
nop
xchg
sub
(bad)  
xor
xor
mov
sbb
ja
lds
pushf  
adc
push
arpl
dec
sub
repz test
sbb
jle
mov
push
jge
fcoms
xor
push
pop
je
out
roll
pop
mov
adc
inc
xor
sbb
xchg
jnp
dec
mov
lock repz pusha 
rcll
ljmp
sub
and
imul
adc
sar
cmpsl
rolb
clc    
fild
iret   
(bad)  
cmp
xchg
sub
sub
data16 cmpsb
clc    
xor
loope
xchg
dec
lahf   
mov
add
out
fmull
std    
dec
or
out
aam
aam
pop
sbb
xchg
jge
test
test
push
xchg
push
js
mov
xlat
mov
mov
lahf   
xchg
add
push
mov
in
hlt    
mov
in
or
decl
lcall
adc
add
popf   
(bad)  
and
dec
xlat
mov
mov
sbb
shrb
or
mov
(bad)  
fimull
repz imulb
sbb
or
mov
test
or
addr16 cmp
push
sbb
(bad)  
xor
jp
out
pop
fimul
mov
mov
mov
inc
fsubrp
hlt    
xlat
testb
xlat
pop
mov
jg
xchg
dec
fidivl
stos
jmp
mov
pop
sub
test
ret    
jae
aam
test
outsl
xchg
jmp
sub
fiaddl
mov
aam
sbb
outsb
fs
test
daa    
lcall
mov
(bad)  
cwtl   
dec
leave  
pop
add
out
jbe
rorl
popa   
fcompl
xor
push
std    
or
inc
inc
xor
lret
enter
jl
dec
sahf   
sub
call
daa    
push
hlt    
pop
iret   
sub
(bad)  
popf   
jp
out
repnz sub
push
pop
push
std    
push
inc
(bad)  
mov
pop
lock out
aam
add
nop
lods
shll
mov
mov
aas    
push
movsl
jmp
pop
ret
cwtl   
inc
sbb
popa   
lret   
push
inc
xchg
movsb
insb
ja
xor
xor
mov
loope
mov
es aaa 
xchg
std    
dec
clc    
dec
loopne
xor
lods
enter
sbb
rcrl
dec
inc
xchg
insl
pop
enter
sub
jne
xchg
jne
pusha  
insl
push
mov
lcall
mulb
inc
mov
lret
add
(bad)  
mov
cmp
sbb
xor
jb
sub
sti    
test
movsl
xchg
aad
stc    
push
add
cmpsb
sbb
add
and
jne
pop
adc
jnp
adc
(bad)  
push
jle
add
xor
mov
add
imul
mov
mov
dec
push
cltd   
cltd   
in
fcompp 
bound
(bad)  
sti    
and
pushf  
scas
mov
jmp
pop
or
mov
(bad)  
sti    
mov
ret    
hlt    
hlt    
adc
jle
mov
add
cmp
std    
jg
or
adc
push
rol
mov
icebp  
les
sbb
js
test
xlat
leave  
or
outsb
cmc    
xchg
inc
loop
pop
pop
inc
push
add
xor
data16 jns
les
and
addr16 hlt 
mov
stos
cmp
mov
fsts
aaa    
sarl
stc    
dec
daa    
xor
xchg
and
xchg
jne
test
xor
pop
mov
scas
add
cltd   
cmpsl
out
mov
cmp
mov
leave  
rcrb
lea
push
shrl
jp
insb
ret
imul
imul
cmp
das    
rorl
fldenv
ret    
xor
cmp
(bad)
adc
cmpsb
outsl
add
mov
sbb
(bad)  
repz fisttpl
and
arpl
es sbb
sti    
or
sub
jle
js
jp
sti    
scas
out
(bad)  
incl
cltd   
xchg
mov
pop
inc
jo
add
add
add
sub
pop
mov
mov
jns
jne
mov
sbb
fildll
push
sbb
cli    
imul
sbb
cli    
pop
fmul
(bad)  
dec
outsb
xor
jge
add
pushw
(bad)  
das    
inc
push
into   
nop
gs pop
xchg
negl
int
pusha  
mov
out
mov
jecxz
movsb
mov
pop
inc
test
aam
lea
popf   
xchg
lods
sbb
roll
hlt    
fbld
push
mov
imul
jne
mov
inc
leave  
adc
lods
dec
aam
inc
fucomp
lcall
xchg
push
sbb
mov
mov
mov
es insl
sbbl
pop
xor
and
incl
xchg
cwtl   
jb
jne
repnz push
repz in
xchg
out
ds mov
xchg
imul
add
xchg
test
stos
push
je
add
fdivs
rcrb
inc
dec
cmp
test
mov
aam
add
pushf  
pushf  
xchg
xchg
(bad)  
roll
xchg
xchg
adc
sbb
sub
cltd   
xchg
jp
cld    
xchg
mov
popf   
xor
push
test
cmp
lret   
dec
(bad)  
in
lret
sbb
dec
push
dec
lret
in
fsubrs
adc
sbb
gs push
dec
xchg
daa    
orl
mov
mov
sbb
push
aaa    
xor
xor
andl
mov
cmp
sub
jl
cmpsl
sbb
out
scas
dec
popa   
lods
dec
push
js
lcall
mov
sahf   
inc
cmp
int
shl
mov
sub
jl
lods
xor
insl
data16 mov
imul
mov
or
testb
lret   
add
movsl
dec
cmpsb
adc
xchg
rcl
add
movsl
sbb
inc
sahf   
hlt    
sbb
mov
stc    
fmull
xchg
jo
mov
rcrl
push
pop
dec
pop
sbb
loop
push
mov
mov
mov
cmp
xlat
mov
add
fisubr
cmc    
and
cwtl   
push
mov
push
lcall
mov
cwtl   
je
cmp
sub
test
gs out
repnz scas
(bad)  
bnd jb
sbb
dec
adc
and
iret   
and
pop
push
jnp
sbb
movsl
fcoml
std    
js
mov
mov
mov
fsubr
and
inc
or
call
jo
and
mov
or
in
js,pt
dec
cld    
pop
sub
fistpll
sub
pop
aaa    
sbb
jmp
test
xchg
(bad)  
xchg
add
xor
int
fcmovnb
inc
bound
rcrb
(bad)  
lahf   
and
add
and
ja
mov
out
mov
dec
and
popf   
fsts
(bad)  
aad
jmp
push
pop
ds dec
and
pop
cmpsl
jle
mov
pop
push
jl
inc
dec
aas    
(bad)  
scas
out
(bad)  
mov
fwait
mov
sbb
aam
addb
movsb
jo
cmc    
iret   
scas
imul
out
mov
movsb
shlb
xchg
cmp
lock std 
push
icebp  
cltd   
repz orb
repz popa 
jg
repnz adc
mov
adc
mov
jecxz
mov
dec
stc    
mov
test
add
xchg
pop
sahf   
sub
popl
xor
clc    
pop
cltd   
xchg
test
xchg
xchg
aaa    
addr16 jp
fisttpll
dec
add
mov
ret    
jmp
lock mov
sbb
leave  
jno
mov
divl
mov
mov
in
xchg
dec
push
jle
pushl
cmpsb
lret
jg
imul
xorps
stc    
(bad)  
(bad)  
ror
mov
iret   
push
pop
mov
aad
scas
cmp
ret
ret
and
xchg
ror
ja
and
aad
(bad)  
stc    
mov
pop
push
jecxz
cmp
push
push
adc
or
repnz movsb
test
lea
lcall
les
mov
ljmp
(bad)  {%k1}
(bad)  
and
jge
sub
push
adc
jbe
sub
in
bound
inc
jns
outsb
in
add
stc    
and
adc
cli    
aad
push
jl
notl
jbe
dec
jp
or
(bad)  
jb
orl
imul
aad
jmp
jne
mov
cmc    
popf   
fidivl
mov
dec
je
ss mov
lret   
outsl
pmaxsw
xchg
repnz cmp
sub
lahf   
dec
in
adc
adc
inc
scas
xor
in
mulb
in
andb
fs clc 
and
sbb
xor
daa    
pushf  
mov
js
popa   
xchg
mov
shr
add
fnstsw
inc
xor
jbe
pop
jnp
cmp
dec
movsb
adcl
or
into   
cmpl
mov
cmp
imul
xor
dec
js
test
cwtl   
sbb
inc
rolb
dec
test
sbb
or
xor
xchg
loop
lods
mulb
and
(bad)  
and
test
pop
push
mov
jo
fwait
daa    
fldenv
push
push
dec
dec
push
enter
(bad)  
mov
insb
pop
int
cmp
inc
sub
cmp
in
les
xchg
mov
mov
inc
test
call
int3   
sub
and
daa    
mov
mov
pop
into   
jl
jo
fimul
mov
xor
pushf  
imul
xchg
dec
sbb
fmull
push
mov
aad
cmpsl
and
cli    
nop
sub
pop
push
adc
addr16 aas 
pop
(bad)  
xlat
pop
or
js
cmp
mov
fnstsw
push
jge
inc
cltd   
ret    
int
fs mov
push
cmp
pop
add
xchg
cmc    
push
cmp
lds
hlt    
pop
add
mov
cmp
mov
(bad)  
add
ds stos
cmp
(bad)  
in
pop
or
or
fcompl
dec
scas
xchg
ret
std    
das    
cmp
push
scas
les
push
(bad)  
and
mov
stos
push
xchg
dec
cmc    
mov
lods
(bad)  
(bad)  
jnp
sub
loopne
pusha  
fdivr
push
mov
movl
daa    
push
mov
loopne
cmp
lea
adc
xchg
push
loope,pn
pusha  
sbb
hlt    
(bad)  
push
and
push
cmc    
out
add
adc
xchg
call
imul
aam
ret
clc    
and
sahf   
mov
sub
push
or
pop
and
jno
cmp
rorb
lcall
jecxz,pn
and
add
xchg
sbb
aam
fsubp
das    
cmp
lock mov
pusha  
pop
int3   
jmp
loop
and
(bad)  
push
(bad)  
jecxz
clc    
inc
push
nopl
cmp
fucomi
out
sbb
push
add
stos
add
cmp
mov
and
mov
jae
pop
pop
frstor
fwait
mov
repnz or
imul
mov
mov
or
mov
bound
sbb
xlat
mov
leave  
mov
mov
imul
(bad)  
cltd   
movsl
cwtl   
and
jmp
xor
adc
pop
lock inc
mov
or
cmp
pushf  
lods
and
stc    
inc
pop
adc
cmp
inc
cmpsl
jl
sub
or
insb
or
jmp
mov
and
jmp
xchg
test
dec
lahf   
scas
mov
insb
sub
sarl
(bad)  
fcmovb
cmpsl
aad
outsl
xor
adc
add
xchg
xor
and
cwtl   
push
push
mov
add
ss int3 
ds push
mov
cmp
mov
icebp  
sbb
xor
inc
pop
rcrb
addr16 jae
or
or
mov
enter
call
mov
scas
xlat
mov
(bad)  
mov
jnp
lods
or
and
xchg
test
nop
jg
dec
and
add
stos
jl
outsl
cmp
imul
jae
dec
inc
cmp
push
adc
mov
mov
xor
inc
mov
(bad)  
test
xor
(bad)  
xor
sbb
sub
and
movsl
mov
inc
iret   
add
sub
xor
lods
inc
or
sub
jecxz
pop
sub
test
adc
lds
jle
je
pop
repnz int3 
imul
lds
mov
cmp
pop
pushf  
loop
xchg
hlt    
push
or
je
jg
lds
aam
cmp
xchg
test
and
and
(bad)  
xor
frndint 
pop
dec
sub
adc
nop
sub
cmp
xchg
push
mov
push
dec
push
sbb
pop
mov
and
pop
js
xor
push
js
jge
(bad)  
mov
xchg
lock lahf 
cmpsb
mov
xorb
xchg
mov
lahf   
data16 xor
adc
mov
jge
movsl
inc
stc    
lods
fldt
cld    
(bad)  
das    
jno
add
xchg
jmp
fmuls
lock aam
pop
cmpl
mov
pushf  
mov
addr16 push
dec
outsb
pushf  
lahf   
outsl
ret    
test
sub
mov
dec
add
repz popa 
jle
mov
mov
sbbb
cmp
xor
mov
jbe
jmp
mov
inc
fdivrl
lahf   
lock leave 
repz push
loop
leave  
push
fldenv
jg
mov
sete
roll
test
mov
nop
adc
mov
ret
mov
inc
mulb
add
sub
push
push
icebp  
mov
adc
repz sbbl
xchg
jne
rcl
cmp
push
div
inc
out
ss or
movsl
(bad)  
xchg
jge
nop
loop
int3   
xchg
inc
(bad)  {%k1}
lret
adc
lret
xchg
push
(bad)  
mov
xorb
aad
repnz mov
xor
ret    
sbb
(bad)  
lret   
test
out
dec
add
lods
inc
mov
mov
inc
jecxz
mov
and
add
out
jg
je
insl
and
or
ret    
outsl
jg
es push
movsb
xorps
mov
lahf   
movsl
repz jp,pn
and
fldenv
clc    
lcall
fisttpll
dec
cmp
inc
test
loopne
inc
int
fdivrl
add
lahf   
cmp
jo
ret
fcompl
mov
xchg
add
ja
or
(bad)  
mov
mov
data16 aam
mov
outsl
push
xchg
cld    
sbb
push
addb
ja
gs xchg
xchg
xor
pop
fisub
jmp
inc
(bad)  
mov
push
hlt    
jns
xchg
jo
xchg
jmp
cmp
lret   
in
mov
push
popf   
cli    
mov
int
sbb
mov
inc
shll
and
xor
xor
stc    
jge
aam
xorl
ss cmc 
cmp
mov
jmp
(bad)  
shl
stos
inc
sbb
xor
loope
xor
out
hlt    
sub
stos
xchg
loopne
sti    
mov
cs test
movntq
sti    
ret
jb
enter
adc
pop
ret
lcall
je
jns
mov
int
cltd   
testl
loope
dec
dec
imul
mov
or
(bad)  
lock cmovne
lret   
sahf   
mov
xchg
sbb
leave  
mov
and
cmp
pushf  
(bad)  
das    
call
mov
jno
cmp
push
mov
out
stc    
and
fsubrl
nop
mov
test
dec
and
test
pop
negl
cmpsl
mov
mov
mov
es fwait
inc
shrb
imul
dec
insb
push
jecxz
xor
push
into   
lret
inc
dec
(bad)  
lods
and
pop
xor
mov
(bad)  
push
fwait
in
adc
adc
mov
lods
insl
movsl
or
push
jb
(bad)  
imul
fildll
pop
(bad)  
clc    
lods
lret   
das    
sub
mov
push
xor
dec
jg
mov
into   
jge
ret
mov
in
adc
adc
gs in
inc
dec
or
ja
mov
stc    
jecxz
rcl
fstl
or
xor
mov
mov
cmp
jae
push
cmp
push
pop
nop
pop
and
pop
cmp
xrelease mov
lahf   
jbe
pop
ffree
popa   
movl
sbb
push
jge
pop
fistpl
and
decl
ljmp
xor
cmpsl
push
sub
inc
dec
pop
xor
pushf  
xor
into   
push
mov
sbb
repz out
pop
out
xor
pop
int3   
shl
sarl
je
mov
insb
push
pop
jmp
jae
add
add
pop
sbb
into   
inc
pop
aam
ss aam
xchg
out
aam
sub
mov
ret    
hlt    
iret   
movsb
xchg
add
mov
sub
sub
das    
imul
das    
adc
jge
inc
xchg
mov
negl
gs cs out
(bad)  
insl
mov
decb
out
pop
repnz daa 
movsb
or
mov
adc
aaa    
out
jbe
call
mov
jge
fcomip
stos
aad
xchg
mov
mov
inc
sub
cmp
stos
and
cmc    
push
rol
cwtl   
adc
call
jb
fcompl
stos
movlhps
mov
xchg
mov
fwait
popf   
insl
stos
lret   
push
sbb
pushf  
cs insl
cmp
call
sti    
leave  
jae,pt
movsb
push
int3   
xor
roll
in
data16 aas 
xchg
mov
push
mov
shlb
stos
je
sbb
pop
add
sbb
pop
jne
rol
cmp
in
fsubrl
xchg
cmp
xlat
nop
cli    
outsl
and
adc
push
mov
pop
xor
(bad)  
pop
idivl
jb
mov
jecxz
push
ret
in
out
push
outsb
setle
(bad)  
(bad)  
mov
mov
pop
cmp
xorl
inc
and
es inc
xchg
mov
cld    
dec
jecxz
push
add
jb
inc
es repnz mov
add
shrl
push
test
ss xchg
lret
rorl
dec
sbb
cmpsl
inc
lahf   
mov
mov
stc    
xor
imul
mov
xchg
push
pop
lods
pop
jl
push
push
iret   
add
and
sbb
(bad)  
mov
test
sbb
lock leave 
out
mulb
adc
gs inc
lcall
sub
lock repnz popa 
push
xor
mov
fimul
fist
xchg
inc
rclb
mov
push
inc
and
and
ret
lds
add
inc
pushf  
fs mov
push
dec
mov
gs nop
(bad)  
out
mov
mov
mov
cmp
call
decb
mov
lods
fs jg
(bad)  
(bad)
mov
jae
inc
dec
test
inc
sub
insl
(bad)  
sub
out
fucomi
and
cs push
imul
cmp
or
jle
push
sub
loopne
ficom
xchg
lds
or
inc
inc
cmp
scas
nop
clc    
loopne
bound
ficoml
ret
sti    
sub
sub
sahf   
jl
sbb
mov
jo
add
subl
jo
and
stos
and
sbb
inc
and
xor
lods
pop
adc
jle
mov
sub
leave  
(bad)  
js
pop
add
add
sbb
add
jb
push
add
jmp
insl
in
inc
cltd   
je
xor
jecxz
mov
add
dec
dec
jl
mov
jns
test
add
add
mov
cmpsl
mov
mov
lret
xor
cmpsb
jmp
add
test
repz xor
cli    
cs dec
add
(bad)  
or
xor
lds
inc
cmove
pushf  
fidivrl
mov
lahf   
jp
cmp
rclb
cwtl   
push
cltd   
js
or
inc
push
sub
ja
inc
imul
mov
adc
jnp
popf   
lahf   
pop
rolb
mov
idivb
xchg
aas    
cmp
(bad)  
and
stos
adc
jge
pop
je
mov
stos
out
dec
mov
cmp
aad
mov
mov
cli    
mov
dec
ret    
adc
xchg
je
xor
pop
(bad)  
iret   
movsl
pushf  
xchg
test
xchg
in
adc
daa    
sbb
mov
loop
xchg
push
mov
lds
jnp
in
sub
(bad)  
fcomip
clc    
iret   
dec
push
xor
jmp
aaa    
lahf   
mov
inc
shlb
sbb
loop
cmp
in
(bad)  
cmp
stc    
mov
adc
ja
arpl
mov
idivl
cmp
loop
lods
sbb
or
add
out
and
mov
mov
or
add
test
mov
inc
cmp
out
fnstsw
cmp
and
fcompl
cltd   
or
test
lret
in
int3   
mov
pop
mov
xchg
pop
adc
mov
mov
xor
lret
ss jno
pop
out
fidivl
sub
icebp  
pop
ret    
testl
enter
int
xor
cmpsl
mov
mov
addr16 in
popa   
jno
out
push
inc
jns
hlt    
loop
cmc    
mov
nop
ror
sbb
or
out
xchg
(bad)  
cmpsl
dec
xor
xor
mov
bound
mov
pop
dec
enter
jo
ds test
sbb
inc
repnz addb
(bad)  
xor
add
and
(bad)  
dec
(bad)  
or
add
mov
adc
xor
arpl
adc
test
mov
xchg
faddl
jns
fsubrl
lret
ret    
sti    
cmp
xchg
mov
jnp
cmp
mov
daa    
fadds
sub
pop
jns
rolb
xlat
sbb
das    
into   
push
das    
and
loopne
mov
cmpsb
mov
sub
movb
test
mov
mov
outsl
adc
cmpsl
mov
in
jb
(bad)  
fs mov
mov
sub
into   
movsb
jno
inc
pop
stos
xchg
pusha  
push
jnp
pop
jle
scas
xchg
jmp
stos
mov
enter
and
out
pop
fmulp
cmpsb
add
jg
fs ss out
pop
adc
iret   
push
decb
mov
ss pop
jb
imul
dec
(bad)  
jo
nop
mov
ret
leave  
jmp
xor
(bad)  
jno
ror
add
jbe
mov
push
popa   
jno
hlt    
pop
loopne
xor
xchg
mov
pop
fdivrs
fs mov
cmc    
dec
dec
imul
adc
xchg
adc
int3   
in
test
sarb
mov
loopne
cmpsl
sbb
jne
mov
and
fs loopne
or
mov
mov
int3   
lcall
fs or
or
insl
mov
testb
jnp
div
jmp
in
xchg
mov
cmc    
jb
and
cmp
ds scas
fmuls
aaa    
mov
xchg
or
cwtl   
add
adc
gs
ds sbb
dec
xchg
out
(bad)  
repz dec
mov
stos
aaa    
dec
imul
inc
mov
pop
mov
or
jae
mov
xor
aaa    
test
shll
mov
add
xchg
mov
mov
into   
inc
or
std    
cmc    
dec
pop
jge
jae
scas
mov
jp
cmp
xor
add
pushl
jp
aad
loopne
pusha  
mov
out
das    
clc    
sub
(bad)  
xchg
(bad)  
add
or
sbb
mov
test
iret   
hlt    
jno
arpl
clc    
shrl
cmc    
jns
pop
mov
movsb
punpckhbw
pop
mov
mov
jo
xchg
and
ror
fimull
out
rolb
xchg
sub
jp
sub
push
inc
lock jge
lock or
stos
push
aas    
cmp
pop
mov
sbb
and
or
xor
imul
push
jne
jmp
aam
cmc    
stc    
das    
ja
ret    
dec
sbb
scas
(bad)  
jne
mov
add
add
xchg
les
mov
aas    
xor
push
sbb
rcrb
pop
movsb
stc    
cmpsl
lea
push
push
les
adc
ss and
cmp
out
das    
(bad)  
and
fidivr
mov
jno
loopne
pop
shlb
ret    
idivl
enter
inc
mov
stos
xchg
cld    
push
jbe,pn
and
or
xor
ret
mov
das    
xchg
in
cwtl   
lods
inc
negb
(bad)
stos
dec
ret
out
shl
xchg
jnp
xchg
cmp
out
icebp  
outsb
push
sbb
mov
jle
dec
cmp
xchg
hlt    
inc
pop
sbb
sub
insb
outsl
adc
mov
in
lods
mov
jle
adc
mov
(bad)  
sub
or
ljmp
stos
mul
lds
repz in
test
sbb
xor
xchg
lahf   
lods
inc
(bad)  
xor
xor
add
adc
push
out
(bad)  
paddd
pop
mov
gs push
mov
and
(bad)
fwait
out
mov
imul
shrl
inc
xor
jno
and
mov
lea
push
mov
dec
loopne
rdtsc  
push
lahf   
and
(bad)  
push
std    
fnstcw
bound
inc
pop
out
test
xor
xchg
pop
cltd   
jge
aad
mov
jg
push
call
cmpsl
dec
or
lds
or
mov
daa    
cmpsb
ds
pusha  
popa   
lahf   
add
push
mov
push
sbbl
mov
sbbb
movsb
ret
es dec
cltd   
pop
add
in
xchg
xchg
jmp
nop
(bad)  
(bad)  
lahf   
enter
or
xchg
pop
jbe
mov
lods
xor
mov
inc
shll
(bad)  
jmp
arpl
and
mov
aam
xchg
(bad)  
repnz add
inc
cltd   
imul
push
fstpt
cwtl   
xor
jl
adc
movsb
test
pop
out
sub
(bad)  
je
and
pop
cmpsl
inc
jbe
out
out
jb
push
gs xchg
test
mov
mov
xchg
ljmp
pushf  
dec
inc
cmp
or
sbbl
std    
cmp
(bad)  
call
sahf   
pop
fbld
xchg
(bad)  
in
xchg
imul
mov
and
xor
push
mov
jle
jg
sti    
fisttpl
(bad)  
stos
mov
fimull
inc
sub
inc
inc
(bad)  
testb
cli    
fdivs
test
fiaddl
adc
add
jecxz
fldl
add
imul
xor
adc
fsts
ja
popa   
xchg
fildl
imul
(bad)  
cmp
jbe
and
ret
ss sub
or
xchg
lods
aam
outsb
inc
fcomps
idivb
pop
in
xor
mov
mov
sub
xor
test
inc
adc
out
outsl
jo
mov
xlat
ss ljmp
fnstsw
jns
jecxz
push
pusha  
mov
push
ficompl
cmp
dec
xchg
(bad)  
in
pusha  
push
lcall
lcall
iret   
mov
dec
push
push
movsb
and
int3   
cmp
push
dec
jmp
std    
out
bound
mov
pop
add
push
test
stos
push
mov
arpl
cmc    
adc
enter
push
aaa    
outsb
add
push
test
pushl
faddl
insl
aaa    
arpl
mov
cmp
inc
cmp
sbb
mov
fisttp
jge
jle
or
mov
and
jp
cmp
fidivl
xchg
daa    
cmp
sbb
inc
mov
inc
pop
push
xchg
or
and
insl
xchg
mov
js
fidivrl
std    
(bad)  
icebp  
mov
pushf  
push
push
adc
mov
pop
pop
gs aas 
ds pop
or
jnp
push
data16 mov
sbb
or
test
mov
inc
nop
in
fisubr
push
(bad)  
pop
aas    
je
outsl
imul
add
dec
xchg
dec
cmp
or
fucomp
outsl
pop
add
roll
addb
inc
aad
xorb
mov
fnstenv
(bad)  
cmp
test
cmp
xor
xchg
jecxz
insl
mov
test
push
je
ljmp
dec
mov
cmp
lret   
mov
nop
mov
cmc    
or
jne
and
neg
enter
hlt    
push
pop
xor
pop
popa   
adc
fimul
(bad)  
outsb
shl
push
popa   
jns
jg
pop
push
jmp
xchg
or
sbb
push
push
sub
push
inc
stos
push
jl
sbb
imul
cmp
cmpsl
jne
sub
or
scas
xchg
mov
ret
lcall
push
cli    
adc
and
jge
mov
lcall
rcrl
pop
aad
xor
mov
add
add
leave  
cld    
jae
ljmp
(bad)  
xor
stc    
mov
adc
pop
dec
dec
out
das    
(bad)  
inc
mov
cld    
push
inc
mov
pop
push
mov
out
add
mov
loope
rorl
jge
inc
leave  
mov
pop
jmp
xchg
jne
mov
stos
jecxz
movsb
std    
cmp
cmp
scas
inc
sahf   
sahf   
pusha  
lret
les
sub
(bad)  
mov
ffreep
shrb
sub
push
in
push
push
add
mov
inc
push
test
jne
mov
bound
pop
jae
inc
adc
popa   
out
fwait
mov
das    
loop
push
lcall
pop
ljmp
ss adc
push
xor
push
movsb
das    
mov
and
imul
and
push
(bad)  {%k1}
(bad)
aad
ljmp
cli    
pop
mov
sbb
sbb
adc
xor
sub
xor
jmp
roll
icebp  
lock jge
test
idivb
push
inc
repnz rclb
inc
stos
fdivrl
lret   
push
das    
and
outsb
sbb
insb
mov
jae
sub
push
mov
imul
sub
cld    
sti    
fst
dec
shrb
dec
jle
mov
notb
(bad)  
imul
imul
fcoms
in
and
mov
out
sti    
aaa    
sbb
and
aaa    
mov
pop
push
dec
push
rorb
sub
outsl
outsb
sub
jbe
push
sub
or
flds
lock adc
popa   
push
and
sbb
subl
jne
push
add
mov
jo
mov
out
out
loope
ljmp
inc
pop
(bad)  {%k1}
enter
push
test
mov
and
cmp
pop
xchg
pop
push
sbb
sbb
sti    
dec
pop
jno
es call
enter
imul
or
cmp
sub
pop
inc
push
popf   
push
mov
xor
sarl
popl
(bad)  
mov
aad
fsubl
stos
jmp
xchg
in
push
nop
cmp
mov
xchg
jno
adc
mov
mov
test
rorb
sub
jl
mov
sub
lret
xor
xchg
call
mov
cmp
(bad)  
aaa    
fildll
fist
int3   
into   
mov
mov
sbb
cli    
push
cmp
or
mov
bound
fs test
inc
repz jo
pop
add
push
ds aaa 
or
scas
in
push
or
adc
or
scas
cmpsl
mov
sbb
stos
leave  
int3   
sub
xor
cmp
cmc    
jmp
(bad)  
inc
xor
arpl
cwtl   
mov
call
sub
dec
fwait
sbb
fistp
cmpsb
inc
rcrb
mov
mov
push
lods
hlt    
cli    
insl
scas
out
cmpsl
mov
add
xchg
pushf  
inc
rcrb
(bad)  
testl
hlt    
and
lods
add
push
mov
push
out
mov
xor
out
dec
cli    
in
dec
dec
add
call
pop
and
inc
and
je
pusha  
xchg
mov
inc
int3   
sbb
cmp
les
push
mov
inc
mov
pop
cmp
loop
jae
rorl
shlb
fyl2x  
push
stc    
adc
push
bnd jmp
call
jae
lahf   
jmp
mov
addr16 dec
mov
add
lock mov
jnp
push
out
mov
ja
or
fs inc
sub
fstpl
fwait
dec
ret
out
push
jbe
jecxz
shrl
sbb
add
add
ss dec
lret
xchg
leave  
out
inc
push
popf   
jo
int3   
mov
cmp
cmp
insb
lcall
push
add
mov
sub
das    
pop
rcrl
popf   
rcrl
dec
xchg
movsb
addr16 jmp
inc
push
mov
fnop   
add
push
(bad)  {%k1}
loopne
xchg
icebp  
outsl
sbb
loopne
(bad)  
xchg
push
in
cmpsl
lds
xchg
sub
insl
fldl
nop
cmp
ljmp
sbb
les
push
push
cmp
adc
xchg
inc
cltd   
and
out
sbb
sbb
mov
loopne
(bad)  
and
arpl
inc
add
inc
roll
sti    
xchg
inc
cmp
stc    
(bad)  
jmp
mov
loop
sub
jle
add
movsl
jae
mov
daa    
xor
pop
enter
idivb
dec
or
sub
mov
inc
mov
sbb
pop
xlat
pop
(bad)  
dec
sti    
sub
popa   
fbstp
inc
cltd   
add
push
cmpsl
leave  
jmp
lods
and
dec
sbb
fistp
cld    
iret   
(bad)  
mov
inc
bound
loop
dec
jge
add
dec
(bad)  
jge
xor
shlb
int3   
add
out
jmp
adc
sbb
lods
cwtl   
mov
pushf  
call
pushl
outsl
outsl
mov
mov
test
xchg
mov
es jle
adc
sub
or
pop
ret
mov
subb
fsts
(bad)  
mov
(bad)  
in
jle
daa    
mov
add
sbb
out
popa   
cmp
imul
xchg
mov
scas
and
(bad)  
fnstenv
dec
dec
int
sahf   
ss pushf 
lcall
push
xor
out
sbb
mov
xchg
mov
lret
cmp
pop
push
jns
loop
cmp
in
je
sub
xor
sbb
sbb
test
int
sub
adc
out
addl
push
pop
iret   
dec
stos
out
popf   
inc
mov
outsl
out
ds ds stos
pop
push
sbb
or
push
pop
add
inc
add
fnstenv
jb
test
adc
cli    
inc
mov
loope
dec
pop
push
dec
cmpsb
rolb
lret
sbb
(bad)  
jae
notl
push
jae
faddl
aam
or
sahf   
or
sbb
in
cmp
cs add
inc
pop
ds dec
into   
push
mov
insl
testl
mov
fcomi
xchg
adc
mov
fwait
int
shll
ret    
pop
pop
(bad)  
cmp
loop
pushf  
mov
dec
dec
xchg
ret
and
sar
aam
xchg
ret    
int
pop
aaa    
ret    
push
add
(bad)  
adc
js
add
mov
in
test
cmc    
dec
cmpsb
movswl
test
aad
pop
inc
add
fiadd
sub
insb
jge
mov
or
and
xor
lahf   
(bad)  
mov
xchg
or
mov
mov
pop
cld    
dec
int
aas    
mov
push
sub
gs cs out
xor
fidivl
sbb
cwtl   
jmp
push
ljmp
cmp
push
ret    
pushf  
inc
movsb
mov
xor
repz adc
mov
ljmp
jne
scas
f2xm1  
mov
sub
icebp  
add
in
dec
jg
je
pop
xchg
push
rcrb
mov
insl
jge
xor
rolb
or
stos
mov
inc
or
test
nop
arpl
add
push
mov
(bad)  
add
mov
nop
outsb
jno
aam
xchg
repnz sub
fisubl
mov
fnstcw
aad
xchg
xlat
add
jg
fsts
hlt    
insl
adc
pop
jae
fbld
bound
test
jbe
pushf  
test
dec
push
mov
mov
enter
or
bound
jo
pusha  
popl
loope
push
cmpsl
cmp
push
sbb
in
clc    
lahf   
or
mov
pop
decl
jp
and
or
aam
icebp  
cmp
lds
inc
into   
lret
and
pop
mov
les
push
out
adc
mov
aam
test
flds
or
pop
sub
shrl
mov
inc
adc
mov
jne
add
mov
ret
jb
(bad)  
fdivrl
cmp
ja
das    
jno
jge
pop
push
fildll
je
in
add
inc
or
mov
popa   
fs insl
loop
popa   
add
lcall
arpl
cmp
jp
outsb
cmpsb
in
push
dec
sahf   
jl
popa   
inc
jle
popl
mov
mov
data16 je
aam
pop
(bad)  
mov
pop
sbb
sub
(bad)  
shlb
inc
jnp
loope
stos
pop
cmp
rorl
cmpsl
test
fdivl
dec
mov
inc
jae
xor
into   
and
jae
pop
mov
sub
xchg
add
aad
mov
test
scas
lret   
jl
fstpt
sbb
fistl
test
aad
and
fadds
mov
or
pop
cmc    
dec
or
jp
xor
arpl
inc
inc
mov
xchg
sahf   
sub
lods
push
sbbl
test
or
aas    
stc    
scas
xchg
xchg
pop
lcall
rolb
jl
dec
adc
adc
mov
jb
push
adc
push
push
jmp
jnp
add
mov
dec
cmpsb
dec
sbb
push
cmp
lret
ret    
jo
sbb
inc
std    
cmp
fbld
mov
xor
add
rcrl
mov
or
fsubs
or
repz mov
dec
jo
mov
inc
push
sub
movsl
sar
addl
inc
xor
pop
jmp
scas
insl
jns
lahf   
fwait
mov
roll
xor
lods
pop
pop
insb
leave  
mov
cmpsl
xor
add
sub
je
rorl
adc
sbb
sbb
lahf   
mov
or
add
xchg
scas
mov
vmread
mov
das    
mov
push
mov
outsl
adc
stos
sbb
pop
test
(bad)  
in
mov
inc
dec
dec
dec
push
push
gs jmp
jmp
lods
xor
ss out
jmp
sub
pop
in
cmpsl
test
sub
js
cmc    
jge
rcrl
mov
outsl
adc
icebp  
insl
xchg
push
std    
lret
dec
mov
mov
adc
sti    
es ds das 
inc
in
jp
fsubl
add
inc
jae
push
xlat
xchg
inc
adc
in
mov
xchg
in
and
ss inc
sahf   
aam
movsl
cs test
lret
nop
test
popa   
pop
pop
sti    
fnstsw
jg
sbbl
flds
stos
nop
xchg
add
je
in
shll
(bad)  
push
adc
mov
sub
ret    
xor
jp
and
cmp
mov
addr16 out
sbb
sub
sub
enter
mov
pusha  
pop
test
test
add
mov
movsbl
cmc    
aaa    
pop
outsb
xchg
dec
lock pushf 
lock aad
loopne
xchg
sbb
loopne
(bad)
jg
arpl
or
call
into   
(bad)  
jnp
xchg
xchg
fisttp
fwait
addr16 push
lea
xchg
jne
or
mov
pop
dec
add
xor
cmpsb
mov
inc
sbb
xchg
xor
shrb
push
and
insl
test
and
scas
sub
stc    
xchg
fs or
dec
call
mov
pusha  
mov
aad
xchg
aad
into   
add
fs xchg
jbe
add
pop
lret
jmp
mov
mov
jg
mov
(bad)  
iret   
mov
aaa    
mov
adc
or
test
adc
cmp
cld    
in
pop
and
cmp
cs or
in
add
clc    
shl
jl
dec
scas
inc
or
and
mov
and
lods
lea
push
jg
mov
push
hlt    
aad
movsb
int3   
inc
jns
sub
push
iret   
cmpsl
xor
lea
sbb
sub
ja
mov
dec
cs inc
mov
stos
pop
fstps
mov
pop
fidiv
mov
je
pop
in
fadds
jae
push
repnz add
scas
pop
sahf   
nop
je,pn
jo
sahf   
(bad)  
iret   
pop
pop
dec
in
xlat
(bad)  
jge
rcrl
fildl
mov
(bad)  
fdivs
xor
in
leave  
xchg
sbb
(bad)  
push
sarl
je
mov
push
data16 jb
outsl
loop
sbb
sub
fdivp
(bad)  
add
jle
(bad)  
insb
ret    
sub
cmp
fcomps
dec
or
nop
hlt    
aad
lods
jnp
test
inc
sbbb
aas    
inc
and
pop
cs inc
cmpsb
mov
test
and
mov
repz aam
(bad)  
lods
lods
or
in
add
push
shrl
aad
(bad)  
push
je
pop
std    
int
addr16 pop
das    
lret
out
add
mov
pop
push
dec
adc
mov
inc
xchg
xchg
inc
fldcw
jb
ds or
mov
aad
pop
sbb
repz inc
out
stc    
gs and
and
pop
lea
lahf   
bound
repnz test
jmp
jno
cmp
loop
(bad)  
push
lcall
jno
sub
adc
sbb
jecxz
dec
mov
xchg
int3   
insl
test
jp
xchg
mov
into   
mov
cmp
ret
das    
push
loopne
cmpsl
add
and
faddl
and
std    
rcrl
pop
aas    
pusha  
push
mov
arpl
int
(bad)  
mov
jl
(bad)  
icebp  
add
adc
pop
test
les
add
iret   
ss js
imul
inc
cmp
mov
rorl
int3   
dec
push
(bad)  
sbb
adc
push
incl
sbb
mov
dec
dec
push
dec
xchg
adc
mov
fbld
push
js
fisttpl
jae
into   
in
ret    
sub
outsl
jbe
and
or
sub
cmp
lea
test
mov
testb
mov
cmp
pop
or
jne
xchg
jns
fbstp
outsb
mov
daa    
mov
sbb
movsl
out
popa   
jnp
dec
inc
jb
mov
cmp
lds
xlat
pop
mov
(bad)  
shrb
imul
jbe
jno
dec
aad
xchg
outsb
add
xchg
xor
sbb
and
lret
mov
movsl
add
fstpl
cmp
mov
cmc    
ljmp
xchg
sbb
jbe
dec
push
(bad)  
into   
shll
xor
(bad)  
les
xor
xchg
insl
jno
dec
or
aas    
in
fidivl
adc
sub
cmpsb
push
fwait
jl
(bad)  
pop
pop
or
mov
int3   
out
jecxz
jne
ja
ret    
subl
(bad)  
imul
negb
andl
lea
std    
lods
lods
out
fwait
shlb
aas    
(bad)
fisub
sub
or
xchg
les
ror
idiv
push
jne
push
insb
add
and
or
mov
pop
push
cli    
pop
shrl
int
xlat
(bad)  
and
loope
pop
cmpsl
loope
test
loope
sahf   
ja
dec
lock cmp
pop
dec
mov
test
mov
test
jg
packssdw
and
jecxz
cwtl   
adc
incl
aas    
insb
ficomp
sub
jae
cmp
enter
cs addr16 fwait
imul
mov
or
sti    
cmpsl
testb
push
cmc    
xor
push
mov
cmp
mov
pop
pop
push
jbe
aas    
xor
mov
sub
xchg
xor
sbb
out
mov
jecxz
add
pop
test
cs stos
mov
in
fcoml
push
xchg
jno
fldl
imul
dec
jno
insb
cmc    
jnp
sbb
leave  
xchg
and
dec
(bad)  {%k1}
(bad)  
adc
mov
mov
and
fwait
pop
into   
arpl
push
xchg
test
lods
in
leave  
mov
inc
pop
adc
push
jp,pn
inc
loop
incl
jae
xchg
fadds
mov
add
inc
sub
das    
add
in
pop
jb
imul
scas
sarb
scas
jne
pop
inc
insb
adc
pop
inc
(bad)  
(bad)  
xor
das    
adc
loopne
push
add
add
push
pushf  
mov
pushf  
aad
scas
pop
sbb
popa   
sbb
or
pop
cld    
dec
outsl
or
stc    
xchg
dec
loopne
jns
jp,pn
test
cli    
decb
mov
lea
cmc    
xchg
cltd   
add
and
mov
mov
pop
pop
lods
pushl
daa    
and
push
add
add
inc
or
pop
xor
jae
jg
outsl
pop
push
lret   
push
dec
xchg
(bad)  
js
jp
add
xor
mov
sub
popf   
mov
mov
jne
pop
jecxz
insb
jp
push
insl
(bad)  
enter
lcall
cmpsb
mov
loopne
jno
popf   
mov
mov
pushf  
in
and
mov
xor
add
in
data16 lock and
cmp
xor
xor
xor
stc    
arpl
or
out
sti    
xor
(bad)  
in
clc    
sbb
xor
aaa    
lea
mov
loope
mov
and
push
rcll
jo
xchg
aas    
outsl
mov
imul
pop
bnd jne
test
mov
dec
je
or
push
mov
out
pop
int
flds
in
js
mov
out
inc
jmp
inc
cmp
fmuls
mov
add
lods
xlat
shr
inc
clc    
fsubs
mov
imul
or
xor
push
push
mov
inc
out
mov
stos
pop
(bad)  
jge
cmp
sbb
cmp
es
and
std    
repz sbb
pop
std    
mov
sahf   
mov
xchg
and
adcl
pushf  
or
and
rcll
jp
jb
mov
adc
decb
cli    
dec
sub
outsl
add
cwtl   
inc
xchg
or
push
push
les
add
push
call
mov
xor
push
idiv
(bad)  
(bad)
mov
loop
push
mov
add
js
add
pop
add
insb
cmp
cmp
cs cmp
cmp
(bad)  
jp
xchg
pop
cmp
stos
lods
pop
or
movsb
cmp
pop
pushf  
and
pop
jl
pop
imul
lock push
fprem1 
pusha  
sbb
lret
cmp
xchg
pop
cmp
push
(bad)  
cmp
call
fsubs
mov
imul
push
xor
cmc    
inc
lds
or
lds
lea
ja
push
seta
iret   
adc
inc
ljmp
xchg
insl
pop
and
call
adc
popf   
jp
in
data16 andb
movsl
adc
push
rorl
mov
lods
rcrl
pop
or
aam
sti    
adc
cmp
push
add
push
xchg
in
fcmovnu
sbb
pushf  
jl
xor
xchg
(bad)  
cmp
pop
lods
ljmp
add
mov
mov
enter
sbb
mov
mov
loope
imul
pop
sub
jbe
out
jb
rcl
(bad)  
add
imul
dec
inc
lods
rcr
fimull
or
int
push
pushf  
sti    
loope
test
xchg
push
dec
xor
add
push
addr16 das 
lock popa 
dec
adc
test
adc
cmp
ret    
mov
add
push
fxrstor
xor
jmp
lds
popa   
push
pop
mov
aaa    
mov
adc
loop
into   
loop
pop
loop
and
jne
jno
clc    
pop
push
iret   
add
fimull
outsb
jae
mov
ljmp
enter
push
cmpsb
sub
ret    
inc
cs
out
push
paddusw
jmp
insl
insb
sub
data16 repz and
nop
incl
pop
sub
cmp
out
gs fcomp
lahf   
sbb
or
mov
lock loop
stos
fwait
jbe
xchg
jle
imulb
sub
jno
and
dec
cmpsb
pushf  
int
push
aad
ds div
out
dec
dec
pusha  
and
push
fildll
rcll
xchg
xor
sbb
dec
xchg
jge
dec
inc
sbb
ljmp
cmp
dec
out
or
push
push
mov
push
cwtl   
mov
mul
ret    
add
mov
jmp
imul
push
outsb
(bad)  
mov
or
sbb
les
jecxz
push
js
popa   
js
cld    
add
leave  
pop
mov
or
mov
inc
inc
jmp
scas
sbb
xor
(bad)  
aaa    
ljmp
xchg
dec
div
aam
xchg
out
jg
jp
lods
dec
adc
sub
or
pop
lcall
roll
jl
jmp
push
lret
mov
int3   
icebp  
je
inc
mov
jae
mov
sub
cmp
imul
iret   
pop
fisubl
dec
ja
push
rol
aaa    
or
jmp
inc
xor
jmp
mov
hlt    
sahf   
inc
lea
dec
push
mull
pop
and
arpl
mov
cmp
mov
mov
(bad)  
jae
fsubrl
xor
lahf   
js
sbb
out
enter
bound
add
(bad)  
cmp
dec
jle
add
sbb
xor
aaa    
(bad)  
movsl
jmp
outsb
pop
add
adc
sbb
arpl
(bad)  
push
xor
cmpsl
(bad)  
(bad)  
xor
xlat
inc
dec
pop
mov
push
push
addr16 clts 
xlat
jns
jmp
add
(bad)  
and
(bad)  
repnz
cli    
push
dec
lds
out
bound
es sub
mov
shrl
movsl
mov
cli    
decl
das    
mov
xor
popf   
pop
push
arpl
out
cwtl   
pusha  
lock mov
shr
outsb
pop
mov
lock mov
push
xor
push
xor
mov
xor
jae
stos
imul
fnstenv
jno
or
add
leave  
xor
cmpsb
mov
gs dec
rorb
pushf  
fdivrl
inc
and
das    
lock push
inc
mov
cwtl   
leave  
ja
les
inc
lret
mov
push
insl
cld    
inc
into   
cmp
adc
add
and
cltd   
push
adc
out
mov
imul
inc
or
and
mov
aas    
lods
adc
es pop
rorb
aam
xchg
dec
imul
rolb
lea
inc
xor
fiaddl
popa   
das    
pop
arpl
je
sbb
lods
and
test
test
push
inc
mov
lret   
push
(bad)  
fsubrs
bound
mov
(bad)
add
add
ja
xchg
(bad)  
mov
(bad)  
push
lcall
enter
jmp
jg
and
ficom
rorb
loop
sub
jae
stc    
mov
addr16 sti 
(bad)  {%k1}
fldl
repz sbb
leave  
pop
cmp
dec
add
stos
add
out
sbb
mov
ja
xorl
push
repnz or
mov
and
cwtl   
mov
loope
jae
push
sbb
test
dec
scas
inc
dec
int
pop
nop
xchg
gs arpl
inc
mov
cmpsl
sub
pop
mov
jp
mov
sbb
mov
jbe
imul
sbb
lea
rorl
scas
sub
sub
int
movsb
jns
int3   
in
lock sub
xchg
dec
test
xchg
push
mov
std    
mov
es popf 
or
popf   
mov
lret
aad
jno
cmp
xchg
into   
jnp
cwtl   
jl
mov
popf   
xlat
jp
hlt    
mov
xchg
add
push
insl
push
stos
mov
jecxz
bound
cltd   
sub
or
test
out
(bad)  
ss stos
xchg
insb
push
jg
pop
xor
sbb
mov
mov
sbb
jnp
sub
mov
inc
popa   
push
cmpsb
ljmp
xor
lea
push
mov
insl
add
adc
push
push
xor
pop
mov
add
mov
addr16 cmp
imul
sub
and
test
mov
fcmovb
cmp
mov
pushf  
cld    
aam
sti    
dec
mull
cld    
adc
add
sbb
cli    
popa   
mov
dec
cwtl   
jne
mov
jp
adc
daa    
scas
mov
adc
and
add
lahf   
scas
insl
imul
xor
push
sbb
movb
jecxz
jg
xor
jb
adc
or
inc
mov
mov
jns
xchg
lahf   
push
dec
fstpl
clc    
rorb
aas    
ret    
mov
xchg
mov
dec
js
out
xor
aad
(bad)  
fstpl
or
pop
testl
rol
xchg
mov
jle
clc    
inc
pushf  
das    
mov
rolb
clc    
cmp
imul
sbb
out
inc
(bad)  
jne
dec
adc
dec
inc
sarb
inc
push
jecxz
jo
jle
pop
mov
inc
push
stos
loop
add
and
mov
adc
add
dec
inc
scas
inc
pusha  
(bad)  
or
add
add
(bad)  
(bad)  
(bad)  
incl
add
add
add
add
add
add
jns
je
insl
cs inc
jb
ja
outsb
addr16 sub
push
gs jb
imul
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
xor
data16 aaa 
xor
fs xor
add
adc
gs insl
cs inc
jb
ja
outsb
addr16 cs inc
imul
add
popa   
je
pop
add
add
add
add
add
lsl
add
jno
add
add
or
or
add
or
add
add
add
dec
or
add
add
(bad)  
and
add
add
inc
dec
inc
add
mov
or
popa   
add
jo
pop
jae
add
ret    
add
push
ret    
add
outsl
test
add
cmp
push
push
test
push
or
lcall
(bad)  
cwtl   
test
inc
push
mov
or
mov
lods
repnz adc
dec
shl
mov
dec
mov
dec
pop
flds
inc
in
pop
push
add
int
in
push
mov
(bad)  
cli    
adc
out
push
int
xchg
fiadd
imul
jbe
inc
cmpsl
push
push
loope
sub
popf   
push
mov
(bad)  
or
lcall
mov
gs lret
cli    
andl
loopne
xor
scas
add
rol
(bad)
push
arpl
mov
out
cmp
mov
cmp
adc
inc
xchg
inc
mov
fildl
inc
outsl
rol
loope
pushf  
mov
ja
fninit 
xor
pop
mov
jp
fsubrs
mov
mov
adc
or
(bad)  
arpl
adc
in
add
(bad)  
cmpsb
and
lods
cmpsb
cmp
repnz mulb
insb
test
mov
mov
fsts
in
aaa    
mov
adcb
adc
sub
mov
loopne
pop
test
mov
xchg
int3   
xor
pop
orb
dec
btr
sbb
insl
jns
add
data16 std 
jge
ja
mov
outsb
out
dec
out
jns
mov
daa    
int3   
loop
pop
(bad)  
popf   
xchg
adc
outsb
cli    
and
cmpl
adc
leave  
mov
test
enter
xor
dec
js
mov
adc
mov
pop
out
mov
inc
nop
sbb
je
cmp
cmp
lods
dec
ds movsb
(bad)  
adc
add
xchg
fs lock test
push
jb
xor
cmpsl
sbb
push
pop
imul
repz dec
addr16 adc
mov
and
xor
mov
cmp
daa    
pop
push
scas
cmp
mov
mov
dec
push
shrb
jge
mov
lods
sub
sub
ficomp
(bad)  
xor
lea
mov
or
mov
mov
mov
mov
andl
gs push
jmp
pop
mov
cmp
xor
mov
movsl
inc
cwtl   
mov
imul
out
stos
lcall
push
xchg
std    
adc
push
(bad)  
push
out
test
xchg
mov
lock leave 
stos
jmp
arpl
fildll
ss daa 
xor
imulb
insb
outsl
mov
cmp
add
mov
xchg
hlt    
mov
adc
xchg
outsb
jmp
jmp
cmpsb
nop
xor
cs inc
xlat
ss xchg
fidivrl
ret    
mov
adc
outsl
xor
and
cltd   
lret
negl
mov
pop
sbb
rcrl
movsl
test
push
cltd   
dec
pusha  
cmp
jno
mov
and
loopne
mov
cmpsb
ja
sbb
aam
cmp
mov
mov
(bad)  
mov
inc
clc    
jg
xor
lea
in
add
mov
mov
push
jge
and
add
add
xchg
mov
add
or
js
clc    
sahf   
lods
cmp
sub
mov
mov
sbbl
mov
sbb
insl
sbb
(bad)  
popf   
sarb
repnz sahf 
xor
xchg
rcr
lret   
xlat
jno
cltd   
adc
out
xchg
pop
or
and
sbb
jnp
dec
dec
inc
add
inc
xchg
mov
mov
lret
dec
add
fwait
xchg
push
and
std    
mov
or
xlat
imul
mov
insb
out
xorl
inc
test
mov
xor
aas    
pop
mov
push
iret   
fdivs
jns
fstp
xor
faddl
sbb
push
add
xor
jno
or
and
adc
rorb
out
cmp
xchg
cli    
add
lea
fildl
iret   
jae
test
cltd   
mov
sub
push
dec
rcr
sbb
mov
xchg
jl
iret   
(bad)
out
inc
fmul
push
sbb
pop
and
lret   
and
sbb
mov
mov
arpl
jns
pop
mov
push
dec
cs ret
leave  
popa   
lea
xchg
orl
sbb
(bad)  
sbb
faddp
fimull
jbe
ds mov
out
aas    
cmc    
and
sbb
mov
sti    
data16 mov
rol
fdivl
jmp
iret   
push
inc
jns
outsb
xchg
lock or
cld    
push
add
(bad)  
ret    
cmp
adc
mov
out
leave  
jp
mov
sub
fcoml
out
mov
mov
jno
mov
das    
pop
push
add
cs xor
adc
sub
push
push
add
idivb
push
jne
(bad)  
mov
pop
push
mov
rclb
xchg
(bad)  
icebp  
hlt    
in
je
insb
rclb
(bad)  
jmp
cmp
sarl
outsb
mov
std    
and
test
ficom
ret
mov
adc
or
dec
sbbb
aaa    
push
lock mov
add
dec
je
cmp
and
jnp
cmp
cmpsl
fwait
inc
fistpll
adc
sbb
aad
cli    
out
or
xlat
insb
inc
lock jb
shrb
mov
mov
clc    
and
mov
xchg
call
push
inc
push
out
outsb
sar
mov
cwtl   
pop
jle
cmpsb
lds
lahf   
out
xchg
in
addr16 jmp
sub
lods
or
inc
test
sbb
push
cmpsb
aaa    
test
adc
ds pop
jne
push
lcall
jnp
sub
mov
cmp
push
mov
addr16 dec
adc
stos
inc
push
fsubs
sub
push
mov
scas
mov
mov
int
inc
das    
xchg
jmp
loope
add
mov
lods
fstpt
lahf   
in
ja
push
adc
sub
(bad)  
mov
cmp
push
pop
xor
movsl
ficompl
dec
adc
xchg
in
pop
push
dec
jg
push
iret   
pop
adc
mov
call
cmp
fs cwtl 
jae
loopne
xchg
cmp
lret
sti    
mov
cmpsl
push
pop
les
xor
xchg
add
xor
pop
inc
xchg
(bad)  
push
mov
(bad)  
ljmp
cmp
in
fisubrl
repz imul
mov
lods
xchg
iret   
push
cmovp
mov
lods
dec
sub
ja
add
jno
add
sbb
test
push
loop
(bad)  {%k1}
cmc    
jno
xor
(bad)  
mov
jmp
icebp  
push
sahf   
ret
jle
loop
mov
and
imul
aam
mov
iret   
push
cvtpi2ps
test
inc
sbb
(bad)  
mov
inc
add
jle
cmp
ret
ljmp
jge
mov
pop
or
jo
mov
lods
dec
push
dec
jg
xchg
je
xchg
std    
add
cmc    
loopne
sbb
fucomi
mov
mov
add
jmp
and
or
outsb
add
and
or
ja
mov
add
jae
andl
gs call
les
(bad)  
nop
dec
push
cmp
lcall
xchg
enter
push
sub
inc
mov
repz inc
sbb
and
fisub
xor
xlat
es jg
cwtl   
faddl
(bad)  
loope
and
lahf   
mov
test
idivb
xlat
mov
andl
imul
pop
mov
mov
imul
int3   
(bad)  
add
cmp
jg
add
outsb
es xor
xor
daa    
cmp
lcall
outsl
js
data16 cs xor
int3   
cmpsb
stos
cmp
outsl
ret
xor
je
fcomp
pop
dec
out
pusha  
xchg
mov
adc
repz cs xchg
inc
shr
fisub
dec
mov
adc
inc
nop
(bad)  
adc
push
hlt    
xchg
adc
rolb
push
(bad)  
ljmp
cmp
xor
and
imul
lods
push
push
fldcw
mov
int
imul
or
or
mov
lahf   
mov
clc    
push
inc
enter
mov
mov
cltd   
push
xchg
fcmovnu
jne
sbb
jge
mov
je
and
pop
js
cmp
pop
xor
adc
add
pusha  
(bad)  
xor
jmp
mov
cs test
cli    
sbb
subl
(bad)  
jne
mov
fldcw
sar
in
push
push
das    
sub
mov
cmpb
(bad)  
stos
mov
repnz roll
or
in
or
jo
(bad)  
sti    
sub
aas    
mov
mov
(bad)  
pop
jno
mov
cmpsl
pop
and
dec
jo
cwtl   
xor
mov
jmp
adc
jmp
ret    
stc    
adc
pop
inc
leave  
adc
or
and
dec
mov
cmp
pop
(bad)  
mov
sbb
into   
mov
in
push
enter
lea
xchg
mov
mov
xchg
mov
fbstp
xor
arpl
ret
cli    
add
loope
out
mov
pusha  
stc    
inc
sub
lea
les
movsl
ja
ret
aas    
inc
fs loope
inc
xchg
xchg
movb
(bad)  
(bad)  
int
cmp
out
pop
mov
or
mov
sti    
xchg
inc
in
rorl
jg
mov
sub
push
loopne
xlat
std    
mov
out
sub
sub
pop
in
aas    
lock sub
andl
pop
inc
push
sub
sbb
mov
mov
push
sbb
test
mov
push
dec
push
jne
jnp
out
adc
mov
test
lahf   
push
call
idivl
xchg
insl
sub
pop
insb
cmpsb
insl
(bad)  
mov
or
sub
(bad)  
out
mov
cld    
push
mov
repz cwtl 
push
xor
push
insb
pop
xor
stos
scas
push
fsts
mov
inc
mov
add
lahf   
mov
fdivl
dec
sbb
push
sahf   
push
enter
xor
inc
pop
shlb
push
cs iret 
iret   
imul
mov
push
fs pop
mov
aad
cmpsl
addr16 cmc 
aad
inc
pop
in
stos
insl
repnz push
mov
rcr
outsl
mov
sbb
jns
dec
dec
or
jmp
push
les
add
ss sub
add
das    
sarb
int
sub
cltd   
loopne
(bad)  
sbb
ret
lea
shll
pop
inc
jle
fwait
xchg
and
adc
mov
popf   
call
out
cmpsl
push
or
cmp
and
test
xor
mov
test
mov
jmp
jbe
sub
(bad)  
pop
jle
dec
mov
lcall
push
xchg
aaa    
lret
jno
popa   
js
or
addr16 nop
and
(bad)  
xor
push
dec
pop
arpl
jmp
sub
push
inc
add
pusha  
jne
test
pop
ret    
loop
pop
adc
xchg
pop
cmp
bound
mov
js
jp
mov
femms  
pop
add
sbb
in
(bad)  
out
or
xor
arpl
in
push
jge
mov
aad
jg
sbb
sbbb
xchg
dec
or
inc
fcomps
adc
adcb
leave  
dec
jecxz
xor
inc
mov
cmp
xchg
mov
nop
mov
nop
iret   
pop
inc
xchg
jbe
insb
or
mov
scas
test
and
subl
cltd   
subb
int3   
pop
xlat
inc
sahf   
enter
rclb
(bad)  
add
mov
mov
mov
and
add
sub
fsub
xchg
lods
xchg
(bad)  
lods
es push
lods
insb
xchg
xor
into   
sbb
lret   
push
fs jmp
stc    
inc
jg
xchg
dec
cli    
adc
loopne
scas
mov
dec
inc
cmp
jle
hlt    
inc
aaa    
mov
sbb
or
(bad)  
cmp
test
pop
ja
push
sbb
out
js
jmp
mov
sbb
incl
test
pop
lret   
sbb
jecxz
stc    
into   
add
sub
inc
add
and
int3   
jbe
xor
push
adc
jp
ret    
out
in
pop
push
jns
test
imul
xchg
lods
cmp
adc
inc
mov
inc
add
mov
jae
sub
fisttpll
leave  
test
inc
ret
mov
cltd   
in
lret   
out
stos
mov
add
out
or
std    
movsb
mov
mov
jno
sub
(bad)  
jo
xchg
adc
pop
push
mov
imull
push
aam
iret   
rcrb
icebp  
mov
out
arpl
in
cmpl
arpl
iret   
mov
jne
loopne
sbb
mov
jge
or
xchg
neg
bound
test
sub
push
push
icebp  
xchg
or
pop
fsts
dec
iret   
mov
lods
loopne
mov
inc
lret
loopne
mov
into   
sub
pushf  
adc
mov
push
outsl
fwait
pusha  
or
cmp
jnp
mov
das    
pop
movsb
cmpl
popf   
dec
inc
cmpsb
mov
(bad)  
jge
test
popf   
push
jp
push
add
mov
mov
mov
int
popf   
push
test
jne
jecxz
mov
sub
jmp
mov
fsubl
in
outsl
pop
popf   
outsl
sahf   
loopne
push
cmp
lcall
ljmp
mov
aaa    
adc
push
cmpsb
lock cltd 
je
stos
cmp
mov
repnz push
jl
lods
mov
cmpsl
fdivrl
jg
int3   
sub
mov
in
or
fmulp
mov
mov
dec
call
(bad)  
add
inc
pushf  
outsb
mov
xchg
test
rol
push
push
outsl
sub
inc
xchg
and
mov
jo,pt
and
inc
and
push
inc
out
push
inc
out
gs mov
pop
outsl
pushf  
popfw  
ret
jae
rcrl
neg
ret
xor
add
lcall
mov
insb
sbb
sbb
scas
push
sti    
out
inc
cld    
mov
out
push
adc
xor
out
in
mov
fadds
loope
(bad)  
dec
xchg
inc
(bad)
push
inc
sbb
pusha  
mov
add
insb
pop
adc
and
jmp
out
or
mov
movsl
or
jmp
push
and
or
std    
push
cmovs
popa   
or
jge
pop
cmp
jecxz
pslld
sbb
mov
aas    
adc
xchg
mov
lcall
test
inc
jns
sbb
inc
pop
jge
aas    
dec
mov
data16 jne
push
gs push
cld    
xchg
jnp
in
outsb
popf   
pop
pop
roll
xor
push
clc    
psllq
pop
sbb
cmp
cmp
push
test
mov
fldl
fnsetpm(287 only) 
lahf   
popa   
jb
stos
popa   
xchg
leave  
cmp
mov
and
add
(bad)  
jge
inc
inc
xchg
xchg
testb
adc
rorb
jmp
and
lods
mov
jmp
mov
icebp  
out
mov
push
imul
(bad)  
ret    
push
or
in
jmp
and
push
shl
pusha  
jbe
add
mov
mull
cmp
adc
jno
insl
out
out
test
insb
lcall
jge
mov
test
das    
sbb
push
inc
ss es jp
test
jl
mov
repnz setno
mov
xchg
call
sahf   
(bad)  
pop
lods
sub
xchg
rcrb
xchg
xchg
add
sbb
and
fmull
add
orl
data16 cmp
pop
pop
mov
xor
cs push
fst
inc
and
orl
mov
push
mov
mov
gs aaa 
xchg
push
sahf   
sub
adc
pop
(bad)  
xchg
(bad)  
jo
ds xor
movsl
nop
loopne
sub
lret   
adc
fist
and
ja
or
jp
aaa    
pop
sub
cmpsb
xchg
inc
jns
mov
mov
lcall
out
mov
pop
adc
or
insl
jne
outsl
stos
(bad)  
out
pop
insl
sbb
in
movl
jae
(bad)  
arpl
or
out
aam
adc
or
out
xchg
pop
xchg
lock fnstenv
mov
enter
in
(bad)  
out
add
(bad)  
mov
adc
dec
jg
test
(bad)  
sti    
into   
negl
inc
jg
xchg
test
fdivs
sbb
cmp
push
scas
test
or
es
lret
orl
insl
inc
inc
stc    
cmpsl
gs mov
and
(bad)  
xor
daa    
push
pop
jb
insb
sbb
mov
cmp
and
add
fcmovb
dec
inc
sub
inc
stc    
dec
xor
adc
push
jge
or
mov
movl
frstor
in
in
fimull
aaa    
jmp
je
sub
pop
mov
xchg
aaa    
imul
pop
in
and
xor
scas
sbb
test
aas    
pop
lahf   
cwtl   
xchg
nop
daa    
xchg
out
mov
leave  
enter
or
xchg
add
pop
(bad)  
sti    
or
and
cmp
push
fwait
enter
or
mov
cmp
cmp
jge
adcl
cmc    
sub
push
sbb
test
aad
scas
clc    
dec
xchg
adc
dec
lret   
fwait
test
sub
mov
lods
pusha  
gs repz cs test
in
notl
xchg
mov
or
mov
push
lods
daa    
pop
stos
push
jnp
adc
push
or
repz cmp
push
into   
das    
jno
gs ds test
cmp
mov
adc
mov
pop
dec
xlat
sub
xor
cmpsb
add
(bad)
test
test
cmpsb
jbe
xchg
mov
ja
into   
jge
xchg
les
fisub
sbb
jnp
dec
pop
inc
popf   
sub
cltd   
insl
add
mov
and
loope
xor
std    
or
enter
xor
push
adc
mov
adc
jmp
pop
leave  
cmpsl
out
stos
sbb
xor
push
or
dec
mov
xchg
outsb
and
and
int3   
pop
fist
push
jmp
cld    
mov
das    
loopne
adc
fwait
(bad)  
xor
jecxz
jge
and
out
adc
outsl
push
xchg
and
and
(bad)
pop
fdivp
and
imul
rcll
adc
xchg
push
mov
jnp
in
(bad)
adc
(bad)  
imul
xor
cmp
and
or
cmpl
mov
lret   
imul
loop
popf   
das    
pop
cld    
inc
jp
mov
add
add
mov
sub
and
cmp
inc
jecxz
hlt    
sbb
je
fist
adc
mov
inc
inc
stc    
pop
pop
pushf  
loop
repz lcall
mov
push
mov
push
pop
dec
mov
fnstcw
jl
mov
sbb
sbb
cmpsl
ja
lock mov
dec
add
aam
mov
aas    
cli    
cmpsb
imul
test
jmp
push
jb
or
hlt    
gs inc
imul
mov
fsubrs
shrb
test
and
mov
pop
xor
pushf  
repnz pop
in
es and
xor
insl
sbb
into   
xlat
adc
cmp
out
arpl
(bad)  
ja
arpl
(bad)  
mov
fiadd
aad
push
dec
fs mov
bswap
loope
test
mov
std    
lret
sahf   
out
and
xor
imull
mov
mov
pop
dec
scas
lcall
jge
xchg
lahf   
pop
cltd   
decb
popa   
aad
stos
dec
sub
pop
xor
(bad)  
jae
lds
leave  
sub
inc
clc    
pop
in
mov
sub
out
and
dec
test
jns
dec
stos
push
adc
hlt    
jl
aas    
rcrb
inc
jecxz
mov
adc
aad
sti    
sbb
loope
push
cmp
fildll
push
dec
std    
xor
pushw
push
sub
mov
enter
mov
sub
mov
fwait
(bad)  
js
inc
xor
adc
inc
lock mov
add
mov
insl
mov
xchg
xchg
mov
cmp
mov
(bad)  
loope
fsts
jg
ljmp
gs sub
lret   
add
shrb
lahf   
pop
out
push
or
fnop   
push
push
test
lock aaa 
mov
adc
outsb
fldt
std    
jne
push
push
mov
je
dec
mov
pop
jb
sub
mov
sub
xor
lea
mov
pusha  
imul
xchg
mov
adc
xchg
ret
pop
xor
aad
jnp
cmp
(bad)  
xor
mov
add
stos
dec
jns
lock hlt 
loope
xlat
stos
push
mov
adc
mov
and
jp
frstor
jno
ret
pop
imul
mov
fdivr
lds
xchg
imul
es jno
dec
leave  
ljmp
mov
jmp
xchg
in
das    
or
(bad)  
mov
adc
xchg
xchg
jmp
xor
es mov
std    
out
cld    
cmp
into   
nop
je
mov
fs inc
aam
rcrl
(bad)  
cs sbb
int3   
sub
lods
inc
sti    
and
aaa    
lret   
pop
(bad)  
and
clc    
mov
into   
nop
fs and
mov
lret   
movsb
hlt    
hlt    
lahf   
and
adc
cld    
jbe
(bad)  
(bad)  
clc    
into   
dec
add
out
add
testb
adc
ficomp
aas    
pop
sbb
pushf  
fadds
mov
(bad)  
out
push
rorb
addb
lret   
sbb
(bad)  
out
xchg
jg
inc
and
sbb
push
call
sbb
or
data16 in
mov
or
loope
sbb
rcll
jmp
icebp  
pop
xchg
loope
xchg
pop
sbb
int3   
lods
insl
xchg
pop
add
cwtl   
in
test
mov
jnp
mov
ljmp
test
(bad)  
out
movb
or
xchg
std    
sub
cmpsl
shrb
sbbl
hlt    
aam
cmp
or
add
lea
aaa    
gs cltd 
movsl
and
push
pop
test
jecxz
mov
into   
sti    
cmpsb
outsb
add
pop
pop
ja
xchg
and
xchg
or
sbb
shrl
mov
rcrl
sub
pop
addb
pop
loop
ffree
pushf  
cld    
incb
dec
pusha  
ret
pusha  
dec
stos
stc    
cs or
sti    
jnp
call
lret   
(bad)  
mov
cmp
lret   
(bad)  
mov
inc
adc
sub
inc
dec
leave  
lret   
add
loope
add
dec
add
daa    
jbe
mov
repz and
cli    
push
mov
in
mov
fcmovnb
(bad)  
xor
aaa    
lcall
push
mov
in
loopne
pushf  
mov
inc
js
cmp
cld    
inc
mov
and
test
lcall
hlt    
push
inc
stos
repnz inc
add
lea
inc
push
inc
mov
jl
inc
dec
scas
(bad)  
or
add
sub
pop
add
shl
std    
xchg
call
shl
stc    
xchg
mov
std    
js
sbb
lret   
push
and
cmp
dec
jmp
xor
loop
fldenv
jmp
inc
pop
into   
mov
mov
insb
fsubl
mov
lock outsb
je
out
insl
popa   
ror
xchg
aam
sar
adc
push
imul
out
cmpsb
jae
orl
and
xchg
arpl
test
jne
or
xchg
lods
xor
xchg
(bad)  
mov
jmp
mov
repz shl
xchg
pusha  
nop
dec
shll
mov
bound
sbb
pop
bound
xchg
rcrl
sti    
in
or
cmpsl
and
push
jl
and
sbb
push
incb
cmp
cmp
add
adc
xor
jl
iret   
xchg
inc
mov
pop
inc
mov
test
repz into 
outsb
mov
ds out
dec
test
lret   
pushf  
adc
mov
stc    
ds pop
rorb
outsb
mov
stos
push
lret   
bound
adc
shlb
sbb
sub
(bad)  
call
cld    
pop
mov
shrb
mov
into   
and
mov
xchg
inc
add
xchg
inc
ds mov
adc
(bad)  
pop
adc
mov
push
aad
cli    
movsb
imul
pushf  
repz mov
(bad)  
mov
sub
adc
pop
pop
cmpsl
lods
jge
pop
and
jae
mov
cs out
or
xchg
push
insl
jo
movsb
test
add
pop
push
adc
push
shrb
popf   
leave  
jno
jne
mov
inc
mov
cmpsl
lret
xor
rcll
add
jae
out
and
and
jb
repnz fstl
pop
mov
add
(bad)  
(bad)  
pusha  
lcall
xlat
mov
outsb
stc    
adc
mov
mov
(bad)  
bound
(bad)  
mov
fs inc
push
xchg
mov
sub
fldt
inc
jbe
iret   
or
pop
fildll
or
mov
(bad)  
fbld
push
xchg
pop
aad
punpckhwd
pop
add
sub
sbb
(bad)  
dec
or
dec
in
push
mov
adc
sbb
mov
das    
xchg
xchg
das    
push
iret   
test
cs
leave  
mov
lahf   
mov
pusha  
jne
add
fistpl
in
sub
cwtl   
aas    
bound
loop
repnz cmpsb
xchg
mov
and
test
cmpb
lods
cmp
inc
sub
dec
or
pop
pop
sub
je
or
cmpsb
cmp
mov
xchg
xor
je
dec
(bad)
ds pusha 
cmpsb
adc
fildl
add
scas
imul
push
mov
cmp
jb
add
aam
fcmovnbe
stc    
(bad)  
mov
adc
xchg
js
(bad)  
lock shl
xchg
inc
dec
insb
add
pop
in
jae
xlat
negl
stos
sub
push
fst
inc
pop
popf   
push
dec
sbb
dec
out
int3   
pusha  
sbb
dec
push
pushl
enter
mov
mulb
sbb
mov
jecxz
cmpsl
popf   
je
add
mov
or
mov
pop
lret   
jbe
or
out
fcmovnu
pop
pop
ficomp
sbb
movb
(bad)  
jnp
mov
cmpsl
adc
test
mov
clc    
or
lock jns
sbb
rcll
xchg
sub
push
jge
and
mov
push
pop
push
cld    
cmp
sub
push
and
mov
(bad)  
push
dec
add
mov
ja
inc
cwtl   
xor
out
(bad)  
pop
sub
and
gs aam
(bad)  
pop
mov
push
shll
or
mov
lea
out
pop
mov
and
dec
test
lea
movsl
mov
jmp
insl
test
mov
push
loop
imul
add
(bad)  
xor
ret
mov
cmp
jp
mov
ljmp
and
ret    
xor
addr16 leave 
or
xor
mov
aam
(bad)  
xacquire xchg
mov
pop
push
popa   
insl
out
inc
push
jns
test
or
push
pop
bound
sub
test
lret   
xor
sub
cmpsl
mov
jae
xorl
cmp
sbb
lcall
mov
push
movsb
lods
or
xchg
aas    
mov
shll
adc
test
mov
clc    
jns
ds push
dec
xor
add
sti    
add
fbld
loopne
mov
call
mov
add
test
cmc    
movsl
add
ret    
push
pop
in
out
ret
es dec
sub
int
(bad)  
adc
jecxz
mov
bound
xor
or
bound
out
dec
(bad)  
mov
pop
and
popf   
dec
out
xor
aas    
ret
stos
imul
cwtl   
pusha  
ficompl
adc
daa    
and
inc
push
dec
sbb
push
xchg
out
sub
(bad)  
movsb
push
dec
and
dec
mov
push
inc
(bad)  
add
mov
jmp
stos
cltd   
and
pop
(bad)  
jp
cmpsb
add
sbb
sub
add
mov
lds
aad
mov
adc
mov
push
fdiv
test
or
push
adc
iret   
test
cwtl   
sbb
jle
aaa    
fnstenv
into   
test
popa   
(bad)  
push
adc
or
push
dec
dec
dec
test
dec
mov
or
ja
addb
mov
and
add
ret
les
arpl
inc
dec
es js
xor
jle
cmpsb
out
(bad)  
xlat
mov
or
dec
pop
dec
mov
jmp
adc
ja
(bad)
add
add
nop
and
mov
push
stos
add
pop
(bad)  
fdivrl
dec
ud1    
mov
popa   
mov
mov
pop
pusha  
(bad)  
loope
mov
fisubr
pop
and
push
sets
or
xchg
xor
cmp
mov
pop
pop
cmp
into   
lahf   
xchg
pop
and
stc    
aad
dec
pop
movsl
arpl
jbe
icebp  
scas
sbb
mov
mov
xor
test
dec
and
adc
pusha  
movsb
insl
cli    
cmp
cmp
jb
andb
lods
fisubrl
add
push
mov
dec
push
aad
mov
hlt    
mov
jmp
or
push
stos
dec
int3   
mov
les
call
mov
xchg
xchg
mov
roll
in
add
jle
mov
ret    
int
test
mov
or
mov
and
or
test
sahf   
jns
fldenv
mov
pushl
pop
movsl
xlat
adc
sub
inc
dec
je
push
inc
and
leave  
xor
jle
(bad)  
lret   
fsubl
stos
jp
dec
push
add
xor
fnstsw
mov
je
jbe
mov
aas    
cs sub
(bad)  
mov
dec
ds fwait
dec
int
out
inc
not
iret   
fidiv
sti    
jp
add
cmpsl
mov
pushf  
fdivrs
dec
and
jg
in
icebp  
and
mov
movsl
push
ret    
xor
fbld
mov
push
(bad)  
dec
(bad)  
inc
mov
add
ja
es jecxz
pusha  
pop
inc
cmp
sbb
incl
jmp
sub
adc
pop
clc    
mov
inc
rcrb
cmp
push
ret    
fildl
sbb
pop
push
jno
dec
arpl
cmp
jne
cltd   
sub
mov
shr
pop
mov
add
push
mov
mov
mov
enter
inc
mov
insb
xor
mov
daa    
mov
xchg
pop
sbb
sbb
jl
and
sbb
js
cmc    
push
arpl
dec
lcall
xor
cwtl   
push
adc
popl
or
add
sub
jns
cld    
notl
jne
lods
or
lret
and
ljmp
or
inc
jnp
cwtl   
dec
mov
je
fwait
aas    
add
and
ret    
or
addr16 mov
movsl
adc
nop
rorb
lods
pop
sub
rcrb
dec
lret   
mov
enter
xlat
loopne
pushf  
mov
insb
aad
jne
pop
xchg
add
cmp
mov
jbe
fwait
or
xor
mov
int
mov
faddl
push
fildl
and
fistpl
roll
enter
xchg
or
mov
xor
fsincos 
and
jge
jge
xchg
xchg
repnz sbb
or
push
lahf   
pop
sub
jno
jnp
xor
dec
arpl
nop
stos
cs cmp
mov
les
push
insl
mov
and
and
xchg
(bad)  
xor
dec
cld    
stc    
inc
pop
stos
inc
sbb
cmp
into   
sbb
jl
xor
ljmp
mov
mov
xor
cld    
es jmp
push
out
into   
movb
mov
cmp
sub
insb
stos
xor
pop
pop
add
pop
and
insb
enter
jmp
pop
movsl
dec
push
push
jmp
cmp
xchg
mov
es inc
xchg
pop
fcom
data16 mov
insl
test
pusha  
daa    
in
test
and
sub
js
rcrl
xchg
fldcw
jle
dec
inc
test
mov
dec
insb
mov
pop
ss mov
jno
fiadd
dec
jp
xor
test
into   
in
insb
inc
jno
popa   
(bad)
loopne
mov
dec
iret   
inc
int
mov
adc
mov
fs stos
mov
mov
imulb
jbe
clc    
sub
negl
mov
jnp
add
pushf  
aam
int
mov
jle
inc
pandn
pop
push
pop
inc
ss push
add
sub
or
cmpsb
enter
add
std    
movsl
(bad)  
pop
jecxz
loopne
cmc    
lds
int3   
sub
bound
inc
mov
mov
inc
int
and
lret   
jns
insl
daa    
and
popf   
xor
and
cltd   
imul
fwait
cmp
adc
and
out
pop
and
ss mov
xchg
mov
push
(bad)  
mov
cmpl
(bad)  
fbstp
fs repz mov
fwait
sar
xor
insb
lea
mov
gs icebp 
cwtl   
cmc    
out
test
out
lret   
imul
cwtl   
mov
in
rorl
push
adc
add
leave  
fnstcw
addr16 xchg
cmp
sbb
adc
xor
(bad)  
jae
(bad)  
jmp
ret
int3   
and
xchg
test
mov
sti    
dec
inc
inc
jo
into   
pop
daa    
inc
xor
out
dec
mov
cmp
cs xchg
popf   
roll
rolb
add
or
jl
ja
sub
mov
scas
imulb
push
ss and
call
xor
negb
das    
(bad)  
mov
xor
imul
mov
xchg
sub
jbe
mov
ds call
fcomip
iret   
pushl
xor
inc
sbb
sub
fdivrl
iret   
mov
pop
pop
mov
xchg
out
pop
inc
pop
jne
pop
aaa    
mov
mov
in
add
(bad)  
dec
jp
rcrl
add
or
aad
fistl
push
lods
shrl
adc
xor
add
lcall
mov
push
mov
fwait
mov
je
call
xchg
je
lret
jp
jge
sub
push
aad
(bad)  
das    
out
mov
mov
jns
stc    
lock mov
sub
notl
mov
fldl
nop
int
scas
push
sbb
xor
jle
in
into   
jne
(bad)  
pop
je
inc
jne
push
lcall
(bad)  
lahf   
push
pop
mov
jmp
popf   
aas    
repz inc
dec
rclb
add
iret   
cmp
(bad)  
lods
mov
(bad)  
push
hlt    
cmp
das    
jne
out
std    
mov
adc
lds
stos
cmp
push
dec
cmp
xor
add
inc
ret
cwtl   
jne
int
test
(bad)  
loope
xchg
pop
xlat
xor
cli    
inc
out
stos
cmp
ljmp
test
xor
int
pop
dec
stos
jne
inc
pop
out
stos
mov
xchg
fisttpll
loopne
mov
fcmovu
hlt    
inc
jle
imul
sub
stos
xlat
push
add
xlat
xchg
cmp
jmp
mov
sti    
dec
push
imul
je
clc    
mov
fwait
xchg
xchg
push
jb
cmc    
loope
mov
bound
adc
or
and
sub
add
inc
pop
add
sbb
ret    
fild
fwait
adc
xchg
adc
xchg
dec
aam
or
cmpb
in
xchg
xchg
scas
ret
lea
mov
push
cmpsb
jnp
sub
imull
hlt    
test
shrb
xchg
mov
stos
push
testl
addl
add
loope
in
push
mov
mov
sbb
js
test
push
mov
out
xor
in
js
cwtl   
dec
adc
mov
mov
mov
repz cltd 
cmp
in
dec
paddusw
and
dec
jmp
enter
jl
flds
mov
les
push
outsl
adc
mov
add
fcoms
les
(bad)  
cli    
lods
std    
jp
test
fwait
mov
repz in
test
inc
push
(bad)  
pop
pop
push
pop
fwait
mov
pop
adc
fidiv
or
(bad)  
add
add
xor
incb
imul
stos
mov
imul
mov
sbb
(bad)  
jge
adc
pushl
mov
lcall
sbb
iret   
cmp
(bad)  
movsb
sub
mov
jb
rolb
(bad)  
test
popa   
cmpsl
sarb
aaa    
repz lock
out
stc    
fwait
push
mov
sbb
movl
dec
sub
addl
sarl
mov
int3   
testb
cmp
popa   
dec
bound
gs aas 
lcall
mov
cmp
rcrl
push
decl
cmp
mov
and
jge
sub
sub
push
leave  
or
clc    
shl
mov
(bad)  
int3   
fisubl
sbb
xchg
pop
popa   
out
sbb
pop
add
sub
sti    
mov
test
push
out
pop
(bad)  
sti    
(bad)  
mov
out
mov
arpl
jns
test
mov
push
mov
fcmovnbe
push
add
jg
adc
sbb
mov
mov
mov
mov
xchg
repnz incb
sub
pop
xor
roll
pop
gs aad
push
pop
mov
stos
movq
shrl
adc
loopne
loopne
adc
or
outsb
sbb
loop
imul
mov
pop
and
mov
bound
add
dec
fldl
mov
dec
sahf   
test
aam
lock mov
pop
mov
adc
mov
fcmovb
arpl
stos
icebp  
(bad)  
(bad)  
arpl
stc    
inc
lods
push
shlb
inc
jae
repz je
and
mov
inc
mov
inc
movsb
cmc    
mov
cmp
daa    
out
or
mov
add
mov
adc
(bad)  
loop
in
scas
pop
movsb
mov
mov
popa   
or
in
(bad)  
dec
dec
shrl
jge
leave  
test
or
push
aad
popf   
sbb
lret   
add
ret
sub
adc
sbb
dec
and
daa    
mov
mov
(bad)  
fcmovnbe
jnp
mov
jecxz
scas
push
mov
sub
push
cld    
sub
into   
jmp
push
jne
insb
xor
xor
lds
daa    
mov
sbb
int
pusha  
mov
sub
add
add
dec
cmp
and
push
adc
mov
cmp
ja
mov
jg
(bad)  
mov
cmpsl
ds dec
cmp
mov
sbb
fdivrp
inc
cltd   
xor
lret   
sub
iret   
adc
ss push
sub
inc
xchg
mov
ja
ffree
aas    
rclb
jae
sub
jp
scas
hlt    
add
std    
call
add
xor
test
mov
enter
cmpsl
subb
sub
jp
cmc    
addr16 jmp
push
notb
out
cmpsb
add
(bad)  {%k1}
cli    
pop
inc
jo
mov
sbb
sbb
xor
insl
hlt    
in
popf   
pop
pusha  
scas
out
jae
mov
jne
sbb
ficomp
fsts
(bad)  
scas
cltd   
xchg
and
scas
sahf   
add
(bad)  
add
adc
aam
pop
test
cli    
rcrb
sahf   
test
pop
movsb
xor
mov
push
in
xor
sbb
cli    
(bad)  
or
test
and
jo
push
adc
or
push
xor
rcrb
mov
and
nop
sub
outsl
mov
xchg
sub
jae
loopne
dec
ds sbb
cltd   
test
jns
xor
mov
jno
cmp
(bad)  
mov
into   
mov
adc
repz jmp
imul
iret   
imul
dec
push
mov
ljmp
stos
(bad)  
jl
(bad)  
cltd   
in
gs push
hlt    
dec
bound
(bad)  
xor
mov
mov
pop
lods
push
mov
cmp
mov
js
aas    
cmpsb
arpl
push
pop
mov
pop
add
lods
or
xchg
in
sub
test
lock ret
bound
bound
nop
jmp
(bad)  
(bad)  
and
jle
mov
push
test
loopne
shll
sbb
movsb
dec
cmc    
add
andl
in
or
mov
cwtl   
sub
adc
(bad)  
stc    
xor
lock push
push
test
xchg
leave  
sub
enter
(bad)  
lods
dec
cmp
mov
jo
movsb
repnz lahf 
dec
into   
mov
jp
dec
push
add
or
add
ljmp
imul
jmp
repnz add
sbb
lret   
cmpsb
jnp
ljmp
cmpsb
decl
icebp  
stos
(bad)  
imul
and
xchg
lods
int
dec
fmulp
jne
dec
mov
xchg
jl
nop
and
inc
cmp
mov
fcmovbe
mov
add
cmp
pop
jo
jo
test
jb
cld    
fisubl
inc
sub
jb
add
inc
inc
or
mov
pop
inc
sti    
je
push
xor
data16 mov
sti    
out
mov
cmp
into   
sahf   
setne
cmovbe
outsl
xor
dec
mov
cs pop
push
lret   
gs jnp
cmp
mov
cmpsl
hlt    
pop
inc
lock
ss pop
fcmovbe
sub
aad
cli    
outsl
xchg
(bad)  
(bad)  
loop
addr16 out
les
insb
ljmp
mov
outsb
imul
add
(bad)  
push
ficoml
ds pop
shll
aaa    
fidivrl
dec
icebp  
js
and
xchg
mov
cmpsl
out
jae
push
aas    
fmul
out
int
sub
pushf  
cmp
fsubrl
pop
data16 addb
iret   
cwtl   
sbb
not
and
orl
iret   
ja
jmp
xor
lock inc
push
mov
notl
cs mov
jecxz
jmp
(bad)  
xor
xchg
imul
out
mov
adc
or
clc    
insl
dec
jbe
and
movsb
js
push
hlt    
xor
and
inc
dec
cmpsb
movb
iret   
les
sub
push
cld    
lea
sti    
push
push
stos
add
ret
sbb
sub
mov
jae
and
daa    
js
push
jbe
jns
add
and
sub
movsl
sub
add
enter
jmp
subb
sahf   
stos
arpl
inc
mov
jle
pushf  
pop
rol
pushf  
cmp
clc    
lods
mov
sbb
lods
es dec
jle
stc    
je
decl
mov
jno
sub
or
jg
push
pop
mov
aad
and
push
mov
cmp
mov
aam
out
mov
inc
and
ret
jo
test
jns
movb
fldenv
xchg
jle
fbld
hlt    
and
dec
imul
jp
adc
inc
and
cli    
or
fs xor
leave  
xchg
pop
stos
jae
jecxz
mov
jle
dec
in
mov
mov
mov
lods
xor
sbb
fs jg
xchg
inc
xchg
repz imul
jns
add
inc
cld    
shlb
hlt    
jmp
sub
mov
in
xor
inc
and
roll
mov
sub
xchg
rcll
std    
xchg
dec
or
int
imul
push
jb
sub
cwtl   
xchg
inc
jae
adc
fimull
in
dec
sbb
inc
mov
imulb
loop
cmp
mov
out
in
insl
jno
xchg
or
sbb
pop
xor
arpl
out
unpckhps
push
stos
test
mov
int
movsb
mov
(bad)  
push
jne
dec
pop
addps
int3   
stos
neg
jl
int
adc
inc
mov
(bad)  
(bad)  
clc    
sti    
test
test
adc
jg
pop
jno
inc
ja
cld    
fcmovnu
ret
stc    
add
and
jno
and
xor
insl
icebp  
xlat
cltd   
lock ja
subb
test
lret   
sbbl
imul
roll
cmpb
adc
mov
adc
stos
insl
mov
icebp  
or
fcoml
scas
jne
push
xchg
or
in
je
(bad)
aaa    
icebp  
imul
xchg
sbb
pop
std    
jnp
and
sarb
mov
mov
add
das    
sub
xchg
cmpsl
adc
je
shll
mov
mov
mov
outsb
scas
jbe
or
out
mov
movsl
hlt    
stc    
sub
push
mov
aaa    
and
sbb
mov
leave  
mov
lea
xor
ljmp
cmpsl
push
push
(bad)  
mov
idivl
std    
adc
ffreep
lret   
pushf  
or
rclb
pop
dec
jbe
dec
or
psubb
sbb
or
leave  
mov
push
arpl
lods
xchg
add
xchg
fiaddl
cmp
push
fldl
xor
adc
dec
mov
xor
mov
bound
je
enter
arpl
jecxz
adc
xchg
aam
mov
add
scas
or
in
mov
sbb
pop
cltd   
mov
adc
cmp
add
and
cmp
outsl
out
push
xchg
scas
dec
addr16 ret 
pop
jns
ljmp
lea
int
loop
(bad)  
pop
ja
sub
std    
sti    
test
xchg
pop
add
in
xor
mov
inc
jg
adc
jnp
and
adc
xchg
out
fs dec
rclb
add
jae
(bad)  
mulb
ljmp
fisub
mov
fistl
ret
movsl
adc
negl
add
push
xor
push
sbb
dec
xor
ljmp
pop
inc
adc
sbb
pop
ds xor
xor
(bad)
fwait
mov
ja
mov
and
mov
push
mov
cli    
gs mov
mov
mov
bound
sub
adc
and
mov
jns
xchg
jmp
push
out
adc
(bad)  
jo
sub
push
dec
iret   
jnp
jne
mov
stc    
add
cltd   
pop
fistp
dec
mov
inc
cmp
cmp
or
sub
aad
aas    
loop
loopne
mov
int
add
jne
sub
add
jl
mov
loope
pusha  
mov
inc
or
repnz mov
into   
iret   
or
lret   
fdivrl
lods
fiaddl
pop
xor
pop
cmp
add
cmpsb
lahf   
lret
aas    
mov
fnstenv
cltd   
outsb
inc
xchg
jmp
aam
outsl
or
int3   
frstor
mov
dec
push
xchg
outsb
jl
jmp
incb
insl
icebp  
aas    
pop
xor
pusha  
mov
xchg
out
jbe
jbe
sbb
fstl
adc
outsb
sub
pop
out
add
sbb
out
ss xchg
jns
test
outsl
inc
sahf   
stos
add
stc    
ds out
fisttp
xor
jne
das    
lea
movsb
pusha  
sbb
cmpsl
fisttpll
sbb
push
mov
push
jnp
popa   
pop
mov
and
bound
ret    
push
xchg
sti    
movsb
mov
jno
repz clc 
pop
in
mov
popf   
and
daa    
cmpsb
inc
cmp
sahf   
dec
scas
fimull
fcmovbe
ucomiss
mov
mov
push
sub
sahf   
cs dec
orl
iret   
push
jl
(bad)  
jb
test
sub
xchg
inc
lods
fs stos
adc
(bad)  
or
imul
arpl
das    
xlat
xchg
xchg
sbbl
xchg
jmp
xchg
dec
pop
add
fbld
lcall
mov
cmpl
arpl
rolb
fildll
cmp
(bad)  
popf   
xchg
sub
stos
cmpsb
pop
pop
(bad)  
in
or
cltd   
adc
push
adc
cli    
mov
xchg
mov
sbb
stc    
mov
inc
push
or
rorb
cmc    
or
pop
(bad)  
cli    
xchg
enter
loopne
cmpsb
cmp
or
and
cmp
cmpxchg
mov
wrmsr  
jb
jmp
inc
lahf   
lret   
rcl
loop
outsb
sbb
loope
and
inc
mov
fistpll
lahf   
cmp
or
aaa    
scas
call
and
rcrb
es data16 stc 
push
mov
call
pop
(bad)  
leave  
outsl
jge
jl
(bad)  
repz jp
fisttpl
(bad)  
lds
mov
mov
jp
sub
dec
stos
stc    
fs add
addr16 dec
mov
lea
cwtl   
mov
scas
outsl
xor
push
jl
dec
shrb
cmp
jnp
cmc    
ljmp
cwtl   
ror
nop
push
pop
cmp
sahf   
stos
push
jae
insb
fs cli 
or
lret
int
add
aas    
pop
icebp  
das    
jle
mov
cwtl   
push
(bad)  {%k1}
enter
in
leave  
push
or
aas    
jle
mov
hlt    
jbe
or
jg
sub
mov
add
cmpsl
out
pop
(bad)  
popf   
popf   
mov
daa    
add
or
stos
jmp
mov
jb
in
jge
imul
jns
std    
nop
lahf   
cmp
int
add
xor
out
in
int
insb
mov
xchg
add
lahf   
rcl
cmc    
outsb
lods
fs mov
xor
lahf   
or
pop
rolb
ret    
mov
sti    
shrb
adc
lds
mov
mov
or
fs add
es daa 
mov
mov
popf   
jge
out
mov
in
cld    
and
xchg
jp
mov
ljmp
out
(bad)  {%k1}
std    
cmpsl
mov
xchg
add
cmpsb
add
inc
dec
adc
push
adc
in
data16 fimul
mov
loop
fldcw
xchg
iret   
loopne
and
cs dec
mov
mov
xchg
sbb
pop
aaa    
add
in
adc
lea
out
dec
mov
ljmp
mov
sub
sti    
mov
ds dec
popa   
sbb
dec
sbb
test
push
lret   
cmp
ret    
add
xchg
clc    
jle
pop
mov
jbe
sti    
fisttpl
xlat
lods
add
cltd   
es jne
sti    
andl
in
xchg
js
xchg
sub
and
inc
(bad)  
xchg
lock jecxz
cmc    
lcall
adc
rclb
cmp
jmp
sti    
aam
aas    
mov
test
cltd   
loope
repz inc
daa    
popf   
push
sbb
je
xchg
cs jmp
and
push
ds hlt 
add
pop
imul
xor
das    
insl
dec
das    
inc
mov
and
adc
es
xchg
cmp
popf   
in
loop
or
push
rclb
outsl
mov
fstpl
adc
dec
mov
mov
out
sbb
adcl
lret
cltd   
loop,pn
add
bnd jmp
sti    
arpl
popa   
xor
add
xor
insb
push
dec
mov
loope
xor
mov
(bad)  
insl
pop
sub
nop
clc    
mov
dec
or
movsb
aas    
leave  
sub
divl
(bad)  
imulb
add
test
mov
rorb
add
push
mov
(bad)  
loop
mov
jge
push
insb
add
mov
inc
int
cmp
push
aaa    
inc
(bad)  
cld    
jae
mov
pop
repz inc
(bad)  
mov
icebp  
pop
loopne
cmp
sub
cwtl   
loop
push
movsl
mov
sti    
insl
jo
pop
(bad)
nopl
jge
xchg
aad
ljmp
jno
ret    
outsl
lods
inc
add
negl
insb
mov
lahf   
ss ret
cmpsb
dec
push
lcall
(bad)  
push
push
enter
jmp
jp
pop
stc    
xor
aam
stos
cmp
ja
lods
mov
pop
fbld
xchg
in
imul
and
jbe
push
int3   
dec
loop
in
add
inc
jecxz
(bad)  
out
es pushf 
mov
push
sub
ja
popa   
lods
mov
pop
xorl
test
(bad)  
jmp
div
and
cs aam
loop
xchg
xor
rcrb
cmpsl
mov
mov
idiv
ss jns
mov
add
(bad)  {%k1}
into   
push
xchg
lea
jge
out
jl
repz xlat
sub
int3   
movsl
ficom
cwtl   
push
mov
fcomps
jmp
imul
testl
jp
sbb
ret    
repnz mov
mov
dec
aaa    
into   
jb
call
xchg
or
std    
push
int3   
xor
data16 xchg
movsb
test
inc
fldl2e 
mov
mov
push
xor
add
movsl
pop
out
frstor
ljmp
jb
or
add
jo
sub
mov
add
push
rcrb
cmp
jp
ljmp
mov
mov
(bad)  
std    
push
dec
cmp
pusha  
push
imul
cld    
jno
insb
jb
dec
popa   
xchg
repnz loope
insb
es aad
or
add
mull
jmp
mov
adc
shl
dec
lods
outsb
ffreep
push
adc
sahf   
pop
cld    
xor
jecxz
mov
pop
cmp
sub
ret
xchg
add
jecxz
addr16 mov
pop
xchg
je
jo
add
les
xor
aad
jo
and
inc
xor
xor
push
lea
sarb
or
aam
or
int
pop
jno
aad
push
aaa    
in
mov
inc
stos
scas
pop
adc
lock jb
and
movsl
xchg
bound
cltd   
dec
jae
dec
adc
and
add
mov
daa    
and
insb
iretw  
add
jecxz
ja
sahf   
ja
loope
jnp
inc
dec
and
push
or
jp
dec
dec
sbb
icebp  
dec
inc
mov
xor
pop
fisttp
std    
iret   
inc
data16 clc 
mov
(bad)  
jno
dec
scas
das    
jmp
movsb
add
cmp
lret   
pop
sub
ficomp
jno
ficomp
stos
out
std    
mov
push
pop
push
jno
mov
inc
lret
jo
(bad)  
pop
insb
(bad)
ljmp
adc
inc
loop
add
(bad)  
mov
in
xor
jne
push
test
dec
sti    
xlat
insb
add
lods
mov
ds aaa 
out
xor
insl
es cs push
pop
adc
pop
ljmp
or
sarl
lahf   
mov
sysret 
ja
jnp
mov
pop
hlt    
sbb
xchg
mov
clc    
imul
sarb
das    
lret
fildl
and
add
lret
aaa    
pop
jb
sysret 
mov
shr
jno
lds
sti    
pop
fistpl
dec
inc
inc
sub
subl
enter
mov
xor
mov
xchg
scas
sbb
daa    
nop
push
mov
stos
pop
xor
jne
adc
sub
scas
and
daa    
add
(bad)  {%k1}
cld    
outsb
inc
push
push
and
cmp
inc
cwtl   
jno
pause  
jno
cltd   
push
nop
repz dec
in
push
xchg
xor
pusha  
movsb
push
movsl
jecxz
or
xor
lret
xor
pop
rorl
fnstenv
repnz daa 
or
jg
(bad)  
mov
cmpsl
inc
cltd   
in
jnp
loope
nop
xchg
cmp
xor
cmc    
test
jg
mov
mov
(bad)  
or
fstpl
xor
mov
push
add
fcmovb
add
hlt    
loopne
mov
dec
pop
inc
int3   
int3   
test
and
daa    
sbb
cmp
mov
dec
test
jl
adc
pushf  
inc
movsb
rcl
mov
cmp
sbb
notb
add
dec
or
add
add
dec
inc
dec
inc
scas
inc
pusha  
(bad)  
or
add
add
(bad)  
(bad)  
(bad)  
incl
add
add
add
add
add
add
jns
je
insl
cs inc
jb
ja
outsb
addr16 sub
push
gs jb
imul
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
xor
data16 aaa 
xor
fs xor
add
adc
gs insl
cs inc
jb
ja
outsb
addr16 cs inc
imul
add
popa   
je
pop
add
add
add
add
add
lsl
add
jno
add
add
or
or
add
or
add
add
add
dec
or
add
add
(bad)  
and
add
add
inc
dec
inc
add
mov
or
popa   
add
jo
pop
jae
add
ret    
add
push
ret    
add
outsl
test
add
cmp
push
push
test
cmpsb
fiadd
idiv
xlat
mov
xlat
cs
bound
ss jg
repnz
sub
push
js
nop
(bad)  
mov
and
dec
inc
dec
test
std    
jmp
push
aam
insb
cwtl   
loope
sti    
xlat
or
mov
outsl
imul
mov
jb
adc
(bad)  
cmp
mov
sub
inc
jle
adc
sbb
or
jo
mov
inc
in
adc
pushf  
cmp
cwtl   
pop
jp
push
cmpsl
andl
(bad)  
mov
ret    
out
adc
rolb
aaa    
and
jle
xchg
pop
andb
(bad)  
jp
jbe
imul
popa   
test
mov
insl
jmp
(bad)  
fcompl
pop
or
mov
add
cs lahf 
popf   
hlt    
rclb
imul
pop
outsl
(bad)  
jb
dec
stc    
outsl
insb
sub
adc
jecxz
and
xchg
aaa    
push
xchg
push
jmp
mov
movsl
cmp
xor
mov
lock cmp
fadd
loop
loope
idivb
mov
outsl
gs push
add
mov
cmp
fstpl
mov
dec
jmp
lcall
xchg
test
ljmp
cmp
call
pop
pop
add
out
sti    
loop
mov
xor
cltd   
movsb
lds
add
mov
push
mov
cmpsl
jmp
js
enter
scas
xchg
in
pop
(bad)  
cmp
test
pop
fs rcr
(bad)  
mov
sti    
(bad)  
mov
mov
and
cwtl   
mov
mov
and
push
popf   
jo
in
or
pop
and
sub
rolb
mov
neg
rcrb
adc
jg
jle
mov
leave  
flds
cltd   
push
test
adc
idivb
or
cmpsb
adc
cmp
add
hlt    
mov
dec
mov
in
ja
mov
roll
push
sbb
pop
jecxz
int
sbb
movsl
mov
xchg
fs push
sub
pushf  
xchg
iret   
loopne
add
mov
xchg
into   
(bad)  
ret    
add
clc    
fsubrl
loop
jp
sbb
notb
loopne
adc
sbb
lock sbb
out
das    
cs xchg
mov
scas
pusha  
cmp
push
aad
jns
xor
xor
es loope
sub
je
cli    
and
pop
cmp
outsl
and
fildl
mov
lock or
xchg
ret
js
xor
test
mov
imul
icebp  
mov
sahf   
sbb
inc
pop
in
out
push
push
jge
icebp  
lcall
sbb
rclb
into   
push
sub
pop
(bad)
sub
in
in
push
in
jno
mov
push
push
pop
adc
and
jno
xlat
lods
mov
imul
inc
fsubs
or
fsts
out
mov
push
stos
xor
jae
or
inc
orl
mov
aam
cld    
push
adc
jmp
adc
pop
adc
sahf   
xor
mov
imul
inc
pop
pop
inc
aas    
cmpsl
movsl
rcr
punpckhbw
sub
inc
es in
pop
fwait
test
fldcw
add
push
pop
sub
pop
sbb
dec
push
mov
add
arpl
dec
xchg
cmp
pop
cmp
sub
call
mov
mov
sbb
nop
lock iret 
and
aas    
xchg
sbb
je
sbb
aaa    
test
hlt    
mov
fldenv
adc
jle
jl
mov
sub
sub
fisubl
xchg
out
loop
push
dec
mov
and
clc    
add
dec
mov
and
(bad)  
mov
push
int3   
cwtl   
mov
xchg
mov
out
test
idiv
fildll
adc
popf   
cmp
fs int
(bad)  
pop
and
mov
mov
and
lahf   
push
sub
adc
cmp
add
repnz
pop
mov
das    
das    
push
int3   
enter
or
idivb
addl
push
push
add
add
inc
fimul
scas
or
sahf   
mov
popa   
adc
sbb
pop
push
sub
dec
std    
sub
enter
ss jg
addr16 pop
stos
pop
int3   
imul
out
adc
jle
jecxz
jnp
(bad)  
mov
or
add
sub
(bad)  
mov
mov
not
xchg
sbb
jb
jmp
mov
das    
mov
repnz nop
push
mov
pop
cmpsb
movsb
cmp
leave  
fdivrl
sahf   
xchg
test
leave  
pop
jae
jb
pop
xor
pop
dec
(bad)  
stos
or
or
fildll
jo
inc
psubusb
std    
adc
aas    
sbb
mov
inc
sub
sub
push
cmp
xor
jns
add
mov
(bad)  
imul
jns
xor
(bad)
and
push
inc
imul
add
lahf   
imul
mov
sarl
jge
xor
loopne
jo
mov
in
push
mov
mov
aas    
sub
les
ss jg
adc
fstpl
sub
in
xor
popa   
aam
mov
xlat
aas    
dec
ljmp
(bad)  
mov
stos
sbb
mov
enter
jne
(bad)  
xor
and
cwtl   
push
cmpsb
fsubrl
sti    
mov
cmp
mov
(bad)  
loopne
rcrb
lcall
mov
jp
sub
out
ds or
(bad)
push
adc
or
adc
into   
lret   
xchg
jo
enter
sbb
sbb
fmul
in
pop
push
lock adc
mov
add
ss pop
js
jnp
(bad)  
sub
push
push
push
sahf   
jne
(bad)  
lods
pop
mov
sub
shll
push
jl
jbe
cld    
sub
scas
sub
daa    
pusha  
sub
enter
mov
push
int
mov
mov
cmc    
lcall
sahf   
(bad)  
stos
mov
clc    
mov
popf   
jno
cmp
imulb
jnp
push
out
push
sbb
out
nop
mov
fwait
mov
js
mov
lods
(bad)  
fadds
ds test
roll
int
xchg
(bad)
add
out
add
jmp
dec
mov
cmp
jle
dec
or
mov
out
lods
push
sub
adcb
js
fmull
arpl
xor
mov
push
cmp
pop
dec
push
and
xlat
push
orl
push
sub
mov
enter
(bad)  
cli    
jo
xchg
fwait
addr16 addr16 ret 
movsl
sbb
mov
xchg
cld    
cmp
pop
jl
adc
leave  
push
cmp
je
imul
aas    
aam
cmp
mov
test
and
out
and
fucom
jb
shrb
cmpsl
mov
xchg
cwtl   
icebp  
(bad)  
or
sti    
test
sbb
inc
cmc    
pop
hlt    
add
roll
sub
cltd   
sub
repnz cmpsl
test
adc
addr16 hlt 
mov
sti    
in
movsl
dec
dec
jbe
cmp
cmpsb
push
pop
xor
adc
sub
xor
mov
mov
or
(bad)  
arpl
sbb
jb
scas
scas
dec
stos
data16 cs insb
adc
and
(bad)  {%k1}
ljmp
adc
popa   
jge
add
pop
fdivrs
jno
sub
pushf  
pop
out
cmp
xor
inc
fwait
movsb
pop
gs sti 
outsl
adc
test
test
lods
push
sbb
mov
jns
out
flds
jnp
aad
sbb
arpl
loop
mov
leave  
lret
cmp
mov
mov
fisubr
mov
imul
fwait
inc
jge
insl
sub
inc
or
xchg
shlb
jb
ss mov
or
fs
je
popa   
adc
into   
data16 aad
fcoms
push
ja
idiv
pop
(bad)  
imul
daa    
outsl
pop
gs repnz dec
mov
daa    
add
enter
test
hlt    
mov
jg
loop
andb
pop
add
je
pop
mov
insb
lods
int3   
(bad)  
mov
stos
or
mov
or
jns
roll
popa   
dec
(bad)
in
and
jl
sbb
pushf  
mov
jecxz
jne
or
std    
mov
dec
adc
xor
jo
jge
clc    
mov
repz xor
fwait
cmpsb
lret   
mov
cmp
std    
push
nop
les
sti    
or
xchg
mov
ret    
adc
movsl
enter
sub
inc
jo
sub
fs cmp
cmpsl
iret   
daa    
fisttpll
movsb
(bad)  {%k2}
xchg
xor
sub
mov
addb
scas
(bad)  
aam
repz pop
push
or
push
jae
push
insl
lds
dec
add
dec
fs xchg
insl
push
mov
sub
in
xchg
push
pop
insl
fcmovnbe
push
mov
test
jle
pushf  
jo
cmc    
(bad)  
aaa    
xchg
sub
loopne
stos
dec
mov
and
pop
pop
jmp
and
shlb
adc
push
shrb
xchg
dec
sti    
sahf   
pop
sbb
lret   
or
in
movsl
dec
imul
inc
iret   
rcr
push
int
pop
sahf   
fisttp
add
xchg
es insb
push
mov
sarb
bound
mov
pop
mov
aam
inc
lret
mov
xor
pop
xchg
cmp
mov
push
cmp
lret
adc
mov
ds push
leave  
mov
push
cmovbe
jmp
aas    
inc
cmp
lds
or
fldl
js
dec
(bad)  
ss
fadd
and
pop
lret   
ficoml
pop
pusha  
sbb
in
push
call
sbb
stos
sub
test
add
mov
lcall
dec
imull
decb
xlat
mov
mov
loope
pop
adc
mov
sub
outsl
mov
aam
sarl
(bad)  
lret   
stos
pop
push
cli    
adc
lret
in
addr16 push
dec
cmpsb
(bad)  {%k2}
adc
popf   
popa   
imul
jle
sub
cmpsb
xchg
inc
push
mov
in
stos
repnz cmp
(bad)  
pop
add
ja
ds mov
(bad)  
fnop   
dec
pop
push
push
mov
sbb
sti    
jle
sahf   
mov
cltd   
push
or
and
jb
push
push
cmp
dec
int
pop
mov
movsl
jae
lods
push
sbb
in
dec
push
aad
cltd   
bound
dec
sbb
mov
cwtl   
fwait
bswap
push
out
pop
and
loopne
subb
sub
movsb
mov
dec
mov
or
je
push
loop
pop
pop
jge
aam
push
bnd jl
pushf  
xchg
test
push
popa   
loop
inc
dec
mov
icebp  
mov
(bad)  
xchg
mov
or
mov
jae
jae
int
(bad)  
jae
xchg
mov
sbb
pushfw 
and
inc
(bad)
pusha  
and
icebp  
and
ja
mov
lds
adc
cwtl   
popa   
adc
repnz push
add
mov
sub
loope
adc
mov
(bad)  
sbb
jge
sahf   
push
cmp
cli    
lcall
add
mov
subl
cld    
lea
push
fs test
xchg
and
js
stc    
(bad)  
jbe
scas
movsb
sahf   
call
aaa    
(bad)  
xor
inc
stos
xor
mov
xchg
aad
inc
push
lods
mov
or
(bad)  
mov
push
fdivl
add
stos
repnz xchg
cmpb
add
cmp
pop
in
sti    
cmp
leave  
fnstsw
pop
dec
xchg
jl
cmp
cmpsb
ljmp
push
lcall
movb
out
fldl
lahf   
orb
cltd   
insb
mov
fimull
jg
inc
jbe
mov
test
in
fld
xchg
cmp
xchg
das    
inc
sub
or
lods
or
dec
add
mov
lods
scas
add
rorl
pop
xor
add
jne
cli    
insl
sbb
mov
push
lods
push
(bad)  
cmp
jbe
popf   
ret    
xchg
lret
divb
cwtl   
add
add
add
shrb
xor
cltd   
inc
cmp
jnp
loope
imul
lds
roll
sar
xchg
mov
shll
cli    
mov
push
push
pop
sahf   
inc
or
in
jb
aaa    
fldl
xor
in
mov
pop
sbb
mov
out
mov
pop
fmull
xor
in
enter
out
adc
sub
push
and
rclb
fidivr
fisttpll
mov
and
notb
xchg
xor
push
inc
mov
enter
out
das    
or
(bad)  
movsb
aas    
pop
or
pop
lcall
jl
clc    
lahf   
add
add
add
rcr
inc
jp
test
inc
mov
loopne
bound
rolb
shlb
dec
and
(bad)  
push
sbb
aaa    
(bad)  
(bad)  
pop
(bad)  
shlb
dec
push
int3   
jle
into   
loop
dec
xchg
inc
jns
loopne
add
xor
xor
fdivrp
push
outsb
jb
adc
ficoml
adc
dec
push
fsqrt  
cmp
add
push
or
sarl
jge
push
sarl
fmulp
dec
mov
imul
mov
sub
push
ss fwait
mov
mov
lock push
popa   
nop
mov
mov
out
jle
fadd
mov
fimul
jge
loope
pop
dec
fdivp
sub
and
loopne
lcall
add
cli    
imul
add
test
and
call
mov
jns
jb
insb
test
xchg
(bad)  
pop
sbb
ret
in
cmp
mov
stc    
hlt    
aaa    
clc    
adc
int3   
pop
xor
push
ja
idivb
inc
mov
or
add
mov
push
movsb
jnp
loope
xchg
sbbl
adc
out
cmp
addb
in
or
fdivrs
imul
dec
pop
and
lods
inc
jmp
and
dec
xchg
(bad)  
dec
int3   
jge
cmpb
jecxz
je
mov
sbb
cmp
or
enter
scas
sub
lods
fdivrs
and
test
mov
jo
sar
in
xor
jns
or
cmp
in
stos
push
loopne
loop
dec
shrb
inc
ret
mov
lods
into   
(bad)  
xor
xlat
mov
je
sub
xchg
jle
(bad)  
mov
cmp
fcoml
cmp
cs cmp
mov
jns
(bad)  
outsb
and
out
xor
or
mov
adc
stos
push
xor
(bad)  
or
push
dec
pop
nop
jecxz
adc
mov
adc
push
shlb
jb
pop
ret
push
xchg
or
mov
jmp
adc
(bad)  
clc    
sub
js
gs clc 
movsbl
shrb
dec
scas
gs
jnp
jmp
mov
js
lcall
in
pushl
or
pop
clc    
lahf   
(bad)  
mov
es ljmp
call
dec
add
(bad)  
out
in
std    
pop
fs dec
inc
pop
jg
jmp
cmp
sbb
xor
fs cltd 
data16 xor
and
add
adc
fldenv
mov
lret   
sti    
(bad)  
push
xchg
lods
into   
repz sub
xor
add
pop
xor
icebp  
xchg
jge
loope
fcmovb
test
cli    
jg
or
adc
mov
bound
adc
ds into 
sbb
xchg
jo
xlat
lret
daa    
pop
(bad)  
aam
fs dec
xor
inc
aam
sub
scas
aas    
jle
push
dec
add
and
jmp
sub
fdivrp
lds
aas    
sub
into   
cmp
andl
das    
stos
mov
fdivl
add
sbbl
adc
repz fbld
add
pop
pop
test
jae
or
fmull
cwtl   
mov
xchg
cmp
sbb
fnop   
pop
inc
std    
popf   
dec
lret   
adc
les
arpl
mov
cmovne
outsb
mov
pop
dec
dec
(bad)  
jg
inc
xor
mov
pop
pop
jmp
call
cmp
les
negl
les
mov
fmul
xchg
movsb
(bad)  
sub
nop
xchg
into   
cmp
repnz dec
mov
(bad)  
sarb
ret    
mov
mov
xor
movsb
punpcklwd
mov
cltd   
push
push
lahf   
out
pop
(bad)  
jo
imul
mov
fisttp
scas
popf   
nop
ja
cmpsl
inc
xchg
stos
pop
pop
adc
fs mov
aas    
inc
es ret 
adc
sub
mov
lret
mov
(bad)  
pop
mov
into   
mov
xchg
or
mov
push
int3   
adc
xor
push
jmp
fdivr
repnz mov
lock adc
jae
mov
inc
icebp  
xor
xchg
adc
xor
xor
and
cmp
leave  
jb
inc
jge
lcall
cmp
insb
mov
pop
pop
arpl
in
pop
add
mov
(bad)  
mov
in
mov
out
mov
inc
jae
mov
aaa    
jbe
sbb
in
arpl
and
sti    
xchg
leave  
sti    
stc    
or
push
das    
movsb
ljmp
jo
xchg
xchg
adc
adc
subb
mov
rorb
fs ret
es mov
fstpt
jle
push
cmp
clc    
and
popa   
iret   
jno
and
insb
lock jg
loope
stos
shrb
icebp  
arpl
pop
in
cmp
es
cli    
push
jb
movsb
loope
stc    
or
mov
mov
dec
test
shrl
gs pusha 
sbb
repz lret
ds pop
icebp  
pop
sbb
jecxz
jbe
mov
mov
mov
xchg
sub
add
nop
sbb
fwait
leave  
jno
or
dec
mov
ds test
jl
ret    
loope
rcr
enter
dec
lds
xor
fisttpl
cmpsl
ljmp
adc
out
aas    
sub
sub
add
sahf   
rcr
movsl
mov
mov
xchg
and
mov
in
ret
sbb
(bad)  
mov
mov
cmp
jecxz
(bad)  
mov
je
dec
lods
lea
pop
push
mov
xor
insl
adc
popf   
inc
sbb
pop
pusha  
(bad)  
hlt    
mov
test
std    
js
ret
orl
mov
inc
inc
iret   
xlat
mov
fnsave
mov
mov
jb
cld    
fsubl
xchg
out
std    
cli    
mov
(bad)  
vmovss
adc
jnp
pop
scas
jle
ljmp
into   
popa   
hlt    
shlb
outsb
sub
dec
loop
xor
fidiv
push
in
outsb
and
push
out
shlb
aad
and
xor
pop
or
ds fwait
push
mov
cltd   
in
lock jl
add
not
cmp
nop
(bad)  
mull
imul
xchg
mov
fild
sbb
sub
mov
jae
xlat
inc
mov
leave  
add
daa    
pop
icebp  
(bad)  
test
pop
lret   
cmp
and
adc
dec
jge
dec
lcall
mov
cs xchg
cltd   
pop
xchg
add
cmp
ss clc 
(bad)  
inc
and
fsubrl
mull
dec
mov
repz aaa 
leave  
fstpl
mov
mov
jae
std    
ds push
lods
pop
lret   
add
lods
out
out
mov
and
push
push
movq
fdivp
or
cmp
add
lcall
je
ja
add
xchg
mov
or
stos
mov
shl
repnz leave 
mov
fs stos
iret   
xchg
dec
mov
fidiv
push
jecxz
mov
adc
in
pop
xchg
cld    
sahf   
stc    
cmp
xchg
sarb
sbbb
mov
insb
pop
or
mov
movsl
mov
popf   
adc
push
mov
mov
mov
inc
add
add
sub
inc
stos
jecxz
popf   
lcall
popa   
imul
sbb
out
or
data16 xor
cmp
inc
and
sub
xchg
pusha  
inc
(bad)  
jl
jo
cltd   
dec
subb
xor
push
lret
add
scas
lcall
shrl
cmp
faddl
lods
dec
roll
addr16 mov
sti    
mov
out
xchg
dec
pop
mov
arpl
daa    
negl
jo
or
mov
imul
and
mov
int
pop
popf   
fwait
or
cmp
ja
and
sbb
setns
jmp
mov
arpl
xor
aam
lcall
(bad)  
pop
add
mov
imul
add
inc
inc
jmp
jg
int
insl
mov
into   
push
dec
jae
jns
mov
fstl
mov
push
dec
jo
mov
pop
mov
dec
hlt    
xor
xchg
fs fcmovnu
xchg
jae
dec
fsubr
lret   
cmp
popf   
xor
inc
adc
add
gs push
sbb
jl
cltd   
xchg
push
lret
gs inc
rcrb
mov
cmp
mov
sbb
insb
sub
add
fnsave
stc    
lods
xor
scas
xlat
(bad)  {%k2}
out
xchg
pop
sub
cmp
cli    
ficom
shr
imul
cmc    
sbb
add
adc
sub
nop
(bad)  
add
jg,pt
call
gs ror
(bad)  
das    
jnp
push
dec
dec
ja
sbbb
flds
dec
fcomip
insb
lcall
das    
lahf   
lret   
mov
shr
jmp
jecxz
fldcw
pop
mov
jne
icebp  
add
add
push
push
je
or
js
jae
dec
rcrl
sub
aas    
and
lahf   
fbstp
daa    
add
mov
sbb
lods
movsb
insl
jle
xor
inc
out
sbb
inc
out
rorb
lcall
sub
sahf   
and
out
adc
mov
dec
insl
sbb
test
sub
cmp
iret   
daa    
jb
dec
test
xchg
adc
mov
sub
cmc    
int
cmpsb
cmp
push
inc
sbb
ja
add
xchg
mov
pop
in
add
es or
imul
inc
cmp
cs pushf 
cwtl   
popl
mov
mov
int
mov
aas    
(bad)  
fsubs
imul
mov
mov
push
fsub
sbb
lret   
push
xor
mov
xchg
sbb
cmpsl
jp
add
mov
mov
movb
imul
test
or
stos
sub
jg
inc
mov
mov
leave  
mov
fwait
mov
mov
sbb
cmp
pop
loopne
sbb
xlat
adc
(bad)  
lcall
test
clc    
imul
js
(bad)  
fisttpl
call
adc
lea
jno
push
or
push
jmp
mov
sub
xchg
(bad)  
xor
test
popf   
movsb
test
sub
sti    
or
adc
xchg
loop
pop
sbb
jle
inc
sbb
push
cmc    
enter
jp
mov
movsb
cmp
lods
pushf  
adc
sbb
out
insl
inc
add
aad
jecxz
loop
xchg
and
(bad)  
mov
xor
es mov
icebp  
inc
ret    
xchg
push
int3   
inc
and
ficomp
pavgb
js
es imul
adc
sub
inc
repz imul
sub
mov
hlt    
inc
std    
sub
mov
fdivp
jb
jb
das    
lods
pop
push
jbe
or
sub
pop
fisttpl
or
push
pop
mov
xchg
jbe
es jbe
sub
incl
hlt    
push
lods
lret
out
pop
loope
mov
push
push
add
jle
lret
fild
push
ljmp
or
inc
mov
and
mov
xor
sbb
(bad)  
mov
dec
cltd   
cmpsl
pop
fdivr
or
dec
mov
inc
dec
jg
fsub
aas    
jg
cmp
jl
insb
(bad)  
jbe
test
add
scas
rolb
sti    
and
pushf  
adc
mov
jae
movsl
(bad)  
xor
or
cmpsl
sti    
cmp
and
loop
xchg
scas
cs and
push
jmp
iret   
into   
cmc    
ja
xchg
jge
test
stos
addl
(bad)  {%k2}
cld    
mov
lock call
lds
or
pop
mov
cmpsl
rorl
dec
hlt    
into   
or
cwtl   
mov
je
or
dec
int
push
js
and
add
xlat
js
push
notb
push
jge
notb
sti    
ja
in
ljmp
dec
mov
pop
sahf   
and
inc
mov
(bad)  
lods
jo
stos
jo
loop
jns
into   
jmp
push
inc
inc
int
pop
hlt    
mov
push
push
sub
inc
lcall
int3   
fimul
aaa    
test
jmp
fstpl
out
sarb
mov
(bad)  
out
jp
(bad)  
sub
mov
loop
nop
sub
jno
sub
insl
pop
push
(bad)  
mov
outsl
push
or
stos
loope
jl
pusha  
out
and
mov
cmc    
sbb
mov
mov
xor
pop
xchg
cli    
sahf   
jle
mov
out
imul
out
and
push
(bad)  
mov
cmpsb
jl
cmp
xchg
(bad)  
clc    
adc
add
mov
into   
insl
push
outsb
mov
sbb
dec
cmp
arpl
(bad)  
call
ds dec
mov
sahf   
xchg
jb
test
inc
push
sbb
and
mov
test
ror
and
lods
mov
mov
out
cmpsb
add
das    
popf   
sbb
jnp
adc
xor
pusha  
mov
lock leave 
pop
dec
insb
sbb
add
popa   
mov
mov
xchg
sbb
inc
or
(bad)  
mov
xchg
shlb
mov
xor
ss cld 
mov
lea
push
and
mov
inc
mov
push
xor
aam
sub
xchg
mov
das    
hlt    
movsl
js
xchg
test
stc    
lods
inc
sbb
inc
lcall
(bad)  
xor
mov
rorb
fnsave
scas
(bad)  
mov
es push
cltd   
lret
cltd   
or
(bad)  
sbb
jmp
cmpsl
push
outsl
push
movb
fisubl
cs
xor
mov
xor
xchg
push
loope
(bad)  
loope
pop
push
inc
xchg
rorb
fwait
push
ja
hlt    
inc
(bad)  
repnz mov
inc
pop
xor
das    
lahf   
inc
rorb
incl
jp
jno
imul
push
aad
rcl
sbb
sub
call
mov
inc
mov
inc
push
jmp
and
mov
pop
cmp
dec
jnp
mov
cli    
cmpsl
adc
out
inc
xchg
inc
ss lcall
pop
sbb
ja
sbb
btc
les
in
sti    
xor
cmpsl
scas
ret
sub
mov
dec
sti    
pop
fsubl
(bad)  
mov
insb
xor
xor
dec
mov
fisttp
sbb
jno
mov
mov
inc
cs jmp
inc
inc
bound
lds
mov
test
mov
xchg
icebp  
mov
mov
sbb
nop
adc
sbb
mov
daa    
stos
insb
jg
divl
pop
push
push
loope
(bad)  
add
nop
sbb
mov
inc
cmc    
add
cmp
xchg
addl
and
mov
scas
enter
popa   
iret   
fldenv
adc
xlat
sub
jns
in
pushf  
pop
(bad)  
std    
push
jae
and
mov
dec
lock xor
out
add
mov
mov
xchg
bound
push
(bad)  
sbb
ret    
popa   
lea
jbe
adc
in
mov
sbb
aaa    
andl
jns
bndmov bnd1,%bnd0
or
jecxz
stos
ljmp
fst
or
pop
sub
insb
adc
mov
imul
ja
pop
push
xchg
fcmovnb
mov
js
mov
lock mov
test
push
xchg
cmp
mov
lret   
(bad)  
sub
sbb
mov
cli    
xor
pop
insb
ds push
sbb
xchg
sbb
add
jae
fs or
inc
mov
jnp
cltd   
in
lret   
je
adc
notb
adc
mov
inc
cld    
(bad)  
add
iret   
xlat
xchg
pop
je
dec
fbstp
ljmp
lods
test
xchg
mov
lods
mov
xor
fimull
push
out
fidiv
ja
(bad)  
inc
in
pop
pop
in
or
adc
mov
dec
ret    
add
lcall
aas    
adc
mov
push
mov
sub
mov
popa   
fnstcw
data16 jno
imul
push
rolb
mov
or
cmp
pop
pop
out
mov
lret
push
shr
aam
insb
or
lds
dec
cli    
mov
in
jbe
xor
xchg
sarb
outsl
mov
pop
repnz mov
jg
movsb
out
vcomisd
(bad)  
or
pop
pop
lods
mov
(bad)  
movsl
nop
sahf   
lods
and
sti    
call
lret
sub
inc
iret   
data16 xchg
push
xor
pop
cmp
add
inc
enter
gs dec
mov
stos
test
aaa    
ljmp
xchg
inc
leave  
addr16 pushf 
lds
sub
push
fldenv
or
add
adc
mov
test
aaa    
outsb
hlt    
cwtl   
stos
mov
sbb
rcll
cmp
repz dec
scas
push
fprem1 
pop
and
gs push
jp
push
pushf  
cmp
mov
test
adc
flds
decl
jl
push
xor
xlat
ljmp
adc
scas
imull
lahf   
jnp
stc    
or
mov
inc
inc
fldt
and
jns
and
or
rcrl
push
jecxz
enter
dec
mov
in
scas
out
push
fnstsw
mov
imul
xor
ret    
aaa    
cmp
sahf   
jmp
xor
and
inc
imul
or
(bad)  
xor
jl
mov
push
lods
mov
cmp
sbb
mov
ret    
stos
das    
sub
sti    
mov
add
pusha  
repnz outsb
dec
mov
sahf   
xor
fwait
mov
mov
and
lcall
sbb
out
or
mov
mov
(bad)  
mov
mov
lret
lods
(bad)  
aaa    
push
lds
(bad)  
outsb
xlat
sahf   
pop
test
xchg
push
or
jl
gs loopne
push
loop
scas
adc
lds
dec
shrl
add
(bad)  
es fst
and
cmpsb
out
cmp
push
popa   
adc
pop
xor
sbb
push
scas
adc
test
repnz inc
addr16 ss or
or
clc    
leave  
es pop
mov
shlb
loope
lret   
dec
cmp
scas
add
mov
test
imul
jo
faddp
mov
icebp  
inc
rorb
cmp
push
stos
mov
(bad)  
mov
mov
std    
js
pop
dec
mov
push
int3   
jns
js
(bad)  
sub
outsb
sub
adc
sbb
stos
jle
xchg
fisub
inc
inc
mov
loopne
inc
mov
pop
xchg
cltd   
popf   
(bad)  
out
test
test
dec
jp
test
nop
fldenv
jl
mov
add
test
aam
shl
or
jp
sbb
and
(bad)  
and
push
push
push
jne
jne
in
daa    
add
push
pop
aaa    
div
or
cmp
cmp
ds
or
imul
es mov
push
adc
loopne
dec
jae
rcrl
movsl
inc
dec
pop
daa    
cltd   
adc
push
pop
adc
icebp  
add
push
shrb
sahf   
cmp
push
adc
test
jle
inc
add
pop
hlt    
pop
mov
dec
pop
pushf  
das    
loope
add
adc
mov
fdivs
lods
mov
std    
clc    
push
fisub
int3   
mov
data16
aaa    
mov
clc    
adc
pop
fmull
ficomp
mov
adc
popa   
nop
clc    
jl
(bad)  
mov
pop
cmc    
in
cmp
xor
or
roll
fildll
lret   
jns
push
xor
mov
xchg
hlt    
loop
sbb
xor
lods
leavew 
mov
xor
daa    
stos
jae
or
cli    
xor
push
call
dec
dec
test
inc
jp
lahf   
inc
add
push
lock add
mov
adc
xlat
mov
adc
test
mov
pop
data16 out
inc
xchg
mov
xor
adc
fisubrl
(bad)  
xchg
sub
jne
inc
mov
cmp
fwait
loope
aaa    
rcrb
or
and
repz adc
xchg
sub
or
call
adc
jo
pop
dec
sbb
sub
pop
push
inc
out
cmp
push
pop
fwait
test
int3   
mov
ffreep
xchg
or
mov
jmp
jmp
out
cmpsb
(bad)  
into   
and
(bad)  
out
(bad)  
ss mov
addb
aad
lods
xchg
fnop   
cmp
das    
push
jmp
pop
sbb
clc    
jl
stos
iret   
push
data16 ss
iret   
imul
(bad)  
mov
push
insb
iret   
mov
movsl
mov
(bad)
pmaxub
lret   
into   
add
in
call
inc
stos
negb
xlat
sub
stos
mov
js
dec
pop
insl
js
jnp
jbe
dec
sahf   
in
and
clc    
inc
xchg
xchg
mov
lods
push
ja
mov
push
ljmp
sub
lret
loop
xor
enterw
pushf  
int3   
repnz mov
ficompl
or
add
jo
mov
stos
lods
leave  
addr16 pop
mov
ss scas
js
mov
aad
rcll
xor
ret    
lods
sbb
movsb
jnp
jae
mov
push
mov
pop
inc
lea
push
mov
inc
data16 aas 
movsb
add
std    
loope
cmp
negb
lcall
js
mov
dec
or
cmp
fidiv
mov
pop
popa   
pop
jns
or
inc
lahf   
je
dec
sbb
dec
daa    
fildll
int3   
push
xchg
xchg
test
movsl
dec
ljmp
xchg
and
sub
neg
(bad)  
es dec
(bad)  
es aas 
adc
enter
push
inc
xor
std    
in
mov
xchg
movsl
pop
cs pop
iret   
lds
lret   
adc
jne
je
out
inc
cmp
xor
ret    
add
push
(bad)  
mov
add
addr16 mov
les
fstpl
cmp
cmp
adc
cltd   
push
mov
and
bound
cs insb
dec
jge
mov
jns
push
push
mov
lods
aaa    
push
push
or
stc    
insb
cwtl   
fwait
negl
and
jnp
mov
sub
jmp
adc
xchg
loope
add
movsl
push
cmpsb
nop
out
movsl
ljmp
xor
push
adc
mov
pop
fmuls
add
outsl
(bad)  
pop
and
mov
mov
jg
sub
arpl
(bad)  
loop
(bad)  
pop
ljmp
movsb
inc
fwait
insb
xor
sub
(bad)  
xchg
jl
hlt    
sbb
mov
push
push
mov
hlt    
push
xchg
das    
into   
je
jb
leave  
jle
mov
cmp
mov
cmp
dec
cs mov
cwtl   
loopne
and
(bad)
inc
ror
ret
xchg
icebp  
scas
mov
dec
or
iret   
sub
rol
dec
lock arpl
js
pop
(bad)  
std    
into   
push
mov
lock xor
jo
jmp
aad
cli    
cmp
in
push
inc
push
scas
add
std    
sub
push
xor
sub
mov
je
std    
mov
mov
mov
mov
inc
insl
xorl
mov
int3   
sbb
adc
cli    
adc
push
pusha  
sub
out
xchg
lods
sbb
adc
popa   
mov
sub
mov
dec
movsb
out
mov
sbb
mov
jno
insl
data16 fwait
sbb
add
fisubr
hlt    
dec
ja
cmp
mov
mov
mov
out
mov
into   
sbb
mov
jmp
cmpsb
ficoml
push
adc
repnz aam
aas    
ret
fadds
mov
jecxz
mov
mov
adc
jnp
mov
xor
arpl
pushf  
std    
add
cmpsl
(bad)  
cmc    
imul
gs leave 
add
jno
inc
pop
fbstp
jae
in
(bad)  
xor
outsb
jge
and
pop
push
lock and
test
(bad)  
and
hlt    
arpl
(bad)  {%k6}
sub
(bad)  
pusha  
and
mov
dec
loope
sub
cmp
cmpl
aam
stc    
insb
jns
outsl
push
lods
shll
push
dec
or
cmpsb
pop
aaa    
xor
das    
lret
aam
call
jns
add
(bad)  
popf   
push
or
xchg
insb
test
cmp
outsb
xchg
nop
cmpsl
insb
fcompl
pop
ret    
test
loop
pop
popa   
lret
ljmp
xlat
dec
pop
int
push
mov
insb
push
adc
dec
jl
sub
mov
jb
sub
test
es insl
cmp
rcl
pop
(bad)
adc
ret
mov
or
sub
das    
out
cmc    
test
xor
sub
shlb
and
jae
cwtl   
pop
cmc    
jecxz
(bad)  
sbb
pop
out
pop
sub
jmp
cmpsl
pop
and
sbb
iret   
(bad)  
push
or
(bad)  
jbe
gs popa 
(bad)  
mov
xchg
outsl
cs in
(bad)  
lahf   
push
mov
daa    
push
sti    
mov
add
ret    
fadds
sub
lods
or
es jge
or
mov
mov
dec
inc
pop
jne
nop
xchg
push
pop
or
enter
pop
adc
inc
aas    
mov
jge
mov
xlat
mov
xor
pop
or
or
jle
add
bnd ret 
push
inc
dec
mov
or
loopne
mov
(bad)  
push
sbb
lds
daa    
addr16 out
je
repz lahf 
mov
mov
pop
xor
fisubr
(bad)  
in
xor
mov
popf   
(bad)  
inc
es mov
out
lods
das    
mov
addr16 dec
outsl
jbe
imul
xor
inc
nop
stos
cmp
adc
inc
push
hlt    
mov
into   
int3   
xchg
call
mov
pop
in
sub
jp
sbb
daa    
cmpsb
fcomps
pop
jl
fisub
pop
call
test
fsubp
pop
adc
dec
cmc    
lods
or
cld    
and
xor
pop
loop
push
push
jae
lret   
and
add
data16 sub
(bad)  
sbb
(bad)
push
xor
jecxz
popa   
add
sbb
fldenv
mov
dec
mov
sbb
push
sbb
jno
jb
outsl
mov
cmpsl
test
mov
ljmp
call
inc
ljmp
cmp
lock sub
pop
cltd   
(bad)  
mov
push
jne
in
mov
lret
lods
(bad)  
or
mov
mov
pop
pop
sub
stos
adc
int3   
mov
jns
(bad)  
dec
sub
iret   
xor
in
mov
adc
sub
add
not
gs mov
jl
imul
imull
xlat
pop
pusha  
mov
pusha  
xor
arpl
sbb
cmp
pop
sbb
insl
stc    
mov
xor
cld    
fwait
xchg
push
dec
add
and
negl
inc
mov
int3   
dec
inc
fwait
lret   
xor
inc
jl
popf   
jp
aaa    
mov
sub
das    
mov
sub
test
cmp
sub
mov
pop
loopne
xchg
mov
leave  
adc
jle
pop
stos
lds
add
popf   
enter
idivl
test
inc
dec
mov
mov
and
adc
fdivl
mov
pop
inc
(bad)  
push
scas
fnop   
mov
jecxz
xor
into   
imul
push
in
ds mov
insl
and
cwtl   
cld    
(bad)  
mov
ljmp
(bad)  
ljmp
cmp
sub
pop
fildl
jg
push
and
push
jbe
jo
add
mov
xor
adc
push
out
clc    
or
mov
or
or
addr16 or
sarb
(bad)  
stos
js
(bad)  
cmp
sbb
cmc    
pop
mov
mov
arpl
rorb
into   
es xchg
lret   
dec
push
lock
in
nop
adc
shrl
icebp  
scas
mov
sbb
jo
(bad)  
nop
imul
aas    
pop
stos
adc
or
jl
das    
mov
movsb
dec
push
adc
les
pop
sbb
and
mov
or
add
in
cltd   
test
and
sbb
lods
ja
add
mov
cmp
push
mov
xchg
das    
cmpsb
js
sub
jbe
cmp
rclb
sub
push
adc
fisttpll
outsb
sub
or
and
dec
andl
ficompl
xor
repnz mov
rcll
rolb
popa   
jo
mov
push
and
clc    
(bad)  
push
mov
xchg
pushf  
sbb
(bad)  
ljmp
cmc    
lret
inc
xchg
mov
mov
or
stc    
lret   
mov
popa   
lea
push
jmp
loopne
pop
inc
mov
mov
and
xchg
std    
add
adc
iret   
and
(bad)  
mov
sub
xchg
adc
inc
mov
adc
pop
and
nop
or
in
xor
lods
stc    
and
cmp
leave  
sub
cli    
push
adc
les
pop
pop
cmp
bound
imul
mov
fiadd
ja
es loop
loopne
lock imul
jae
popf   
mov
pop
test
sub
inc
mov
mov
cltd   
bound
enter
fimul
loope
fmull
cltd   
cmp
aad
daa    
xchg
movb
adc
insl
xchg
or
cmp
cmp
jne
cltd   
or
push
dec
mov
dec
lahf   
js
aaa    
or
std    
ja
or
fild
add
repz cmpsb
and
pop
repnz shl
xchg
insl
and
popa   
jnp
and
loopne
xor
and
(bad)  
and
xor
repz test
pop
or
cs sbb
inc
imul
fidiv
(bad)  
(bad)
mov
cltd   
push
sbb
out
in
push
mov
dec
jb
or
(bad)  
rorl
das    
pop
push
(bad)  
mov
mov
(bad)  
notl
cmc    
lock iret 
imul
insl
mov
mov
stos
sbb
fs loop
sbb
cwtl   
mov
aam
pop
mov
(bad)  
pusha  
dec
xchg
lea
xor
into   
rcll
pop
or
jns
cli    
insb
xchg
(bad)  
cmp
cltd   
or
imul
mov
jecxz
enter
in
repnz aam
jne
ds mov
push
faddl
jne
adc
pushf  
(bad)  
and
bound
lea
mov
movsb
movsb
cmpsl
jno
adc
stc    
mov
and
mov
in
pop
popf   
out
jns,pn
inc
test
in
fnop   
lds
mov
mov
add
xchg
clc    
dec
sahf   
bound
mov
aas    
jno
sbb
xchg
or
xchg
lods
mov
mov
fcoml
push
inc
push
inc
mov
inc
push
push
push
fwait
mov
mov
sbb
or
scas
adc
in
sbb
push
pop
repnz inc
fisubr
jae
mov
enter
mov
cmc    
stos
aad
test
pop
or
and
sbb
fwait
cwtl   
lock jnp
mov
jns
lods
xor
or
adc
add
movsb
addr16 mov
pop
adc
pop
mov
sub
jae
cmpsb
lea
popf   
mov
lahf   
icebp  
sub
out
mov
cmp
data16 shrb
mov
enter
sub
inc
jb
outsl
repz mov
lods
pop
push
and
pop
xchg
out
adc
ss cmp
bound
adc
sub
inc
mov
sbb
bound
sub
add
xor
(bad)  
dec
push
das    
jle
pop
xor
loope
(bad)  
add
fwait
pop
cmp
inc
(bad)  
dec
(bad)
cs
fistpl
jno
(bad)  
pop
dec
mov
add
mov
cmpsl
cvtpi2ps
xor
pop
pop
scas
xor
stos
sbb
sub
sub
mov
ja
out
insl
clc    
push
push
lods
insl
sbb
mov
xor
inc
cmp
inc
mov
mov
cmp
xchg
stc    
inc
jg
push
fcomp
test
mov
fisttpl
sub
lahf   
call
mov
mov
mov
or
xchg
jg
sub
bound
loop
sbb
(bad)  
pop
cli    
cwtl   
icebp  
cmp
push
or
dec
mov
pop
mov
lret   
push
lods
xor
insb
data16 jge
and
sti    
lcall
arpl
sub
pop
xlat
lcall
movsb
bound
ds fsub
cmp
orl
mov
ljmp
loopne
adc
scas
mov
roll
push
repnz sub
xlat
push
sub
mov
mov
outsl
dec
popf   
adc
mov
ja
aaa    
pop
inc
ja
xchg
mov
jno
mov
adc
push
movsb
mov
(bad)  
je
les
jne
mov
jno
rcrb
pusha  
jp
test
insb
shrb
repnz aaa 
rorb
inc
lcall
ja
inc
xor
(bad)  
ss
fcmovb
test
adc
push
xor
shrl
aam
cmp
lods
inc
pusha  
andl
gs popa 
in
cmpsb
mov
lret
jmp
jb
mov
bound
inc
fwait
arpl
pop
repz fcoml
cli    
test
and
ja
scas
or
xlat
push
andl
or
sbb
adc
sahf   
xchg
xchg
cmpsb
jo
hlt    
aam
mov
sbb
(bad)  
sbb
inc
rcrb
jae
cmc    
fldpi  
gs ret 
jbe
std    
imul
inc
out
mov
(bad)  
push
fcmovnbe
xchg
xor
jbe
pusha  
mov
aas    
inc
sub
(bad)  
je
(bad)  
xchg
xchg
aad
or
aad
add
and
xor
cmp
cmp
stc    
in
add
mov
(bad)  {%k6}
in
push
sub
stc    
jp
inc
mov
loop
repnz mov
sti    
push
mov
dec
xchg
adc
jb
pop
cltd   
fwait
scas
lea
(bad)  
arpl
inc
sub
fstpt
mov
mov
fistl
and
add
mov
pop
movsb
xchg
jns
add
cmp
(bad)  
jnp
into   
cltd   
sbb
sub
and
pusha  
mov
nop
movsl
sbb
add
js
fwait
enter
fisubl
movsb
sbb
mov
imul
lcall
inc
mov
int3   
xor
xor
icebp  
xor
stc    
loopne
dec
cmpsb
loop
dec
sub
das    
cmc    
repz scas
or
dec
nop
lods
sub
test
mov
fsubrs
cmp
iret   
in
xchg
loope
data16 jle
ret    
lret   
(bad)  
dec
push
das    
mov
scas
jbe
and
pop
sbb
sub
add
(bad)  
mov
bound
rcrb
cmpsb
jg
and
in
stos
mov
adc
mov
dec
jnp
push
xor
lret   
pop
out
int
in
mov
repnz daa 
jne
in
out
stc    
mov
add
cmp
movsl
fs jp
out
cmp
out
pop
push
mov
inc
out
mov
mov
pop
mov
or
adc
addb
js
stos
pushf  
mov
xor
mov
or
jnp
(bad)  
sbb
imul
mov
jle
fwait
pop
inc
xchg
dec
int3   
jno
dec
aaa    
adc
in
jns
inc
lahf   
xor
xor
sub
push
xor
outsl
pop
fs push
mov
ja
sbb
in
or
ret
sbb
(bad)
jae
adc
lods
insb
adc
mov
xchg
mov
or
jns
cmc    
ss pushf 
testl
mov
ss dec
xchg
fwait
mov
and
and
clc    
push
js
insb
mov
lock adc
jecxz
sarb
mov
lds
(bad)  
lock cmp
xchg
ljmp
jno
add
sub
xchg
mov
xor
pop
fmuls
mov
and
movsl
push
mov
flds
or
addr16 jle
add
leave  
ficompl
test
(bad)  
ds lcall
push
ja
loopne
into   
rol
xchg
jb
arpl
mov
xchg
fisttpll
adc
xchg
icebp  
aad
leave  
pop
int
push
jp
push
push
shrl
or
push
popa   
stc    
mov
rcrb
sbbl
add
mov
jnp
cwtl   
push
aas    
dec
jo
imul
icebp  
or
push
mov
mov
mov
dec
insl
mov
lock sar
sbb
jno
add
int
repnz out
xor
shrb
aam
xchg
pop
std    
js
fwait
pop
xor
(bad)  
cli    
and
in
lods
push
jns
xlat
dec
jae
imul
jbe
push
inc
jne
add
push
adc
pusha  
mov
(bad)  
idivl
movsb
mov
jne
jbe
cs std 
scas
pop
(bad)  
mov
mov
add
adc
fmuls
xor
idivb
xor
es add
js
test
and
cmp
je
fstps
(bad)  
sub
rclb
mov
daa    
scas
dec
(bad)  
inc
(bad)  
dec
pop
loopne
or
or
inc
dec
scas
xlat
ss xchg
fldlg2 
mov
add
into   
inc
mov
cmp
in
jmp
addr16 push
inc
jmp
adc
std    
fdivs
inc
dec
pop
jae
xor
mov
jge
pusha  
sub
sbb
test
(bad)  
lock jnp
rol
mov
mov
lods
push
or
mov
movsl
addr16 xchg
jp
test
mov
popf   
jbe
inc
dec
sbbb
mov
es jnp
cwtl   
(bad)  
cmp
sti    
push
adc
repz add
dec
sbb
mov
aas    
fsts
adc
mov
hlt    
popa   
cmp
xor
arpl
or
(bad)  
jae
dec
sub
cwtl   
stc    
xor
jne
inc
pop
movsl
ds mov
lret   
addr16 imul
inc
inc
fwait
(bad)  
je
call
xchg
ret    
mov
add
or
ret
out
jg
mov
pop
lock sub
push
in
lea
xor
fisubrl
sysenter 
adc
lds
test
fild
dec
jbe
and
out
fwait
loope
sbb
dec
inc
mov
cmp
and
sysenter 
out
lret
pop
sbb
fiadd
pop
sbb
xchg
xchg
inc
in
mov
or
or
xor
iret   
push
pop
mov
psllw
add
jae
addr16 adc
add
push
add
out
cs and
cmp
adc
push
add
sbb
movl
rcl
push
fs mov
dec
sti    
push
jmp
cld    
add
inc
inc
cmp
pop
and
jge
(bad)  
(bad)  
mov
loop
das    
(bad)  
fcomps
pop
sbb
mov
mov
loope
mov
dec
sbb
test
pop
add
pushf  
les
mov
inc
popa   
test
cmp
push
jb
mov
(bad)  
pop
lcall
xchg
js
sub
jmp
mov
sbb
inc
ljmp
xor
fbstp
aaa    
shrb
and
sti    
push
inc
es das 
(bad)  
mov
add
popa   
leave  
(bad)  
adc
mov
fcoms
and
fistpl
mov
mov
jo
lods
push
mov
ljmp
shlb
sbb
dec
jecxz
and
mov
outsb
jmp
clc    
ret
ret    
mov
mov
push
call
sbb
and
and
(bad)  
mov
jg
jae
xchg
(bad)  
mov
mov
fsubrl
adc
repnz imul
ret
das    
test
fadds
mov
ret    
lcall
fcoms
xchg
je
mov
xchg
rcl
cltd   
xchg
aaa    
scas
outsl
iret   
mov
aas    
stos
lock aam
jne
(bad)  
iret   
ret    
xchg
adc
int
inc
clc    
test
(bad)  
adc
jmp
in
push
add
pop
pop
mov
add
cmpsb
or
data16
call
repnz out
mov
mov
and
xchg
pop
int
orl
sbb
mov
ficoml
stc    
outsl
ljmp
xor
push
cmc    
loope
cmpsb
inc
lret   
in
aas    
aaa    
push
jp
sub
pop
movl
bound
pop
jbe
(bad)  
mov
lret
aad
xor
push
inc
insb
sar
inc
arpl
jecxz
sbb
push
jmp
lcall
inc
fs es xchg
xor
push
and
push
in
stos
jns
inc
hlt    
fucomi
sarb
icebp  
and
iret   
xchg
push
dec
adc
or
icebp  
cmpsb
popa   
(bad)  
in
lods
(bad)  
mov
sbb
add
cmc    
xchg
pop
or
dec
mov
pop
loop
sub
sbb
cmpsl
jns
imul
fisubrl
subl
inc
sub
daa    
mov
not
and
out
jl,pt
scas
or
inc
jo
pop
fstpl
inc
fwait
xchg
mov
sub
jg
fs fwait
cmpsb
in
push
sbb
or
push
rclb
outsb
rcl
scas
fnstsw
int3   
notb
xchg
and
orl
push
(bad)  
call
icebp  
repnz adc
push
and
stos
ss inc
push
ret    
test
mov
std    
jbe
ljmp
cmp
xchg
ja
fwait
(bad)  
movsl
mov
pop
lcall
nop
jae
fs dec
push
sti    
inc
mov
fdivs
outsb
mov
inc
cld    
jg
rdpmc  
pop
(bad)  
xchg
test
enter
inc
js
sti    
(bad)  
pop
mov
pop
cmp
jae
adc
or
adc
fucomp
jae
xor
rclb
or
js
(bad)
jb
scas
jmp
imul
rcll
mov
jne
lds
pop
mov
mov
rclb
ds das 
sub
xchg
xor
xchg
sub
imul
sbb
arpl
(bad)  
imulb
cmpsl
push
inc
lret   
(bad)  
mov
in
add
and
in
in
les
idivb
add
pop
adc
inc
ss pushw
test
movsl
ror
rol
mov
jp
(bad)  
inc
push
bound
push
lcall
cmp
sarb
ss das 
mov
outsl
mov
data16 xor
(bad)  
mov
inc
jle
divl
mov
mov
xchg
imul
cwtl   
clc    
ret    
bound
inc
shrb
repnz sub
add
pop
sahf   
imul
ds xor
enter
mov
test
cmc    
mov
fistpl
sahf   
push
(bad)  
adc
push
loop
clc    
pop
dec
mov
push
adc
jns
fnstcw
ret
out
xor
clc    
jge
jae
pop
cmp
sub
outsl
inc
jb
ja
add
addr16 dec
sub
in
and
sbb
adc
pop
stc    
push
jle
adc
sarb
ja
(bad)  
cli    
in
pop
jnp
jge
mov
add
repnz sti 
pop
mov
push
or
mov
js
dec
cs inc
or
in
xor
lock icebp 
out
pop
cltd   
push
cmc    
int3   
hlt    
cwtl   
add
cmpsb
pop
shll
sbb
in
inc
sbb
add
out
popl
pop
xor
out
imul
inc
add
cmp
roll
loopne
mov
pop
add
int
pop
pop
sub
add
mov
outsb
lea
addl
rorb
mov
int
cmp
mov
repnz cmpsb
pop
push
pop
dec
sti    
and
(bad)  
aaa    
aam
jne
xlat
(bad)  
jno
aad
dec
jl
xchg
cmp
sbb
lret
sbb
xchg
jle
cmp
fsts
or
sarb
pop
hlt    
cmp
cmp
lcall
fadds
inc
jl
rcrb
jle
movsl
and
repz cltd 
jbe
fistpll
outsb
cmpsl
pop
and
xchg
call
fimul
xor
ja
push
(bad)  
leave  
jp
out
xchg
or
gs xchg
mov
pusha  
out
ss inc
lcall
imul
js
and
leave  
out
xchg
lds
lret   
xchg
mov
clc    
(bad)  
sbb
js
mov
outsb
adc
std    
cmc    
fldt
add
adc
loope
movsl
addl
aam
xor
cli    
adc
jo
mov
add
inc
dec
add
add
dec
inc
dec
inc
scas
inc
pusha  
(bad)  
or
add
add
(bad)  
(bad)  
(bad)  
incl
add
add
add
add
add
add
jns
je
insl
cs inc
jb
ja
outsb
addr16 sub
push
gs jb
imul
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
xor
data16 aaa 
xor
fs xor
add
adc
gs insl
cs inc
jb
ja
outsb
addr16 cs inc
imul
add
popa   
je
pop
add
add
add
add
add
lsl
add
jno
add
add
or
or
add
or
add
add
add
dec
or
add
add
(bad)  
and
add
add
inc
dec
inc
add
mov
or
popa   
add
jo
pop
jae
add
ret    
add
push
ret    
add
outsl
test
add
cmp
push
push
test
ds mov
sbb
rcrb
fsubrs
sti    
xchg
imul
mov
cli    
add
lock and
jmp
sub
sarl
add
imul
stos
mov
ljmp
sbb
add
xchg
loop
pop
sar
aaa    
gs pusha 
and
clc    
xor
fnop   
mov
adc
out
popa   
add
sub
jge
adc
fbld
mov
xchg
dec
push
add
sti    
int3   
pop
mov
adc
xor
sub
add
lods
mov
jp
mov
pop
stc    
jno
adc
mov
cmp
mov
adc
test
pop
xchg
xlat
sbb
(bad)  
jbe
and
pop
sub
sbb
xor
push
fucomp
fnsave
int
xchg
lcall
mov
rcll
mov
xor
adc
push
xchg
or
cmc    
inc
aas    
mov
fnstcw
cwtl   
movsl
fwait
push
push
loope
imul
ret
jne
or
pop
cli    
jge
cmp
pushf  
xlat
popf   
lds
mov
mov
iret   
and
xchg
adc
inc
hlt    
addr16 popa 
arpl
icebp  
inc
push
adc
mov
cmpsb
(bad)  
popf   
es jl
fwait
dec
fsubrs
(bad)  
shr
mov
or
cwtl   
cmp
and
in
cmp
xchg
aad
fimull
in
cwtl   
hlt    
mov
popa   
shr
push
mov
add
aaa    
daa    
adc
sbb
lds
mov
hlt    
and
(bad)  
sahf   
push
xchg
lahf   
add
xchg
and
cmp
dec
adc
repnz xor
mov
xchg
scas
sbb
stos
add
and
mov
(bad)  
jbe
gs ja
xlat
dec
rorl
inc
lret   
(bad)  
jae
xchg
test
stc    
movsb
pop
int
adc
in
or
cmp
lock outsl
inc
stos
imul
push
add
sbb
xor
mov
cmpsl
orb
mov
xor
test
sbb
jecxz
fildll
push
stc    
pop
sbb
jmp
fwait
lahf   
add
je
xchg
std    
je
push
pusha  
in
daa    
mov
or
ret    
xchg
and
test
in
xchg
xchg
imul
mov
mov
orl
xchg
movsl
lcall
aad
fild
mov
jge
enter
dec
iret   
mov
fnop   
lret   
pop
loopne
mov
iret   
jae
push
popf   
adc
push
inc
faddl
mov
cld    
or
clc    
lcall
es adc
es jg
mov
out
push
bsf
pop
(bad)  
decl
push
loop
xor
or
fistpll
pop
mov
std    
inc
pop
pop
mov
mov
push
dec
test
mov
cli    
dec
movsb
sub
push
inc
stos
mov
icebp  
ret    
mov
leave  
mov
lret   
and
stc    
and
test
cld    
insb
data16 cmc 
push
pop
jbe
mov
outsb
push
push
movsl
mov
stos
xchg
or
mov
mov
dec
mov
push
test
xchg
jnp
sub
mov
mov
das    
mov
rolb
pop
out
xor
fs mov
cmp
cmp
pop
idivb
test
cmc    
stc    
cld    
imul
cltd   
fimul
add
paddw
aaa    
pop
sub
pop
sti    
gs inc
sub
and
jae
push
lret   
gs loopne
or
cmp
repz xor
ret    
mov
xchg
push
clc    
push
daa    
repnz xchg
mov
and
pushf  
(bad)  
xor
mov
out
jecxz
scas
mov
xor
lock test
sahf   
sbb
outsl
mov
jl
push
data16 fisttpl
cmp
aad
inc
and
cmp
test
scas
pushf  
sbb
jecxz
dec
shr
or
fcomps
int
ffree
mov
movsl
dec
push
mov
pop
or
fdivrs
int3   
movsb
(bad)  
bound
xchg
out
fmull
pinsrw
ret    
mov
lcall
sub
lods
pop
ret
iret   
das    
pop
fdivr
ffree
repnz add
mov
aam
pop
add
shrl
pop
stc    
(bad)  
aaa    
mov
sbb
das    
push
(bad)  
shll
push
daa    
jge
sub
into   
xchg
or
pop
in
js
(bad)  
std    
push
hlt    
int
sbb
mov
jo
ret    
cwtl   
cli    
or
imulb
in
mov
and
test
push
fsubl
xor
sub
sub
pop
mov
cmp
fisttpl
jns
push
push
mov
jae
sti    
addr16 cmc 
es jae
movsb
xchg
push
stc    
repz
cmpsl
ret
fdivl
sahf   
sar
inc
ljmp
in
ljmp
jo
add
mov
int
pop
shll
add
mov
cmp
cwtl   
adc
imul
jbe
xchg
ljmp
or
data16 add
fstl
pop
pop
ret
fwait
xchg
js
in
ds pop
es push
jno
idivl
rcl
mov
add
xchg
jb
jecxz
sub
aas    
push
sub
cli    
popa   
sbb
adc
addr16 mov
cmp
or
(bad)  
enter
rcrb
sbb
push
add
jge,pn
fnstcw
repnz fcmovne
and
pop
lock lock and
fcoml
and
imul
idivb
pop
mov
in
stos
adc
xchg
xchg
out
fiadd
adc
dec
in
pop
test
fdivrs
jle
popf   
sbb
or
out
xchg
and
dec
add
lcall
ja
loopne
mov
mov
mov
fbstp
lods
xchg
mov
daa    
sub
in
mov
pop
inc
push
and
adc
cmpsl
lret   
cmp
mov
jmp
jl
pop
push
rcrl
and
adc
adc
inc
mov
inc
jo
hlt    
mov
stos
dec
xchg
roll
out
(bad)  
mov
mov
dec
out
lcall
push
pop
fcmove
stos
in
push
fbld
mov
mov
jbe
(bad)  
jmp
push
loopne
out
xor
pushf  
jno
add
mov
cmpsl
insl
leave  
cmp
push
push
mov
add
xchg
inc
push
rorl
sbb
out
dec
cmc    
repz inc
or
xor
xchg
cmc    
jp
subb
sarl
jge
fcom
inc
popa   
mov
cmc    
repnz cmp
pop
cmpsl
jp
mov
cmp
clc    
ret    
scas
sub
call
cmp
add
adc
pop
mov
enter
push
cmp
dec
xchg
or
lret   
loop
out
xor
mov
push
movsb
(bad)  
decl
inc
cmp
aam
fisubl
push
dec
outsb
inc
fiadd
daa    
mov
imul
xlat
xor
in
push
(bad)  
mov
sti    
jb
xchg
test
pop
lret   
fdivl
adc
andl
bnd jae
jge
cmp
push
mov
into   
add
pop
jl
adc
cmp
add
or
xor
pop
(bad)  
jbe
jl
mov
insl
daa    
xor
push
push
es pop
jl
fidiv
dec
push
jo
mov
xlat
imul
add
cmp
mov
push
lcall
repnz xor
inc
cmc    
movsl
dec
scas
scas
fnstenv
int3   
dec
fwait
nop
fildl
push
loop
js
sarl
pop
dec
pop
insb
add
and
out
jno
xchg
and
jne
xchg
adc
mov
dec
in
dec
dec
push
fwait
inc
xrelease mov
clc    
stos
push
imul
or
lods
out
or
xchg
push
cld    
xchg
out
icebp  
std    
xor
ffree
sub
test
add
arpl
popa   
cmpsb
or
aas    
sub
das    
mov
cmp
gs or
xchg
mov
(bad)  
pop
out
xchg
outsl
and
lret   
jae
xlat
scas
sbb
cmpsl
adc
sbb
loope
add
and
stc    
xchg
in
sub
(bad)  
push
std    
iret   
outsl
in
mov
sar
or
pop
xchg
cmp
mov
pushf  
aam
insb
stos
iret   
mov
lret   
sbb
lcall
and
xor
dec
jmp
(bad)  
push
and
or
push
push
lcall
and
cmp
jp
imul
dec
cmpsb
arpl
adc
jecxz
outsl
add
rolb
fistpll
and
out
fisttpl
cltd   
add
pop
iret   
adc
iret   
aaa    
mov
test
insb
mov
lds
out
and
push
out
int
rep outsl
xchg
mov
pop
outsb
leave  
push
out
sbb
xor
push
inc
lret   
sarl
scas
push
(bad)  
mov
adc
jae
leave  
adc
xchg
jge
sbb
pusha  
dec
add
mov
pop
icebp  
or
into   
cmp
movsl
fdivrs
cmpsl
or
repz lret 
push
xchg
sub
cli    
addr16 repz ljmp
mov
xorb
out
cmp
imul
int3   
fidivrl
mov
jle
ds sub
sub
repnz xchg
cs clc 
sub
push
inc
sti    
fcompl
mov
rcrb
rorb
cmp
push
xor
cltd   
mov
jb
mov
inc
push
jg
inc
ret
inc
push
and
subl
adc
xchg
imull
mov
mov
inc
and
xchg
iret   
mov
in
outsl
aaa    
sub
sbb
xchg
or
outsb
lods
icebp  
mov
dec
lods
push
ficom
pop
out
cmp
inc
pop
out
inc
sbb
(bad)  
enter
xor
push
jnp
xchg
fucomi
cmp
or
lahf   
jg
rcrl
movsl
mul
jne
dec
cmp
inc
in
(bad)  
xchg
push
cltd   
sub
mov
mov
mov
or
mov
sub
add
pop
xchg
mov
leave  
mov
mov
mov
push
fld
pop
xchg
dec
inc
fisub
roll
dec
sbb
popa   
sar
and
fbstp
and
data16 test
(bad)  
jae
pop
ja
ss inc
ror
dec
jge
or
pushf  
mov
(bad)  
out
inc
dec
xchg
xor
les
cwtl   
aad
dec
negl
dec
scas
ret    
pop
loop
mov
adc
lea
stos
hlt    
push
ljmp
lock jmp
test
mov
rorb
ret    
inc
inc
cld    
cmp
aaa    
sbb
ret
jg
andl
stos
cli    
cltd   
push
test
icebp  
adc
mov
jae
rorb
ss stos
(bad)  
xchg
aaa    
out
cli    
(bad)  
lea
je
adc
in
inc
sub
andb
pop
out
add
sub
ljmp
lahf   
bound
and
jp
test
ds inc
sub
xor
ljmp
into   
add
xchg
jnp
mov
sbb
xlat
pop
sbb
jecxz
std    
push
adc
test
push
test
and
rcrl
mov
mov
dec
pop
pop
sbb
daa    
jnp
sub
das    
fstl
push
dec
int
mov
pop
jp
push
mov
lcallw
add
inc
in
je
sar
daa    
shlb
outsb
jmp
pop
push
jg
or
dec
jecxz
fldcw
adc
sub
loope
iret   
fs jno
jle
add
nop
stos
push
fisubrl
push
out
xor
xchg
sub
inc
data16 int3 
nop
jbe
ret
imul
inc
xlat
push
jle
pop
inc
xchg
test
sub
inc
pop
lcall
js
jbe
inc
or
adc
xchg
aas    
jle
mov
popf   
and
and
dec
lock jmp
mov
jbe
addl
cmp
xchg
in
popa   
ffreep
sahf   
addl
mov
push
je
and
mov
or
xor
mov
test
pusha  
xchg
sub
add
fbld
xchg
in
mov
mov
int
xlat
stos
cmp
lret   
data16 sbb
fdivr
cwtl   
(bad)
xchg
mov
mov
or
and
cmpsl
sub
push
mov
frstor
imul
xor
add
lea
out
cld    
cwtl   
push
sub
rclb
icebp  
fucomp
cmp
shrl
jno
cmpsl
dec
(bad)  
or
(bad)  
xlat
mov
test
jge
lea
sarb
nop
cmp
mov
xor
popa   
push
adc
addr16 sbb
xchg
mov
or
movsl
push
sub
gs xchg
(bad)  
jle
aaa    
xchg
xchg
cmp
in
icebp  
outsl
(bad)  
xor
addl
sbb
fildll
xor
ja
lock sub
dec
arpl
out
out
or
pop
xchg
insl
mov
xlat
add
pop
xor
divb
xchg
test
and
or
dec
rcrb
sub
xchg
into   
add
js
popf   
pop
xchg
xchg
pusha  
jae
inc
cmpsl
hlt    
push
or
mov
mov
sbb
jecxz
sub
cmp
(bad)  
jb
mov
xor
(bad)  
rcrl
jnp
sub
loopne
out
xchg
cltd   
sbb
cmpsl
out
pop
or
outsb
jp
lods
clc    
mov
aaa    
ja
fldenv
test
rcr
or
pop
adc
push
into   
call
test
mov
cmp
dec
aam
dec
cmp
fistpll
pcmpgtd
jg
jle
xlat
sbb
and
lds
outsl
mov
dec
pop
pop
movsl
add
pop
enter
mov
(bad)  
jb
mov
ds jmp
ss into 
cmp
je
mov
xchg
repz sub
daa    
add
sahf   
push
test
out
rcr
adc
mov
stc    
cmp
cld    
dec
(bad)  
pop
cmc    
add
adc
js
inc
nopl
mov
sbb
cwtl   
js
pop
mov
mov
subl
fsubl
out
test
aaa    
jecxz
xchg
jb
xor
aam
pop
adc
mov
pop
lret
pop
push
jne
jl
sarb
mov
mov
shll
sbb
cmp
lcall
jbe
inc
loope
sub
jp
and
inc
mov
aaa    
xchg
xor
(bad)  
push
cld    
sub
decb
fldcw
dec
lea
scas
push
dec
or
fdivrl
jno
mov
xor
int
or
shrb
notl
dec
dec
sti    
lods
cmp
mov
insl
cmpsb
lret
jmp
addl
sbb
mov
clc    
es popa 
cltd   
cmpsb
adc
lea
dec
outsl
push
sti    
lods
jb
in
mov
mov
loopne
imul
add
movb
mov
icebp  
lret   
imulb
lea
lret
(bad)  
mov
adc
aad
jns
mov
cmc    
or
cmp
lds
mov
bound
insb
clc    
push
sbb
ja
fucomi
pop
movsl
push
movsb
cmpsl
or
int
bound
mov
inc
fistpl
pop
mov
pushfw 
push
inc
movsl
sub
add
push
mov
pop
out
icebp  
or
push
enter
adc
xchg
mov
or
js
bound
mov
jp
ljmp
push
jle
in
cmp
sub
xlat
dec
movsl
test
dec
sar
cmc    
pushf  
jge
xchg
faddl
push
dec
hlt    
adc
push
xor
cld    
cs and
push
push
push
gs pop
xor
xor
push
jne
mov
jg
mov
addr16 pop
cmp
adc
test
pop
icebp  
jno
in
push
shr
fcmovb
pop
leave  
aam
cmp
ror
loope
adc
add
jmp
push
movsb
and
lods
push
and
enter
into   
sahf   
xchg
pop
dec
xchg
or
pop
imul
pop
xchg
rorl
add
sub
jns
pop
adc
add
pop
loop
sbb
pop
rcrb
fimull
mov
jge
pushl
mov
xchg
mov
cli    
sub
adc
repnz add
mov
sbb
mov
int3   
and
xor
mov
dec
int3   
cmp
jge
popa   
pop
rcrl
cmp
push
in
out
in
or
push
pop
fldl
or
xor
or
into   
test
mov
je
test
xor
in
xchg
xchg
xchg
cld    
sub
mov
sbbl
inc
or
in
outsl
inc
mov
js
add
mov
lock out
inc
(bad)  
ja
andw
js
arpl
dec
shrl
cmp
push
pop
insb
dec
or
push
push
mov
loopne
sti    
cmpsb
repz data16 out
push
jne
cmpsl
and
pop
jge
out
add
data16 sarb
data16 aas 
test
out
or
sbb
sahf   
out
inc
mov
sbb
iret   
dec
rcl
icebp  
cmp
cmp
divl
inc
and
imul
or
sbb
fnstsw
mul
cmpsl
jl
push
dec
jbe
xor
dec
daa    
xchg
out
int
icebp  
mov
push
dec
cmc    
imul
sbb
divb
pop
(bad)  
cmpsb
xchg
test
(bad)  
xor
xchg
fmull
and
ficom
or
pusha  
mov
sarw
mov
out
mov
mov
out
xchg
rorl
ds aad
rclb
mov
cmp
scas
mov
lret
sahf   
sbb
push
xchg
xchg
addr16 into 
add
and
inc
xor
daa    
sbb
fs hlt 
jb
mov
iret   
adc
jecxz
push
daa    
es imul
xlat
and
adc
das    
push
outsl
mov
(bad)  
push
cmp
data16 jb
push
cld    
(bad)  
add
jo
mov
jb
mov
(bad)  
out
bound
notb
ss push
cmp
je
pop
nop
xor
dec
mov
loopne
push
gs dec
jne
or
lcall
jg
mov
out
push
push
(bad)  
pusha  
cmp
(bad)  
cs push
and
xchg
pop
in
(bad)  
jle
xchg
sbb
push
movsl
rcr
ret
int3   
movsb
js
stos
imul
cld    
and
dec
popf   
mov
add
out
les
clc    
jmp
mov
or
mov
mov
imul
adc
push
test
test
imul
pop
outsb
(bad)  
mov
jns
aam
jae
cmp
jl
jg
aas    
or
xor
xchg
push
out
or
loopne
xor
adc
adc
mov
out
xchg
scas
dec
std    
or
inc
out
push
int3   
pop
jns
(bad)  
aaa    
dec
into   
mov
jmp
hlt    
sub
xchg
gs test
pop
cmp
mov
dec
jp
and
icebp  
mov
or
enter
pop
addr16 mov
jg
pop
sbb
pushf  
shrb
mov
fstl
adc
and
notb
stos
pop
in
rorl
bound
stc    
shr
add
jno
inc
dec
daa    
movsb
cmc    
insb
stos
imul
cmpsl
xchg
aas    
fisttpl
cmpsl
pop
ficomp
mov
cmpsl
mov
pop
pop
mov
in
or
xchg
repz push
or
or
inc
pop
jecxz
xchg
les
push
in
lret
xchg
mov
jl
outsl
aam
jmp
shl
ss pusha 
(bad)  
int
sbb
inc
jp
xor
(bad)  
cwtl   
cmc    
movsb
repz push
insl
(bad)  
mov
cmp
ja
ret
and
call
or
outsl
sub
fs jb
or
stc    
dec
add
inc
pop
(bad)  
mov
lods
into   
fcomip
and
jmp
mov
out
mov
xor
popa   
sbb
hlt    
cld    
outsl
jl
and
lcall
mov
js
pop
lahf   
iret   
sbb
adc
cmp
rorl
adc
int3   
xchg
popa   
aaa    
les
lea
sti    
sub
cmp
jo
scas
in
dec
fldl2t 
popf   
cmp
pusha  
cmc    
lcall
push
outsl
out
fwait
xchg
sti    
icebp  
fdivr
mov
mov
js
or
and
outsl
mov
mov
push
arpl
cmpsl
dec
out
les
mov
add
sbb
push
in
int3   
sub
scas
(bad)  
jne
shrb
or
out
out
or
stc    
xchg
and
jbe
cmpsl
push
mov
pop
in
lds
es jmp
or
mov
roll
shll
sahf   
cmp
sbb
mov
push
inc
xchg
test
push
out
sub
in
pushf  
pop
stos
aam
sbb
xor
and
xchg
or
push
push
and
mov
loop
(bad)  
lods
out
out
clc    
loope
mov
pop
inc
shl
stos
ror
fwait
push
pop
sbb
cmp
cli    
aaa    
imul
or
out
cmp
push
mov
lods
lcall
jae
xor
loopne
leave  
sub
mov
stos
(bad)  
mov
dec
roll
shrb
push
mov
xchg
xor
mov
ficoml
lods
jg
mov
lret   
push
jg
pop
pop
imul
mov
divl
outsb
aad
out
xlat
aas    
(bad)  
js
xor
adc
xchg
int3   
addr16 test
adc
ds arpl
adc
jo
rcll
je
popa   
cmc    
sub
mov
jl
add
add
mov
mov
cltd   
(bad)  
in
popa   
les
push
pop
fstpt
daa    
std    
fidivrl
(bad)  
fdivrs
ljmp
rorb
mov
mov
in
imul
mov
pop
sbb
es mov
ljmp
cmp
cld    
aam
dec
fstps
fild
ret    
sub
inc
xchg
push
repnz xor
fsubrs
jmp
decl
lds
cmc    
inc
(bad)  
sub
pop
xchg
push
cmpsl
(bad)  
mov
fmuls
icebp  
and
mov
push
sbb
mov
(bad)  
mov
loop
or
stos
test
push
popf   
subl
xor
loope
inc
fidivl
jle
cmc    
ljmp
fadds
or
out
jae
imul
rcll
push
lret
in
push
xchg
mov
pop
sbb
adc
sub
sbb
or
cld    
(bad)  
aad
jb
std    
ret    
imul
push
xor
mov
inc
xchg
inc
add
ja
outsb
jp
cld    
out
jmp
dec
cmpsb
fdivrl
jecxz,pn
aad
pop
insb
repz shlb
mov
(bad)  
scas
sbb
loopne
and
cmp
mov
and
or
roll
popa   
insb
pop
fwait
outsl
xchg
mov
mov
jmp
loope
sub
cmp
xor
sbb
or
xor
jno
and
mov
mov
adc
testb
mov
adc
sbb
add
sub
out
call
roll
sbb
(bad)  
push
push
or
roll
jns
inc
mov
fwait
sbb
fwait
mov
aam
movsl
mov
test
stos
inc
hlt    
fnstenv
imul
mov
leave  
cmpb
xchg
outsb
outsb
jae
mov
rorl
leave  
sub
(bad)  
xor
jl
aad
sub
pop
adc
dec
pop
mov
lds
lcall
imul
fisubr
imul
cmp
cmc    
cmp
ds sahf 
pop
ljmp
loop
out
mov
insl
cmp
mov
call
cs pusha 
pop
inc
inc
add
inc
pop
in
cmp
jnp
push
sub
or
std    
sbb
shrb
mov
movsl
cli    
stc    
loope
jnp
and
lods
or
pop
xchg
adc
mov
bound
xor
fucomi
or
push
aad
scas
jno
mov
add
in
nop
jecxz
std    
mov
addr16 jge
outsb
cld    
push
and
fcompl
mov
inc
jno
cmp
adc
mov
cmp
mov
popa   
mov
popa   
es mov
cltd   
inc
sahf   
sub
adc
clc    
std    
lahf   
lods
and
shrl
cmp
push
fld
mov
insl
cld    
mov
jo
xchg
sub
mov
popf   
imul
mov
bound
out
in
out
jg
cmp
shl
ds pop
hlt    
jae
add
outsl
add
mov
xchg
xchg
inc
pusha  
xchg
adc
cmp
movsb
gs xchg
jmp
jae
or
xchg
mov
inc
mov
push
sbb
mov
xchg
sub
inc
rcr
lods
lds
loopne
cmp
or
bound
mov
bound
pop
test
xor
leave  
(bad)  
mov
decl
adc
imul
jecxz
xor
xcrypt-cbc
cmpsl
xlat
mov
push
orb
cmpb
jnp
mov
add
mov
jg
fisubr
fidivr
fsts
and
jl
sbb
sub
out
lods
mov
jle
mov
jle
jl
enter
rcll
jo
imul
add
cmp
adc
pop
bswap
mov
sub
xlat
mov
aam
sbb
movl
insb
(bad)  
add
push
iret   
(bad)  
xor
shrb
xor
fnsave
adc
mov
jo
sbb
add
stc    
adcl
ss jo
xor
outsb
push
pusha  
jo
and
xchg
lahf   
sarb
push
lods
rcrb
pop
push
jg
divb
loope
add
adc
ret    
in
daa    
push
(bad)  
aam
mov
cli    
addb
inc
lret
test
(bad)  
mov
lock cmpsb
mov
ds dec
inc
or
adc
arpl
push
jge
and
movsb
je
in
out
dec
mov
pop
mov
out
mov
mov
mov
shll
add
push
xchg
push
cltd   
mov
or
stos
gs mov
mov
loope
rolb
dec
sbb
jb
and
out
or
(bad)
lcall
push
mov
jno
iret   
jbe
lcall
lea
dec
fcompl
mov
cmc    
incl
adc
mov
pop
stc    
jo
lods
or
inc
roll
adcl
hlt    
xchg
movsl
in
inc
shlb
xchg
ljmp
fnstsw
sbb
pop
sbb
out
inc
push
xor
add
inc
(bad)  
out
loopne
and
cmp
mov
inc
push
xchg
insb
negb
pop
pop
inc
outsb
push
add
lret   
or
xlat
lcall
jg
stos
cmp
and
outsl
js
mov
jge
mov
sbb
insl
je
lods
ret
iret   
or
cs mov
mov
jbe
(bad)  
mov
or
inc
inc
nop
jge
movsl
movsl
xchg
cs cli 
bound
movsl
popa   
cmp
leave  
cmp
aad
fdivp
dec
sahf   
cwtl   
clc    
xchg
(bad)  
push
mov
or
dec
mov
jl
dec
push
aad
push
cs push
add
sbb
pop
push
mov
xor
insb
popf   
push
sbb
mov
jle
mov
lods
push
inc
(bad)  
mov
dec
mov
test
jae
push
jmp
cmpsl
test
mov
mov
jmp
mov
mov
or
test
in
aas    
sub
xor
xchg
dec
icebp  
hlt    
dec
xchg
push
enter
(bad)  
ja
xchg
sbb
stos
xor
or
jl
imul
fwait
icebp  
popf   
daa    
fimul
call
adc
lods
adc
jmp
pop
insl
adc
mov
cs pop
adc
jb
ja
bound
lret
aad
popf   
lret   
mov
loop
jp
imull
push
push
lahf   
jg
fwait
jp
leave  
(bad)  
out
sbb
fimul
cli    
mov
mov
fwait
jne
sub
inc
add
test
push
(bad)  {%k6}
std    
push
sti    
and
(bad)  
mov
cmp
adc
xchg
jg
push
jmp
(bad)  {%k6}
lret
das    
and
lret   
gs lcall
mov
subb
add
repnz ds out
mov
jmp
das    
jp
push
out
add
pop
scas
xchg
jbe
sarl
mov
fs in
or
mov
or
mov
and
lds
stos
inc
inc
icebp  
or
inc
mov
mov
fistp
pop
mov
std    
xchg
xchg
out
mov
cmp
sub
mov
adc
hlt    
jns
cli    
push
into   
pop
cmpsl
in
(bad)  
clc    
(bad)  
push
pop
shrb
imul
(bad)  
adc
popa   
leave  
jg
push
pushf  
aas    
cmp
fmull
inc
test
push
ds xchg
jb
sub
out
pushf  
movsb
pop
mov
mov
sti    
arpl
dec
cmpsl
cltd   
stos
test
lcall
cs push
xchg
movsl
loope
bswap
adc
bnd jle
dec
imul
cmc    
ja
jbe
dec
hlt    
(bad)  
enter
mov
(bad)  
and
sbb
jecxz
inc
daa    
test
jb
cmp
sarb
sbb
push
arpl
mov
mov
popf   
jp
cmc    
cmp
in
mov
cmc    
fucomp
fwait
jno
mov
dec
mov
insb
mov
dec
cmpsb
(bad)  
das    
jo
sub
fisttp
fsubl
out
aas    
cld    
stos
(bad)  
mov
pop
mov
push
pusha  
clc    
enter
pop
xor
popf   
or
imul
xlat
dec
std    
push
adc
ljmp
imul
adc
pushf  
push
inc
push
pop
push
xor
inc
insb
mov
loop
popf   
fsubrp
or
cs mov
push
loop
(bad)  
es dec
mov
(bad)  
ja
or
xor
mov
stos
adc
inc
clc    
push
cwtl   
rclb
xor
or
sbb
add
inc
mov
inc
out
jecxz
push
je
sub
sub
jp
fsubrp
push
xchg
cmp
push
mov
xor
leave  
pop
adc
rep movsb
ficompl
and
pop
xchg
cmp
into   
mov
push
mov
cwtl   
sub
xor
xchg
cmpsb
lods
clc    
insb
xchg
les
lods
xchg
test
gs push
inc
cmc    
cwtl   
enter
jge
das    
mov
fist
and
icebp  
dec
cmpsl
dec
test
test
ds push
jno
test
add
test
ret
aas    
sub
xor
popa   
jle
xor
rclb
je
mov
fbld
and
xchg
(bad)  
aaa    
or
aad
ds dec
mov
push
xchg
rcll
mov
repz shrl
lahf   
popa   
push
xor
call
dec
fildll
mov
and
add
data16 jae
imul
lea
xor
scas
scas
sbb
mov
mov
popf   
call
fisubrl
dec
fsubrs
mov
je
sub
sbb
xor
jo
push
subl
and
cld    
push
mov
xor
nop
scas
cmp
lds
add
mov
mov
mov
push
mov
push
inc
push
jecxz
lret
(bad)  
cmp
jmp
dec
int
cld    
mov
cs inc
movsl
jp
xchg
and
icebp  
test
mov
mov
cs and
mov
push
lret   
dec
popa   
scas
jecxz
mov
sbb
repz jg
lret
(bad)  
fildll
repnz sub
mov
aas    
ss leave 
xlat
es dec
mov
and
sub
arpl
mov
pop
int3   
xor
aas    
data16 aam
(bad)
mov
ds pop
inc
cmp
mov
or
enter
inc
ror
mov
fildl
movsb
cmp
or
fstl
(bad)  
xchg
das    
sahf   
imul
mov
leave  
rclb
in
mov
nop
dec
(bad)  
movsb
dec
and
test
rcrl
xchg
mov
push
mov
mov
xor
sub
out
xchg
add
mov
dec
imul
popf   
negb
loope
dec
fs adc
daa    
or
loope
or
(bad)  
insb
add
inc
sahf   
inc
loop
cld    
mov
sbb
rorb
sbb
push
jns
adc
mov
test
adc
adc
xor
imulb
sar
dec
push
lds
lods
cmp
outsl
push
jne
inc
push
ret    
fimul
scas
stc    
dec
dec
lret   
movsb
pusha  
add
mov
mov
xchg
fidivr
ja
cmp
out
push
insl
xor
(bad)  
push
xor
arpl
out
sarb
imul
fs aam
dec
cmpsb
cs or
jnp
xchg
and
in
push
notl
repz test
fisub
scas
or
enter
je
mov
lock push
int
pusha  
test
xchg
push
lret   
in
shlb
push
xchg
aam
jo
dec
jge
shll
and
cmpsl
mov
sub
mov
cmp
int3   
add
or
mov
out
rcl
cmp
add
and
jne
(bad)  
xor
add
(bad)  
pop
lret   
and
fs
lock jo
andl
std    
test
lds
fnstcw
cli    
inc
cmp
(bad)  
mov
pop
and
outsb
xchg
pop
enter
push
fnsave
gs pushf 
(bad)  
pop
lret   
jp
sbb
jl
cmp
jno
in
xor
jmp
fimul
dec
and
mov
lock out
fdivr
jb
gs dec
int3   
inc
add
je
or
les
push
jno
push
(bad)  
jl
hlt    
dec
cmc    
outsl
dec
fsubs
cs aad
mov
std    
sarl
out
imulb
cmp
rcll
xor
mov
jno
pop
call
shll
out
fistpl
hlt    
fucomip
popf   
add
jle
subl
loope,pn
mov
mov
in
mov
sbb
and
and
xor
pop
aad
ss cltd 
mov
dec
dec
mov
dec
cmp
xor
hlt    
add
inc
sbb
and
rolb
std    
mov
cmp
imul
mov
cmpl
pusha  
pop
pop
stos
add
jg
je
aaa    
mov
lahf   
mov
outsl
shll
pop
adc
and
cli    
jne
imull
cmpsb
fidivrl
mov
shr
jmp
nop
xor
dec
dec
xor
stos
int
cmc    
mov
nop
rcll
push
fstpl
mov
xorl
jo
sbb
rcrl
jae
leave  
pop
or
mov
fcomi
mov
jne
loope
cltd   
mov
sub
add
jb
xchg
sub
push
xor
std    
dec
dec
divb
mov
sbb
dec
jg
mov
ret    
das    
xchg
jecxz
jl
shlb
fwait
jp
(bad)  
ror
(bad)  
mov
mov
xor
ljmp
adc
test
inc
nop
(bad)  
int3   
out
push
pop
repz fcoms
mov
ret    
mov
int3   
push
insl
cmp
lcall
das    
dec
enter
adc
mov
ret    
pusha  
add
call
mov
jno
es mov
xchg
pop
and
jl
cmpl
pop
sti    
xchg
push
test
bound
out
ja
clc    
inc
jge
adc
dec
inc
push
sbb
sbb
cmp
add
comiss
loop
outsl
xlat
pop
test
fisttp
xor
xchg
ja
(bad)  
(bad)  
xorl
outsb
(bad)  
dec
(bad)  
cmp
fnstsw
mov
jmp
jo
out
xchg
es mov
mov
xor
lea
lahf   
or
dec
mov
xchg
pop
iret   
std    
or
pusha  
adc
or
cltd   
push
xchg
out
jnp
inc
sbb
mov
mov
push
push
pop
ljmp
std    
jb
mov
mov
(bad)  
scas
jg
mov
push
ss hlt 
dec
call
(bad)  
jae
push
cwtl   
repnz xchg
movsb
test
rorb
bound
dec
punpckldq
lret
adc
jle
xchg
inc
cmpsl
insb
pop
mov
jmp
push
mov
add
push
adc
fildl
repz cli 
mov
cmp
jb
out
jge
dec
int3   
test
icebp  
enter
add
add
fisttpl
mov
mov
mov
(bad)  
add
mov
ret
test
bound
jne
sub
in
movsl
jmp
pop
ds stos
lret
pop
mov
adc
inc
dec
inc
pop
xchg
repz jl
stos
pop
mov
pop
sahf   
adc
enter
rcl
push
lret   
push
mov
inc
ret    
dec
push
xchg
vunpckhps
push
mov
adc
shrl
add
daa    
pop
pop
sub
rcl
lcall
(bad)  
hlt    
cmc    
mov
pop
sub
aam
cmp
lock ss repnz mov
sub
xor
lods
je
xchg
hlt    
xchg
push
dec
ljmp
jne
pusha  
loopne,pn
call
xchg
ret    
shrl
sub
sub
(bad)  
int
repnz cs push
fs pop
push
lcall
fdivrs
jp
inc
inc
jno
or
dec
rorl
ds test
stos
mov
pop
lret
add
sub
jbe
pop
cs adc
(bad)
jae
(bad)  
jb
hlt    
rorl
lret
movsb
mov
ja
pop
pop
add
add
push
adc
xor
mov
dec
cmc    
std    
add
cmp
(bad)  
out
mov
add
mov
or
stc    
add
push
mov
xchg
imul
and
xlat
sbb
and
jnp
js
outsl
sbbb
and
sub
cld    
adc
sbbl
data16 sti 
nop
loopne
jnp
fwait
in
push
sub
dec
mov
mov
clc    
sbb
xchg
adc
gs mov
notb
push
lods
inc
dec
iret   
test
subl
add
js
jbe
jecxz
xchg
imulb
and
sarb
repz imul
stos
jl
xchg
mov
clc    
ss stc 
loop
sbbl
pop
add
jb
das    
xor
rcrb
aam
and
sbb
pop
mov
test
test
xor
stos
pop
mov
outsb
or
xchg
and
pop
out
xchg
lea
or
cwtl   
sti    
sbb
loope
lea
jg
int3   
or
fcompl
sub
dec
pop
das    
pop
adc
add
xchg
mov
in
pop
ret
mov
mov
xchg
lahf   
lock push
(bad)  
mov
cli    
in
stos
rcrb
lret
sarl
in
and
jge
pop
xchg
je
mov
out
mov
push
dec
ret    
shll
sbb
ljmp
mov
sti    
and
shll
and
lods
mov
data16 std 
outsb
fwait
xor
xor
or
punpcklbw
in
int
cmp
fisttpl
mov
lret   
icebp  
fwait
xchg
mov
dec
ret    
pop
xchg
push
(bad)  
test
push
jecxz
stc    
ds int3 
mov
pop
enter
insl
push
cwtl   
or
fdivrl
jmp
mov
leave  
adc
mov
sahf   
mov
xor
mov
int3   
jecxz
sahf   
add
jg
mov
cmp
push
push
xor
pusha  
shr
pop
lds
je
xlat
sahf   
adc
fdecstp 
lds
sahf   
rolb
in
or
cmpsl
aam
sbb
addr16 xchg
mov
xor
(bad)  
nop
nopl
adc
add
scas
test
xchg
dec
or
cmp
sar
pop
jecxz
pop
ss cmc 
pop
test
sub
call
sub
stos
cmpsl
ficom
sbb
push
jmp
es inc
mov
stc    
jae
add
loopne
xor
lret   
fcmovbe
sbb
push
bound
out
mov
jnp
fwait
arpl
js
mov
cmp
std    
out
mov
scas
dec
adc
lea
xorb
pop
ds cli 
int3   
pushf  
imul
add
or
jne
add
adc
lock cld 
xor
jg
push
aad
arpl
sbb
sub
clc    
loop
outsl
sar
idivb
cmpsl
mov
mov
clc    
sti    
aaa    
jnp
jp
push
sub
(bad)  
iret   
stc    
mov
mov
lret   
loopne
jnp
jno
jns
in
fildll
iret   
and
(bad)  
pushl
cli    
daa    
loopne
jl
pop
push
pop
popf   
push
testl
fistpl
push
xchg
adc
fdivs
sbb
xchg
fstpt
adc
dec
cmp
xor
call
jne
cmp
pop
sbb
pop
add
lods
pop
pop
ret    
mov
dec
push
and
sbb
stos
movsb
loope
lods
push
ss jle
sti    
out
jp
arpl
xchg
imul
ljmp
push
incl
lods
and
mov
fsts
or
inc
ja
mov
sbb
sub
pop
in
xchg
jle
add
(bad)  
loop
push
cmp
push
jb
scas
pop
push
push
mov
or
call
shrl
loopne
test
fstpt
daa    
xchg
in
fnstsw
addr16 xor
lcall
(bad)  
iret   
jecxz
into   
cmp
aas    
pop
sub
stc    
jnp
rcrl
fs cmp
or
lahf   
jg
mov
pop
ffree
mov
sub
adc
jmp
add
inc
inc
sub
aam
and
jb
mov
sub
subl
leave  
mov
ret
scas
dec
shl
inc
arpl
sbb
fldl
leave  
push
movsl
add
push
pop
(bad)  
lret
iret   
xchg
lock xchg
pushf  
push
push
fs push
cmp
popf   
adc
xlat
mov
sbb
xor
pop
outsl
add
fsubl
mov
mov
insb
lcall
out
ficompl
xchg
and
loop
pushf  
dec
or
or
dec
imul
data16 xlat
cmp
push
in
add
sbb
lahf   
adc
inc
adc
out
xchg
and
jp
push
pop
jns
push
test
imul
cmp
pop
es ret 
movsl
out
in
paddb
les
outsl
adc
out
pop
jle
rol
mov
or
adc
sbb
cmp
es mov
loop
lea
ljmp
add
loope
popf   
push
xchg
je
or
and
aad
test
push
imul
inc
cmp
or
or
mov
and
jae
dec
xor
xor
je
cli    
mov
dec
stos
sub
movsl
xchg
fistp
jne
out
lret   
mov
or
add
insl
cwtl   
out
xor
lock mov
shrb
jnp
andb
add
clc    
mov
jno
ficoml
test
in
std    
mov
inc
mov
dec
jmp
(bad)  
jae
lret
cmp
repz adc
mov
cmp
add
je
push
jbe
int3   
leave  
gs inc
(bad)  
testb
subb
test
sbb
xor
add
mov
inc
mov
scas
loop
insl
push
sbb
mov
cmp
(bad)  
mov
repz mov
xor
sbb
addr16 jle
pop
popa   
test
loop
push
add
push
fadds
pop
sti    
movsb
inc
xchg
call
dec
dec
add
in
sub
pop
hlt    
mov
imul
fwait
shrl
push
pop
insb
(bad)  {%k6}
rorb
inc
add
jno
out
pushf  
sub
or
cmp
shrb
insb
out
xchg
and
push
cmpsb
pop
outsb
ss cmp
dec
lret
in
ljmp
dec
stos
bndstx
imul
mov
iret   
(bad)  
jbe
mov
sbb
inc
push
es cmp
jb
imul
xor
adc
enter
jl
or
and
push
out
add
lea
or
stc    
(bad)  
outsb
mov
ret    
std    
dec
jmp
adc
(bad)
aam
cmp
lret   
pop
(bad)  
fistl
negl
in
movsb
mov
std    
push
jnp
daa    
sub
lods
inc
adc
cld    
add
scas
xor
sbb
mov
add
mov
lds
stc    
jecxz
and
int3   
jmp
das    
jno
jnp
dec
xor
in
cmp
nop
inc
and
xchg
mov
jmp
inc
pop
stos
in
sub
push
or
jno
lret   
lahf   
aaa    
enter
xchg
outsb
add
xchg
dec
push
stos
sahf   
xor
divl
xor
shrb
push
adc
arpl
outsl
clc    
inc
popf   
incl
jmp
shlb
dec
cltd   
fdivl
lret
mov
outsb
adc
loope
stc    
ficomp
mov
mov
mov
mov
mov
pop
pop
(bad)  
lret
sbb
add
xor
mov
jne
jnp
jp,pn
mov
adc
sbb
jbe
test
sub
test
rolb
stc    
pop
test
ret    
loop
je
inc
rolb
test
mov
clc    
daa    
add
mov
(bad)  
lret   
ss scas
inc
push
out
movsb
jb
imul
loope
gs mov
adc
push
mov
mov
jl
(bad)  
(bad)  
mov
test
lea
sarl
jecxz
mov
or
dec
adc
push
pusha  
out
cltd   
stos
pop
in
adc
push
mov
jecxz
jg
mov
arpl
jbe
inc
aas    
ja
rorl
sub
pop
(bad)  
out
mov
cmp
iret   
cmp
jp
dec
loop
adc
mov
leave  
xchg
push
test
xchg
cli    
dec
xor
cli    
push
insb
loopne
pop
add
js
fbstp
and
push
dec
fs das 
sbb
sahf   
lods
idivl
mov
out
xchg
xchg
dec
(bad)  
mov
jno
mov
dec
orl
roll
sub
push
push
mov
rcll
hlt    
fldl
dec
mov
xchg
xor
lret
(bad)
(bad)  
outsl
mov
add
repz lock scas
add
(bad)  
pop
movsb
js
add
call
hlt    
push
add
mov
jbe
pop
mov
cmc    
nop
jl
icebp  
add
jl
roll
inc
lods
repnz inc
inc
add
shrb
fnsave
pop
cmp
incb
mov
xor
flds
adc
imul
pop
sub
in
mov
mov
sub
sbb
imulb
add
and
fdivrl
sub
sub
sub
pop
test
jo
jo
dec
add
cmp
lods
(bad)  
dec
mov
xlat
dec
pop
int3   
or
pop
sbb
xor
push
add
mov
add
jb
dec
nop
jge
adc
cmp
sub
mov
dec
data16 ss out
(bad)
lea
cmc    
into   
cmp
outsl
mov
cmp
and
xchg
popl
je
mov
aaa    
inc
pop
adc
or
xor
mov
repnz pop
sub
push
icebp  
into   
mov
xchg
imul
mov
loop
pop
fnsave
sub
addr16 mov
(bad)  
jl
test
lahf   
or
insb
jae
push
xchg
cmp
(bad)  
sbb
call
test
cmpsl
push
iret   
add
ror
loopne
mov
frstor
nop
mov
sub
mov
mov
mov
pop
fcoms
mov
popa   
arpl
pop
mov
lret   
out
inc
(bad)  
dec
outsl
stos
xchg
sbb
pop
and
jne
pusha  
in
jne
inc
popa   
mov
in
ja
xchg
and
xor
xchg
jb
mov
das    
adc
pusha  
scas
ret    
pop
or
mov
enter
aaa    
stos
sub
sar
sub
in
clc    
xchg
int
cmpsl
iret   
popa   
out
in
je
notl
push
aas    
push
push
push
cmp
inc
jg
lret   
test
ljmp
sub
leave  
outsl
scas
popa   
loope
mov
stos
xor
fdivs
outsl
addl
hlt    
cmc    
loop
loopne
push
jno
scas
push
lds
xchg
mov
push
mov
test
sti    
and
dec
xor
lea
pop
mov
imul
pop
add
popa   
sub
xchg
movsb
lea
xor
jmp
imul
dec
push
movsb
clc    
xor
inc
and
mov
mov
mov
inc
inc
mov
inc
pop
arpl
jo
je
aaa    
xchg
test
sbb
add
lret   
jmp
stc    
popa   
cli    
jb
inc
fisubr
and
ret    
fnstsw
dec
mov
lret
or
add
sbb
jbe
in
cld    
fsubr
call
xor
aas    
je
or
lods
std    
push
imul
mov
pusha  
push
mov
push
mov
sub
adc
or
mov
into   
sahf   
jbe
cmpsl
adc
cs pushf 
lds
dec
cmc    
mov
cwtl   
test
clc    
cli    
andl
mov
mov
(bad)  
clts   
push
(bad)  
xchg
add
adc
in
inc
dec
jmp
(bad)  
loop
js,pn
mov
loop
mov
(bad)  
cmpsl
cmpl
shlb
movsb
out
adcl
jmp
gs jmp
rorb
out
int3   
jbe
(bad)  
out
imull
jecxz
subl
xlat
(bad)  
lods
ret
fistpl
sub
xchg
mov
cmpsl
xor
test
add
fdivs
data16 test
roll
in
divl
(bad)  
mov
fwait
or
arpl
(bad)  
fcmove
fcmovbe
push
sarl
(bad)  
gs and
cmp
ret    
push
flds
pop
es ret
cmp
sbb
pushf  
pop
outsb
xchg
fbstp
es loope
shrl
daa    
fmuls
mov
pop
jb
arpl
stos
xor
push
mov
push
dec
sub
add
addl
push
les
lock jl
add
sbb
fwait
into   
jle
insb
xchg
icebp  
aas    
or
and
mov
clc    
cmp
sub
add
push
fs inc
inc
mov
test
mov
aam
pusha  
cmp
dec
shlb
sbb
push
icebp  
das    
adc
test
nop
mov
out
pop
xchg
cmp
or
mov
push
jl
mov
dec
dec
mov
xor
sub
sti    
fisubl
xor
sbb
rclb
mov
push
push
loopne
out
jne
lds
jb
(bad)  
int
fiaddl
push
outsb
cmpsl
mov
les
sbbb
inc
int
in
rcll
dec
push
mov
iret   
sbb
push
inc
(bad)
mov
fldenv
(bad)  
stos
pop
inc
adc
xor
ror
adc
daa    
mov
cmp
in
frstor
test
or
sub
jg
subb
loopne
gs adc
xor
xchg
jg
dec
loopne
dec
adc
hlt    
test
add
inc
and
xor
rcl
dec
and
gs pop
int3   
inc
cmp
roll
fisttpl
inc
inc
bound
xchg
jge
dec
leave  
jo
jecxz
lods
jg
idivl
in
sub
mov
popf   
dec
and
add
lods
repnz sub
jl
pusha  
jns
js
(bad)  
xchg
cs scas
out
cmp
cltd   
lahf   
push
lods
and
sbb
imul
add
pop
stos
aad
xchg
mov
mov
pop
jecxz
inc
call
push
loope
push
lock inc
iret   
ljmp
ljmp
jne
imul
cli    
jg
mov
adc
sub
arpl
sbb
(bad)  
mov
mov
or
lods
xchg
sbb
test
jmp
(bad)  
jmp
sub
and
mov
out
rcrb
repnz pusha 
or
jb
out
push
add
in
bound
mov
test
pop
jg
xor
sbb
lea
push
push
fsubr
xchg
test
scas
jg
fstps
adcl
mov
jecxz
sub
mov
mov
xchg
dec
test
test
push
and
mov
(bad)  
cmovnp
mov
xchg
jecxz
rorb
cmp
mov
lea
xchg
xlat
xor
mov
scas
inc
mov
or
(bad)  
pop
(bad)
ds mov
mov
outsl
cs dec
jne
fwait
popa   
xor
lods
xor
dec
fildll
inc
sarb
rcrl
sbb
stos
mov
lock push
ss pop
or
mov
and
popf   
mov
jne
add
loop
push
add
cmp
cs push
jmp
cmpsb
sbb
leave  
jno
cmp
mov
inc
aad
or
ss in
inc
andb
xchg
cli    
repnz cli 
(bad)  
stos
je
pushw
xchg
loope
inc
sbb
mull
loopne
sbb
jnp
mov
xchg
lret
cmp
or
(bad)  
and
loope
cmpsb
dec
mov
xchg
xor
mov
xor
in
fstpl
fisttpll
mov
xlat
push
pop
repnz aas 
push
mov
sub
or
jo
xor
xor
mov
insb
divl
and
test
add
mov
int3   
pushf  
inc
pop
xchg
sbbb
std    
jmp
xchg
cmp
subl
scas
stc    
pop
mov
xor
lock add
push
scas
test
add
mov
test
jl
xor
lea
xchg
(bad)  
lea
xor
sub
(bad)  
mov
cmp
and
cmc    
aaa    
rcll
in
adc
push
or
sbb
repz pop
mov
and
inc
add
sahf   
rcl
inc
push
hlt    
rorb
jle
or
dec
xor
loop
mov
lods
hlt    
(bad)  
adc
in
mov
loopne
inc
push
jle
cli    
outsl
sub
xor
lret
stos
(bad)  
imul
cmpsb
xchg
mov
add
leave  
or
test
lret
aam
push
mov
js
cmp
add
pop
les
sahf   
daa    
mov
mov
adc
call
mov
or
(bad)  
ds lahf 
test
cmpsl
fildll
or
sbb
rolb
dec
enter
mov
jne
add
(bad)  
je
in
or
or
sub
sbb
and
fnstsw
inc
jmp
sub
sub
mov
ret    
cli    
inc
xlat
pop
fldenv
int
push
leave  
leave  
jae
aas    
ljmp
fadds
xchg
movnti
push
xchg
xchg
pop
add
jecxz
mov
cmp
les
or
leave  
pop
mov
mov
data16 add
ds and
mov
cmpsl
dec
pop
mov
in
dec
(bad)  
jb
in
stc    
sub
imull
sub
push
jg
(bad)  
lods
dec
cmp
enter
(bad)  
mov
jo
outsb
(bad)  
mov
pop
cmp
out
pushl
and
pop
insl
cmp
in
jle
mov
xor
insb
fsubl
in
mov
inc
push
dec
lret
inc
mov
es test
lahf   
ret    
jno
pushf  
cmpsl
mov
mov
mov
jne
push
mov
xchg
in
push
fiadd
jle
push
pop
cmpsl
cmc    
in
pop
mov
cmp
rorl
or
cmc    
gs push
fs pop
in
imul
add
stos
jp
push
orl
cmp
and
std    
movsl
fwait
and
cmp
lea
mov
jg
shrl
jns
pusha  
xor
out
repnz testb
adc
dec
or
mov
out
int3   
inc
clc    
(bad)  
mov
pop
adc
add
cmpsl
add
icebp  
sbb
and
push
xor
push
add
notl
xor
(bad)  
stos
test
cmp
fstps
jo
mov
jge
push
jg
add
es ds dec
sbb
push
outsl
in
dec
push
mov
jmp
cwtl   
js
jle
shrb
je
movsl
xchg
push
sbb
sti    
and
or
xor
es adc
int3   
push
mov
jge
hlt    
bts
inc
aad
in
cwtl   
inc
xor
jge
and
cs jmp
aaa    
push
xrelease xchg
xor
aas    
adc
lcall
pushf  
xchg
sbb
push
ja
(bad)  
mov
(bad)  
dec
jo
dec
nop
pop
fwait
mov
test
inc
call
add
fdivrl
ja
or
and
fild
add
add
dec
inc
dec
inc
scas
inc
pusha  
(bad)  
or
add
add
(bad)  
(bad)  
(bad)  
incl
add
add
add
add
add
add
jns
je
insl
cs inc
jb
ja
outsb
addr16 sub
push
gs jb
imul
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
xor
data16 aaa 
xor
fs xor
add
adc
gs insl
cs inc
jb
ja
outsb
addr16 cs inc
imul
add
popa   
je
pop
add
add
add
add
add
lsl
add
jno
add
add
or
or
add
or
add
add
add
dec
or
add
add
(bad)  
and
add
add
inc
dec
inc
add
mov
or
popa   
add
jo
pop
jae
add
ret    
add
push
ret    
add
outsl
test
add
cmp
push
push
test
(bad)  
mov
and
jge
mov
int3   
aaa    
orl
mov
lods
sbb
dec
imul
sbb
jmp
(bad)  
sbb
(bad)  
adc
push
enter
arpl
jmp
fwait
movsl
xchg
aam
xchg
push
(bad)  
push
lods
bound
mov
mov
pop
pop
outsb
ljmp
addr16 mov
jb
dec
and
jle
pop
(bad)  
xor
nop
out
cmp
xor
outsl
and
inc
cs in
jge
ds xchg
push
(bad)  
push
add
call
xchg
cltd   
cmp
fwait
(bad)  
jp
ficom
xor
mov
icebp  
inc
loope
dec
divl
in
jp
cmpsl
stos
adc
call
out
fmull
fsub
pop
adcl
pop
dec
mov
data16 mov
xchg
lret   
add
popa   
sub
or
inc
sahf   
movsl
shr
cmp
and
test
jecxz
test
loop
out
lea
add
xchg
jbe
inc
je
das    
pop
(bad)  
adcl
dec
xor
pop
fs dec
add
xor
fs mov
mov
imul
xor
mov
sbb
mov
add
hlt    
xor
stc    
push
fdivl
mov
jno
lret
(bad)  
(bad)  
xchg
sbb
sub
pop
(bad)  
jbe
mov
add
repnz xor
fwait
sbb
pushf  
mov
or
jl
mov
cwtl   
lea
mov
cmp
dec
arpl
cmp
cmpsb
out
adc
data16 mov
jmp
fild
popa   
repnz mov
jne
jg
cwtl   
xor
mov
sub
out
dec
call
jmp
movsb
leave  
mov
or
sbb
xchg
sbb
(bad)  
das    
mov
pop
push
push
inc
push
push
lock insl
xor
andl
mov
mov
push
or
fdivs
test
(bad)  
iret   
or
add
mov
sbb
dec
pop
mov
mov
xor
scas
test
dec
(bad)  
xor
dec
addr16 aad
mov
inc
repz iret 
adc
mov
test
jo
xor
in
mov
js
cmc    
aas    
push
aam
xchg
dec
scas
push
add
mov
push
je
cmp
mov
cmc    
popf   
out
fwait
sub
pop
test
add
add
cmp
push
(bad)  
jb
mov
rcrb
xor
mov
jo
int3   
cmpsl
mov
adc
xchg
lods
or
orl
adcb
rol
cmc    
pusha  
insb
lock cld 
repz fs mov
andl
stos
add
dec
adc
adc
icebp  
das    
scas
mov
cmpsl
(bad)  
sbb
iret   
adc
mov
adc
fnstenv
lods
jnp
or
test
sti    
inc
push
push
pop
cwtl   
imul
in
mov
fdivrl
mov
inc
inc
cli    
insl
daa    
sub
xor
xchg
add
push
cwtl   
mov
jge
add
mov
aam
sarl
pop
push
mov
leave  
or
pop
push
in
add
cltd   
movsl
cmpsb
clc    
mov
mov
pop
mov
adc
mov
mov
sti    
andl
cs movsb
xor
cmpsl
xchg
pop
nop
ja
jle
out
mov
inc
movsl
and
push
ss stc 
push
out
add
inc
lds
outsl
les
aam
in
imul
pop
arpl
addr16 mov
call
mov
jns
and
mov
and
and
inc
adc
insb
inc
mov
xchg
ss enter
das    
xchg
add
into   
cmp
xor
fdivr
mov
jns
test
and
scas
cs sahf 
rep insb
xor
sbb
or
gs pop
aam
sbb
movsl
add
push
shlb
data16 and
xor
test
out
aam
(bad)
adc
xchg
sub
cmc    
mov
aam
hlt    
std    
mov
ljmp
(bad)  
and
jbe
sub
adc
mov
popa   
aam
push
mov
jle
lds
call
(bad)  
repnz nop
sbb
stos
outsb
xchg
imul
in
push
popa   
dec
int3   
jmp
ss push
in
xor
fwait
mov
test
pop
xchg
mov
sub
cld    
out
mov
xor
loopne
js
xor
rol
(bad)  
mov
push
mov
cld    
mov
les
mov
addr16 jl
mov
nop
mov
and
push
adc
scas
in
xchg
daa    
or
xchg
xor
dec
push
das    
arpl
mov
push
lods
stos
aam
fstps
xchg
push
jo
push
insb
push
dec
adc
or
(bad)  
fwait
mov
mov
adc
mov
cltd   
push
andl
pop
xchg
ffreep
mov
mov
mov
jmp
cwtl   
mov
pop
pop
sub
lret
xor
dec
dec
mov
push
fsubs
lea
cmp
mov
lret   
mov
movsl
jo
cli    
mov
scas
cmpsl
pop
in
add
xor
stos
or
xchg
cltd   
xchg
ret
dec
ss push
bound
outsb
mov
sub
call
out
mov
mov
shrl
in
mov
dec
sbb
add
mov
mov
(bad)
sub
js
push
in
pop
insb
dec
fidivl
addr16 or
rep insb
jmp
xor
mov
fdivrl
mov
test
or
mov
xchg
sub
das    
ja
js
mov
mov
data16 incb
ljmp
push
xchg
std    
mov
das    
and
and
xchg
push
jns
xor
fldcw
dec
lds
push
push
inc
dec
sarl
inc
cmp
sti    
imul
sub
mov
jmp
icebp  
sub
jo
sarl
sbb
inc
outsb
rorb
cld    
scas
out
xlat
arpl
xchg
jle
pop
test
dec
cmc    
fldenv
out
into   
xor
imulb
jecxz
push
pop
scas
and
add
jbe
push
or
and
pop
mov
ret    
jmp
push
in
hlt    
add
sub
lret   
xor
and
bound
sub
pop
adc
imul
mov
iret   
add
fisttpll
mov
jae
jnp
dec
sub
stos
or
mov
test
add
bsf
cs xchg
je
outsb
(bad)  
xchg
outsl
dec
(bad)  
and
mov
or
mov
in
aas    
and
and
stc    
dec
ja
nop
adc
cmc    
aam
mov
sbb
push
(bad)  
icebp  
jge
push
out
lds
(bad)  
decb
sub
es add
and
cmp
inc
cmp
pop
aad
imul
xor
push
add
insl
lahf   
fistp
sub
lahf   
popa   
push
addr16 bnd jge
or
sbb
orl
gs in
or
inc
psllq
pop
or
mov
pop
aam
sub
mov
jnp
and
pop
or
jmp
lahf   
aad
lahf   
xor
scas
and
mov
adc
xlat
jnp
xor
jp
mov
out
daa    
out
pop
mov
pop
mov
jge
repnz cmp
loopne
outsb
jmp
insb
push
pop
cltd   
stos
mov
in
mov
cmc    
sub
jle
sbb
xchg
aas    
lcall
test
icebp  
ret    
cwtl   
push
mov
sbb
inc
or
add
mov
leave  
pop
cs inc
add
add
test
addl
jne
and
out
push
adc
imul
jb
jbe
(bad)  
mov
iret   
inc
fwait
insb
pop
dec
loopne
push
fdivl
sub
xor
ljmp
imul
jne
js
jmp
aas    
daa    
or
stos
outsb
dec
pop
cltd   
(bad)  
jp
jmp
ds xchg
jge
sub
mov
(bad)  {%k3}{z}
(bad)  
inc
ja
xor
adc
push
inc
sti    
(bad)  
insl
dec
xchg
aas    
push
movsl
xchg
in
(bad)  
jmp
cmc    
xor
loop
dec
xchg
les
jmp
movsb
in
xor
jne
jb
dec
cmp
(bad)  
mov
movb
mov
mov
pop
inc
fisub
and
sub
xor
sbb
cs push
mov
xlat
dec
mov
fwait
or
out
xor
push
cltd   
dec
cwtl   
fistl
dec
daa    
nop
js
xchg
cwtl   
xor
rclb
mov
pop
push
imul
adc
nop
loope
lods
pushf  
cmpl
(bad)  
and
loop
xchg
mov
neg
jle
cs xchg
scas
dec
shrl
jp
fisub
mov
xchg
sub
(bad)  
jbe
pop
jge
enter
mov
or
cmp
sti    
mov
rol
test
push
cli    
cli    
xchg
mov
(bad)  
pop
in
cmc    
dec
mov
cmpsb
in
out
mov
jb
mov
xchg
sbb
jo
scas
movsb
pop
add
mov
mov
pop
divl
stc    
std    
nop
lea
mov
pop
ret
cmpl
bound
pop
iret   
ret
sbb
dec
fimul
xor
dec
cmp
(bad)  
arpl
(bad)  
sbb
cld    
dec
cmpsl
lret
fisubr
rol
jg
insb
rorb
fs cmp
push
outsl
pop
jmp
jbe
mov
rolb
test
lahf   
mov
add
cwtl   
jb
sub
xor
sarl
add
fwait
dec
adc
psubusw
repnz
mov
push
psubq
mov
add
cmc    
mov
sbb
mov
sbb
dec
jbe
xor
sub
dec
call
push
sti    
sub
push
dec
hlt    
int3   
out
sbb
pop
ljmp
cmpsb
xor
push
pop
(bad)  
push
inc
jb
mov
add
mov
lea
jb
lock
lahf   
icebp  
or
nop
mov
sub
(bad)  
shrb
fs ss inc
(bad)  
repnz or
lods
adc
jecxz
xor
divb
int3   
sub
aam
cmp
fmul
and
js
mov
cmc    
push
dec
inc
cmp
pushf  
hlt    
nop
nop
fwait
jmp
jp
dec
xchg
jbe
mov
stos
clc    
in
(bad)  
aas    
sbb
and
int
arpl
pop
jne
jns
inc
xor
test
add
push
cmp
iret   
mov
cmc    
cmpsb
cmc    
out
adc
cmp
pusha  
or
aam
pop
pushf  
adc
cwtl   
pop
mov
out
gs test
mov
xor
add
aas    
push
fstps
cmpsb
xchg
int3   
cltd   
ret
or
mov
fnstcw
push
pop
int3   
dec
sbb
popaw  
mov
lods
pop
imul
xchg
push
dec
rcr
inc
xchg
push
in
jle
stc    
(bad)
mov
add
pusha  
push
cmp
ss push
mov
mov
into   
div
sub
mov
aas    
ds and
outsb
inc
xor
mov
mov
ds pop
dec
aad
jo
std    
dec
push
sub
or
into   
or
dec
lret   
inc
xchg
in
sbb
push
mov
sub
xor
ljmp
out
pop
insb
adc
push
add
and
and
test
repnz dec
xlat
push
shrb
push
push
ljmp
inc
pop
inc
pop
ds add
jne
adc
rcl
ficoml
jns
inc
iret   
in
add
add
add
out
pop
cs fs pusha 
shl
scas
jg
scas
xchg
shl
sub
push
rcrb
shrl
test
cmp
out
imull
mov
xor
imul
mov
call
scas
loop
bound
push
popa   
decl
sbb
xor
(bad)  
test
push
xor
in
fidivl
lahf   
sbb
add
add
scas
add
aam
dec
into   
jbe
add
imul
mov
pop
xchg
jns
mov
sub
mov
cli    
rep insb
adc
mov
sbb
and
sahf   
mov
call
sbb
adc
fnstsw
std    
mov
testb
xchg
in
push
pop
or
insl
sbb
lea
insl
cmp
lds
mov
imul
or
jne
bound
sub
adc
push
push
push
gs
push
imul
dec
dec
lds
call
push
clc    
lock dec
arpl
insl
push
mov
mov
dec
inc
and
xchg
pop
adc
pop
and
cmp
lret
mov
scas
nop
clc    
cmpsl
mov
mov
adc
in
mov
jb
test
push
cmp
cltd   
je
mov
add
inc
inc
adc
and
lods
cli    
out
pop
(bad)  
cli    
call
and
jp
fcoml
int
xchg
repz
inc
jge
fist
and
outsl
xor
sti    
or
aaa    
xorb
jo
cltd   
xor
movsb
in
out
inc
hlt    
(bad)  
jb
xchg
adc
ret
adc
inc
mov
jl
rclb
enter
inc
inc
fnstsw
add
mov
in
pushl
sub
jge
mov
push
(bad)  
lahf   
inc
cmp
mov
mov
sti    
mov
mov
insb
xor
mov
pop
sbb
fisubr
sbb
sbb
mov
dec
and
jno
jne
popa   
push
js
cwtl   
pop
test
cs pusha 
out
pop
inc
ret    
or
add
adc
in
mov
std    
popf   
mov
es xchg
sbb
gs mov
pop
add
mov
lahf   
sahf   
loopne
out
out
mov
rclb
(bad)  
scas
sub
lcall
addr16 xor
out
mov
push
cmp
jnp
sub
inc
rclb
mov
add
or
jg
mov
rorb
in
pop
xchg
loop
iret   
mov
(bad)  {%k3}{z}
xchg
jecxz
call
ds cmp
shr
ss push
jg
test
fstpl
sub
fcmovnu
pushl
(bad)  
or
adc
sbb
dec
or
or
cltd   
pushl
jnp
in
stos
loopne
addb
inc
(bad)  
push
mov
push
pop
or
sbb
in
xor
in
dec
jecxz
adc
repz call
ja
dec
inc
std    
into   
(bad)  
stos
xchg
call
add
mov
fadd
faddl
xchg
aas    
mov
jbe
aaa    
(bad)  
or
jae
sub
push
sbb
test
loope
(bad)  
pop
test
mov
(bad)  
add
inc
jge
mov
and
in
lret
leave  
leave  
addr16 mov
cwtl   
dec
or
xchg
mov
xchg
dec
lret   
xlat
fbld
or
lret
mov
mov
or
frstor
test
inc
mov
sub
or
push
gs and
(bad)  
xchg
push
mov
je
imul
mov
jb
mov
push
xlat
pop
aaa    
inc
ficomp
mov
mov
dec
stc    
in
jb
sub
loop
jp
mov
shll
and
arpl
mov
ss mov
jne
push
xor
fdivs
sub
out
insl
xor
xlat
aam
outsb
outsl
test
stc    
mov
xor
pop
aas    
mov
sub
jbe
test
mov
xor
jl
mov
jecxz
xchg
jbe
dec
add
movsl
mov
pushf  
shrd
stos
outsb
hlt    
mov
add
fsubrp
cmpsb
test
inc
lds
add
orl
push
int
fsts
adc
cmp
jle
pop
cmp
adc
mov
ret    
mov
push
addr16 push
jne
cmp
mov
lds
push
add
enter
bound
test
pop
movsl
xchg
sub
dec
iret   
or
in
cwtl   
jo
icebp  
sbb
push
out
xchg
jmp
xor
and
cmp
adc
icebp  
add
xor
or
dec
dec
or
in
jns
out
jmp
mov
dec
jo
jae
out
sbb
lods
adc
icebp  
mov
mull
xchg
popf   
test
movb
int3   
jnp
and
and
(bad)  
mov
decl
pop
(bad)  
mov
jg
jg
sub
movsb
mov
dec
fcomp
jns
and
scas
jb
fwait
int
dec
jmp
lret
test
ljmp
dec
mov
and
outsl
pusha  
cmp
adc
sub
push
mov
ljmp
dec
cli    
add
mov
movsl
addl
gs jns
xchg
xchg
(bad)  
ja
push
sub
xchg
mov
out
and
imul
lods
sarl
repz add
xchg
or
inc
clc    
subl
lods
or
addl
mov
mov
repz xchg
jb
test
add
adc
jne
add
clc    
je
stos
stc    
int3   
push
stos
add
add
insb
stos
clc    
push
dec
sub
inc
mov
lahf   
sub
das    
mov
(bad)  
lods
lret   
xchg
lcall
lods
adc
ja
out
add
jge
dec
mov
aaa    
ror
add
idivl
and
out
(bad)  
rorl
xor
dec
int3   
popa   
push
dec
jb
push
mov
mov
repnz inc
xor
mov
xchg
std    
jmp
jmp
sbb
loope
adc
mov
pop
add
adc
dec
rclb
rcr
push
xchg
(bad)  
or
dec
and
cmp
arpl
sub
push
jg
leave  
xchg
pop
fmuls
or
ljmp
inc
mov
in
cs popf 
pop
mov
fadds
xchg
or
sub
aas    
lock in
(bad)  {%k3}{z}
sti    
mov
fcoms
push
mov
dec
repnz out
xchg
mov
pop
lods
jo
xchg
sbb
or
mov
pop
repnz push
fcom
fildl
mov
jle
or
clc    
xchg
xchg
dec
pop
call
(bad)  
and
es movsb
loope
jle
inc
dec
es loopne
dec
or
jnp
cmp
sub
gs ds mov
fs lahf 
xchg
and
mov
into   
jecxz
xor
xchg
(bad)  
add
ret    
in
and
jae
jno
ret
mov
cmpsb
(bad)  
repz
adc
jl
out
insb
dec
mov
cmp
and
stos
xchg
scas
je
(bad)  
(bad)  
fs add
outsb
push
fidivr
je
call
or
mov
aad
add
sub
divl
cwtl   
data16
dec
mov
add
and
mov
(bad)  
mov
outsb
sbb
in
dec
mov
fxch
(bad)  
or
add
add
icebp  
cmpsb
xor
out
xchg
jbe
cmp
dec
sbb
imul
mov
jo
mov
fisttpl
or
imul
fucomi
insl
push
stc    
pop
push
daa    
cmpsb
mov
mov
add
and
lret   
push
sti    
mov
lds
ret    
pop
xor
rcl
fsubl
push
pushw
dec
outsl
and
jns
gs dec
ja
xchg
jo
mov
and
add
pop
repnz sbb
cmp
add
cmp
xchg
add
pop
fnstenv
sbbl
xor
xchg
aaa    
add
or
movsb
or
dec
cmp
dec
(bad)  
sbb
jbe
and
fwait
test
int
aad
lods
push
pop
pusha  
pop
hlt    
mov
into   
or
mov
sbb
iret   
cmp
daa    
cli    
mov
inc
mov
stos
popf   
les
push
dec
push
lods
xor
int
cs cmp
mov
add
xlat
fs pop
adc
mov
add
(bad)  
sub
ficompl
movsl
sti    
clc    
les
jmp
mov
(bad)  
mov
daa    
or
mov
adc
mull
xchg
sbb
adc
mov
mov
mov
add
sub
add
in
inc
mov
test
cmp
std    
pop
jp
pop
jno
lods
xchg
dec
imul
(bad)  
enter
mov
sub
mov
call
mov
jno
inc
jne
addb
bound
adc
and
xchg
mov
lds
pop
jmp
and
fsubl
arpl
jns
push
or
jo
or
mov
mov
inc
addl
addl
sbb
lea
inc
lret
lret
or
nop
inc
stc    
data16 xor
mov
xchg
or
xchg
sub
push
sub
js
mov
jno
fisub
xchg
inc
(bad)  
lea
shl
test
out
push
fdivs
(bad)  
pop
cs cmp
popf   
shll
xor
sub
jb
ljmp
test
jecxz
stc    
and
mov
cmc    
inc
movsb
push
fdivrl
cmp
popf   
jge
pop
adc
jbe
popf   
sahf   
cmpsb
mov
aas    
popf   
mov
outsb
inc
sub
jmp
lock adc
addb
sbb
enter
cli    
mov
daa    
es xor
jns
inc
int3   
jle
xor
fmuls
jg
aas    
sbb
mov
adc
mov
pushf  
dec
push
mov
push
mov
jno
mov
stc    
push
and
mov
cmp
push
mov
sbb
aad
mov
jge
dec
repnz test
loope
inc
imul
das    
adc
mov
repz add
mov
mov
pop
jg
subb
shlb
mov
adc
mov
or
cmpsb
cld    
(bad)  
loope
or
movsb
fidiv
ljmp
mov
xor
insl
push
loope
mov
ss push
mov
mov
movsb
mov
ss gs int3 
sub
(bad)  
lret   
and
call
sub
mov
jl
sub
es in
movsb
xchg
pusha  
mov
fisub
pop
mov
dec
xor
cwtl   
fnsave
pop
mov
cmc    
cmp
xlat
jae
in
lcall
cmc    
adc
imul
push
jg
arpl
fstl
lahf   
stc    
leave  
imul
sbb
popa   
je
ljmp
mov
int
lahf   
mov
fsubrl
out
enter
negb
aaa    
movsb
dec
loopne
add
andl
lds
psrlq
ja
notb
inc
inc
out
(bad)  
sbb
jb
dec
pop
aaa    
test
(bad)  
popf   
lock jb
mov
sbb
sbb
out
dec
push
ja
in
mov
mov
nop
scas
popl
daa    
xchg
popa   
inc
dec
mov
ret
xor
push
loope
clc    
add
sub
adc
jb
outsb
push
mov
sbb
or
mov
fdivl
out
xor
pop
and
std    
and
pop
es jnp
mov
test
jb
add
test
inc
(bad)  
pusha  
pop
sti    
pop
repnz sub
out
add
daa    
fsubl
aad
loop
andl
(bad)  
mov
add
pop
stc    
push
adc
dec
jg
push
push
cli    
pop
addr16 mov
push
inc
out
pop
repnz cmp
sub
in
fs inc
unpcklps
cs xor
push
decl
push
mov
(bad)  
push
cmp
out
mov
jae
or
dec
push
into   
leave  
push
in
xor
pusha  
hlt    
lcall
out
sub
adc
push
push
mov
cmp
xchg
inc
iret   
ret    
push
movsb
jp
or
jnp
sbb
pop
sub
repz ud1 
pop
sbb
test
gs loopne
fisttp
outsb
and
cltd   
arpl
inc
addr16 gs jge
adc
jle
outsb
test
and
and
push
clc    
movsb
sbb
or
lock mov
or
in
add
daa    
stc    
lret   
mov
mov
add
or
jne
and
pop
sub
in
sbb
and
cltd   
in
loopne
pop
push
sbb
fcoml
push
inc
(bad)  
jns
and
aad
mov
sahf   
xchg
and
adc
jns
sub
lea
sub
je
loope
mov
loop
cmp
aad
xchg
jg
mov
(bad)  
inc
aad
les
aam
cmp
jmp
pop
and
sahf   
push
(bad)  
mov
daa    
xor
fnstenv
cmpsb
xor
subb
stos
add
sub
jnp
adc
sbb
lds
js
and
xchg
es iret 
sbb
ja
add
pushf  
push
mov
jne
add
sbb
xor
clc    
(bad)  
bound
inc
(bad)  
sub
and
cmp
cld    
imul
rolb
add
sub
dec
lcall
leave  
adc
imul
push
dec
clc    
pop
test
push
call
sar
push
push
dec
ret
aas    
mov
out
iret   
fmulp
(bad)  
pop
xor
imul
aas    
rolb
insl
imul
jbe
iret   
or
incb
lahf   
(bad)  
push
sub
jg
jno
aad
(bad)  
adc
push
imulb
cmp
mov
or
mov
clc    
sbb
test
sbb
jns
movsb
jns
push
jo
rcll
push
test
in
push
mov
inc
in
aas    
adc
imul
dec
ret
dec
inc
addl
aad
dec
or
cmpsl
leave  
fcompl
andl
outsl
sub
add
insb
push
add
mov
sbb
mov
sti    
in
push
(bad)  
jp
dec
and
movsl
pop
clc    
cld    
cmp
cmp
lret   
mov
xchg
push
add
and
in
mov
pop
xchg
push
lods
xchg
daa    
xchg
sub
jns
subb
imul
(bad)
enter
push
out
les
or
push
dec
inc
push
add
enter
out
sarl
push
mov
loopne
insb
xchg
jmp
movsb
in
sti    
cmc    
mov
sbb
mov
mov
in
mov
mov
(bad)  
xor
jnp
iret   
leave  
jge
shlb
xchg
xchg
adc
aad
pop
push
lock
sbb
sti    
push
mov
xchg
mov
in
ja
add
nop
mov
lret   
inc
incb
stos
stos
adc
lods
pop
mov
(bad)  
dec
jl
mov
mov
in
push
test
sti    
xlat
out
pop
xchg
sbb
(bad)  
pop
popf   
add
idiv
cld    
aam
(bad)  
xchg
int3   
push
or
jb
test
mov
xor
scas
jp
mov
mov
in
inc
aam
push
cwtl   
adc
lods
push
sub
scas
sub
mov
stc    
push
imul
mov
adc
popf   
into   
ficom
icebp  
loopne
dec
pop
(bad)  
mov
(bad)  
je
push
stos
lret
call
out
and
pop
mov
cmp
push
mov
adc
sti    
sub
leave  
mov
mov
cmpl
cld    
(bad)  
push
outsl
dec
out
push
movsb
xchg
and
sub
call
push
sbb
xchg
cmp
and
lods
sub
cmp
inc
adc
add
mov
and
sub
push
push
lret   
dec
xor
and
adc
sub
fist
sbb
out
jmp
adc
das    
or
dec
in
cs ret 
fmulp
mov
sub
cli    
sub
xchg
imull
push
dec
inc
xchg
push
aaa    
(bad)  
test
push
fiadd
das    
ds lret
xor
push
aad
bound
outsl
(bad)  
in
lds
jecxz
out
movsb
lret   
jnp
fwait
jecxz
test
pop
pop
cmpsl
cmp
out
sub
mov
inc
sub
(bad)  
(bad)  
dec
ret
push
lds
sbb
pop
mov
cmp
xchg
xchg
lcall
out
scas
mov
stos
push
sub
in
cmp
mov
mov
ret
insl
aas    
dec
outsl
xchg
sbb
cmp
cmpsb
pushf  
bound
adc
mov
divb
ficompl
test
daa    
pop
or
inc
sub
scas
hlt    
cmp
pusha  
dec
imul
jno
ss push
or
xchg
nop
aaa    
(bad)  
pushf  
jo
(bad)  
xor
int3   
push
ret
inc
popa   
imul
mov
add
out
pop
mov
and
lret   
sbb
lds
and
iret   
push
inc
add
loop
push
(bad)  
sahf   
mov
int
or
fidiv
loopne
mov
mov
ret    
or
mov
add
push
or
and
dec
mov
test
xchg
push
add
jmp
mov
mov
lods
ljmp
subb
(bad)  
dec
inc
sub
sbb
aad
in
ljmp
and
mov
fimull
in
ficoml
xchg
fcomp
cs mov
xor
mov
mov
rcrb
pushf  
(bad)  
jno
sub
ror
sub
pushw
adc
scas
mov
jbe
xchg
enter
sub
mov
test
loop
jg
add
inc
outsl
hlt    
movsl
cmp
sahf   
cwtl   
xor
ret    
push
lret   
inc
(bad)  
lret   
inc
sbb
pop
and
or
cmp
in
mov
cmp
test
test
or
lcall
jne
sub
sbb
dec
setae
cltd   
adc
mov
(bad)  
test
insl
ret    
push
inc
in
(bad)  
pop
icebp  
pop
repz
mov
data16 fistpll
cmp
sbb
sbb
xchg
lods
push
iret   
popa   
sahf   
add
std    
clc    
jg
mov
push
dec
jno
(bad)  
dec
fldcw
inc
cli    
jo
mov
in
or
aad
(bad)  
push
fisub
sbb
pop
std    
das    
xchg
shrb
shrl
(bad)  
(bad)  
ss gs xchg
lret
add
jl
(bad)  
inc
xchg
cmp
daa    
sbb
popf   
pop
jbe
jecxz
cmp
lock gs push
inc
pop
scas
jae
add
cmp
scas
mov
stc    
std    
inc
or
push
cmp
rorl
inc
mov
pop
nop
popf   
dec
stc    
in
xchg
cmp
cmpsl
(bad)  
xchg
push
aam
xor
insb
test
add
adc
mov
inc
xchg
mov
and
aad
sti    
mov
fbstp
das    
popa   
xchg
std    
inc
sbb
jae
push
mov
cmpl
xor
add
mov
dec
push
fldcw
inc
adc
mov
and
iret   
movsb
and
ja
sbb
int
out
ljmp
sbb
sub
push
(bad)  
ja
ror
mov
int3   
mov
mov
jo
and
inc
and
inc
lret
push
xchg
and
and
repz jecxz
out
mov
inc
bound
mov
inc
repnz lea
or
adc
pop
lret
xor
and
pop
call
icebp  
insl
orl
push
sbb
fwait
inc
add
sub
je
insl
cmpl
(bad)  
sbb
push
lahf   
js
jg
xchg
xchg
pusha  
jecxz
lods
adc
ret    
subl
mov
arpl
mov
mov
sub
lcall
push
pop
fidivr
out
lcall
(bad)  
hlt    
pop
fnstcw
sub
jae
lret
leave  
test
cwtl   
sub
pop
test
sbb
outsl
xchg
shl
xchg
arpl
jp
cmp
adc
sarb
sub
cmp
lcall
ret    
and
shll
push
fwait
lods
pop
jmp
lahf   
and
xor
adc
movsb
shrb
xor
add
mov
cmc    
add
imul
lcall
jle
mov
cmpl
aam
aaa    
(bad)  
call
sbb
mov
imul
xlat
xor
aas    
iret   
xchg
and
xchg
popf   
xor
push
jge
mov
adc
int
xor
mov
lret
call
mov
dec
mov
out
lahf   
xchg
inc
pop
movsl
ret
cld    
xor
push
cld    
js
cmp
data16 sti 
sarb
sbb
test
mov
call
or
jp
(bad)  
mov
fs
cwtl   
stos
icebp  
movsl
add
inc
(bad)  
ja
jae
jno
popf   
dec
(bad)  
scas
jno
mov
scas
sahf   
popf   
aad
insl
in
sbb
pop
into   
inc
mov
cwtl   
and
bound
dec
mov
loope
dec
jecxz
pop
mov
sahf   
mov
rcrl
cmpsl
loop
(bad)  
push
call
div
xchg
scas
cmpsl
jns
push
mov
xor
push
jp
pop
repz
out
dec
std    
add
mov
pop
mov
dec
push
or
icebp  
lock mov
imul
xor
lret   
inc
stos
cs aam
sub
sbb
cmp
dec
sbb
mov
cltd   
ret    
out
push
movsb
aas    
push
jae
mov
or
adc
dec
and
xchg
test
jnp
mov
lcall
cmp
cmpsb
(bad)  
dec
test
sub
add
cmp
loop
pop
(bad)  
stos
and
mov
andl
dec
mov
push
add
into   
mov
js
sub
cmpsl
inc
lcall
out
outsb
mov
inc
pop
sub
add
xchg
xchg
pop
lret
out
jecxz
mov
and
mov
sub
push
adc
pop
mov
(bad)  
test
adc
stos
add
loop
shll
xor
out
out
jne
pop
dec
adc
cmp
popa   
xchg
fdivr
je
out
push
or
outsl
cmc    
test
les
bound
mov
scas
xor
mov
out
xor
mov
jno
lcall
xchg
orl
push
insl
lds
dec
les
pushf  
mov
icebp  
lret
xor
pop
dec
mov
add
mov
ret
iret   
lahf   
(bad)  
push
mov
xchg
mulb
mov
push
out
fldl
or
sub
push
push
mov
mov
lds
fsubrs
iret   
push
add
inc
test
mov
cltd   
push
xchg
add
stos
addl
xor
(bad)  
sbb
arpl
inc
iret   
sbb
scas
js
push
call
push
xor
fwait
repnz sbb
sub
pop
out
stos
cs dec
dec
sub
rcl
fldt
adc
xchg
(bad)  
push
into   
(bad)  
scas
push
dec
lahf   
sbb
inc
in
mov
jno
xor
adc
jge
aas    
ror
jae
iret   
in
sbb
sbb
push
mov
ss push
mov
sar
mov
stos
mov
sub
push
pop
jmp
aad
pushl
push
clc    
push
or
mov
xlat
sub
sbb
dec
sub
xchg
mov
scas
(bad)  
sub
xor
leave  
test
sbb
imul
aad
sub
dec
inc
mov
(bad)  
push
add
test
cmc    
cmc    
pushf  
mov
jne
mov
mov
xorb
mov
or
mov
or
loope
cwtl   
fcomi
cwtl   
scas
jle
scas
sub
mov
dec
mov
adc
jbe
in
enter
stos
cli    
cmpsb
push
pop
adc
fs and
adc
push
mov
mov
sbb
outsb
mov
mov
push
popf   
insb
ret
mov
cmp
psrlq
fstl
jmp
push
xorl
popa   
fdivrp
test
xchg
sub
sti    
push
iret   
pop
add
pushf  
(bad)  
or
mov
out
ljmp
(bad)  
icebp  
adcb
outsb
adc
xchg
and
dec
add
icebp  
jecxz
ret
xchg
and
adc
add
je
dec
cmp
dec
out
add
add
and
push
clc    
xchg
(bad)  
(bad)  
inc
push
jb
outsb
inc
daa    
hlt    
stc    
push
shll
repnz add
test
imul
scas
mov
inc
xabort
sbb
xor
fwait
data16 rclb
mov
outsb
in
and
lret   
mov
or
adc
cmpsl
ret    
aad
jl
loope
insb
ret    
add
loopne
xchg
repnz mov
or
cmovo
rolb
movl
ret    
mov
inc
xchg
jne
les
push
or
in
push
push
outsl
add
stos
sub
mov
mov
mov
nop
and
adc
dec
jb
push
mov
decl
cmp
mov
scas
mov
or
cmp
xlat
jo
xchg
add
mov
mov
pop
inc
mov
inc
cmpsb
es pop
or
inc
push
bound
rcrb
cmp
les
cmpsl
into   
sbb
jne
fldl
mov
mov
lret
adc
inc
mov
and
loope
add
in
(bad)  
adc
pop
mov
xorl
push
(bad)  
arpl
test
loopne
aaa    
jmp
push
popa   
fstpl
ret
lcall
mov
mov
mov
bnd jno
test
mov
xlat
jmp
in
jmp
aad
stos
lcall
xchg
inc
adc
jbe
dec
movsl
fs pop
hlt    
dec
or
sbb
bound
and
mov
(bad)  
in
in
mov
iret   
js
(bad)  
xor
dec
add
out
cmpsb
(bad)  
repnz cld 
mov
cmpsl
or
mov
daa    
add
(bad)  
mov
ret    
adc
jp
dec
icebp  
push
sbb
sahf   
pop
sti    
call
in
push
mov
cmp
xchg
test
call
dec
cmp
push
mov
dec
popf   
sbb
scas
push
insb
mov
(bad)  
fiaddl
mov
jmp
mov
(bad)  
(bad)  
pop
mov
nop
sbb
mov
ljmp
mov
inc
lock sbb
mov
sbb
mov
mov
repnz xchg
into   
push
dec
(bad)  
jns
in
push
mov
mov
mov
daa    
mov
lret
mov
dec
and
inc
(bad)  {%k3}{z}
jmp
sub
fildll
cltd   
fs in
pop
and
shlb
scas
mov
sub
fs call
out
pop
jae
loopne
out
sub
dec
sbb
jb
(bad)  
fs add
dec
jle
ljmp
inc
dec
cmpsb
movsl
inc
clc    
jge
fmul
mov
xchg
int
or
mov
call
fs mov
xchg
xchg
inc
inc
push
inc
sbb
sbb
inc
out
mov
xchg
push
add
(bad)  
lret
jbe
jno
gs rcl
mov
mov
push
dec
adcl
fdivp
or
add
mov
push
fwait
aas    
mov
cld    
hlt    
mov
les
outsl
cmc    
add
fistpll
rolb
test
inc
xchg
cld    
bound
std    
clc    
sbb
push
lods
cmp
pop
sub
sti    
nop
loopw
into   
or
test
pushf  
(bad)  
jl
movsb
(bad)  
push
(bad)  
xchg
inc
xor
orl
sub
das    
jl
vfmaddsub213pd
or
aaa    
lret   
sbb
mov
call
push
rcl
iret   
jmp
bound
inc
loop
int3   
repnz
bound
roll
jae
dec
mov
or
dec
jl
sub
loop
mov
fdivl
icebp  
fcoms
scas
sbbb
outsb
xor
(bad)  
inc
mov
lock mov
data16 std 
push
or
xchg
pop
popf   
out
mov
scas
insl
push
cmp
aam
ss in
ret    
mov
inc
outsb
sub
or
(bad)  
pop
call
movsb
or
es jbe
jmp
repz pop
js
int
stos
sbb
add
inc
flds
pop
push
push
dec
aam
jae
jae
dec
xchg
fldl
adc
das    
scas
push
mov
lcall
pop
and
repnz push
sbb
inc
xchg
(bad)  
sbb
cmpsl
mov
push
mov
clc    
clc    
je
mov
mov
aas    
and
out
fptan  
stc    
repz fcomps
(bad)  
call
movsl
xor
jecxz
inc
movsb
mov
mov
mov
loop
sti    
xchg
insb
mov
push
jae
add
dec
out
insl
aas    
fildll
sub
mov
cld    
(bad)  
arpl
decl
pop
xchg
nop
(bad)
dec
out
push
cmpsb
mov
pop
dec
pop
imull
rol
sbb
std    
lret
and
ljmp
sbb
push
sub
sbb
jbe
cli    
jge
pop
lcall
rcrb
add
rclb
xor
adc
fisubr
ljmp
or
in
stc    
bound
outsl
sub
cwtl   
push
mov
mov
push
xor
js
mov
cwtl   
mov
sbb
jne
ja
mov
xchg
pushf  
xor
mov
jo
mov
test
sbb
jno
xchg
es xor
push
jb
loopne
js
int
mov
push
sti    
sarb
mov
shr
test
adc
scas
bound
and
xchg
(bad)  
aaa    
mov
ljmp
inc
loop
push
(bad)  
aas    
cmp
(bad)  
out
mov
cmp
xlat
pop
sub
pop
ljmp
inc
mulb
mov
or
pop
cs mov
add
pop
and
sbb
xor
jno
inc
hlt    
jno
fmuls
out
dec
xlat
jg
xor
es add
pop
jl
and
dec
fildll
inc
add
or
popa   
jae
mov
sbb
jecxz
sbb
out
cmpb
pop
cmp
jle
mov
stc    
out
les
dec
jnp
mov
pop
out
cmp
pop
pusha  
subl
dec
pop
sub
iret   
sbb
xchg
pop
cmc    
test
divl
nop
mov
cmp
xor
jae
js
sbbb
outsb
xor
or
cwtl   
xchg
dec
jns
cli    
das    
push
ljmp
jne
pushf  
nop
in
adc
cmp
inc
call
divl
(bad)  
sub
sbb
call
mov
jae
add
xor
and
mov
imul
scas
ljmp
or
rolb
mov
lds
mov
jmp
dec
out
movsb
cwtl   
and
pop
adc
movsl
push
fiaddl
sub
int3   
cmp
rclb
sub
inc
test
adc
test
iret   
mov
aas    
pop
cmpl
inc
lock jb
pop
cs test
popf   
mov
xchg
icebp  
fstpl
sarl
jns
and
sub
pusha  
mov
or
mov
shlb
sub
(bad)  
repz add
ds xor
fs push
movsb
and
fldenv
inc
push
(bad)  
cmc    
mov
adc
mov
adc
inc
lahf   
icebp  
jno
inc
jge
jecxz
mov
sub
dec
jle
push
rcrl
(bad)  
fimull
mov
add
push
(bad)  
ss lret
adc
mov
(bad)  
and
push
xchg
and
add
cli    
cli    
icebp  
mov
cmp
fistp
int3   
fcmovu
leave  
lods
lods
les
xchg
dec
(bad)  
and
pop
or
decb
imul
inc
(bad)  
movsl
addr16 jns
sub
(bad)  
xchg
loopne
pop
sub
xor
call
out
cmp
and
in
ret    
jnp
push
sahf   
push
fldcw
out
enter
cmpsl
pop
pop
inc
loopne
les
(bad)  
into   
sti    
lahf   
add
dec
inc
mov
sub
jl
and
out
loop
xchg
fcompl
mov
fidivl
movsl
jl
adc
sub
cmp
nop
xor
mov
jge
loop
sti    
ret
mov
je
pop
sbb
lods
and
mov
inc
mov
inc
ret
sbb
cmp
jle
cmp
mov
add
das    
sti    
loopne
cmpsl
shrl
xchg
out
popl
inc
rep insb
(bad)
xchg
push
js
and
or
jmp
jbe
xor
xor
out
outsl
lahf   
xchg
adc
mov
outsb
popf   
insl
dec
es fwait
sbb
cmp
xchg
mov
(bad)  
mov
jmp
sbb
mov
jle
fldt
out
arpl
and
dec
xchg
add
mov
sbb
xor
mov
fidivl
pop
cmp
out
inc
out
loope
fst
mov
in
jmp
push
fildl
incl
scas
mov
adc
lret
dec
idivb
add
fucomip
sbb
lds
sbb
cld    
lret
jns
xor
gs push
add
jl
int3   
jns
inc
roll
ret
xchg
leave  
fdivs
cmpsl
sub
mov
cmp
pop
cmp
mov
push
sub
cmp
cmp
ja
dec
sbbl
sub
ja
mov
scas
pop
pop
mov
pop
jmp
push
add
inc
in
jo
add
inc
jmp
aas    
fsubr
cmp
fistpl
pop
xchg
ljmp
(bad)  
pop
insl
js
repz ja
insl
and
in
inc
int
and
jno
inc
and
dec
sbb
xchg
adc
pusha  
iret   
stos
arpl
(bad)  
es inc
push
js
dec
cli    
scas
jnp
inc
and
shlb
scas
in
icebp  
pop
orb
cld    
inc
cmp
fdivr
push
or
and
rorb
mov
aam
add
dec
inc
dec
push
fildll
sub
add
int
stos
xchg
pop
mov
in
sbb
mov
andb
lahf   
jb
pop
xor
or
or
je
andb
or
push
stos
pop
push
cltd   
fsubr
pusha  
aas    
ss dec
dec
mov
sbb
(bad)  
jg
cli    
sbb
loop
dec
pop
cmp
popf   
adc
jbe
fistpl
mov
xchg
sar
ret    
sbb
mov
mov
cmp
ret    
test
add
sub
addr16 and
stos
add
push
call
pop
fsts
mov
adc
shll
das    
das    
js
adc
inc
mov
scas
sub
dec
popa   
clc    
xor
sbb
pop
pop
stos
dec
dec
add
or
jmp
inc
shr
push
jl
mov
sub
add
and
out
out
push
movb
icebp  
xchg
push
sar
push
in
andl
xchg
pop
jbe
xchg
jp
imulb
cmovge
xchg
addr16 in
fisub
and
pop
add
fnsave
xrelease xchg
shlb
(bad)  
fldt
lods
cmpsb
pop
add
jbe
adc
mov
aas    
aaa    
mov
test
loope
and
xchg
xor
lcall
push
sti    
cmp
mov
dec
dec
add
(bad)  
ja
data16 js
fldl
pusha  
nop
mov
icebp  
inc
dec
ret
mov
fisubl
sti    
mov
pop
cld    
imul
fildl
fbstp
insb
pop
jne
insb
inc
in
adc
or
and
push
pop
icebp  
aaa    
mov
repnz xchg
mov
pop
cld    
xchg
aad
pop
add
push
pop
sbb
mov
in
push
or
sub
dec
ja
fcmovnu
xchg
out
dec
sbb
cmpl
inc
jo
mov
mov
arpl
and
pop
add
(bad)  
loop
dec
lret
jae
jns
mov
cmp
int3   
or
in
test
imul
xchg
js
out
push
mov
(bad)  
push
int
(bad)  
pop
push
lods
sarl
out
mov
add
xchg
(bad)  
insl
dec
int
lret
inc
jg
push
hlt    
jp
popa   
movsl
mov
mov
mov
scas
das    
stos
add
dec
cld    
and
dec
test
jns
dec
cmp
ss mov
adc
adc
add
fildll
mov
and
iret   
jbe
out
(bad)  
pushf  
neg
mov
push
ret
jp
out
and
sbb
loope
pushf  
aad
(bad)  
and
xchg
(bad)  
or
fs mov
(bad)
xor
pop
aam
push
xchg
inc
aas    
int
lahf   
mov
jno
jle
mov
(bad)  
cs
sub
lret
and
mov
sub
inc
and
xlat
test
and
or
mov
sub
mov
pop
cmpsl
es mov
(bad)  
ljmp
xor
lds
lret   
mov
ss loopne
je
imul
jmp
hlt    
pop
scas
out
fstp
jb
and
mov
movsb
or
ret
cmp
rclb
hlt    
lods
sub
jecxz
and
mov
mov
inc
add
jle
add
jl
or
sbb
xor
int
(bad)  
push
loop
dec
mov
(bad)  
frstor
pop
xlat
sbb
jmp
stc    
stos
mov
mov
mov
data16 sti 
xor
adc
jno
sub
xchg
xchg
aas    
out
addb
cwtl   
stos
mov
mov
push
rcll
inc
lds
test
pusha  
mov
cmp
fstl
adc
mov
jge
jno
sahf   
pop
popa   
in
add
lods
mov
add
mov
jno
add
idiv
call
inc
mov
push
dec
(bad)  
fwait
or
jae
popf   
mov
xchg
sarl
push
sahf   
daa    
aas    
pop
aam
or
jmp
test
(bad)  
setae
cltd   
xor
test
mov
in
cmp
adcl
or
mov
ret    
dec
xchg
add
mov
cmpsl
xchg
xor
pop
add
in
les
sub
sbb
clc    
mov
imul
sub
or
jg
test
and
xlat
pusha  
movsl
mov
push
lret   
mov
cli    
lcall
das    
(bad)  
pop
les
test
int3   
imul
mov
sub
xor
mov
rcrl
addb
add
push
outsb
jecxz
xor
fstpt
hlt    
mov
mov
fwait
push
cs or
sbb
ret    
mov
jge
pop
pop
sbb
push
imul
iret   
ret
test
into   
mov
test
ss cwtl 
dec
inc
jg
mov
mov
cltd   
(bad)  
pop
xor
xlat
movsl
adc
sub
xor
(bad)  
mov
cmp
cmp
jl
push
(bad)  
aam
xchg
(bad)  
cwtl   
lds
ret
push
push
mov
sbb
leave  
push
pop
sarb
daa    
mov
or
adc
sub
pop
arpl
(bad)  
lret   
insl
clc    
lret   
test
mov
inc
mov
out
mov
jg
mov
les
out
mov
jecxz
or
fs test
mov
ds insl
divl
pop
hlt    
cmp
aas    
add
dec
rolb
xchg
adcl
mov
aam
pop
mov
in
addl
inc
scas
fwait
xchg
ficomp
sahf   
xchg
cmp
rol
mov
sbb
jl,pt
mov
mov
add
lods
add
jge
and
jns
fdivl
push
int3   
jmp
mov
push
mov
sahf   
mov
jbe
call
cwtl   
imul
bound
ljmp
mov
shlb
fistl
fcoms
mov
popf   
mov
pop
pop
push
cmpsl
loop
mov
nop
cwtl   
mov
hlt    
sub
lods
cltd   
and
(bad)
icebp  
insb
push
lods
sti    
in
xchg
inc
xor
jle
jnp
sbb
sarb
paddq
sbb
add
sbb
mov
inc
sahf   
mov
adc
dec
fwait
cmp
lods
or
(bad)  
scas
push
mov
jns
pop
mov
cmpb
dec
jo
adc
fldcw
in
adc
cld    
mov
arpl
lods
ret    
push
xor
cmp
out
insl
pop
popf   
jecxz
popf   
mov
or
jp
mov
mov
aam
dec
movsl
xchg
ficomp
pop
in
xchg
mov
xchg
popl
fldenv
push
insb
je
pop
mov
xor
(bad)  
pop
mov
adc
int
addr16 mov
mov
or
pusha  
sub
repnz add
and
or
repnz sub
push
mov
pop
cmpsl
sbb
insl
pop
iret   
(bad)  
mov
sbb
test
fist
cmpsl
mov
(bad)  
adc
or
(bad)  
sub
mov
xchg
insb
jb
sub
les
int3   
mov
fisubr
mov
pop
enter
lds
sub
jmp
call
lods
mov
and
in
and
or
pop
xchg
mov
cmpsb
adc
aas    
xlat
test
dec
dec
pop
jecxz
xchg
mov
(bad)  
in
int3   
ds out
add
push
subb
out
dec
je
sub
mov
jmp
xchg
mov
in
cltd   
and
adc
mov
pop
mov
xchg
adc
push
inc
dec
stos
flds
mov
test
jg
stc    
pop
push
pop
sti    
aad
mov
or
test
test
pop
cwtl   
mov
cwtl   
insl
jo
ja
and
aas    
fdivrs
std    
mov
insb
sarb
xchg
xchg
and
sbbb
lret   
arpl
or
or
and
cmp
push
cwtl   
inc
insl
cli    
scas
aas    
mov
scas
or
fs mov
rcll
sbb
inc
das    
cmp
pop
(bad)  {%k4}
in
popa   
mov
sbb
icebp  
push
dec
and
(bad)  
mov
call
mov
lds
dec
scas
fwait
push
lock dec
ret    
ljmp
sub
or
and
dec
(bad)  
xor
(bad)
leave  
cltd   
mov
jle
mov
iret   
xor
ret    
push
sahf   
pop
js
ja
sbb
jbe
pushf  
or
orb
jnp
stos
ret
pushf  
cmp
mov
popa   
push
inc
mov
dec
push
fdivrl
add
and
mov
xchg
ss jnp
pusha  
nop
dec
lods
mov
popf   
insl
(bad)
sbb
xchg
adc
ljmp
add
dec
jnp
xor
mov
adc
add
pop
mov
movsl
std    
ret    
jne
add
cmp
(bad)  
ss repz scas
inc
je
sub
pop
or
inc
mov
jecxz
and
test
(bad)  
das    
lret
negl
or
jge
push
fstps
mov
loope
inc
mov
xchg
jl
dec
hlt    
mov
dec
test
and
sbb
adc
enter
stc    
mov
std    
popf   
jmp
push
arpl
mov
std    
(bad)  
jp
pop
nop
xchg
cs lret
insb
adc
pop
jae
jo
ss
(bad)  
test
push
and
cmp
fldcw
rol
xchg
pop
push
cmp
hlt    
pop
xor
mov
test
stos
sub
push
push
inc
hlt    
cmp
mov
cmpsb
imul
mov
int
daa    
test
mov
adcb
call
xor
dec
pop
xchg
mov
mov
test
xor
lock sbbl
in
pop
mov
and
jnp
rclb
push
xchg
pop
scas
addr16 xchg
mov
add
sbb
repz dec
inc
inc
rolb
(bad)  
(bad)  
sbb
ljmp
movsl
movsb
hlt    
(bad)  
sub
adc
out
mov
jp
sbb
arpl
jnp
mov
out
mov
mov
xor
sbb
in
jbe
pop
sarl
jmp
or
fs pop
dec
mov
mov
adc
(bad)  
js
dec
out
xchg
cmp
test
xor
mulb
mov
repz jge
pop
dec
les
iret   
shrb
cmpsl
mov
jl
xor
fwait
inc
aam
mov
js
jns
push
aaa    
sbb
js
mov
dec
(bad)  
push
gs mov
xor
insb
sbb
sbb
push
cwtl   
add
and
mov
mov
insb
ret
xchg
mov
xchg
ds dec
jo
stc    
jb
daa    
jmp
add
add
dec
inc
dec
inc
scas
inc
pusha  
(bad)  
or
add
add
(bad)  
(bad)  
(bad)  
incl
add
add
add
add
add
add
jns
je
insl
cs inc
jb
ja
outsb
addr16 sub
push
gs jb
imul
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
xor
data16 aaa 
xor
fs xor
add
adc
gs insl
cs inc
jb
ja
outsb
addr16 cs inc
imul
add
popa   
je
pop
add
add
add
add
add
lsl
add
jno
add
add
or
or
add
or
add
add
add
dec
or
add
add
(bad)  
and
add
add
inc
dec
inc
add
mov
or
popa   
add
jo
pop
jae
add
ret    
add
push
ret    
add
outsl
test
add
cmp
push
push
test
mov
gs mov
or
push
cmp
and
cmp
scas
(bad)  
notb
jp
dec
fadds
vmwrite
rcrb
push
pop
mov
out
mov
jmp
jo
pop
push
adc
aaa    
dec
lea
push
jnp
push
insl
mov
cmc    
sub
xor
lret
ljmp
sbb
fisubr
push
dec
cmpsl
xlat
lahf   
(bad)  
jno
(bad)  
idivl
popa   
adc
sbb
pop
jp
and
pop
imul
adc
push
push
pop
push
mov
xchg
cmp
aad
faddl
xchg
(bad)
gs add
(bad)  
sbb
sbb
test
pop
mov
mov
stc    
gs inc
xchg
into   
mov
aam
mov
add
test
or
(bad)  
adc
sbb
xchg
inc
or
mov
addr16 push
rcll
add
in
test
aaa    
xchg
and
js
xchg
fcoml
inc
sbb
mov
in
stos
inc
lret
sbb
sbb
mov
mov
pop
rorl
mov
ds inc
(bad)
push
cmpsb
aad
add
adc
lahf   
dec
pusha  
pop
inc
jge
lea
outsl
dec
sub
popa   
ljmp
mov
cwtl   
out
pop
fnop   
shll
lock xchg
xor
mov
or
pusha  
cld    
cmpsb
stos
popf   
inc
mov
(bad)  
add
jo
mov
lea
mov
insb
xchg
add
add
sbb
mov
out
insl
jae
cli    
mov
ret    
and
pop
out
outsb
dec
sub
or
into   
ljmp
int
jge
cs scas
pop
xchg
insl
add
jnp
into   
les
insl
out
jnp
daa    
inc
jno
adc
add
bswap
rorb
test
cmc    
jo
inc
popa   
loop
adc
mov
xor
addr16 xor
push
push
cltd   
ret    
jo
jo
iret   
mov
mov
call
jns
jne
(bad)  
sub
loopne
xchg
imul
pusha  
stos
in
mov
sub
cli    
loope
mov
int
and
sub
adc
pop
popa   
int
(bad)  
sbb
mov
mov
cwtl   
xor
in
imul
(bad)  
jl
stc    
lods
push
jns
xlat
enter
or
xlat
cli    
pusha  
pcmpeqd
mov
mov
add
push
cmpb
loopne
divb
mov
pusha  
jp
jmp
mov
xchg
xchg
sub
mov
dec
loop
push
test
dec
mov
bound
jnp
fcomp
mov
xchg
loop
clc    
cmp
mov
loop
sub
lea
repnz cs
loope
fdivr
repz fistl
sbb
data16 xlat
jmp
ja
out
mov
in
(bad)  
pop
push
inc
cltd   
push
sub
lock mov
inc
cwtl   
roll
dec
sti    
push
push
mov
leave  
jb
pop
imul
lret   
push
cmp
adc
sub
dec
mov
xchg
xchg
repnz
sub
xchg
aad
std    
xchg
icebp  
adc
lahf   
sbb
stos
and
add
jle
rorb
push
enter
jns
sub
(bad)  
push
cmp
mov
push
inc
or
cmc    
pushf  
shll
lock clc 
jo
shll
or
sub
es jle
mov
xchg
in
es insb
dec
push
push
sarl
test
mov
push
push
icebp  
adc
cmp
scas
push
pushf  
mov
popa   
push
mov
mov
cmpsl
adc
repnz fcoms
cs nop
out
or
fs xchg
out
fild
fstl
sahf   
sbb
insb
popf   
dec
sbb
testl
xor
sbb
fcompl
(bad)
inc
pop
cmp
push
jns
dec
cmc    
jle
ljmp
into   
add
sbb
push
add
dec
(bad)
mov
je
xchg
fbld
inc
sub
and
dec
cmpsl
hlt    
movsb
xor
push
cmp
pop
inc
xchg
addr16 popa 
in
sub
inc
mov
or
sub
jl
mov
mov
and
mov
loop
(bad)  
jmp
add
stos
add
in
sahf   
add
pop
mov
pusha  
sub
nop
xor
push
inc
addr16 cld 
aad
inc
dec
jo
dec
std    
leave  
dec
cmp
jnp
jb
lods
pop
mov
sahf   
xchg
shrb
sub
lock lea
inc
push
clc    
push
pop
lret
add
rolb
and
or
jle
icebp  
scas
std    
int3   
movsl
imul
imul
lret
sbb
push
cmp
jbe
shlb
das    
or
dec
lret
or
mov
shrl
adc
flds
movsl
pop
int
mov
fimul
sub
in
push
in
aad
xchg
or
inc
mov
(bad)  
jp
enter
mov
out
es jb
repnz pop
fisubrl
mov
sahf   
push
cmp
aaa    
lods
(bad)  
fisttpll
xchg
jne
inc
stc    
aaa    
imul
in
dec
xchg
lock test
sub
push
jg
mov
lcall
dec
sub
aad
enter
dec
jns
int3   
das    
dec
mov
(bad)  
mov
dec
sahf   
daa    
in
lea
daa    
(bad)  
fucomip
sub
ret
push
adc
xor
popl
add
das    
mov
ja
fwait
jge
sbb
xchg
sub
inc
int
and
out
mov
rolb
fcompl
sti    
push
mov
adc
insb
test
out
mov
push
scas
jbe
arpl
sub
sti    
or
or
ds aam
fisttpl
in
xchg
pushf  
imul
mov
(bad)  
sti    
push
test
xchg
cmc    
stc    
daa    
push
mov
cmpsl
adc
lods
insl
sub
dec
lcall
scas
aad
incl
into   
dec
in
inc
clc    
enter
adc
(bad)  
mov
mov
lods
sbbl
dec
and
and
pusha  
jbe
inc
push
dec
sbb
(bad)  
scas
aam
cmpsb
jecxz
aam
data16 sbb
lods
dec
mov
xor
lret
shll
lcall
outsb
imul
xor
jecxz
xor
sub
(bad)  
dec
call
lcall
andl
mov
add
cltd   
in
push
in
push
lret
mov
test
jne
add
mov
icebp  
push
dec
jl
cmp
dec
cmpsl
imul
xchg
cmc    
lods
in
jmp
outsl
xchg
stos
and
leave  
into   
and
cmpsb
int3   
or
cmp
mov
scas
add
mov
imul
cmp
pop
cmp
and
push
jp
push
jmp
test
enter
mov
pop
enter
les
leave  
movsl
pop
xchg
xor
aam
xor
pop
daa    
in
(bad)  
lret   
sub
mov
mov
push
inc
adc
daa    
nop
xorl
mov
xor
sub
(bad)  
xor
or
cmp
(bad)  
push
jmp
or
inc
stos
add
ret    
push
imul
stos
iret   
fwait
xchg
xchg
pop
add
std    
adc
inc
xchg
mov
cmp
jne
mov
push
add
mov
sbb
fnop   
inc
rol
cs
xor
sbb
mov
loopne
mov
rorl
xor
vmaxss
cltd   
mov
stc    
cmpsb
jbe
or
(bad)  
mov
ss push
lahf   
push
aas    
mov
leave  
cmp
sub
sbb
and
adc
dec
push
sub
mov
mov
jmp
inc
xor
jo
fdivs
insb
adc
jns
stos
cmp
scas
test
(bad)  
icebp  
fildll
mov
jmp
push
xchg
lock xlat
iret   
mov
sbb
push
dec
xor
push
mov
bound
leave  
or
xchg
xor
negl
add
lea
sub
pop
and
lods
sbb
or
mov
int3   
lret   
outsb
push
jb
xor
lods
sub
and
test
and
xor
cmp
inc
xor
xchg
popa   
jp
adcl
xchg
and
sub
mov
sbb
dec
idiv
loopne
int
in
dec
mov
xor
add
ret
imul
call
jmp
call
cmp
or
jp
lret
mov
push
adc
mov
xchg
inc
xor
and
cli    
test
(bad)  
popf   
repnz and
or
adc
xchg
out
and
sbb
mov
mov
(bad)  
jo
aaa    
xchg
jmp
mov
aad
sti    
jo
mov
mov
dec
xor
popa   
ss aaa 
push
fldl
cmp
mov
movsb
sti    
mov
iret   
inc
and
jmp
inc
mov
mov
jbe
icebp  
mov
sub
inc
cmc    
js
jg
add
xchg
(bad)  
testb
adcb
sbb
arpl
mov
jl
ja
data16 cld 
(bad)  
icebp  
(bad)  
and
shlb
inc
lcall
adc
push
ds xor
adc
mov
xchg
pop
cli    
pop
rcll
fcmovnu
cld    
add
jle
inc
fbstp
or
es fwait
xchg
inc
inc
pop
inc
mov
(bad)  
jae
mov
adc
fstpt
sub
jne
xchg
dec
mov
mov
shll
push
mov
and
sbb
sub
sti    
fldl
lret
or
in
or
cmpsb
add
mov
leave  
xchg
adc
inc
lds
sub
mov
or
ficompl
adc
ret
push
sar
jnp
or
fsubs
push
add
sahf   
repnz cmp
and
mov
out
ss sbb
out
sarb
test
inc
or
cld    
outsb
push
(bad)  
push
jle
xlat
movl
xchg
sub
adc
add
mov
pop
sbb
rcrb
sti    
jle
add
cld    
into   
jp
add
enter
or
push
(bad)  
pop
lret   
push
or
ss inc
dec
xchg
pop
jle
mov
push
xchg
or
stos
cmp
lock cmpsl
push
xchg
out
ljmp
loop
pushf  
adc
mov
add
test
mov
movsb
mov
add
cli    
and
mov
aaa    
ret
cmp
and
test
lret
jo
in
cmpsb
vpsadbw
mov
pop
add
insb
jg
mov
call
lcall
divl
in
lock cmpsl
pushf  
pop
mov
test
mov
es loopne
mov
dec
lods
dec
mov
jle
outsb
in
nop
xchg
aam
ljmp
stc    
dec
cmp
xchg
inc
pop
hlt    
lret   
mov
xchg
push
mov
cli    
and
movsl
dec
inc
test
nop
insl
fisttpll
iret   
lock adcb
shlb
std    
mov
add
pop
movsb
sahf   
or
out
lock sti 
ror
cmp
push
cs xor
mov
pop
mov
sub
or
cs sbb
iret   
test
jecxz
and
or
fdivl
mov
sarl
fsubp
(bad)  
xchg
movsl
test
mov
fsubl
and
dec
test
mov
dec
mov
enter
lods
mov
fs
imul
fcomps
lods
xor
adc
xchg
dec
or
int3   
lods
fnop   
sub
mov
out
mov
jnp
sahf   
xor
push
int
loop
std    
stc    
dec
test
sbb
jmp
jne
aas    
nop
(bad)  
sbb
cld    
cmpsl
mov
out
arpl
movsl
rclb
popf   
jnp
sbb
inc
dec
xor
mov
stos
imul
push
movsl
lea
pushf  
stos
or
shl
or
into   
push
adc
clc    
dec
jns
inc
jbe
and
mov
push
mov
in
xor
mov
aam
add
leave  
jbe
or
jl
insb
push
(bad)  
cmp
sub
repz cltd 
push
push
jle
add
(bad)  
jp
fsubrl
lock imul
jp
test
in
outsb
int3   
xor
inc
pop
xor
adc
sub
xchg
jb
pop
rolb
xlat
pop
sbb
sbb
int3   
jb
and
inc
jae
lret   
(bad)  
in
lock pop
mov
movsb
adc
ss clc 
test
pusha  
test
xchg
jb
jnp
(bad)  {%k2}{z}
fdivs
mov
adc
cli    
jno
xchg
pop
pop
out
sub
call
mov
and
adcl
jmp
and
pop
adc
test
pop
fimul
test
icebp  
pop
add
dec
fcom
sub
sub
fidiv
xchg
repnz xchg
mov
test
inc
test
cmp
dec
push
inc
mov
lahf   
shrb
xor
jecxz
std    
cmp
xchg
cmp
xchg
mov
daa    
pop
mov
mov
ficoml
fnop   
sbbl
enter
cmp
outsb
xor
mov
negb
pusha  
pushf  
pushf  
pop
inc
test
xor
cmc    
jo
cmpsl
inc
adc
sti    
adc
enter
add
enter
fldenv
bound
mov
cmc    
mov
loopne
out
(bad)  
dec
pop
adc
sbb
push
jnp
add
sub
out
and
movsb
pop
pusha  
fucomi
negl
or
rcrb
(bad)  
xor
lret
dec
mov
and
xor
mov
cmp
fcomip
adc
and
pop
addr16 push
dec
xor
movb
mov
outsb
mov
daa    
push
add
iret   
into   
lock mov
cwtl   
arpl
(bad)  {%k2}{z}
out
(bad)  
test
aad
scas
lahf   
xchg
ret    
cld    
aas    
inc
in
add
test
cmp
push
leave  
xchg
in
leave  
popa   
mov
data16 mov
mov
jl
jmp
(bad)  
call
lock out
fsubl
and
pop
mov
adc
inc
jp
mov
jge
loope
or
pusha  
pop
cwtl   
mov
mov
push
out
mov
outsl
out
movsb
mov
dec
xor
(bad)  
lock mov
imul
xor
push
imul
mov
xchg
add
mov
xchg
aam
arpl
(bad)  
testb
daa    
(bad)  
enter
lcall
push
push
stos
and
mov
icebp  
and
call
push
or
inc
jecxz
inc
mov
aad
sarl
popf   
mov
sti    
or
mov
mov
int
mov
mov
xor
pop
or
addr16 out
test
jle
pop
mov
dec
and
pop
inc
clc    
vmread
push
shrl
aas    
out
adc
outsl
push
scas
leave  
mov
pop
repnz xchg
xchg
inc
jns
insl
sub
mov
leave  
call
pop
cld    
(bad)  
or
call
pop
mov
mov
test
add
inc
repnz mov
pop
sub
ss mov
add
add
outsl
push
add
push
fcomp
sub
xor
int
and
shl
hlt    
jl
and
jno
aam
fidivrl
aaa    
fistl
push
or
dec
lahf   
(bad)  
lods
xor
std    
pop
inc
lahf   
outsb
cmc    
hlt    
iret   
stos
in
pop
aaa    
aam
clc    
mov
mov
cmp
add
lock xchg
cmpsl
sbb
incl
push
cmp
pop
insb
xchg
repnz sahf 
shll
mov
stc    
roll
inc
popa   
adc
jbe
sbb
out
cwtl   
sub
cmp
inc
cs vminss
and
iret   
or
xor
jmpw
dec
ss stos
in
push
fimull
jmp
jge
mov
lds
pusha  
test
mov
push
sub
mov
xor
xchg
jno
(bad)  
rorb
cli    
dec
xor
mov
lret
insl
add
adc
xchg
and
js
jo
aad
cmpsl
dec
pop
add
stc    
js
outsb
(bad)  
(bad)  
mov
in
xchg
xchg
addl
loopne
jg
fisttp
and
out
mov
lock pop
xchg
fsts
sbb
addr16 lret
adc
mov
xchg
ret
jmp
lods
lret
xchg
dec
jnp
mov
lret
das    
xchg
jg
xchg
push
mov
mov
inc
xor
push
(bad)  
inc
add
fdivrl
aas    
mov
add
pop
(bad)  
push
mov
and
test
in
shrb
adc
pop
mov
xchg
and
imul
clc    
cmp
pop
inc
sbb
xlat
mov
mov
sahf   
insb
and
mov
icebp  
add
sbb
add
mov
push
icebp  
mov
aam
jecxz
inc
pushf  
and
jno
mov
negl
lret   
sub
daa    
ja
(bad)  
jle
pushf  
cmp
lds
int
mov
inc
stos
(bad)  
fistl
movsb
adc
sahf   
dec
pop
sub
adc
and
pop
and
inc
cmpsl
sbb
xor
rclb
sbb
sub
mov
mov
leave  
test
push
out
cmpb
or
lret
xchg
movsl
jne
iret   
adc
pop
daa    
fadds
push
movsl
daa    
mov
int3   
hlt    
pop
loop
ss es pop
dec
xor
cwtl   
int
or
orb
pop
dec
js
mov
pop
sub
out
mov
xchg
cmp
arpl
(bad)  
mov
aad
pop
and
ret    
sub
(bad)  
cmpl
push
jno
movsb
(bad)  
out
outsl
lods
(bad)  
cmpsb
xchg
mov
popl
movsb
xor
stos
cmpsb
xchg
jnp
inc
xlat
scas
pop
lods
(bad)  
sbb
add
andb
sub
jmp
pop
ljmp
ficomp
push
in
roll
push
inc
mov
add
les
cmpxchg
inc
cmp
incb
push
aas    
or
loope
pop
(bad)  
jmp
(bad)  
clc    
inc
je
xchg
repz cwtl 
xor
mov
sub
lods
push
xor
inc
test
sahf   
lret   
fmuls
sbb
or
out
movsl
mov
push
insl
mov
int3   
push
movsl
jge
add
inc
cmp
aad
jl
jp
mov
add
sar
sub
cs stc 
inc
in
xchg
add
or
cli    
lahf   
(bad)  
mov
fistpll
xor
movsb
mov
push
mov
sub
outsl
sahf   
push
ret    
adc
fldenv
mov
icebp  
rcrl
dec
pop
int
inc
push
dec
lods
(bad)  
adc
add
xor
movsl
pop
sbb
sub
daa    
and
aam
in
cmpl
inc
add
movsl
mov
mov
sub
or
jecxz
out
insb
pushf  
push
out
ds enter
imul
call
mov
fldcw
pop
pop
jbe
sub
inc
mov
call
push
and
inc
adc
xor
ret
mov
loopne
mov
push
sahf   
in
mov
mov
idivl
mov
in
das    
push
xchg
sbb
sbb
pushf  
sarl
ret    
arpl
insb
pop
mulb
cmp
mov
aaa    
push
insl
repz js
sbb
hlt    
into   
xchg
test
xchg
jge
sub
popa   
push
mov
add
repz mov
(bad)  
push
lahf   
xor
mov
inc
push
rclb
cmp
mov
iret   
add
outsb
add
mull
popf   
inc
pop
sub
ss insl
(bad)  
(bad)
dec
mov
dec
pop
cmp
cmc    
daa    
ds in
xchg
xor
add
push
push
add
in
std    
(bad)  
ja
add
iret   
lret   
ljmp
outsb
mov
(bad)  
loope
cmp
xor
xchg
popa   
adc
jmp
sbb
jmp
out
inc
sbb
mov
pop
repz incb
daa    
or
mov
cmp
fnstcw
jl
ror
daa    
sub
pop
add
int
pop
fnstsw
sahf   
lahf   
mov
pop
(bad)  
(bad)  
cmpsl
imul
insb
inc
pop
mov
stos
ret    
mov
ss out
xchg
shr
inc
fdivs
ja
mov
data16 ja
and
data16 aam
cmpsl
push
mov
mov
clc    
mov
cmp
(bad)  
xchg
addl
ljmp
adc
movsl
cltd   
mov
mov
insl
dec
stc    
movsb
pop
jbe
pop
sub
mov
xchg
mov
repz cwtl 
mov
jae
mov
ja
das    
(bad)  
mov
sbb
jge
add
fsubp
fwait
in
movsb
daa    
mov
(bad)  
or
xchg
(bad)  
jl
xor
jl
xchg
cmp
sub
(bad)  
mov
mov
add
cmc    
int3   
mov
loop
add
dec
jb
push
icebp  
adc
lock
adc
dec
gs in
das    
arpl
push
mov
arpl
out
inc
push
jmp
pop
(bad)  
sbb
leave  
loop
xchg
repz sub
mov
sbb
inc
xchg
jecxz
cltd   
dec
ss push
cld    
mov
outsl
cmp
out
lcall
xchg
adc
or
fwait
mov
lds
imul
or
pop
stos
sub
and
xchg
xchg
loop
pop
rcll
mov
cli    
cs
mov
add
mov
movsb
(bad)  
sub
out
dec
das    
inc
jg
mov
mov
mov
aam
jno
ret
orb
add
(bad)  
lea
ret    
dec
sub
arpl
fisttpl
cmp
sarl
xchg
mov
insb
add
stc    
sbb
int
push
fwait
lahf   
add
pop
out
lea
cmpsb
dec
sub
in
add
xor
mulb
and
loop
les
or
movsb
pop
mov
leave  
or
lea
or
cs xor
cmc    
push
mov
(bad)  
add
inc
sub
gs out
movsl
jle
or
jbe
aad
pop
mov
mov
mov
das    
and
mov
sub
mov
loop
in
incl
aam
iret   
loope
mov
sbb
push
or
cld    
ja
in
clc    
pop
int3   
dec
push
outsb
cmp
inc
out
mov
mov
xchg
xor
cmpsb
fwait
and
insl
add
in
xor
call
aas    
add
leave  
gs and
fisttpll
popf   
stos
xchg
cmc    
shr
stc    
or
daa    
push
insl
inc
and
inc
dec
push
rol
xor
jae
insl
push
out
and
leave  
or
lahf   
jne
cmp
xor
cmp
lods
enter
(bad)  
enter
mov
fwait
lret   
sub
insb
mov
data16 scas
idivl
ljmp
dec
lahf   
push
jne
mov
mov
inc
in
(bad)  
dec
cld    
xor
dec
mov
loopne
mov
fucomip
xor
gs pop
scas
mov
jno
xchg
and
hlt    
push
idivl
xorb
stos
daa    
fs jnp
imul
cmpl
test
sti    
inc
or
ret    
movsl
iret   
je
rcrl
mov
ret
mov
mov
jmp
or
cwtl   
leave  
pop
push
(bad)  
mov
xchg
adc
lock sahf 
cmp
aad
dec
jmp
add
rorb
mov
sbb
or
int3   
adc
imul
inc
or
inc
pop
(bad)  
lods
fsubl
xor
pop
ret    
hlt    
jnp
cmp
cmp
pop
ljmp
sbb
popa   
lahf   
dec
mov
push
jl
mov
subl
nop
lock dec
ret
push
loop
mov
and
in
cmpl
push
in
mov
cmp
sbb
addr16 add
cmp
(bad)  
pushf  
daa    
(bad)
dec
fmul
dec
clc    
and
repz inc
xor
jp
jecxz
xor
enter
movsl
xchg
adc
sub
add
xor
or
sahf   
adc
push
jne
shrl
sbb
ret    
xchg
pop
ret    
sti    
js
hlt    
cmp
cmp
rcrb
dec
popl
in
stc    
gs and
pop
dec
idivb
inc
insb
xchg
repz popf 
mov
and
mov
mov
pop
sti    
outsl
xor
xchg
jne
inc
leave  
sbb
(bad)  
insb
xchg
mov
inc
rep insl
sahf   
imul
repz cld 
xchg
sarl
lsl
xchg
dec
cmp
xchg
or
test
inc
or
rorl
int3   
dec
mov
pusha  
lret
rolb
mov
cmp
or
pop
push
cmp
test
xchg
shlb
out
test
fisttpl
mov
ds scas
mov
cmp
fadd
mov
scas
dec
stos
inc
mov
leave  
mov
dec
and
mulb
sar
fsubl
pop
adc
icebp  
lcall
mov
stos
push
dec
cld    
repnz mov
xor
imul
lgs
cmp
mov
pop
(bad)  
aam
loopne
xor
insb
enter
pop
mov
in
pusha  
cli    
inc
xchg
insb
and
mov
or
insl
sbb
ss out
lods
popa   
and
imul
mov
lods
cmp
pop
fsts
push
mov
test
mov
xor
jp
jmp
add
inc
jb
sbbl
cltd   
addr16 or
push
or
mov
push
and
push
inc
jg
lods
dec
ja
in
xlat
pop
leave  
out
xor
cmpsb
mov
xchg
fidiv
dec
std    
pop
andl
enter
dec
sti    
or
jge
outsl
or
cmp
rorl
or
aad
adc
xchg
pop
adc
pop
xor
aad
mov
mov
lods
div
jl
push
lods
xchg
or
inc
lods
mov
test
test
cmp
fldcw
add
notb
pop
cltd   
jge
out
add
jno
cwtl   
dec
ljmp
movsl
out
and
pop
jmp
mov
and
(bad)  
xor
cmpsb
arpl
jne
sbb
in
mov
pop
test
add
and
xchg
cmc    
push
pop
cltd   
inc
fistpl
dec
dec
mov
daa    
and
and
inc
jg
and
and
fistpl
cmovae
and
pop
adc
sbb
and
add
test
decl
jb
jp
cmc    
push
mov
push
scas
pop
ja
inc
cli    
adc
roll
inc
mov
inc
scas
push
mov
add
dec
inc
and
imul
push
je
cltd   
mov
pop
ja
mov
imul
pusha  
or
xor
cs daa 
lock mov
(bad)  
and
pop
lahf   
inc
jb
lcall
cli    
mov
jae
pop
dec
jae
fadd
dec
sbb
xor
mov
sub
mov
push
out
adc
outsb
ret
pop
mov
jb
mov
cltd   
fldt
(bad)  
xor
icebp  
stos
mov
mov
xor
xlat
jb
adc
vmwrite
test
xchg
inc
push
sbb
insl
aaa    
scas
or
push
and
jmp
inc
syscall 
outsl
cmc    
insb
lahf   
loopne
push
rep outsb
cmp
cld    
inc
lret
push
pop
add
mov
mov
jae
mov
push
adc
cmc    
cs add
mov
cmpsb
inc
push
jnp
lcall
mov
push
stc    
adc
sbb
lahf   
dec
sub
cs insb
pop
or
in
push
cmp
popa   
add
mov
xor
enter
jl
fdivs
gs mov
cmpsl
faddl
outsl
fstpl
test
xchg
cltd   
leave  
sbb
mov
jle
stc    
cltd   
js
iret   
sub
fidivl
mov
clc    
repnz push
inc
leave  
xlat
adc
xlat
lea
nop
out
in
adc
sbbb
mov
imul
mov
sbb
sbb
pop
jge
xchg
sub
mov
ficoml
xor
mov
lahf   
sbb
mov
jno
xchg
rol
dec
rcrl
cmpb
orl
loope
rorb
pop
mov
pop
pop
mov
shlb
add
rclb
repz ret 
lods
sbb
dec
popf   
aad
adc
or
push
pop
mov
nop
ds inc
ss out
mov
xor
imul
scas
loop
jno
out
ficompl
lahf   
repz fldt
mov
shl
xchg
jge
add
sarl
xlat
jno
adc
lret
and
orb
fiadd
push
gs inc
inc
mov
(bad)  
add
add
mov
push
in
fdivrp
jmp
clc    
sti    
out
inc
xchg
jecxz
lcall
pusha  
vmovaps
popa   
mov
add
stos
movntq
mov
add
arpl
jecxz
cmp
jmp
jmp
loopne
icebp  
mov
aaa    
sub
mov
imul
cwtl   
mov
lods
leave  
loop
add
cld    
pop
mov
xor
mov
ss push
sbb
pop
fneni(8087 only) 
pop
das    
sub
sbb
mov
rorl
lret
stos
in
in
outsb
(bad)  
add
nop
fidivr
and
fadds
jg
cld    
xor
(bad)  
jo
out
fistp
add
arpl
psubd
leave  
mov
mov
out
ret    
cwtl   
xchg
xor
cwtl   
lret   
adc
add
push
fistl
mov
std    
insl
fst
add
push
out
or
mov
cltd   
ss hlt 
xchg
mulb
pop
fistl
pop
outsb
fsin   
sbbl
sbb
mov
xchg
pop
mov
clc    
adc
mov
in
loopne
mov
jp
aad
test
sbb
pop
xchg
aam
mov
aam
sub
add
outsb
shr
cmp
jns
xchg
or
out
cmp
in
aad
fildl
mov
sti    
jmp
push
lea
test
repnz mov
mov
jg
or
jns
jne
lcall
enter
mov
in
mov
dec
push
add
scas
mov
cli    
les
mov
or
dec
imulb
adc
mov
pusha  
inc
inc
outsl
aas    
sbb
xchg
adc
xor
adc
inc
adc
xchg
les
push
mov
mov
mov
ja
pop
mov
aas    
pop
out
mov
pop
lds
arpl
mov
movl
push
xlat
dec
push
jge
js
dec
movsb
add
pusha  
shrl
push
cmp
outsl
fisubl
xchg
je
out
jge
and
mov
fdivr
add
mov
jns
sbb
mov
cmp
test
shrl
xchg
in
and
sbb
pop
jmp
pop
jno
jge
lcall
jne
dec
mov
test
mov
test
xor
mov
iret   
cmp
push
out
test
mov
pop
das    
dec
addr16 inc
cs aaa 
mov
add
cmp
dec
xor
test
pop
lods
outsb
cmp
push
and
mov
addr16 sbb
push
scas
fnstenv
std    
lcall
je
push
push
sub
(bad)  
xor
cmp
ret    
cltd   
mov
cmp
mov
adc
mov
pusha  
ds inc
test
lcall
insl
imul
lahf   
or
notl
dec
xchg
sub
xchg
(bad)  
into   
(bad)  
enter
xchg
jge
xchg
(bad)  
fsts
sahf   
jp
ret    
and
inc
pop
or
test
clc    
xchg
sbb
mov
aaa    
mov
bnd jp
add
mov
adc
sbb
mov
fwait
cmp
xchg
and
push
repnz sti 
(bad)  
or
jb
outsb
add
mov
frstor
push
ljmp
inc
xchg
aad
ret    
ret
sahf   
mov
pusha  
mov
xor
cmp
test
mov
cs imul
mov
sbb
in
aam
mov
inc
mov
pop
fcmovnbe
push
pop
jmp
pop
inc
aas    
js
sahf   
fcoms
push
jmp
xchg
jle,pn
mov
andl
mov
loope
into   
(bad)  
and
mov
mov
adc
rorl
adc
outsb
sbbl
adc
mov
push
xor
inc
cli    
movsl
pop
fmull
outsb
in
jb
jmp
push
xchg
fnsave
push
xor
sbb
loop
or
pop
sbb
fidivrl
add
jmp
xchg
lods
push
pop
psadbw
pushf  
add
shlb
push
insl
push
inc
vpshufd
and
add
jge
(bad)  
ret    
rcll
es add
jmp
and
xorl
inc
cmp
repnz pop
dec
mov
cli    
out
jmp
repz sbbl
fsubs
mov
xor
fistl
aam
dec
stos
cmp
ret    
sbb
cli    
enter
outsb
pop
xor
xchg
test
sbb
scas
and
stc    
mov
ds
cmc    
push
inc
mov
add
xlat
fwait
lock push
xor
inc
(bad)  
or
sub
in
fs imul
push
push
lcall
loope
int3   
aas    
mov
loopne
cmc    
xchg
add
add
in
dec
jne
add
ret
loop
cwtl   
and
sbb
pop
sub
lds
xorl
mov
(bad)  
mov
es loopne
or
data16 mulb
mov
jno
xchg
or
(bad)  
loop
lret
outsl
mov
lock fnstcw
cltd   
or
addl
or
cmp
jne
pop
in
gs inc
out
and
sbb
cmpsb
mov
adc
ret    
xor
fadd
mov
mull
outsl
cmpb
stos
add
sahf   
aam
aaa    
(bad)  
leave  
out
cwtl   
(bad)  
dec
add
pop
push
test
jecxz
fldl
(bad)  
lds
lds
(bad)  
push
call
fwait
pop
sub
lahf   
xor
mov
adc
sub
and
lahf   
dec
cmp
fldcw
cmp
push
push
cmp
imulb
push
int
adc
ficomp
xchg
push
mov
xor
dec
(bad)  {%k2}{z}
in
sub
adc
mov
pop
stos
jge
mov
lods
add
inc
repz sbb
ret
jae
popa   
mov
lea
inc
jo
sarb
rcrl
ljmp
aaa    
xchg
inc
mov
mov
fiadd
xor
stos
loope
push
sub
lahf   
xlat
sbb
cmp
test
adc
xchg
push
mov
js
pop
fcomps
movsb
lahf   
shrb
nop
ficompl
pop
xchg
push
mov
sbbl
jns
cmpsl
mov
pop
xor
jg
iret   
xchg
cmp
stos
pop
add
pop
mov
loope
jno
ficomp
gs dec
add
jnp
mov
call
scas
mov
loopne
insl
mov
(bad)  
jmp
add
jle
cmc    
sbb
das    
(bad)  
mov
push
ja
mov
mov
fldl
xchg
adc
movsl
loopne
out
cmpsb
cltd   
fadd
xchg
in
and
sub
push
rclb
add
jns
push
jecxz
aam
mov
lcall
dec
pop
je
jbe
je
mov
in
dec
cwtl   
cmpsb
add
sti    
or
xor
lods
ret    
cwtl   
popa   
ret    
lahf   
mov
pop
clc    
ficomp
jae
xchg
leave  
push
and
push
lods
push
lahf   
outsl
lcall
xor
mov
aad
mov
push
mov
and
add
jg
lds
inc
sub
jge
xchg
jl
arpl
push
xlat
lret
push
xchg
push
sub
add
das    
data16 jl
scas
mov
dec
mov
sbb
xchg
xor
mov
arpl
arpl
arpl
stos
mov
jge
dec
int
adc
ficoml
gs inc
fsubrl
or
scas
cmc    
pop
lahf   
ret    
fcoms
out
inc
bound
addr16 in
jge
mov
cmpl
mov
sub
ss pop
mov
mov
cld    
cld    
jns
out
push
adc
sub
inc
push
push
push
sbb
(bad)  
or
or
xchg
icebp  
xor
pusha  
je
and
sti    
jno
add
inc
jns
fldt
mov
std    
xor
sbb
mov
sbb
movb
xor
pop
out
xchg
(bad)  
pushf  
mov
stos
js
adc
iret   
dec
(bad)  
cmc    
inc
insb
out
push
hlt    
imul
stos
ret    
lret   
adc
dec
push
add
pop
cmp
cwtl   
xchg
in
jmp
mov
cmp
xor
pop
sbb
xchg
mov
mov
(bad)  
movsl
ja
in
add
inc
movsb
lea
outsb
dec
imul
cltd   
push
mov
mov
ljmp
(bad)  
xor
fmuls
or
cmp
arpl
inc
icebp  
or
xchg
cmpsb
lret
mov
pop
cmp
push
(bad)  
ss push
cltd   
or
scas
(bad)  
xor
jmp
int3   
lcall
push
adc
xor
sahf   
inc
xor
add
dec
mov
rorl
rclb
sarl
leave  
idiv
(bad)  
mov
jecxz
jns
push
inc
aad
push
sub
jns
cs xchg
rolb
sub
xor
fsubs
repz sarb
cwtl   
add
(bad)
into   
jno
mov
cs sub
popa   
mov
adc
cmp
xchg
sbbb
push
cmc    
fnstenv
mov
test
sbb
fcoms
push
and
shrl
shr
inc
test
fisubl
cli    
scas
sub
jb
xor
subb
or
mov
les
jecxz
add
jmp
push
jle
push
das    
pop
and
mov
loope
les
call
add
adc
adc
ljmp
inc
add
test
mov
push
and
fadds
xchg
add
jmp
dec
mov
dec
icebp  
dec
add
pusha  
and
pop
ljmp
in
pop
lea
or
adc
lock ja
pushf  
in
out
mov
hlt    
lret   
jecxz
adc
aas    
push
mov
push
push
ret    
mov
aas    
cmp
add
std    
lcall
lock fwait
xor
das    
mov
(bad)  
mov
jg
mov
aas    
insb
and
or
(bad)  
mov
sbb
and
mov
xchg
sbb
mov
pop
shrl
popf   
jl
ss sbb
outsb
rorb
adc
xchg
fisubr
adc
push
in
sub
shlb
jo,pt
in
xor
lcall
add
aaa    
(bad)  
sub
inc
gs push
mov
daa    
stos
cmc    
adc
mov
cs arpl
fwait
xor
ss push
cmp
add
test
(bad)  
(bad)  
fnstenv
cmp
mov
pop
arpl
adc
jmp
cmp
dec
lds
scas
out
push
stc    
mov
pop
xlat
mov
push
outsb
cmp
out
fldt
jge
lret
lock adc
mov
pop
jle
adc
pop
sub
push
and
aam
mov
outsl
add
ficom
ret    
loop
sub
addr16 dec
push
sbbl
jo
lahf   
jmp
popa   
ljmp
and
mov
mov
ficom
ja
pop
outsb
add
dec
push
jne
push
jp
int
ljmp
xchg
movsl
or
inc
idiv
nop
pop
dec
pminsw
popf   
and
jno
add
outsb
fisubr
pushf  
fcompl
dec
movsb
jp
mov
pusha  
cmp
pop
mov
ja
jno
push
mov
nop
outsb
mov
mov
bound
jnp
and
negl
lods
dec
xor
(bad)
pusha  
cli    
mov
mov
xlat
sbb
lcall
stc    
mov
push
aas    
sub
cmp
mov
cmpsb
dec
pop
stc    
or
jbe
and
bound
dec
pushf  
xchg
js
sbbl
insl
sub
cli    
add
or
xlat
movq
icebp  
lahf   
test
(bad)  
sub
test
jge
cwtl   
scas
mov
lods
sub
sbb
mov
stos
jl
pop
inc
adc
aam
sbb
aad
pop
and
roll
inc
aam
loope
(bad)  
sbb
adc
neg
fcomip
ret    
mov
mov
mov
stos
cbtw   
pop
push
or
fsubr
jg
pop
jp
iret   
mov
scas
inc
inc
jge
movsb
(bad)
mov
ret    
in
das    
out
push
adc
and
mov
movsl
ret
out
xchg
or
sbbl
cs std 
fs add
mov
xchg
stos
dec
pop
rcrb
lods
jae
sti    
js
jl
(bad)  
ss add
mov
xor
ja
or
rorb
dec
mov
fs dec
fs inc
imul
jecxz
je
aad
add
cmp
adc
sbb
nop
call
clc    
aam
pop
js
xchg
ljmp
nop
xchg
in
into   
push
into   
jns
addr16 std 
jle
inc
fs jge
mov
mov
(bad)  
(bad)  
xor
aaa    
pop
popf   
sbb
inc
sub
sbb
mov
xor
sub
rcrl
imul
lret   
push
cmc    
mov
fs aad
xor
or
(bad)  
dec
xchg
(bad)  
loopne
add
mov
fadd
(bad)  
cs in
pop
xor
mov
lods
lret
and
pop
imul
pop
mov
cmp
ret
cs mov
push
dec
inc
pop
mov
push
and
push
pusha  
pop
outsl
pop
sbb
cmpsl
(bad)  
fdivrs
mov
fisubr
pop
movsl
leave  
jmp
mov
movsl
dec
inc
inc
add
(bad)  
lock dec
jbe
outsb
data16 loope
and
divl
imul
add
mov
mov
popl
mov
(bad)  
and
lret   
mov
in
in
(bad)  
adc
cmp
(bad)  
cmp
pop
imul
das    
push
(bad)  
adc
cmpsl
and
cwtl   
cwtl   
jne
pop
bound
dec
dec
lock sbb
(bad)  
mov
jl
jecxz
cmp
mov
(bad)  
in
pop
mov
xlat
std    
pop
insb
sub
fimull
jecxz
jns
sub
pop
xor
lret
jns
outsl
iret   
jmp
(bad)  
sbb
adc
xchg
add
or
or
pushf  
sahf   
addr16 in
push
mov
adc
xor
lret   
lret
sbb
outsb
pop
jbe
add
je
pop
aam
fimul
mov
sar
jp
cmp
xchg
mov
sahf   
loopne
enter
sahf   
inc
fsubr
or
sahf   
mov
and
cli    
lods
fcoms
mov
scas
ret
xchg
xor
bound
and
loopne
les
in
adc
outsl
loop
out
mov
(bad)  
lock std 
insl
inc
mov
(bad)  
loop
lcall
(bad)  
adc
pop
jo
or
and
bound
dec
inc
(bad)  
mov
in
lods
psubq
lods
jg
mov
mov
in
enter
jl
pop
lods
imul
shl
pusha  
andb
out
lea
dec
mov
hlt    
sub
sbb
xor
mov
jmp
pop
mov
and
sbb
sub
or
cltd   
shl
mov
sub
neg
push
leave  
fwait
add
or
in
push
mov
inc
shrl
and
xchg
mov
bound
sbb
push
pop
mov
pop
xor
arpl
jmp
sub
(bad)  
in
stos
pop
sub
sti    
mov
iret   
rolb
inc
mov
int3   
mov
xor
jle
sarl
(bad)  
fdivrp
das    
aam
imul
(bad)  
xchg
jbe
shl
push
pop
pop
push
jmp
outsb
mov
es ret
rcrl
mov
push
fstps
or
xorl
dec
xor
add
dec
into   
(bad)  
mov
sub
mov
stos
push
or
mov
ret    
movsb
iret   
inc
xchg
push
push
notl
push
and
xor
jne
rorb
vpsadbw
out
push
in
push
imul
je
int
cmpsb
and
sub
xchg
pop
aam
das    
jne
lods
sbb
ss pop
pop
shl
ret
add
pop
pushf  
popa   
jge
jae
add
inc
inc
inc
lods
js
in
out
cwtl   
int
sub
dec
dec
cltd   
aad
mov
cmp
(bad)  
pop
inc
sub
jmp
aas    
dec
pusha  
cmp
sahf   
sti    
out
loop
push
xorb
out
lret
sahf   
leave  
aad
jp
pop
stos
pop
mov
adc
xchg
adc
ss inc
in
imul
test
(bad)  
mov
sahf   
mov
add
mov
mov
pushf  
sar
je
sahf   
xchg
cli    
dec
es
addl
repnz mov
fdivl
xor
jns
mov
popa   
xchg
cwtl   
enter
add
cmc    
out
sub
xor
ficomp
mov
enter
in
or
icebp  
dec
and
jb
mov
or
mov
lahf   
sub
lahf   
push
roll
lds
mov
test
xchg
(bad)  
lods
aad
xchg
push
pop
xchg
jle
xchg
xor
fcoml
inc
push
lds
out
scas
push
inc
mov
or
cmpsb
and
push
and
aad
dec
jg
xor
out
sub
and
hlt    
xor
in
insb
sub
repz dec
cmpsl
loopne
fdivrl
(bad)  {%k2}{z}
(bad)  
fwait
push
scas
loop
or
push
mov
xchg
or
mov
out
or
nop
xchg
xor
sub
roll
mov
mov
mov
sub
negl
adc
cli    
jns
pop
dec
mov
ljmp
jne
push
ss dec
push
out
test
pop
(bad)  
xor
sbb
mov
cmpsl
push
lret
and
sahf   
sub
jo
outsl
mov
xor
adc
jnp
or
sub
andl
ja
dec
xorl
outsl
popf   
fbstp
ds popa 
cmp
clc    
stc    
mov
lea
xor
icebp  
mov
inc
fisttpl
repz mov
push
inc
xchg
andl
out
(bad)  
std    
mov
jae
mov
fwait
push
imul
inc
dec
xor
jl
adc
pop
mov
enter
push
adc
mov
sbb
push
inc
fnsetpm(287 only) 
sub
ret
mov
and
add
mov
mov
nop
adc
mov
dec
xchg
inc
loope
xchg
in
insb
mov
(bad)  
cld    
dec
dec
shll
pop
daa    
sbbb
sbb
xchg
jmp
inc
lahf   
pop
sbb
in
xchg
popa   
hlt    
repz aad
push
jnp
mov
xor
jg
sarb
push
cmpsb
mov
or
lret   
ljmp
imul
jae
rcrl
lahf   
int3   
movsl
jmp
push
jno
adc
test
sbb
push
insb
xor
pop
add
add
push
add
nop
nop
cmp
imul
inc
sub
and
ja
in
mov
pop
(bad)  
out
cmp
mov
lret
div
push
jg
mov
push
arpl
jmp
jae
pop
xor
cld    
mov
sahf   
xor
das    
cmp
xor
mov
rcr
push
jmp
adc
or
scas
pop
xor
pop
test
and
iret   
popa   
pop
push
push
cmp
pop
pop
divl
dec
xor
mov
out
or
stos
nop
jb
(bad)  
int3   
rcll
scas
add
mov
or
push
sub
movsl
in
xchg
push
aam
scas
mov
js
ret    
ret    
int3   
dec
cmp
cmp
sbb
mov
fildll
cli    
inc
adc
or
cmpb
sub
fldl
or
scas
jno
jae
pop
pop
cmp
pop
mov
inc
jl
sbb
pop
daa    
ret
dec
inc
xchg
or
mov
repnz leave 
jecxz
dec
fldt
add
inc
or
push
mov
adc
mov
pop
std    
movsl
arpl
inc
xlat
push
cli    
sahf   
lods
push
cmpsl
mov
(bad)  {%k2}{z}
fisub
and
dec
loope
mov
sub
mov
add
sub
stos
push
jb
(bad)  
lock icebp 
mov
scas
or
mov
add
inc
push
add
or
lock xchg
lods
and
fdivrp
mov
dec
insb
pop
mov
pop
in
in
mov
adc
imul
jecxz
xchg
iret   
movl
stos
jae
iret   
int
jns
test
pop
sub
xlat
(bad)  
cmp
enter
fmull
mov
cmpsb
dec
and
inc
int
xor
mov
inc
into   
mov
scas
xchg
stos
jge
add
inc
fsubrs
push
xor
test
add
test
mov
imul
shrb
popa   
xchg
aam
sbb
lods
insl
pop
dec
in
lret   
pop
lret   
stos
rep outsb
xor
mov
shlb
(bad)  
and
adc
leave  
inc
sub
adc
xor
cmp
loope
cmp
dec
cmp
outsl
push
xchg
mov
jnp
(bad)  
ja
stos
inc
mov
int
add
out
pop
adc
in
test
pop
push
imul
aad
and
sbbl
push
adc
sahf   
and
ljmp
pop
adc
sbb
imul
or
out
mov
sbb
add
scas
(bad)  
sbb
jne
mov
bound
(bad)  
cmc    
cltd   
cmp
pushf  
sbb
(bad)  
lret   
mov
mov
sub
(bad)  
or
mov
stos
dec
test
and
std    
sub
xor
scas
push
out
arpl
int3   
dec
inc
shrl
call
push
scas
xchg
out
movsl
aas    
test
popf   
xor
jl
mov
ja
dec
cmp
cwtl   
sub
mov
cmp
popf   
(bad)  
loopne
(bad)  
arpl
dec
je
je
push
pop
mov
scas
push
mov
mov
movsb
cmpsl
sbb
popf   
pop
lods
pop
test
paddw
out
inc
xchg
popf   
insl
mov
pop
cltd   
and
jnp
pop
push
jnp
rol
rorb
pop
sbb
daa    
mov
divb
inc
jp,pn
in
adc
bound
repnz mov
xor
xchg
pusha  
pop
or
mov
test
mov
adc
dec
out
pusha  
mov
data16 cmpsb
(bad)  
mov
cmpsb
and
les
push
push
xchg
dec
inc
cli    
mul
inc
sti    
pop
mov
rcrl
mov
nop
in
or
xor
sbb
and
andnps
and
scas
pop
mov
lods
div
hlt    
cli    
in
jne
(bad)  
(bad)  
es ret
lcall
add
fisttpll
cld    
cmp
push
adc
repnz mov
sbb
jle
repnz pop
push
cmp
lods
cwtl   
subb
sub
shr
xor
mull
pop
je
(bad)  
xchg
les
cmpsl
mov
mov
fdivp
add
push
adc
test
enter
xor
leave  
dec
xchg
enter
inc
nop
fadds
mov
xor
mov
inc
sbbb
pushf  
mov
ds insb
jle
enter
mov
insl
lahf   
xor
out
gs iret 
in
sbb
out
pop
in
cmp
inc
(bad)  
add
flds
cmpsl
ficoml
jp
imul
xchg
ja
mov
aad
rcl
enter
mov
sub
pop
mov
call
and
jg
aad
sbb
push
out
scas
jge
aas    
push
in
(bad)  
cld    
lods
inc
fstpl
push
jge
sbb
dec
in
push
out
enter
mov
imul
dec
jecxz
bound
adc
adc
pop
mov
outsl
pop
rcrb
imul
test
and
lds
cwtl   
cmpb
or
sbb
mov
lret   
adc
aas    
clc    
mov
mov
jae
daa    
mov
idivb
xor
dec
sbb
push
jns
movsb
test
insb
sub
mov
mov
out
xchg
aam
pop
push
outsl
mov
popaw  
mov
adc
mov
jg
jns
stos
dec
lret   
adc
addr16 pop
xor
dec
add
push
pop
popf   
mov
lret
push
lcall
sub
repnz les
dec
push
ljmp
adc
(bad)  
fcomps
sbbl
(bad)  
and
xchg
and
subb
in
(bad)  
out
scas
pop
rcll
inc
(bad)  
popa   
ficom
jbe
stc    
iret   
jecxz
or
mov
mov
add
cltd   
mov
dec
jno
arpl
dec
push
aad
xchg
ja
call
push
cmpsl
(bad)  
in
fwait
mov
pop
sub
push
lcall
cli    
ret
xor
adc
push
mov
loopne
out
mov
mov
fsubrs
mov
cmp
std    
xchg
repz inc
add
jp
push
das    
mov
shlb
lock adc
(bad)  
xchg
out
inc
sti    
sahf   
xchg
das    
cmc    
push
dec
iret   
stos
je
lahf   
enter
jg
sub
push
ret    
xor
ljmp
mov
push
test
out
or
les
rorl
push
inc
shll
(bad)  
repnz daa 
lds
sub
jl
push
or
pop
repz pop
dec
xchg
loop
into   
fcmovne
mov
inc
jnp
stos
fiaddl
repz jl
enter
sti    
imul
fist
xchg
pop
(bad)  
sbbl
fwait
test
pop
jnp
mov
mov
(bad)  
icebp  
scas
sub
xchg
addr16 mov
cmpsb
add
xchg
inc
call
icebp  
sub
sbb
pop
xor
jge
pushf  
inc
fimull
jns
test
test
cmp
(bad)  
and
cwtl   
sub
push
sahf   
and
cmp
jae
sarb
roll
mov
cwtl   
es pop
xchg
jb
rcl
dec
mov
ja
fcomi
outsl
not
popf   
fnstsw
out
lret   
jp
in
jo
jb
test
fsubrp
and
enter
inc
scas
lods
add
call
or
mov
repz xchg
test
or
xchg
sub
jo
jl
mov
push
aad
sbb
and
fld
shrl
pop
cmp
sub
stc    
lcall
jl
lods
cmp
push
dec
xchg
out
mov
movsl
push
cs xor
ret    
fidiv
xor
add
jg
push
insl
sbb
lret
inc
mov
cmc    
xchg
das    
enter
or
aam
gs
(bad)  
xor
addb
dec
pop
imul
andl
inc
loop
sub
sub
lcall
fwait
ljmp
(bad)  
mov
in
(bad)  
adc
test
push
lods
cli    
pusha  
outsl
insb
dec
inc
ss call
ds ret 
inc
hlt    
jne
xor
push
mov
test
(bad)
mov
pop
xchg
scas
dec
cmp
test
pop
test
int3   
jg
into   
push
enter
inc
nop
loop
(bad)
or
xor
add
ljmp
nop
jnp
and
cmp
adc
lret   
mov
cmpsb
mov
and
mov
es jg
std    
sbb
imul
fwait
mov
push
lcall
fs pushf 
mov
enter
jl
cltd   
pushf  
push
fs or
jle
sahf   
sbb
jle
sahf   
mov
jl
out
das    
cmpsb
push
pop
dec
cltd   
mov
sbb
in
ljmp
lahf   
jae
push
sbb
popa   
(bad)  
dec
hlt    
stc    
sub
into   
lret
push
mov
jo,pn
mov
rcrb
out
fsubl
pop
insb
jbe
xor
lret   
add
sbb
nop
insb
notl
dec
int
push
pop
scas
in
movsl
or
jmp
adc
outsl
ret    
push
inc
lret
fadds
sbb
(bad)  
xor
push
push
xor
nop
or
add
cmp
loope
mov
dec
sti    
repz daa 
xlat
and
int3   
aam
popa   
ret
pusha  
aas    
lds
outsb
sbb
rcll
push
lcall
cmp
cmp
ja
je
cmpsl
call
mov
in
dec
cmp
cmpsb
sub
les
push
aaa    
nop
daa    
add
out
or
xchg
mov
adc
adc
mov
add
sbb
mov
hlt    
popa   
subl
dec
sbb
pop
dec
xor
sti    
sub
stc    
lods
mov
cmp
call
flds
mov
out
icebp  
pop
sbb
gs mov
lea
andl
and
js
test
sbb
add
add
dec
inc
scas
inc
pusha  
(bad)  
or
add
add
(bad)  
(bad)  
(bad)  
incl
add
add
add
add
add
add
jns
je
insl
cs inc
jb
ja
outsb
addr16 sub
push
gs jb
imul
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
xor
data16 aaa 
xor
fs xor
add
adc
gs insl
cs inc
jb
ja
outsb
addr16 cs inc
imul
add
popa   
je
pop
add
add
add
add
add
lsl
add
jno
add
add
or
or
add
or
add
add
add
dec
or
add
add
(bad)  
and
add
add
inc
dec
inc
add
mov
or
popa   
add
jo
pop
jae
add
ret    
add
push
ret    
add
outsl
test
add
cmp
push
push
test
imul
lahf   
mov
sbb
xchg
or
lods
mov
ret
decl
jb
aad
or
daa    
xor
pop
pop
mov
xor
push
outsl
xor
jge
jecxz
push
adcb
call
popf   
mov
mov
into   
(bad)  
add
xor
cmp
mov
(bad)  
xchg
add
test
adc
loopne
cmp
in
repnz mov
mov
enter
xor
xlat
je
ja
mov
dec
jb
imul
xchg
xor
aam
or
fnstcw
pop
out
push
lcall
loop
movsl
xor
fistp
mov
or
fdivl
add
(bad)  
out
rclb
mov
call
pop
test
mov
in
mov
and
clc    
mov
mov
aad
xchg
dec
mov
mov
pop
shll
adc
aad
inc
cmp
push
add
sbb
je
es test
dec
or
test
nop
or
lods
jns
pop
cli    
mov
cmp
mov
stos
jns
sti    
imul
lods
out
xlat
dec
aas    
mov
clc    
push
pop
fistpl
xor
jg
std    
das    
adc
sub
inc
outsb
clc    
xor
call
mov
es out
adc
call
dec
movsl
aas    
insb
jl
pop
loop
sub
cmp
mov
dec
and
dec
mov
cmp
aam
push
(bad)  
call
pop
sub
jl
in
or
je
movl
das    
mov
inc
lds
xchg
jns
cmp
inc
stos
pop
pop
sbb
mov
xchg
fidivrl
ja
scas
lret   
addr16 sbb
cltd   
int
mov
inc
test
int3   
dec
lock push
std    
ret    
or
ljmp
mov
in
sub
sarl
pop
sbb
jl
int
xor
mov
test
xchg
les
cmp
out
lds
(bad)  {%k4}{z}
jae
scas
(bad)  
mov
dec
push
mov
xor
addr16 dec
mov
pusha  
(bad)  
jg
cmp
cld    
pop
xor
loopne
xor
mov
or
mov
mov
(bad)  
movsb
lods
subb
ret    
jg
sbb
aas    
adc
xor
pusha  
scas
ret
aam
mov
dec
das    
pop
xchg
int
mov
rorl
xchg
jae
loopne
xchg
xchg
jno
adc
in
sarl
and
insb
cmp
xchg
pop
sbb
sahf   
jmp
inc
push
xchg
pop
cmp
roll
int
and
clc    
daa    
add
xlat
and
or
sbb
lods
outsb
mov
pop
es insb
int
mov
cmp
dec
or
jmp
inc
pop
pusha  
sbb
dec
push
xlat
sub
push
and
mov
fstpt
stos
mov
cmc    
dec
test
adcl
sub
xor
mov
lret   
mov
test
inc
leave  
pushf  
xchg
test
popa   
fstpt
test
test
push
pop
roll
pop
xchg
push
dec
mov
iret   
sbb
ljmp
(bad)  
cwtl   
add
imul
dec
xor
push
insl
sbb
sbb
lcall
stc    
cmp
xchg
xchg
stos
aam
xchg
add
pop
fs enter
pop
xor
stc    
pop
mov
sbb
mov
out
scas
xlat
bound
cmp
int
lds
jge
repnz push
jns
pop
int3   
sub
dec
xchg
arpl
sub
pop
cmp
lret   
inc
frstor
subb
mov
xchg
(bad)  
sarl
push
sub
pop
lret
out
orb
cwtl   
js
out
adc
cs lcall
and
(bad)  
mov
or
jbe
test
sbb
or
cltd   
sbb
je
out
xor
sbb
mov
cli    
sbb
fwait
stos
mov
mov
fdiv
aas    
lock cmp
leave  
push
iret   
mov
out
outsb
call
out
mov
fs loopne
insl
das    
(bad)  
movsb
movsb
dec
loop
jne
and
and
pop
(bad)  
xchg
or
aad
ss jo
pop
and
push
dec
add
iret   
fidivrl
push
daa    
mov
ret    
loopne
mov
mov
imul
mov
cmova
(bad)  
mov
les
ret    
pushf  
test
push
dec
mov
repnz sbb
mov
pop
pop
cmp
xchg
mov
(bad)  
xor
imull
sub
test
std    
add
add
mov
pop
(bad)  
xor
test
dec
inc
gs int
or
sub
hlt    
out
scas
bound
inc
xorb
add
add
mov
push
pop
and
dec
pusha  
xor
test
mul
or
mov
pop
or
jle
test
adc
adcl
cmpsb
add
and
xchg
jo
test
lods
sub
adc
push
test
mov
push
ds mov
cmpsb
mov
dec
mov
jns
outsl
cmpsl
dec
pusha  
mov
nopl
(bad)  
push
push
cmpsl
nop
dec
mov
jecxz
lret
mov
add
fdivrs
xchg
imul
add
punpckldq
gs
addr16 xor
imul
mulb
add
jle
lahf   
cmp
push
add
std    
mov
pop
sub
lcall
mov
lds
pop
xlat
fs inc
out
fwait
pop
inc
inc
stos
jp
add
sti    
(bad)  
test
sbb
lods
loope
bound
mov
lods
idivl
fnstcw
add
fwait
add
inc
jmp
cmp
sbb
or
fdivrl
popf   
push
dec
leave  
xchg
outsb
or
in
push
push
into   
push
loop
movsb
mov
movsb
(bad)  
aam
popa   
pop
mov
or
mov
stc    
mov
cmpsl
test
cltd   
loope
mov
jb
pop
cmp
mov
dec
sbb
or
adc
dec
enter
popl
or
call
cmc    
jno
nop
add
cmc    
mov
mov
imul
add
pushf  
push
dec
push
outsb
and
popf   
jecxz
mov
dec
test
dec
out
xchg
push
(bad)
push
fcmovnb
lods
leave  
inc
pop
in
jg
addr16 add
das    
or
cmp
loope
mov
jne
pop
mov
mov
fdivrs
add
xchg
sbb
sti    
ss mov
cli    
fmull
js
repnz fisttpll
leave  
add
iret   
jb
push
inc
aam
mov
xor
iret   
mov
jge
mov
shlb
ficompl
mov
fmuls
fwait
jno
ljmp
popa   
dec
xor
loope
(bad)  
mov
xchg
cmp
addr16 pop
pop
push
sar
push
repz jl
mov
ficomp
in
add
push
sbb
sbb
jmp
xor
sbb
or
dec
cltd   
add
pop
ret    
mov
lcall
adc
inc
outsb
sbb
pop
sbb
arpl
dec
cmp
mov
push
(bad)  
test
in
mov
icebp  
or
mov
xchg
(bad)  
mov
and
mov
out
sub
out
xchg
arpl
sub
roll
nop
xor
in
add
aam
cli    
cmpsl
add
decb
rcrl
or
out
sbb
mov
lods
mulb
ret
push
push
cld    
pop
cmc    
lock jge
mov
roll
ljmp
(bad)  
call
sbb
in
out
xchg
rcll
xor
(bad)  
aas    
mov
jbe
adc
mov
or
push
rcll
or
test
jl
and
movsb
xchg
and
lret
adc
leave  
jecxz
add
mov
xchg
fistpll
mov
call
movsb
sbb
mov
dec
dec
jg
adc
or
mov
xchg
scas
jl
push
mov
(bad)  
(bad)  
jne
mov
jl
inc
scas
test
dec
inc
pop
stc    
test
sarb
dec
mov
jmp
xchg
jns
inc
in
cmp
and
jne
aam
xchg
add
aam
je
idivl
leave  
pop
cmp
rcrb
xchg
mov
aaa    
lea
fs cmp
clc    
and
adc
adc
enter
in
into   
mov
jno
ret
stos
push
xor
and
xor
ljmp
mov
adc
repz jns
out
movb
loop
sub
cmpsl
fildl
sti    
cmpsl
pusha  
pop
dec
add
dec
cmp
or
xchg
dec
fwait
jne
pop
jno
xor
pop
jmp
sbb
cmpsb
push
mov
push
or
push
lds
xchg
jg
fist
nop
push
jmp
adc
jge
jg
data16 fwait
adc
pusha  
sti    
jge
adc
sub
stc    
jmp
gs push
add
scas
inc
mov
fistpl
mov
xchg
idivb
insb
inc
sbb
mov
daa    
(bad)  
and
fwait
jl
int3   
sbb
push
subb
push
(bad)  
push
jns
fcompl
cltd   
inc
jno
mov
cmpsl
stos
pusha  
push
mov
roll
lret
movsb
mull
inc
(bad)  
jb
add
(bad)
xchg
into   
cmp
subl
mov
jo
loop
lret
test
movsb
fs xor
mov
pop
sti    
push
mov
jl
call
popa   
jae
lods
xor
sbb
fistpl
out
fdivrs
sub
or
rcl
(bad)
adc
bound
sbb
les
ss sbb
mov
mov
lret   
jne
insb
jnp
cmp
mov
out
imul
ss pusha 
adc
lret
add
ds in
sub
and
rcll
mov
cs xor
jl
loop
std    
loopne
jno
mov
lods
iret   
jno
inc
jecxz
scas
adc
stos
pop
pushf  
ja
and
mov
mov
or
call
and
fmull
daa    
mov
mov
insl
ja
mov
or
push
(bad)  
jne
jge
push
mov
fsubl
mov
or
sbb
call
test
sbb
(bad)  
lahf   
cs jmp
leave  
insl
(bad)  
jo
mov
test
out
xor
mov
xchg
jne
xchg
inc
loopne
mov
jno
std    
lods
jp
insl
adc
fcmovbe
and
mov
(bad)  
jne
push
mov
pop
push
ja
pop
or
aaa    
cmp
sbb
out
or
or
mov
pushf  
dec
and
mov
dec
jmp
enter
mov
enter
push
and
in
or
dec
add
mov
(bad)  
jns
add
sub
sub
lahf   
pushf  
jge
lret   
push
inc
xchg
cli    
add
pusha  
or
inc
ret    
ficomp
mov
mov
sub
sbb
fdivrs
mov
call
loopne
or
jecxz
dec
lret
ret
(bad)  
cmp
mov
dec
out
cmp
fsubrs
pop
push
int
in
iret   
sbb
or
xchg
outsl
mov
(bad)  
jno
push
int3   
ljmp
test
jns
cwtl   
divb
incl
mov
inc
leave  
idivl
(bad)  
leave  
adc
jle
jno,pt
(bad)  
mov
int
call
push
or
push
sbb
jne
fwait
mov
dec
(bad)  
lock mov
jmp
lock
clc    
jno
insl
lds
cwtl   
lods
xor
or
cmp
pop
xor
mov
lds
fsubrl
push
mov
fstpt
jb
push
lds
gs xchg
aam
jnp
out
in
mov
iret   
cmp
xchg
xlat
and
inc
popf   
xchg
icebp  
mov
lret   
mov
enter
out
inc
sbb
lret
xchg
arpl
mov
sub
xor
inc
jge
(bad)  
int3   
repnz cmp
inc
inc
enter
iret   
mov
in
xor
imul
leave  
loop
adc
jae
push
mov
inc
sbb
adc
cmp
xor
add
gs jge
mov
outsb
punpckhwd
mov
rolb
inc
pop
sbb
(bad)  
(bad)  
xor
shrl
mov
fs cli 
inc
fisubrl
ljmp
sbb
lods
mov
(bad)  
out
loope
cltd   
xor
mov
lcall
cmp
dec
mov
adc
sub
test
xchg
rolb
push
test
dec
add
orl
push
inc
sub
jne
nop
sbb
test
add
fistp
sub
push
dec
stos
int3   
mov
sahf   
push
push
sub
mov
aaa    
test
dec
insb
lahf   
sub
in
mov
sub
add
jecxz
cmc    
movsl
inc
sub
scas
outsb
mov
(bad)  
jae
sub
(bad)  {%k4}{z}
lcall
lret   
xor
mov
mov
pop
mov
mov
(bad)  
ss pop
push
jmp
insb
xor
lea
mov
xchg
addl
mov
add
fistpl
push
(bad)  
dec
jb
cwtl   
dec
mov
jns
stos
jb
push
fmuls
pop
cmpsl
jnp
cmpsb
fwait
mov
adc
aam
shr
lcall
mov
push
push
and
(bad)  
into   
adc
xor
ss addr16 sti 
add
jb
inc
push
inc
movsl
jp
fadd
popf   
or
jnp
mov
jle
lcall
enter
cmp
pop
rclb
cltd   
xor
push
cwtl   
out
add
mov
sbb
sbb
addr16 dec
dec
cmc    
lock mov
arpl
cmc    
dec
inc
sbb
rcr
xor
in
(bad)  
xor
mov
outsb
test
std    
in
popf   
divb
xchg
inc
mov
test
(bad)  
lock dec
lock mov
add
and
mov
sub
jp
xor
std    
jl
cmp
mov
push
cmp
insb
lods
repnz push
loop
sub
xchg
jae
or
sub
add
mov
rolb
ljmp
(bad)  
mov
push
aad
sub
add
add
mov
and
push
aam
jecxz
int3   
in
jmp
sahf   
cwtl   
(bad)
test
ficomp
push
inc
cmp
lahf   
or
(bad)  
movsb
in
jno
push
arpl
(bad)  
pop
and
in
int
in
loopne
jp
and
push
mov
pop
fwait
jb
iret   
sbbl
popf   
or
or
testl
cli    
aam
das    
push
and
scas
adc
lock sub
cmp
mov
lahf   
cmp
xchg
cwtl   
add
jno
jo
jne
inc
inc
(bad)  
xor
cmovne
push
sbb
mov
jmp
lret
lea
mov
push
lcall
popf   
mov
mov
ret    
rolb
pushf  
cld    
jns
xchg
loopne
xrelease xchg
xor
or
xchg
fmull
rcll
and
and
test
pop
lcall
movsb
add
sbb
push
lcall
inc
orl
jnp
sub
and
in
popf   
adc
dec
push
in
jns
jnp
cld    
mov
fist
adc
dec
add
(bad)  
ficoml
xchg
push
fistl
mov
negb
ret    
pop
testb
jl
loope
cmpsl
cmp
sbb
pop
pop
xlat
dec
cs push
sub
ljmp
insl
fsts
pop
dec
insb
mov
dec
scas
push
push
test
xadd
loop
es pop
mov
jmp
lea
insb
adc
ljmp
mov
roll
add
mov
and
xchg
dec
sbb
pop
add
and
and
icebp  
cmp
dec
imull
js
test
outsb
sbb
shr
cmp
ficompl
rol
jl
sbb
(bad)  
pop
out
daa    
mov
push
mov
jp
dec
push
adc
cld    
scas
cmpsb
popf   
cwtl   
int3   
movsb
faddl
xor
mov
adc
pop
call
fdivl
dec
pop
fs gs add
loopne
mov
fdivs
nop
mov
shlb
test
fisubrl
push
jecxz
dec
and
push
jmp
(bad)  
iret   
add
mov
mov
dec
mov
adc
xchg
jb
test
jo
xor
mov
rolb
and
scas
out
cmp
fbld
jns
(bad)  {%k4}{z}
call
pusha  
jl
sti    
cmp
jle
push
dec
push
lret   
and
data16 in
or
subl
shl
fbstp
jecxz
das    
mov
inc
sub
push
imul
sub
cmc    
xchg
xchg
(bad)  
jne
sbb
dec
inc
adc
sbb
mov
dec
jo
repz pop
lret   
inc
out
dec
add
add
mov
test
push
jo
cmp
iret   
sti    
test
dec
in
insl
sub
(bad)  
lret
and
cmp
pop
imul
(bad)  
(bad)  
or
add
bound
pop
pop
adc
sbb
mov
inc
sbb
inc
int
flds
xlat
xchg
and
bound
sbb
insb
int
(bad)  
cli    
pop
mov
lret   
cmpsl
aad
mov
mov
les
std    
jge
mov
in
lock and
cmp
cmpsl
test
push
or
gs push
adc
fldenv
dec
aaa    
xchg
or
int3   
mov
push
imul
adc
mov
jmp
add
push
cmpsl
mov
pop
dec
pop
xor
in
fadd
xchg
pop
push
leave  
stos
mov
xor
mov
add
mov
add
les
dec
jae
lcall
push
adc
aam
(bad)  
and
mov
pop
mov
and
pop
in
(bad)  
clc    
sub
push
je
xlat
lahf   
mov
inc
xchg
sub
push
inc
es or
pop
mov
jno
cs daa 
aaa    
mov
jne
xchg
or
cmpsb
lods
lret
push
pop
inc
(bad)  
cwtl   
test
push
(bad)  
or
jae
mov
decl
mov
out
cmp
pop
inc
insl
insl
sbb
enter
add
inc
loop
push
mov
and
mov
ret    
pop
stos
sub
mull
mov
mov
test
pop
jp
test
mov
loope
pop
das    
dec
dec
sub
fild
mov
data16 fbld
cmp
mov
loop
ds xchg
fucomip
mov
in
aas    
hlt    
inc
daa    
adc
xchg
repz cmpsl
fistpl
cmpsb
loope
mov
stos
stos
imul
xchg
ja
sbb
jo
add
xor
pop
dec
mov
subl
sbb
mov
and
and
hlt    
jp
sub
mov
adc
jp
test
out
cmp
adc
xchg
push
mov
mov
sbb
xor
mov
jmp
pop
repnz xchg
jbe
mov
loope
aaa    
mov
insl
outsb
faddl
inc
dec
lcall
cltd   
xor
and
adc
(bad)  
std    
into   
rcll
adc
aad
daa    
mov
pop
dec
cmp
xor
or
dec
pop
repnz lahf 
dec
int3   
mov
outsl
inc
mov
test
ret    
dec
jmp
add
dec
xchg
sbb
in
insb
dec
(bad)  
rcrb
push
xor
push
aad
cmp
xorb
lods
sti    
ja
lea
mov
pushf  
leave  
roll
dec
push
push
movsl
cmp
mov
adc
fistl
mov
iret   
xchg
sbb
jns
sub
mov
into   
ja
rolb
vcmpps
loopne
js
aas    
fisubr
aam
add
int3   
push
xor
mov
inc
pop
mov
sbb
rclb
jo
das    
dec
fcoml
out
sub
jnp
(bad)  {%k4}{z}
fistp
sbb
fldl
outsl
xchg
pusha  
jp
add
loopne
or
sahf   
xor
push
jbe
dec
sub
stos
sbb
ds pop
cmp
jae
test
pop
or
lcall
add
(bad)  
(bad)  
sbb
js
sbb
xchg
imulb
daa    
pop
adc
imul
(bad)  {%k4}{z}
call
jg
mov
and
push
lret   
add
adc
add
sub
fisttpll
jge
hlt    
fwait
cmp
add
pop
pop
outsb
loope
test
in
xor
sub
cmp
data16 mov
rcrb
cmp
inc
fadd
paddq
pop
mov
lret   
push
lods
jmp
je
(bad)  
add
imul
pop
daa    
push
inc
outsb
mov
icebp  
shlb
leave  
and
adc
or
scas
jae
sub
jo
pop
movsl
mov
mov
push
movq
mov
cltd   
dec
cmpsb
mov
repz add
inc
mov
pop
sti    
push
aaa    
ss fcmovnbe
xchg
mov
lods
lcall
pusha  
mov
pushf  
mov
mov
and
(bad)  
fldt
and
popf   
adc
or
and
sub
push
outsl
sti    
int3   
add
movsl
sahf   
(bad)  
mov
jmp
ss sti 
(bad)  
int
xchg
adc
(bad)
pop
in
jl
in
pop
push
jnp
les
stc    
xor
movsl
jp
mov
scas
out
unpcklps
fs mov
mov
test
test
sbb
push
pop
cld    
sub
test
loop
jnp
sub
test
fistp
rcrb
sbb
test
xchg
(bad)  
fidivl
pop
sahf   
outsb
pop
dec
add
clc    
arpl
mov
aad
out
xchg
add
pop
imul
leave  
adc
adc
mov
pusha  
out
repz sbb
clc    
mov
pop
loop
sub
mov
jle
add
and
adc
mov
adc
cmc    
push
push
clc    
and
sti    
js
outsb
push
or
mov
shl
fcomi
dec
popl
mov
push
sbb
push
push
adc
addr16 mov
movsb
ljmp
mov
inc
out
scas
pmulhw
cmp
cltd   
xchg
or
sbb
popl
lds
mov
xor
mov
xchg
inc
movsb
cmpsl
pop
popf   
out
cwtl   
cmp
adcl
jbe
jecxz
out
pop
and
repz cmc 
cmpsl
and
mov
cs xchg
push
jecxz
sub
sub
shlb
sbb
sub
pop
sti    
inc
pusha  
subb
adc
fisubl
repnz jecxz
mov
mov
lds
push
cld    
inc
cmpsl
pop
lret   
sub
stc    
frstor
mov
cld    
dec
and
xor
adc
xor
push
shlb
or
arpl
in
cmp
jo
sbb
and
push
pop
test
faddl
cltd   
pop
cmc    
push
lds
sbb
sub
clc    
mov
push
xor
mov
fidiv
popa   
dec
sbb
inc
and
movl
xchg
cli    
xor
mov
movsl
pop
ja
push
cmpb
(bad)  
hlt    
sbb
cmp
mov
sub
mov
faddl
std    
andl
mov
xlat
sbb
mov
aas    
iret   
dec
mov
adc
lods
movsb
imul
xor
jne
loope
pop
pop
enter
mov
mov
jmp
mov
in
jl
push
out
xchg
jne
adc
test
xor
push
popf   
popf   
mov
aam
push
sti    
insl
cmp
sub
cmp
mov
mov
lret   
into   
leave  
pop
scas
mov
(bad)  
mov
in
sbb
repz dec
jne
insb
cmp
sbb
mov
add
sub
not
sbb
jle
or
cltd   
add
cltd   
lock pop
adc
ficomp
add
addr16 push
cwtl   
dec
or
sbb
cli    
rcl
mov
fnstenv
pop
adc
aaa    
in
das    
imul
push
sbb
push
mov
daa    
rcrb
jb
idiv
cmp
ror
mov
enter
pop
jno
cmpl
adc
mov
push
jnp
mov
adc
imul
cld    
mov
sbb
pop
repz cmp
cwtl   
lret   
add
fwait
xor
sbb
das    
js
(bad)  
(bad)
icebp  
adc
dec
lods
pusha  
fwait
mov
cltd   
pop
cmp
or
pop
mov
cli    
std    
mov
sub
(bad)  
into   
jle
pop
scas
push
xchg
push
jg
in
fldt
push
xchg
loopne
addr16 cmp
out
and
sbb
sahf   
jno
int
mov
movsb
sub
mov
movsl
je
jmp
lods
fdivrs
outsl
dec
jp
jp
ret    
sub
int
push
mov
sbb
cmp
sub
outsb
outsl
mov
jmp
lea
xchg
in
jmp
jo
int3   
aas    
call
dec
xchg
push
add
aaa    
test
or
add
cmpsb
inc
loope
push
insb
sti    
clc    
test
fdivrs
call
inc
adc
xchg
sti    
mov
rcrb
popa   
adc
scas
(bad)  
out
or
cmc    
out
iret   
pop
inc
(bad)
rorl
adc
inc
(bad)  
in
test
cld    
cmp
lcall
add
push
fs inc
sti    
inc
enter
lods
xor
call
outsb
hlt    
xchg
xchg
shll
jbe
imull
or
or
nop
mov
add
jo
ds inc
imul
movsb
push
dec
or
test
out
push
out
(bad)  
push
push
inc
lret   
out
mov
push
inc
sub
add
push
push
dec
xor
lret   
cltd   
xor
cmpsb
test
mov
leave  
adc
movups
in
mov
xchg
inc
mov
xor
icebp  
movsl
cmp
out
and
imul
lcall
mov
adc
pop
loope
popf   
sub
arpl
loope
sbbl
xchg
scas
frndint 
cwtl   
imul
fsubrs
shll
xchg
(bad)
dec
ret    
rcrl
pop
(bad)  
out
adc
lods
je
es jecxz
adc
outsl
mov
push
loope
repz pop
and
clc    
fnstsw
mov
push
js
mov
pop
(bad)  
jno
jo
dec
mov
jo
fdivrs
and
mov
les
adc
or
lods
cmc    
pushf  
out
test
push
jae
scas
add
(bad)  
xor
inc
sahf   
inc
mov
dec
mov
jne
push
stos
xchg
ffreep
push
pushf  
pop
aad
cwtl   
sub
push
pop
mov
rcl
ja
lret   
push
movsb
push
mov
mov
popa   
adc
jmp
es gs ljmp
adc
(bad)  
mov
or
cmp
cltd   
and
jmp
mov
pop
push
or
into   
xchg
subl
repnz out
xchg
xlat
cmp
(bad)  
mov
sahf   
or
rclb
pop
sarl
sub
xchg
add
or
xchg
push
movsl
or
int
push
mov
inc
adc
lods
pop
mov
aam
pop
and
cmp
es ret 
pop
mov
add
repz aaa 
xchg
push
xor
xchg
(bad)  
jmp
xchg
ss mov
orl
adc
(bad)  
sub
inc
jp
dec
dec
push
mov
xchg
mov
xor
adc
sahf   
push
adc
dec
out
cmc    
mov
jg
jmp
mov
in
mov
sub
pushf  
cs push
jo
in
(bad)  
jl
jns
std    
std    
fistp
jne
and
notb
push
sub
test
sub
mov
mov
fdiv
aas    
in
decb
mov
cmp
int3   
aas    
js
in
outsb
es push
cwtl   
icebp  
push
pop
sub
loope
push
roll
ret
and
sbb
test
pop
test
jl
(bad)  
loopne
loop
gs pop
jno
push
inc
mov
mov
loop
(bad)  
stc    
fcoml
aam
std    
(bad)  
mov
add
and
adc
xchg
xor
and
clts   
push
insb
stos
icebp  
push
push
mov
adc
mov
in
mov
sbbl
out
out
cmpsb
mov
rcr
cmpl
nop
(bad)  
push
movsl
xchg
adc
pushf  
lods
inc
mov
pop
pop
je
cmp
dec
(bad)  
push
adc
xlat
arpl
cwtl   
xchg
pop
and
mov
lret   
lret   
popf   
xchg
cltd   
add
es jnp
outsl
aaa    
scas
inc
mov
cmp
mov
aad
test
dec
pop
or
ret    
jne
mov
lock
or
fsubl
gs cmc 
stos
pop
mov
scas
call
test
scas
cmovge
fildll
cmp
iret   
cld    
mov
insb
into   
std    
and
or
push
inc
or
jb
repnz lock mov
adc
pop
lcall
scas
into   
mov
mov
popa   
(bad)  
xchg
out
push
inc
or
int3   
mov
sahf   
jecxz
pushf  
mov
nop
addl
arpl
ljmp
push
outsb
mov
xor
addr16 in
dec
push
(bad)  
dec
cmp
sbb
mov
adc
and
fcmovb
popf   
inc
cmp
fild
cld    
or
insl
fdivl
in
mov
cltd   
add
mov
rcll
xor
ficoml
inc
xchg
aad
(bad)  
or
cmc    
dec
mov
(bad)  
and
lcall
mov
push
fsubl
and
or
(bad)  
(bad)  
js
or
mov
mov
jno
aas    
or
loop
add
mov
rcrl
push
sbb
jnp
xchg
scas
pop
mov
pusha  
mov
popa   
xor
sbb
cmc    
mov
nop
mov
xor
jno
scas
call
fistpl
sub
sbb
test
std    
lcall
aaa    
mov
arpl
rcrb
std    
(bad)  
push
jmp
enter
or
adcl
andl
(bad)  
sarb
mov
test
add
aam
add
jns
ret
sub
jnp
popf   
fcomp
push
scas
mov
sub
aaa    
loopne
mov
pushw
mov
orb
insl
ds push
jo
dec
(bad)  
sbb
adc
fstpl
xchg
rolb
fdivrl
mov
jo
cmpl
ret
mov
add
std    
jnp
mov
std    
pop
mov
je
vmaskmovdqu
sarb
dec
stc    
in
int3   
jbe
shll
adcl
out
ss dec
aam
or
pop
out
mov
cmp
dec
fsubl
out
jle
adc
cmp
insl
push
mov
mov
and
add
adc
pop
aaa    
iret   
jg
idivb
sbb
lahf   
aas    
inc
aam
or
and
orl
loop
sbb
mov
sahf   
std    
int
scas
xor
add
adc
pop
icebp  
pop
and
sti    
jle
stc    
je
das    
pop
jo
mov
(bad)
sbb
cmp
inc
inc
pop
push
loopne
mov
imul
or
ss je
loop
stc    
jp
push
jns
sti    
inc
out
sub
test
sbb
mov
adc
ja
mov
(bad)  
mov
ret
aad
sbb
imul
mov
cmpsb
out
jb
mov
mov
adc
daa    
bsf
les
mov
pop
lret   
sahf   
mov
call
jmp
mov
hlt    
and
aaa    
andb
out
(bad)  
imull
push
xor
add
inc
lods
js
loope
add
push
sti    
fisubrl
subl
(bad)  
push
rcrb
out
aam
cli    
icebp  
and
push
inc
xchg
xchg
(bad)  
xchg
xchg
jl
or
mov
pop
jmp
xor
ds leave 
dec
out
sahf   
fmul
xchg
gs cmp
adc
lcall
xor
and
outsl
(bad)  
jb
mov
sbb
xchg
inc
or
adc
add
mov
sub
outsl
push
lret   
hlt    
pop
adc
lods
sub
xchg
inc
aad
inc
cld    
cmp
inc
adc
test
pop
cld    
xchg
shll
push
les
jle
dec
inc
inc
repz das 
pop
pop
lock lock xor
ror
dec
cmp
mov
and
and
es inc
xchg
pop
aad
or
cwtl   
cmc    
int
icebp  
xchg
and
fidiv
imul
std    
jno
jae
fdivrs
je
pop
test
sub
cmpsl
sbb
push
cmpsl
std    
adc
sarl
dec
jp
movsb
lahf   
sub
sub
xor
and
pushf  
add
xchg
sub
call
xchg
fmul
mov
sub
cmc    
or
stos
mov
aaa    
rcr
push
pop
push
bound
outsl
popf   
xor
fcmovne
call
mov
in
xor
insl
mov
arpl
(bad)
frstor
mov
cmpsl
adc
mov
fildll
arpl
fwait
test
fwait
add
push
addl
(bad)  
xchg
jecxz
cmp
or
mov
shl
mov
pop
mov
cmp
xor
lods
aaa    
push
push
and
sub
inc
push
iret   
xor
call
into   
jge
inc
outsl
mov
cmc    
lahf   
push
pop
add
xchg
jl
jns
cmp
(bad)  
or
push
mov
jmp
xchg
int3   
lock mov
sub
(bad)  {%k4}{z}
hlt    
xchg
std    
dec
add
cmp
testl
lcall
fcmovne
cli    
daa    
loopne
subb
cmp
mov
cmpsb
(bad)  
jae
out
sub
mov
push
mov
mov
test
lahf   
jne
mov
shll
pop
mov
popa   
stos
adc
gs popf 
xchg
jo
jmp
mov
ds push
les
and
daa    
lahf   
(bad)  
enter
pop
in
frstor
xchg
pusha  
sub
fnstsw
dec
mov
aam
adc
shll
dec
xchg
mov
inc
int
or
js
std    
pop
ja
repz out
adc
mov
loopne
sbb
repz imul
imul
iret   
and
(bad)  
xor
add
je
shrl
cmp
pushf  
inc
pop
sub
inc
dec
lahf   
add
jl
lahf   
daa    
mov
pushf  
clc    
lret   
dec
test
mov
sarl
mov
das    
sub
loop
stos
sub
cmp
xchg
sub
adc
pushl
call
push
inc
subb
cmc    
push
mov
sbb
or
rcll
dec
aaa    
cmp
lock in
pop
cmp
inc
mov
jno
xor
fdivrl
sub
andl
mov
jmp
in
jg
push
aam
jl
cld    
in
cmp
gs dec
fwait
push
clc    
rcr
lret   
xor
enter
push
and
call
cwtl   
loop
(bad)  
popf   
mov
rcrb
es into 
and
fdivl
fmuls
mov
mov
cmp
lret   
add
testl
and
ret    
dec
xor
xchg
gs pop
sahf   
and
push
cwtl   
mov
jae
stos
ds hlt 
dec
xor
lret
lds
fadd
lds
in
clc    
cltd   
lcall
stos
adc
jmp
mov
out
loopne
push
fidivl
mov
dec
repz inc
mov
or
jns
pop
add
insb
pop
mov
fnstsw
out
xchg
pop
pushf  
aas    
movb
cltd   
hlt    
(bad)  
daa    
inc
sbb
int
mov
adc
jne
lods
jb
jns
mov
pop
inc
adc
in
xor
enter
mov
loop
(bad)  
mov
fidivrl
int3   
mov
xor
int
mov
pusha  
xlat
mov
pop
adc
mov
sub
push
ds enter
aas    
jb
in
adc
into   
std    
sbb
xchg
jge
lock rcrb
test
and
int3   
lret   
jns
in
popa   
loopne
jmp
ds inc
js
lahf   
or
cmp
movb
in
mov
arpl
stos
adc
xchg
inc
rcrl
xorl
sbb
jl
std    
mov
jl
movsb
fist
fwait
mov
sahf   
iret   
fs push
repnz insb
adc
aam
mov
mov
repz iret 
enter
aad
pop
ljmp
enter
pop
imul
and
xor
iret   
(bad)  
and
insl
and
xchg
aaa    
fldt
ficom
push
es in
jp
pop
xchg
push
push
imul
inc
shlb
push
sbb
jo
inc
int3   
rclb
pop
jecxz
jg
loopne
mov
add
shrl
mov
xor
(bad)  
in
data16 sub
fist
call
push
add
out
jae
loop
repnz pop
mov
lahf   
inc
jnp
dec
pop
aad
mov
xor
jle
add
jae
adc
movsl
add
ja
xor
enter
mov
pop
stos
add
xor
xor
jnp,pn
call
pop
add
lods
divl
push
nop
rorl
xor
push
shr
sub
jmp
jno
fucom
test
inc
xor
je
addr16 mov
push
dec
adc
insl
sub
push
jnp
cltd   
xchg
jg
dec
lea
cmp
push
jbe
or
dec
(bad)  
push
mov
cwtl   
daa    
push
pop
out
lea
add
mov
xchg
and
add
cmc    
and
out
cmp
pop
jecxz
insl
mov
mov
fnstsw
sbb
and
outsl
scas
mov
jmp
lcall
(bad)  
out
sarl
xor
fwait
adc
sbb
pop
(bad)  
les
ss
jae
jl
mov
push
mov
mov
mov
jmp
icebp  
mov
clc    
(bad)  
cmc    
outsb
pop
leave  
push
push
xor
xchg
lock out
fistl
loop
fisubr
dec
push
cmc    
aaa    
aad
mov
vpshld
sub
push
push
lcall
js
mov
sub
les
sbb
out
dec
cltd   
cld    
and
mov
imull
ljmp
rolb
mov
pop
pop
je
jg
(bad)  
cmc    
bound
add
mov
mov
fidiv
push
pop
xchg
int3   
mov
lea
push
imul
sti    
xchg
adc
inc
lret
adc
inc
fistl
adc
hlt    
jae
jge
arpl
xchg
jns
bound
int
sub
(bad)  
mov
aad
cli    
inc
xchg
sti    
jg
push
outsl
daa    
cmpsl
xchg
pop
fadds
inc
add
sbb
rcrb
or
popf   
dec
jmp
dec
notb
daa    
negb
loope
dec
push
mov
out
push
pop
int3   
mov
leave  
sub
ret    
insb
push
mov
xchg
lahf   
repnz mov
sbb
aas    
jg
mov
lods
mov
cmp
xchg
sub
in
cld    
lods
clc    
jno
dec
mov
sahf   
jl
les
call
int3   
insb
fwait
push
and
inc
sub
push
test
xor
or
and
fmuls
movsl
mov
mov
cmp
and
dec
push
xchg
out
and
pop
gs dec
lahf   
cmp
jo
stc    
jo
(bad)  
mov
cmp
test
int3   
stc    
adc
xchg
out
sub
cli    
xor
faddl
push
repz add
cmp
fwait
lret   
adc
mov
push
scas
sarb
loopne
mov
or
inc
mov
xor
stos
int3   
fistpl
mov
xchg
fldenv
addb
lods
ficom
fistl
add
(bad)  
imul
lods
setbe
das    
out
fwait
sbb
inc
cltd   
mov
jmp
call
sub
or
scas
repnz rorl
std    
cli    
or
sub
and
enter
iret   
jge
and
loopne
or
outsl
jbe
lods
imul
(bad)  
scas
cmpsb
or
cmpsl
mov
mov
dec
cmp
cli    
clc    
fiadd
adc
in
push
add
mov
mov
mov
xor
or
jmp
adc
movsl
pop
xchg
add
pop
stos
dec
pop
xor
insl
push
fmul
add
mov
int3   
cmp
into   
inc
scas
mov
(bad)  
aam
xchg
addr16 pop
push
cmp
clc    
or
xlat
sbb
inc
cmpsl
ja
stc    
xchg
mov
movl
lcall
jle
aas    
(bad)  
mov
inc
mov
and
(bad)  
sub
sbb
in
in
les
push
ljmp
inc
jle
mov
imul
sti    
jns
ljmp
xor
pusha  
dec
aad
mov
pop
sbb
cmpsl
mov
out
insb
lahf   
adc
cmp
(bad)  
xchg
pop
int3   
pop
adc
fbstp
cmp
dec
ficompl
jne
and
cmp
test
mov
enter
cmpsl
lahf   
dec
push
repnz or
mov
and
and
roll
xchg
cmpsl
lea
jp
inc
mov
mov
(bad)  
mov
jecxz
mov
popa   
into   
push
sub
addr16 in
adcl
int
stc    
mov
stos
push
cmc    
cltd   
fucomi
(bad)  
test
inc
and
and
mov
or
lret   
(bad)  
mov
js
mov
cmc    
push
mov
iret   
aaa    
add
push
push
pop
daa    
cmp
push
xchg
scas
scas
sbb
imul
fcomps
les
push
movsl
es add
mov
pushf  
lods
in
insb
bound
inc
or
and
stos
pop
into   
cld    
fcom
cld    
es fcmovnu
xchg
int
xchg
jle
aad
rcrl
xor
pop
dec
push
(bad)  
or
movsl
stc    
cmp
mov
jg
or
test
lds
test
leave  
dec
sbb
rol
ja
cmc    
inc
(bad)  
or
xchg
adc
je
pop
jge
and
inc
arpl
and
mov
add
clc    
pop
int3   
cmc    
sub
in
inc
fsts
lret
cld    
add
cmpl
test
icebp  
mov
sub
dec
icebp  
(bad)  
mov
in
test
push
sbb
test
xor
shrb
push
xor
js
fiaddl
pop
mov
cmp
xchg
mov
dec
push
dec
mov
jmp
jbe
(bad)  
jbe
inc
sbb
frstor
xchg
imul
mov
repnz mov
mov
cmp
mov
push
(bad)  
jle
fdivrl
stos
shl
(bad)  
pop
jecxz
insl
sbb
jle
popf   
sub
jns
pop
pusha  
mov
repz and
out
fdivr
(bad)  
mov
inc
mov
imul
fistl
repz fdivrl
xor
inc
lods
or
outsl
test
add
push
xchg
xchg
push
jle
shrl
daa    
loopne
pop
and
out
mov
fcomip
jl
ljmp
jno
fldenv
mov
mov
add
sbb
daa    
imul
inc
ljmp
into   
jno
mov
das    
jns
ret    
fsts
aad
xchg
and
dec
out
(bad)  
jmp
sub
cld    
into   
xor
mov
das    
aad
mov
ss pop
and
dec
pop
mov
aad
inc
lcall
jmp
or
daa    
jl
ss mov
mov
or
movsb
clc    
xchg
fimull
cmp
popa   
stc    
sub
add
test
aad
iret   
popf   
cmpsb
dec
in
dec
fnstenv
jns
fildll
je
mov
iret   
(bad)  {%k4}{z}
xlat
xor
mov
mov
sti    
jmp
inc
pushf  
cmp
lds
loop
push
outsl
(bad)  
mov
stos
insl
mov
xchg
movsb
or
mov
jg
inc
add
mov
in
mov
imul
xchg
dec
xchg
mov
sbb
cli    
in
cld    
xor
(bad)  
sbb
movsl
or
mov
mov
imul
iret   
cmp
inc
leave  
dec
xor
inc
xchg
pop
jg
rclb
insl
cwtl   
pop
fistpll
and
sub
add
in
adc
lcall
adc
add
es xchg
stos
fdivl
xor
push
fisttpl
adc
mov
imulb
inc
rcrl
sub
nop
and
adc
jbe
adc
mov
add
push
jnp
add
(bad)  
(bad)  
pop
flds
arpl
dec
enter
scas
pop
or
shr
test
inc
mov
incl
lret   
rclb
mov
fstps
addb
sub
insl
lods
mov
sahf   
in
fcomps
(bad)  
jno
jo
xabort
push
test
mov
ret
inc
adc
outsl
(bad)  
jae
rolb
gs jns
rcr
or
mov
rcrl
and
lods
pop
adc
xchg
dec
rol
call
and
push
dec
repnz push
out
dec
stc    
jp
mov
add
inc
lret   
clc    
xchg
ss mov
insb
pop
into   
or
ficom
cmp
sarl
pop
or
push
cld    
js
(bad)  
lahf   
add
daa    
xor
mov
arpl
aad
or
lea
insb
ljmp
roll
and
(bad)
das    
popf   
orl
hlt    
das    
add
add
mov
out
pop
mov
pop
cmp
popa   
or
daa    
mov
adc
add
adc
push
pop
sbb
or
nop
cmp
xor
mov
sub
dec
adc
mov
and
push
aam
push
jo
push
pop
imul
dec
insb
mov
shl
bnd je
pop
sub
adc
jae
dec
jmp
das    
in
mov
and
mov
popf   
insl
in
ljmp
fistp
adc
xor
inc
add
pop
mov
dec
pop
xor
jmp
dec
inc
ficomp
sub
repnz in
or
out
fs push
mov
lret
push
add
push
xchg
aas    
js
in
adc
mov
les
outsl
or
cwtl   
add
cmp
xor
sub
inc
loopne
adc
int
fmulp
jle
mov
fsubs
lock out
push
insb
jp
shr
xchg
cli    
insl
aam
mov
hlt    
and
pop
adc
lcall
adc
leave  
shl
fstl
adc
les
cmpsl
pusha  
mov
inc
push
jge
daa    
(bad)  
pop
scas
daa    
rcrl
pop
mov
inc
mov
(bad)  
iret   
mov
movsb
aaa    
fmull
roll
xor
ljmp
addl
push
fdivs
jmp
lds
jp
dec
dec
mov
arpl
sbb
adc
mov
arpl
sub
and
push
inc
cwtl   
cmp
divl
(bad)  
insb
lock mov
iret   
lcall
mov
ss fcmovne
push
jp
sbb
orl
test
stc    
jbe
fsubrp
cmp
ljmp
cmp
clc    
imul
(bad)  
scas
jnp
or
inc
out
lret   
scas
mov
scas
xchg
es jle
mov
icebp  
test
or
(bad)  
int
cmp
popf   
test
dec
mov
xor
cmpsl
aam
cli    
call
clc    
sbb
int3   
(bad)  
xor
int
sarl
dec
jno
in
sbb
js
je
test
adc
les
scas
dec
bound
push
stos
in
iret   
or
arpl
insl
out
mov
fidivrl
jae
pop
mov
mov
test
popa   
and
push
adc
jbe
outsb
mov
shrl
popa   
jbe
or
arpl
data16 aas 
sub
call
pushf  
pop
data16 aad
lret   
arpl
iret   
cs or
mov
mov
rcll
or
sub
lcall
pop
xchg
mov
inc
xchg
loope,pn
mov
push
mov
mov
push
and
dec
mov
loop
pop
imul
insl
mov
and
outsb
xor
mov
cmp
xor
push
pop
push
pop
and
sbb
clc    
(bad)  
jne
cmp
js
int
cmp
das    
push
and
gs push
(bad)  
aaa    
ds inc
add
js
mov
popa   
das    
hlt    
out
sbb
xlat
and
ret
or
jecxz
(bad)  
outsb
pop
inc
js
pop
add
in
pop
mov
aaa    
cld    
add
pusha  
lods
add
popa   
insb
push
sub
cmp
push
push
roll
sarl
sbb
rcll
fmul
adc
inc
and
push
pop
xor
rolb
mov
das    
mov
int3   
(bad)  
pop
xchg
das    
int
(bad)  
cmp
test
xchg
add
jp
mov
and
mov
(bad)  
lods
and
ret    
sub
outsb
ss xor
es pop
dec
dec
inc
push
hlt    
andl
je
roll
fbld
jg
push
dec
pushf  
and
xchg
testb
lahf   
jmp
aaa    
addl
jge
hlt    
lcall
pop
les
pop
jp
xor
ds xchg
fdivs
in
push
cmc    
cld    
jle
(bad)  
jns
fmull
stos
stc    
mov
cmpsl
add
stos
pop
adc
jge
ds xchg
push
mov
xchg
sbbl
jge
mov
pop
test
xlat
sub
xor
hlt    
jge
push
(bad)  
shlb
cmp
mov
(bad)  
push
cltd   
push
sub
add
or
call
xchg
ret
dec
addl
push
pop
lcall
insl
dec
popa   
or
cmp
mov
cli    
into   
push
adc
hlt    
mov
rcr
jns
(bad)  
(bad)  
sti    
hlt    
loope
pop
pop
lcall
mov
sub
mov
mov
es pop
mov
or
sahf   
add
lds
sub
cmp
mov
or
mov
out
sti    
add
xchg
idivb
into   
mov
cmpeqps
out
jb
cmpsb
es inc
adc
stc    
aaa    
xchg
jbe
and
ret
mov
fwait
jns
sub
stc    
push
scas
cmpsl
pop
daa    
mov
nop
push
pop
jmp
mov
jle
notb
xchg
cli    
cmp
frstor
mov
add
pop
mov
cltd   
push
(bad)  
enter
xor
dec
call
insb
push
sub
xor
aaa    
bound
lea
push
dec
mulb
fldenv
testl
out
lahf   
es aad
test
cmp
(bad)  
sti    
mov
push
xor
xlat
enter
add
mov
mov
icebp  
fistl
xchg
inc
push
inc
pop
push
iret   
pop
nop
insb
push
and
ret    
insb
sbb
or
dec
lock xor
cmpl
push
mov
sub
sbb
ja
add
imull
jge
xor
dec
sahf   
cmp
cltd   
inc
ret    
out
dec
inc
fxtract 
ret    
xchg
sub
test
(bad)  
clc    
popa   
scas
mov
pushf  
cmc    
iret   
lea
adc
xchg
clc    
sub
push
cmp
mov
outsl
jecxz
ljmp
or
cmpsl
out
mov
cli    
repnz lret 
(bad)
push
mov
sbb
rcrb
xor
mov
add
cmpsb
mov
xlat
push
in
rclb
in
inc
stos
mov
(bad)
scas
mov
or
pop
mov
pop
pop
and
cmpsb
push
negb
and
push
cli    
sub
(bad)  
ret    
outsb
push
clc    
inc
insl
push
mov
pop
and
sbb
ss enter
mov
cmp
sbb
fmull
add
(bad)  
hlt    
or
dec
repnz fstpl
icebp  
mov
(bad)  
xchg
stos
scas
dec
xchg
in
and
(bad)  
out
inc
orb
or
push
cmp
loop
rolb
pop
lods
dec
sbb
lds
add
xor
cmp
xlat
jp
(bad)  
xor
enter
and
lods
adc
mov
popf   
dec
xor
jmp
jmp
push
mov
inc
pop
inc
(bad)  
xor
cmpsl
ja
push
aaa    
xlat
jne
push
inc
pop
adc
inc
add
or
ficomp
pop
mov
pop
pop
daa    
xchg
mov
or
adc
mov
sahf   
dec
dec
mov
(bad)  
pop
(bad)  
push
(bad)
sbb
fadds
xchg
aaa    
pop
xlat
inc
push
add
dec
mov
or
inc
sbb
fimul
insl
icebp  
cmpsb
xchg
cmpsl
outsb
(bad)  
movl
pop
leave  
sub
lds
add
sahf   
fidivl
packuswb
inc
sbb
pop
lret
pop
push
mov
jne
outsl
dec
out
aam
add
(bad)  
int3   
rclb
push
repnz push
push
cmpsb
aad
sbb
add
cmc    
mov
ja
pop
addr16
mov
jo
addr16 dec
fdivrl
in
push
shlb
push
xchg
adc
test
pop
sar
push
dec
jmp
loope
add
mov
pop
mov
movsl
sbb
loopne
cmp
outsl
add
(bad)  
jae
out
popf   
sub
mov
add
imul
ja
psubsw
sub
mov
pop
roll
and
(bad)  
xchg
movsl
or
sbb
xor
loopne
jnp
pop
cmp
and
mov
fldz   
clc    
push
jmp
aas    
add
push
cmp
mov
dec
push
mov
aam
push
jne
test
hlt    
cmp
scas
dec
aaa    
cmp
loop
or
lock das 
xor
jae
dec
jns,pn
push
adc
xor
pop
mov
pop
leave  
sbb
pusha  
(bad)  
lret   
int3   
adc
pop
in
cmp
dec
pusha  
adc
mov
jmp
add
leave  
mov
decb
cmp
xchg
xor
xchg
hlt    
sti    
dec
sarl
xchg
movsl
mov
outsb
lcallw
imul
call
jmp
sub
add
and
mov
xor
lock popa 
push
and
lahf   
and
aaa    
mov
std    
test
cmp
cmpsl
cmp
fincstp 
and
and
xchg
mov
js
sub
mov
mov
aam
out
dec
sub
fs ds dec
mov
sahf   
add
sbb
call
shrl
insb
outsl
and
scas
mov
test
movsl
sub
fcomi
mov
bound
and
test
push
xchg
sbb
mov
inc
jle
mov
(bad)  
icebp  
pop
ss cld 
add
sbb
mov
and
cmp
mov
pop
xor
ljmp
sarl
or
lods
cmp
mov
xchg
mov
js
cmp
mov
pop
mov
cmp
int
jne
roll
insb
(bad)  
or
insb
ret    
cld    
pop
cmc    
pop
out
idivb
ja
jl
add
and
jbe
cmpsb
cmp
or
jmp
or
popa   
in
aas    
sub
jae
mov
ret
fmull
lock pop
dec
pop
test
sbb
movsl
inc
mov
leave  
pop
ja
mov
rcl
adc
xchg
xlat
mov
mov
jae
or
mov
dec
mov
jmp
mov
push
add
nop
sbb
cli    
xor
push
sub
sti    
leave  
mov
iret   
scas
in
test
jo
hlt    
add
jl
(bad)  
xor
inc
pop
cmc    
popa   
in
clc    
jl
stos
xor
pop
lods
(bad)  
loop
dec
adc
or
bound
int3   
jae
inc
xor
stc    
jp
out
aad
push
cmpsb
push
pop
sbb
fstl
push
dec
or
mov
lcall
cld    
mov
mov
inc
and
sub
in
cmp
aaa    
repz in
push
jmp
inc
inc
dec
inc
fndisi(8087 only) 
jb
push
dec
pusha  
add
cmp
aas    
sub
rclb
fdivrs
nop
inc
adc
inc
push
repnz adc
inc
xchg
hlt    
icebp  
rcl
mov
fnstcw
imul
add
lret
adc
into   
aaa    
jmp
fsubrl
dec
dec
push
push
cmpb
mov
push
daa    
xchg
aam
inc
mov
push
jge
mov
dec
adc
mov
mov
xlat
xchg
gs dec
lea
lea
push
jne
aaa    
fnsave
ds push
mov
sub
add
dec
inc
scas
inc
pusha  
(bad)  
or
add
add
(bad)  
(bad)  
(bad)  
incl
add
add
add
add
add
add
jns
je
insl
cs inc
jb
ja
outsb
addr16 sub
push
gs jb
imul
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
xor
data16 aaa 
xor
fs xor
add
adc
gs insl
cs inc
jb
ja
outsb
addr16 cs inc
imul
add
popa   
je
pop
add
add
add
add
add
lsl
add
jno
add
add
or
or
add
or
add
add
add
dec
or
add
add
(bad)  
and
add
add
inc
dec
inc
add
mov
or
popa   
add
jo
pop
jae
add
ret    
add
push
ret    
add
outsl
test
add
cmp
push
push
test
ror
add
push
mov
flds
sub
mov
mov
mov
ret    
cmp
rolb
and
push
ja
arpl
imulb
movsl
fwait
data16 jns
cmp
dec
imul
pop
xchg
add
mov
test
comiss
or
mov
xchg
dec
int
(bad)  
popa   
test
cli    
xchg
jns
les
je
mov
xchg
push
jge
pop
clc    
nop
mov
(bad)  
nop
dec
sbb
jb
imul
mov
sbb
inc
pop
into   
xchg
cs fs or
test
xchg
pop
test
add
push
mov
mov
sub
icebp  
je
inc
add
push
push
sbb
xor
xchg
enter
jg
add
jae
push
jmp
push
xchg
mov
push
and
pop
xchg
inc
shrl
sbb
lret
dec
(bad)  
pop
add
int3   
into   
(bad)  
loope
repz aad
pop
rcr
cmpsb
pop
mov
lea
sub
fnstenv
into   
adc
or
mov
push
into   
out
cmp
roll
mov
fistpl
jno
push
pusha  
insl
push
jnp
jno
mov
dec
inc
or
sbb
dec
adc
andl
idivl
xchg
add
lahf   
sub
mov
xchg
sbb
push
dec
stos
ret    
xchg
jg
sahf   
es int3 
dec
and
cmp
into   
jns
lock xor
lret
lock shlb
ljmp
ret
or
mov
fsubp
or
movsb
push
ret
add
sub
and
add
xchg
lahf   
mov
jno
mov
add
int3   
ret
andl
sub
repnz shlb
xlat
in
sub
mov
pop
movsb
sbb
add
lds
adc
cwtl   
sarb
mov
mov
or
and
scas
pop
sub
push
mov
push
dec
pop
jns
jg
loope
and
insl
jg
fcmove
les
inc
push
mov
xor
ss inc
stos
pop
or
cmp
(bad)
popa   
jge
(bad)  
fisttp
fcompl
stc    
and
roll
testb
jmp
fs in
inc
ret
and
rclb
xor
stos
icebp  
sbb
leave  
(bad)  
dec
mov
inc
add
(bad)  
adc
mov
add
scas
mov
test
mov
dec
pop
adc
lcall
fadd
xchg
int3   
jb
(bad)  
ss
jmp
inc
orb
xchg
dec
push
push
dec
push
lods
inc
clc    
xor
inc
adc
and
popf   
loop
xor
sbb
and
jno
add
adc
sbb
in
fimul
xchg
(bad)  
adc
popa   
out
movsb
in
xchg
leave  
loopne
popl
mov
inc
jo
imul
stos
pop
sbb
loopne
shrb
je
pusha  
negl
loopne
rcl
pop
inc
cmp
inc
push
(bad)  
(bad)  
pop
dec
and
(bad)  
mov
push
xor
cmp
mov
ljmp
lret   
or
das    
pop
jl
xorl
mov
mov
add
inc
int3   
mov
clc    
pop
insl
(bad)  
pop
pop
mov
push
ds pop
pop
clc    
add
xchg
xor
popf   
inc
adc
es push
mov
sub
dec
mov
insl
inc
in
fist
mov
adc
push
jne
aad
ds enter
mov
arpl
mov
dec
push
aas    
inc
mov
or
jnp
ss ljmp
mov
jbe
test
shrl
add
pop
cmpsb
sbb
in
mov
mov
ljmp
sub
(bad)  
mov
(bad)  
add
pop
(bad)  
pop
mov
fbld
cmpsb
adc
into   
and
out
out
mov
(bad)  
fsubrl
adc
mov
mov
test
es jmp
lret   
and
js
sub
fistp
data16 cli 
scas
mov
jg
add
rcrl
idivb
aam
xchg
cmpsb
sbb
pop
jecxz
pop
xor
jb
jmp
sarl
movsb
repnz fdivr
in
(bad)  
cmpsl
stos
mov
ds in
dec
(bad)  
div
fnstenv
jne
hlt    
lods
incl
xchg
(bad)  
aaa    
dec
pop
out
popf   
lods
or
dec
add
fs cld 
sbbb
out
push
xor
clc    
aam
std    
or
xor
push
popf   
mov
xchg
fisttpl
and
add
lcall
or
rorb
jne
or
int3   
or
jmp
jb
dec
nop
lret   
clc    
inc
and
pop
and
sub
mulb
pop
inc
sbb
cld    
in
aas    
pop
ffreep
std    
lds
ss scas
rol
test
sbb
sbbl
pushf  
jl
jle
jg
xchg
lods
out
cmp
ss push
adc
and
popa   
popl
fstpl
mov
cwtl   
pop
xchg
cs
mov
in
arpl
scas
fldenv
(bad)  
aam
adc
sub
mov
sub
aam
push
popf   
out
mov
xor
pop
mov
das    
cmp
js
shrl
inc
sarl
addl
outsl
ds push
jp
inc
xor
and
push
jmp
sbb
fldt
mov
add
inc
cltd   
xor
pop
xchg
sub
mov
lahf   
mov
jo
cmp
inc
dec
test
mov
sbb
mov
push
fistp
(bad)  
js
cmp
pop
add
or
je
add
dec
out
jle
in
adc
clc    
out
jle
mov
dec
cltd   
lret
into   
(bad)  
repnz insl
jl
movsb
fisttpl
(bad)  
jno
inc
cmc    
cli    
mov
sbb
xchg
jp
scas
cmp
or
add
add
repnz incl
rcr
ljmp
insl
xor
jns
test
ds push
xor
inc
mov
movsl
cmp
movsl
movsb
mov
popa   
es stos
xchg
mov
(bad)  
icebp  
push
and
(bad)  
jecxz
push
in
dec
lea
divl
jle
icebp  
cmp
sub
leave  
push
lea
lods
stos
sahf   
sarb
and
pop
clc    
sbb
xchg
cmove
sub
shrb
(bad)  
imul
mov
lret
sbb
add
orl
test
push
fimull
mov
or
jecxz
inc
scas
aad
mov
jno
enter
jnp
bound
arpl
inc
mov
call
pushf  
repz add
in
outsb
mov
es out
popa   
dec
into   
(bad)  {%k4}{z}
aad
mov
loope
push
push
cld    
sbbb
fistl
jae
jbe
and
sahf   
lcall
cwtl   
pushf  
lods
mov
pop
mov
jge
shrl
aam
mov
xchg
or
mov
sbb
adc
mov
push
std    
xchg
ret
cld    
adcb
xlat
std    
jmp
add
int
and
es je
pop
and
je
notb
fstl
call
pusha  
xchg
fisub
cmpsl
fidiv
jmp
sub
in
pop
inc
int
loope
outsb
mov
pushf  
ret
push
dec
xchg
dec
pop
cmp
leave  
or
jl
neg
mov
xchg
js
xorb
imull
iret   
mov
(bad)  
aam
rcrb
idivb
xor
push
scas
fsubs
add
mov
pop
mov
pop
or
les
icebp  
stos
je
and
cmpsb
fcomps
xchg
mov
mov
aaa    
test
pop
pop
fldt
add
lods
iret   
popa   
adcl
lods
adc
adc
out
pop
push
repnz scas
mov
cmp
lahf   
sahf   
pop
mov
cld    
jae
mov
inc
rcll
xchg
cmp
lock
push
in
lock fisubl
jnp
insl
lret   
aad
das    
mov
add
pop
subb
pop
outsl
sbb
ret
jo
in
jp
clc    
stos
sti    
push
mov
xor
pop
push
out
xchg
loope
sbb
mov
(bad)  
push
add
adc
xor
xlat
je
pop
dec
gs mov
push
mov
(bad)  
sti    
xorl
dec
movsb
dec
xchg
inc
xor
bound
or
mov
push
subl
sub
fsqrt  
sbb
adc
push
lret   
jmp
(bad)  
leave  
xor
in
(bad)  
lods
repnz cmpb
test
and
adc
xchg
lds
scas
(bad)  
xor
imul
mov
push
inc
fsubrl
ljmp
lahf   
out
push
push
into   
inc
mov
mov
push
lret
mov
fiaddl
pop
push
clc    
jne
in
cmc    
call
outsb
(bad)  
xchg
mov
cmp
pop
jns
rorb
or
and
adc
mov
xchg
pop
das    
ret    
test
(bad)  
loop
or
inc
push
inc
ljmp
scas
xchg
push
ret    
fistl
rol
mov
rorb
dec
push
jmp
dec
sarl
mov
dec
sub
and
movsb
jnp
addl
mov
adc
in
into   
adc
jo
pushf  
aam
(bad)  
mov
rcll
sub
add
mov
or
rcrb
push
outsb
fnstenv
add
sub
mov
pop
out
scas
mov
jb
mov
jbe
call
jg
dec
imul
jp
fiaddl
stos
ret
jg
inc
xlat
leave  
in
iret   
iret   
dec
add
jmp
lea
flds
adc
imul
push
aaa    
sub
jecxz
subl
cli    
xlat
sbb
lods
add
addr16
mov
daa    
jo
cmp
leave  
inc
stos
fldcw
xchg
jnp
fwait
lret
add
mov
mov
or
mov
sbb
cld    
int
fs and
clc    
(bad)  
mov
sbb
xchg
out
mov
mov
ljmp
jmp
pop
mov
xor
ficomp
gs cwtl 
pop
invd   
adc
push
xor
std    
inc
imul
testb
(bad)  
rolb
push
jnp
inc
pop
sub
sbb
pop
jl
cmpsb
imul
dec
test
enter
fwait
repnz xorl
or
pop
testl
sub
cwtl   
sub
outsl
xor
(bad)  
repnz inc
mov
cs xchg
xor
mov
outsl
(bad)  
fstps
sbb
push
sbb
cmp
and
and
in
cmp
jmp
aas    
popa   
and
aas    
ficompl
xor
adc
stc    
add
sub
jmp
sbb
or
lods
rol
sub
repz dec
fsubrl
js
cmp
push
jmp
inc
aas    
nop
mov
jae
cmpsb
or
ja
cs push
scas
cmp
(bad)  
jbe
dec
flds
inc
pop
pop
dec
pop
adc
xor
ret    
cmp
add
or
adc
add
bound
mov
sub
into   
jno
jae
mov
push
movsl
push
test
mov
ret
out
xchg
lods
into   
sahf   
lds
dec
xchg
(bad)  
cmp
(bad)  
out
and
mov
mov
add
notl
cwtl   
jnp
push
idivb
jl
ret    
push
mov
adc
out
xchg
test
mov
mov
aad
loopne
pop
or
loopne
aam
and
addr16 jo
aam
jl
(bad)  
dec
addl
xor
sub
inc
add
test
push
push
mov
aam
xchg
shr
popf   
js
hlt    
and
ret    
cmp
mov
(bad)  
dec
fucomip
push
lods
out
in
and
scas
daa    
pop
cmpsb
scas
mov
add
xlat
sahf   
jp
int
roll
mov
cltd   
rcl
es pop
mov
call
xor
call
vmwrite
nop
loope
dec
xchg
nop
mov
xchg
ljmp
fstpl
pop
mov
shl
pop
sarb
add
and
add
dec
fwait
imul
cli    
sbb
push
fcoms
fwait
pop
fcomp
dec
mov
inc
inc
(bad)  
movups
gs
xor
fimul
push
pop
int
mov
dec
gs
xor
fwait
hlt    
or
cmpsb
jns
je
in
pop
idivb
lahf   
mov
scas
inc
mov
fnstsw
dec
sub
arpl
jno
cs hlt 
mov
pop
mov
mov
out
lret
pop
(bad)  
xchg
mov
add
cmp
pop
pop
dec
icebp  
lcall
(bad)  
mov
add
mov
or
(bad)  
jbe
sar
(bad)  
mov
xor
stos
pop
daa    
or
cmp
lcall
mov
jmp
cs
mov
xor
xchg
fwait
push
xor
dec
sbb
pop
adc
ds and
sbb
mov
int
stos
ljmp
mov
sub
ljmp
loope
mov
test
xchg
mov
or
cmc    
push
ret    
xor
inc
xchg
sub
xlat
inc
inc
push
lcall
lds
mov
mov
movsb
push
pop
mov
sbb
jp
pop
loop
inc
outsb
mov
and
or
jmp
mov
push
lcall
inc
add
(bad)  
loopne
imul
call
add
pop
cs push
inc
icebp  
pop
loop
adc
sub
mov
inc
es jmp
lds
int
mov
loop
and
cli    
mov
sub
pop
mov
fbstp
fscale 
outsb
nop
jmp
cltd   
cltd   
ret    
stos
jb
fisttpl
imul
hlt    
andb
fnsave
les
mov
pop
push
push
mov
jle
or
fcomp
sbb
ret    
fnsave
out
mov
adc
test
clc    
popf   
sub
jno
xor
jb
mov
inc
and
add
dec
scas
jl
movzwl
test
dec
mov
cmc    
popf   
dec
push
adc
sahf   
sti    
(bad)  
(bad)  
jbe
(bad)  
pop
mov
popa   
out
push
inc
iret   
add
(bad)  
and
(bad)  
in
mov
pop
mov
xor
insl
dec
pusha  
adcl
mov
popf   
lret   
dec
push
int
mov
test
jle
es xchg
and
mov
and
fwait
repz add
in
mov
lcall
mov
dec
xor
mov
popa   
pop
into   
pop
out
add
movsl
push
pop
pop
addr16 test
mov
inc
or
cld    
add
iret   
inc
add
ja
scas
mov
leave  
mov
push
gs and
pop
ja
insb
int
inc
sbb
pop
sahf   
mov
test
hlt    
jle
fldenv
jecxz
es aaa 
int
and
in
in
fimul
inc
lret   
xor
insb
sbb
inc
xchg
lds
pop
add
shl
adc
xchg
out
pop
jne
cs cld 
shlb
out
jge
ret
sbb
jnp
adc
ljmp
add
mov
popf   
jne
insl
std    
movsb
sti    
sbb
iret   
cmp
mov
imul
std    
jg
add
jg
pop
mov
sub
fstl
cmp
pop
(bad)  
jle
mov
fwait
push
bound
in
or
inc
push
mov
and
pusha  
fnop   
adc
xor
cld    
in
and
push
jne
pop
jnp,pt
aad
lods
adc
fild
adc
sub
or
ret    
mov
xchg
pop
pop
push
cmc    
out
sub
jns
push
pop
sbb
inc
xor
je
mov
(bad)  {%k4}{z}
(bad)  
fs xchg
jge
scas
pop
loop
ja
mov
inc
jo
add
jae
mov
dec
xchg
gs test
rcrl
test
jp
loope
movsl
cmp
dec
push
stc    
mov
(bad)  
pop
pop
adc
test
pop
xor
out
jno
ss mov
mov
mov
inc
fwait
sbb
sbb
pop
jg
ffree
(bad)  
clc    
pop
jae
push
mov
lock in
sar
sbb
repz test
divl
aaa    
lahf   
lods
(bad)  
mov
loopne
cmp
sub
icebp  
push
addr16 call
dec
cmpsl
mov
cmp
sbb
addl
jns
(bad)  
stc    
movsl
sub
div
out
scas
shl
dec
cltd   
adc
(bad)
xchg
adc
std    
mov
cmp
addb
out
fidivr
leave  
fisttp
xor
jo
or
gs enter
push
mov
dec
(bad)  
(bad)  
cmpsl
dec
pop
insb
xor
je
jmp
movsl
ss sub
add
mov
sbb
and
or
insb
rcrl
push
xor
inc
cmpsb
sbb
or
ret
loop
push
in
rclb
outsl
bound
sub
sbb
(bad)  
xor
ds das 
(bad)  
xor
jno
xor
cltd   
jo
aad
jno
std    
movsl
add
xor
dec
sub
xchg
adc
imul
aam
fcmovu
test
xchg
lret
push
xor
test
cmpsl
inc
int3   
mov
cltd   
ffreep
mov
ss jns
mov
xor
mov
fnsave
popa   
and
popf   
push
mov
outsl
adc
repz sbb
push
jl
cmpsb
fstps
push
mov
jp
pushf  
out
cmp
cmp
mov
movsb
jp
nop
or
cmpsl
add
jp
inc
stos
cmpsb
lods
pop
sarl
sti    
(bad)  
aad
movsl
es in
lods
xor
adc
out
mov
jmp
push
xor
xchg
dec
cmpsb
pop
les
add
rcr
fcoml
sbb
lret   
mov
lret   
jne
lahf   
(bad)  
xor
jecxz
sarb
imul
rolb
iret   
jle
popa   
ds out
xchg
push
push
sbb
out
ss fcmovbe
mov
cmp
dec
mov
int3   
xor
popl
ja
insb
mov
outsl
xchg
pop
sbb
shr
jbe
mov
mov
lods
int3   
sub
daa    
mov
sbb
sub
pushf  
loopne
stc    
or
sub
(bad)  
hlt    
test
xchg
mov
adc
cmp
dec
(bad)  
je
repnz fwait
pop
int
and
cmpsb
rclb
dec
pusha  
add
(bad)  
in
xor
(bad)
or
mov
(bad)  
insl
dec
push
sahf   
test
(bad)  
repz dec
lcall
mov
pop
ljmp
(bad)  
jns
adc
jg
and
fwait
subl
negl
lods
jg
pop
data16 std 
shr
jle
fbld
sub
jnp
and
inc
int3   
(bad)  
sub
or
mov
je
fildl
xrelease mov
xchg
mov
cmp
test
lcall
pop
pop
ss stos
push
ja
and
out
and
aad
cltd   
ljmp
fnop   
cmp
insl
(bad)  
fstpl
es pusha 
adc
push
push
sbb
mov
pop
clc    
jmp
mov
movsl
add
inc
pop
pop
pushf  
nop
pop
jnp
xchg
out
(bad)  
add
xor
pop
movsb
inc
push
std    
pop
and
dec
xchg
push
mov
shlb
and
(bad)  
sbb
fmull
dec
aad
lcall
mov
jne
cwtl   
cmp
(bad)  
mov
jae
out
(bad)  
add
es out
nop
adcb
xor
mov
xchg
push
mov
jb
addb
xchg
jnp
inc
mov
sub
loopne
pop
bound
adc
mov
imul
inc
scas
jo
xor
mov
sbb
pop
arpl
cmp
test
push
dec
es into 
sbb
jge
pop
lds
push
and
inc
out
and
mov
lret
sub
inc
dec
subl
cmp
cmp
and
pop
dec
jmp
fcoml
mov
jp
lahf   
iret   
xor
sbb
movsb
adc
push
flds
(bad)  
jg
rolb
jle
cmp
std    
cmp
sub
adc
pop
loopne
sbb
xchg
out
mov
push
inc
aas    
add
aas    
ret    
and
add
aas    
sahf   
or
inc
mov
sbb
int3   
popa   
dec
jmp
mov
pop
dec
cmp
mov
push
(bad)  
clc    
cli    
lret
in
pop
loope
gs mov
cmc    
lcall
cmpsb
pop
pop
lods
sub
cmc    
ret    
xchg
jle
xchg
movsb
rorl
push
push
xchg
lret   
aas    
mov
add
jmp
int3   
fs lcall
mov
add
cli    
fwait
cvtdq2ps
sub
mov
jns
jne
cmp
lret   
adc
mov
call
push
xlat
repz adc
stos
sub
loope
pop
dec
and
enter
mov
test
mov
mov
aam
jmp
pop
jmp
inc
pop
fld
(bad)  
push
iret   
repnz addr16 mov
jbe
xor
jmp
add
inc
arpl
ret
pop
jbe
jae
add
call
push
fnstsw
lret
cmpsb
xchg
aas    
rorl
mov
sarl
je
xor
cmp
and
and
xchg
rorl
pop
xchg
flds
loop
cmpsb
aas    
xchg
mov
enter
mov
sub
sbb
cmp
mov
mov
mov
sub
dec
sbb
cmp
push
pop
and
(bad)  
aaa    
push
in
aam
ror
xor
adc
lret   
push
mov
mul
mov
fwait
cmp
and
fdivs
mov
mov
int
(bad)  
and
adc
jnp
out
xor
dec
cmpsb
stos
stc    
loop,pn
mov
subl
int
scas
xchg
(bad)  
inc
inc
icebp  
pop
sub
lock loope
xor
xchg
sarl
dec
mov
in
ret
bound
adc
inc
xchg
push
(bad)  
loope
addr16 lret 
or
sbb
test
xor
in
xchg
sub
cmpsl
jns
xchg
add
int3   
add
dec
sti    
inc
shll
add
pop
mov
xor
lret   
adc
push
pop
push
pop
jp
cmpsb
leave  
dec
fs nop
pop
fwait
inc
cmp
mov
mov
pushf  
xchg
test
sbb
jns
mov
pusha  
insb
inc
cmc    
xor
lea
dec
ret
iret   
lock sar
sub
js
int3   
adc
out
hlt    
push
hlt    
cmp
ja
dec
jle
(bad)  
fstl
fdivs
imul
loope
dec
push
push
imul
out
push
in
movb
add
loopne
lods
push
aad
iret   
sub
test
push
adc
enter
sub
xchg
cmp
push
sub
in
fiaddl
adc
sbb
and
or
call
mov
lock xchg
lret   
inc
inc
mov
movsl
dec
or
add
into   
xlat
incl
xor
mov
cmp
jns
stos
movsb
dec
lea
pop
inc
push
sbb
cmp
mov
push
jle
push
inc
cmp
jne
ss jae
insb
leave  
ds lahf 
or
mov
fistl
push
enter
fucomip
push
vmulpd
fild
(bad)  
fsub
fwait
lahf   
cmp
fbstp
lds
dec
mov
jmp
test
and
ret
ret
inc
pop
dec
(bad)  
int3   
xchg
aam
xor
dec
out
rcrl
xor
mov
arpl
out
cmp
(bad)  
int
jb
push
add
decl
xchg
in
push
cmp
aas    
cmc    
ljmp
lods
outsb
test
sub
and
cmp
sub
jnp
movb
addb
inc
push
sub
pop
loopne
cltd   
pop
push
fwait
lods
dec
mov
int3   
popf   
int3   
sub
cmc    
mov
es sub
das    
jne
test
adc
clc    
mov
mov
mov
jmp
int
push
nop
dec
adc
inc
or
repz xchg
rclb
adc
xchg
mov
cld    
mov
fadds
mov
mov
stc    
push
(bad)  
outsl
adc
inc
cmc    
mov
loope
push
mov
fstpl
mov
xchg
loopne
sbb
add
cmpsb
adc
dec
jnp
addr16 aaa 
mov
mov
shrb
xchg
fcom
push
and
dec
int3   
inc
cwtl   
xchg
ret
sub
sub
(bad)  
jns
in
inc
out
or
push
rcrl
movsl
push
cltd   
mov
sub
jge
test
pushf  
lret   
mov
mov
lcall
jl
ja
mov
fcoml
adc
dec
out
jne
fimul
mov
mov
and
xor
sbb
rorl
outsb
leave  
lds
mov
into   
mov
lret
cmp
or
imulb
pop
test
mov
sub
and
mov
decl
lds
or
inc
add
movsl
mov
mov
mov
pop
ret
pop
xchg
xchg
jge
fldl
and
or
jno
push
inc
jbe
push
pop
mov
xor
add
and
and
scas
loope
push
lret
mul
mov
mov
sbb
das    
inc
stos
icebp  
mov
data16 fwait
imul
cltd   
icebp  
call
xchg
loope
movsb
or
sub
push
lods
push
out
int
adc
fiadd
xor
popa   
dec
mov
into   
stos
in
mov
lods
adc
cmpsb
fs inc
jbe
andb
mov
mov
dec
(bad)  
xchg
jae
or
stc    
insb
icebp  
xchg
sbb
dec
mov
cld    
imull
or
dec
and
(bad)  
adc
subl
mov
xor
xchg
inc
pop
jecxz
idivl
dec
push
cld    
xchg
pusha  
nop
arpl
(bad)  
test
cmpsl
xor
sbb
cmpb
xor
movsb
je
pop
jmp
cmpsl
nop
sbb
movsb
or
scas
sbb
jae
pop
imul
stc    
add
xor
fbld
fwait
inc
movsl
sub
daa    
rorb
mov
push
fisttp
and
xchg
jge
andb
sub
fistp
sub
rorl
(bad)  
jp
call
imul
xor
mov
pop
les
pop
out
push
icebp  
(bad)  
lret   
xchg
ficom
aad
mov
mov
repnz cmp
jae
pop
dec
mov
imul
aad
cmp
cs pop
xchg
(bad)  {%k4}{z}
jmp
sahf   
mov
nop
inc
stos
roll
aad
in
mov
outsb
add
xor
cmc    
adc
push
adc
movsb
xchg
jge
movsb
(bad)  
enter
divl
dec
lret
adc
leave  
cwtl   
(bad)  
fs jae
and
pop
(bad)  
loope
pop
(bad)  
cmp
cmp
(bad)  
mov
adc
xor
gs mov
cld    
jge
cmp
insb
xchg
xlat
mov
das    
std    
add
pushf  
clc    
shl
call
add
fsubs
xor
mov
push
inc
and
pop
das    
daa    
dec
inc
push
push
xor
pushf  
mov
scas
xchg
sbb
lds
outsl
shlb
jns
push
outsl
and
rclb
xor
lcall
cli    
xchg
ds lahf 
mov
aas    
push
sbb
push
xor
out
jno
lret
and
sbb
and
enter
push
sbb
mov
add
dec
pop
movsb
nop
push
rorl
out
imul
clc    
addb
or
or
rcrb
mov
adc
jno
push
dec
loopne
inc
loope
push
test
shrl
scas
(bad)  
(bad)  
jb
xchg
clc    
je
fmuls
fimul
mov
mov
jmp
rcll
imul
mov
insb
cmp
pop
mov
xchg
fidivr
aaa    
xor
stos
jmp
mov
cmp
in
insl
(bad)  
loopne
cmp
lods
push
sbb
jmp
jmp
mov
sbb
adc
xchg
sbbb
sbb
push
jl
jmp
ret    
roll
inc
xorl
add
and
mov
jle
out
dec
out
(bad)  
rcrb
fstpt
pop
mov
dec
and
cmp
jnp
fildll
test
mov
push
in
enter
out
inc
mov
stos
pushf  
cltd   
pop
jbe
xchg
sub
pop
pop
ss pop
fsub
mov
mov
and
orl
and
adc
into   
sarl
sbb
push
or
out
outsl
outsb
push
lods
mov
add
repz dec
pushf  
mov
es jmp
lods
sub
lret   
and
jnp
dec
ficomp
sbb
dec
aaa    
lods
push
mov
or
jge,pt
xchg
mov
or
rclb
popf   
mov
push
bound
sbb
nop
lcall
sbb
dec
sahf   
adc
xchg
mov
ret    
and
lock in
sbb
mov
iret   
adc
call
jl
dec
ja
fisubl
push
mov
xchg
pop
(bad)  
mov
js
xchg
out
add
bnd fs jp
mov
test
mov
shll
and
aad
xchg
inc
mov
mov
mov
test
mov
xchg
adc
stc    
sbb
mov
stos
inc
push
ljmp
add
fidivl
loopne
aad
lahf   
loop
outsl
clc    
call
mov
(bad)  
push
pop
mov
inc
sbb
and
nop
(bad)  
es ffreep
adc
pop
push
pusha  
in
bound
repz test
jbe
imul
enter
rcl
xchg
xor
mov
add
push
lods
jp
shrl
cli    
sbb
and
xor
mov
popa   
mov
sub
mov
jecxz
mov
add
rorb
push
cmp
js
or
test
pop
inc
cld    
fsubrl
int
xchg
lret
xchg
inc
enter
aas    
add
int
mov
int
lea
push
shl
ljmp
inc
in
mov
cltd   
mov
mov
mov
mov
pop
and
xchg
sub
sbb
mov
pop
sub
sbb
outsb
popf   
cmp
mov
sub
or
cmc    
mov
push
xchg
ss retw
pusha  
insl
xor
jecxz
fs push
imul
stc    
inc
jo
jle
into   
ret    
out
xchg
scas
dec
or
in
xchg
pop
push
push
ljmp
pop
jecxz
loope
out
push
shll
and
and
mov
je
rorb
jecxz
cmp
into   
fdivrl
push
dec
mov
rclb
add
test
sbb
stos
add
jns
les
sbb
or
in
seto
jnp
pop
push
dec
aam
loop
jle
imul
out
stos
and
xchg
xlat
test
out
cmp
xor
loope
inc
mov
fildll
adc
mov
pop
lret   
sub
jle
(bad)  
push
movzbl
mov
(bad)  
pop
push
fwait
dec
out
stos
loop
cmp
(bad)  
xor
jno
scas
ss in
arpl
mov
sub
popa   
lods
(bad)  
imulb
mov
stos
and
adc
xchg
push
fwait
mov
insb
gs mov
push
push
pop
aad
test
push
in
mov
bound
loop
jbe
repnz or
xor
inc
sahf   
ltr
cmp
inc
fisttpll
push
enter
add
fs xor
pop
outsl
in
xor
or
nop
ret
out
int3   
shrb
jne
dec
sahf   
jl
test
fs lret 
sub
out
add
repz adc
stos
cmc    
aas    
push
mov
push
or
nop
lcall
(bad)  
(bad)  
iret   
sbb
jnp
lea
repnz mov
xor
fs mov
mov
fldcw
jnp
std    
seto
push
push
or
aad
mov
rol
outsl
je
push
sbb
mov
mov
cmp
pop
pusha  
loop
loope
adc
(bad)  
fucomip
call
stos
add
and
dec
shll
jmp
or
sub
mov
xor
fstpl
aam
shrl
xchg
outsl
add
mov
cmpsl
xor
sub
clc    
xchg
incb
push
(bad)  
loopne
mov
les
or
mov
and
push
test
push
aad
sbb
jl
pop
jbe
aad
(bad)  
jne
stos
daa    
into   
fcoml
(bad)  
add
lock clc 
dec
push
pushf  
test
mov
movsb
push
aad
nop
mov
cmp
cs insb
(bad)
out
mulb
jmp
subl
mov
(bad)  
daa    
lret   
test
or
loopne
sub
or
cmp
fiaddl
push
movsb
enter
roll
push
push
xor
pusha  
mov
int
scas
cmp
out
push
in
xor
inc
jecxz
stc    
js
mov
loop
sarb
cmp
leave  
dec
fnstenv
sbb
out
out
xor
mov
xchg
repz add
fadd
shr
jmp
les
icebp  
or
sbb
mov
fs imul
mov
jbe
insb
stos
std    
loop
mov
push
pop
jne
mov
sar
or
mov
add
pusha  
jns
repz popfw 
cs rol
fldt
push
adc
(bad)  
sub
xchg
sub
daa    
ss in
cmc    
jnp
jae
call
fisubrl
in
sub
int3   
mov
fs out
fcmovnb
loope
push
hlt    
sbb
or
and
rorb
inc
xchg
xlat
je
stos
lock add
mov
and
mov
jmp
insb
cwtl   
add
out
insl
xchg
cltd   
and
outsl
sub
mov
(bad)  
mov
adc
popf   
jno
add
adc
sbb
ja
jno
int
or
pop
cli    
pop
and
jmp
dec
enter
fmuls
jecxz
xchg
sub
mov
mov
inc
push
in
(bad)  
pop
xchg
mov
push
sbb
aaa    
inc
or
lock sub
out
lret   
movsl
mov
das    
aaa    
insl
pushf  
addr16 push
ret
jg
or
or
pushl
lcall
sbb
cmpl
(bad)  
hlt    
aas    
pop
lds
adc
(bad)  
pop
pop
shrb
pop
outsb
loop
push
setae
inc
and
fistl
mov
out
and
add
dec
mov
cwtl   
adc
imul
add
add
push
clc    
mov
jb
mov
and
or
mov
sub
(bad)  
(bad)  
test
mov
and
int3   
js
sbb
daa    
sbb
xlat
(bad)  
pushf  
fwait
sub
mov
mov
xor
add
gs pop
cmp
es out
jo
fcompl
sbb
pop
adc
shrb
aas    
mov
sbb
jg
sub
mov
mov
lahf   
mov
dec
std    
jge
xlat
shr
sbb
jnp
jle
mov
xchg
ret    
int
mov
xor
sbb
in
fsub
loope
jle
popa   
clc    
pusha  
cmp
popf   
dec
aas    
lods
in
xchg
mov
fwait
lea
and
adc
or
add
sbb
out
push
mov
inc
jle
inc
sub
lods
sbb
push
outsb
in
sbb
mov
add
std    
cmpsl
mov
mov
nop
lret
shl
pop
xor
xchg
adc
adc
xor
pop
xor
in
dec
subl
and
out
movsl
jb
pop
fstpt
pop
mov
cmp
or
fstl
jle
movsb
cmp
pop
pop
pop
ret    
out
(bad)  
mov
std    
not
jae
(bad)  
enter
mov
ljmp
(bad)  
adc
mov
sti    
pushf  
int
jbe
xchg
and
dec
movsl
je
(bad)  
lods
cmpsl
test
pusha  
dec
jg
ds es xchg
fistl
test
or
popw
pop
outsl
pop
stos
stos
jg
sub
repnz xor
in
cld    
rep movsl
push
subl
dec
pop
or
sahf   
stos
mov
call
inc
repnz aam
addr16 popa 
mov
jecxz
push
xchg
cltd   
sub
dec
inc
add
xchg
(bad)
movsb
xchg
(bad)  
fdivrl
add
mov
test
adc
addr16 or
pop
ss gs xor
dec
jmp
ljmp
(bad)  
and
sbb
dec
movsb
pop
mov
push
loope
cmp
inc
cmp
rcrl
dec
lret   
fdivrl
movsb
xor
push
fiadd
lock dec
sub
pop
mov
push
push
hlt    
mov
mov
push
mov
mov
xor
cmpsb
mov
lods
cld    
adc
popf   
lods
sti    
mov
jecxz
xor
jb
mov
(bad)  
fdivrp
mov
aad
xchg
jle
sahf   
subl
ja
lds
mov
jo
test
mov
sbb
std    
mov
popa   
pop
inc
jne
push
push
cmc    
or
sbb
test
mov
pop
ss pop
sub
lea
xchg
pop
push
push
dec
ljmp
testl
daa    
mov
inc
xchg
xor
lods
pop
sbb
pop
jno
idivl
add
(bad)  
repz out
and
enter
lea
push
das    
mov
push
rorb
jae
test
clc    
pushl
dec
cmc    
sub
aad
arpl
notb
sbb
sbbl
nop
xchg
es pop
push
add
test
in
add
cltd   
jp
sbbl
(bad)  
aam
mov
mov
popa   
pusha  
mov
insb
(bad)  
jl
dec
insb
pop
rcl
adc
xchg
cs cltd 
adc
sbb
(bad)
adc
or
mov
mov
rcl
mov
xor
cmpsb
cltd   
subb
rorl
pop
ja
dec
xor
fadds
lds
jns
mov
xchg
(bad)  
js
mulps
(bad)  
in
add
push
fild
xor
inc
adc
js
sarl
test
inc
jmp
sti    
sti    
outsb
pop
ret    
sub
(bad)  
jp
adc
(bad)  
jl
repnz inc
add
xchg
fnsave
xchg
jmp
enter
jb
pusha  
jne
jecxz
mov
mov
adc
popa   
and
and
popf   
mull
fdiv
pop
int3   
add
xor
leave  
rcrb
popf   
add
inc
adc
cmpsb
mov
inc
fist
or
mov
ret
and
cmp
sub
jmp
add
dec
std    
fadd
ljmp
or
and
jle
and
mov
out
push
imul
cld    
daa    
rcll
mov
dec
in
data16 jmp
(bad)  
icebp  
das    
xchg
rcr
lahf   
adc
js
(bad)  
jo
loop
dec
jp
rorl
imull
movsb
pop
and
dec
lods
sbb
in
or
cld    
je
js
ficompl
push
mov
test
mov
in
cld    
(bad)  
(bad)  
(bad)  
aam
push
test
jbe
mov
jmp
or
outsb
dec
sti    
mov
push
sub
adc
sbb
sbb
inc
sti    
mov
dec
stos
adc
shrl
dec
mov
xor
cmp
pop
jns
add
in
jmp
test
lcall
push
xlat
loopne,pt
inc
sub
sbb
or
cltd   
inc
std    
push
es pop
arpl
dec
ja
sub
jno
add
sbbl
xchg
lahf   
test
ja
mov
pop
xor
cmp
movsl
ja
adc
xchg
xor
fidiv
mov
enter
daa    
pop
cmpsb
jl
mov
jo
push
ja
icebp  
add
inc
dec
stc    
mov
inc
jle
and
sbb
lock jl
das    
out
lcall
push
outsb
clc    
out
sub
out
xor
mov
pop
loop
xor
hlt    
fucomi
and
(bad)  
ss mov
xchg
sub
icebp  
std    
sbb
mov
nop
mov
pusha  
add
or
imul
jo
dec
xor
or
jne
mov
roll
adc
int
pop
dec
lahf   
sub
or
nop
out
mov
jp
js
pusha  
push
xor
or
jno
cld    
sbb
push
into   
jmp
out
leave  
out
rolb
or
fisttpl
mov
test
inc
jg
adc
sti    
das    
pop
sub
pop
jno
push
shl
ja
jle
popa   
push
xchg
aas    
push
jns
bound
pusha  
les
insl
mov
iret   
add
mov
ret
mov
imul
xchg
xor
push
sbb
mov
popf   
dec
jb
rcrb
clc    
(bad)  
xor
icebp  
dec
cmc    
jmp
shlb
jecxz
test
(bad)  
aaa    
xchg
inc
rcrl
mov
sub
dec
xchg
insb
inc
loope
mov
fildl
xchg
xlat
out
sub
cmp
movsb
mov
sbb
aas    
mov
mov
das    
mov
ljmp
lods
pop
into   
jmp
je
lea
(bad)  {%k4}{z}
(bad)  
or
es jg
dec
int
pop
frstor
movsl
movsl
mov
pop
xlat
dec
push
popf   
cmp
or
(bad)  
popl
cli    
(bad)  
mov
roll
mov
adc
aam
xchg
(bad)  
mulb
bound
dec
cmp
adc
std    
fnsave
stos
mov
mov
adc
sbb
insb
mov
icebp  
sub
add
xchg
int
stos
mov
aaa    
mov
lret
cmpsl
inc
xchg
sbb
jno
cltd   
jo
es data16 sub
repnz stos
dec
push
in
adc
sub
out
leave  
ja
adc
nop
in
ja
mov
add
lret   
push
fdivr
(bad)  
lock insl
in
sub
loopne
jecxz
insl
lretw  
cs enter
cli    
insl
xchg
mov
inc
ret    
aam
adc
rorl
int3   
inc
adc
add
fcomps
out
scas
(bad)  
iret   
aad
mov
js
mov
(bad)  
arpl
fsubrl
dec
loopne
fs leave 
adc
and
popf   
(bad)  
out
adc
insb
andl
inc
(bad)  
and
out
xchg
inc
inc
rorb
sub
xchg
subl
enter
nop
in
clc    
sub
mov
cmpsb
xor
adc
inc
call
test
in
and
mov
lcall
ret
mov
ret
js
push
mov
and
stos
outsb
addr16 adc
lahf   
aaa    
mov
sub
mov
pop
jno
stc    
mov
sarl
pop
int3   
pop
nop
nop
insb
sub
pop
jmp
insl
lret
sbb
add
inc
sbb
push
push
fcmovb
pusha  
lahf   
push
and
in
mov
pop
out
pop
adc
xchg
icebp  
cmp
clc    
das    
pusha  
stos
outsl
popf   
pop
shrb
shrb
cmp
aam
cmpsb
(bad)  
adc
jo
jns
sarl
and
stos
mov
insb
dec
fiaddl
xchg
adc
mov
mov
clc    
mov
daa    
cltd   
xor
imul
jmp
dec
pop
or
idivl
push
jl
lret
iret   
outsl
mov
mov
jne
add
(bad)  
roll
mov
(bad)  
ret    
dec
jge
pop
mov
test
in
pop
cs
dec
leave  
pop
or
out
mov
adc
in
jecxz
xchg
in
cmc    
mov
cmp
clc    
mov
mov
je
mov
inc
and
popf   
or
bound
mov
mov
stos
stos
loop
dec
fsts
and
fwait
jl
cltd   
mov
sub
test
addr16 push
(bad)  
pop
fist
scas
cmp
pop
outsl
add
add
add
bswap
sbb
xor
inc
in
adc
mov
popf   
addr16 adc
mov
or
xchg
ja
mov
mov
loopne
cs dec
sub
pop
sbb
dec
mov
xor
push
iret   
mov
aas    
jg
pop
mov
sbb
mov
jbe
gs ds push
shrl
adc
aam
xchg
fnsave
sbb
test
adc
cli    
or
cltd   
fs mov
sbb
addr16 cld 
xchg
xchg
sub
js
inc
sub
xor
scas
jns
dec
add
pusha  
test
les
pop
inc
outsl
mov
idivb
push
adc
mov
addr16 into 
adc
lcall
mov
hlt    
dec
cmp
out
cmpl
cmp
pop
jns
mov
dec
(bad)  
out
sarb
dec
call
push
jnp
mov
and
sub
ret
sub
and
ret
pop
inc
fsubs
pop
gs adc
loope
mov
cltd   
stc    
outsl
cmp
(bad)  
das    
xchg
andb
add
jns
xor
addps
leave  
adc
popa   
nop
mov
cmp
inc
cltd   
push
lock loope
cli    
xchg
cmc    
inc
xchg
in
sbb
and
lods
pop
jle
test
dec
(bad)  
dec
scas
xchg
(bad)  
fiadd
sub
popf   
test
cmp
pop
out
(bad)  
mov
and
inc
iret   
jne
int3   
lods
bound
loop
mov
cwtl   
jne
pop
ret
xor
mov
mov
inc
pop
ds cmp
xor
arpl
jne
push
mov
test
push
lret
dec
inc
sbb
test
test
and
or
inc
jmp
mov
outsb
in
push
ljmp
popa   
dec
or
(bad)  
mov
pop
xchg
jo
cmpsl
stos
insl
(bad)  
movsl
cmp
insl
incl
das    
dec
enter
test
pop
push
mov
inc
xchg
sbbb
or
stc    
xor
clc    
(bad)  
cld    
(bad)  
in
cmp
mov
scas
enter
cmp
push
(bad)  
jmp
cmp
adc
adc
jno
add
inc
mov
add
sti    
clc    
das    
mov
gs daa 
or
add
mov
mov
ja
fstpt
jbe
inc
pop
inc
(bad)  
mov
mov
jno
addr16 or
sub
in
(bad)  
mov
or
xor
flds
jl
cli    
mov
lods
mov
push
or
xchg
pop
inc
dec
ret
int
into   
jne
fcmovbe
pop
popf   
lahf   
jge
push
or
mov
mov
xchg
add
stc    
adc
lret
iret   
shr
xchg
mov
or
or
mov
sbb
hlt    
lcall
inc
leave  
sbb
lcall
dec
test
js
fnstcw
ss jnp
dec
dec
(bad)  
daa    
xor
add
stos
cmpsb
mov
int
inc
(bad)  
int3   
sub
pinsrw
out
test
loopne
les
sbb
cmp
pop
lret
add
aad
mov
in
cmp
add
cltd   
arpl
fsubs
or
pushl
mov
in
cmp
cmpsl
or
mov
jge
pop
push
clc    
mov
and
pop
add
inc
push
rol
mov
lret
hlt    
repnz
js
and
push
leave  
xor
jl
pop
pusha  
(bad)  
movsl
js
mov
lcall
das    
(bad)  
pop
into   
xchg
lods
sbb
outsb
ret
cli    
(bad)  
leave  
inc
loope
out
jae
inc
push
clc    
lods
sub
in
call
xchg
lret
sti    
das    
aam
sahf   
mov
jbe
add
inc
adc
add
xchg
add
pop
mov
mov
mov
push
movsb
add
aaa    
cmc    
roll
jle
cmp
sub
pop
xchg
push
fdivl
mov
insb
sub
push
cmpsl
outsb
xor
sbb
ja
mov
ss xchg
pusha  
(bad)  
sub
in
outsb
sti    
lea
sub
int3   
or
push
push
sbb
movsl
or
ret    
cmp
loope
push
xchg
jmp
xchg
in
addr16
test
sbb
stos
inc
fbld
mov
adc
nop
dec
roll
out
aas    
pop
inc
jno
loope
das    
fnstsw
add
bound
lds
and
lock jb
je
dec
in
adc
xor
pop
jmp
jb
inc
jl
(bad)  
ja
or
pop
jg
jbe
loope
inc
fiaddl
fildl
mov
push
xlat
xchg
sub
insl
or
std    
popa   
test
or
rorb
ficompl
add
fildl
jl
add
sub
clc    
cwtl   
lods
sbbb
pop
mov
cmp
test
pop
test
rolb
(bad)  
mov
xor
scas
dec
or
jne
fidiv
push
repnz xor
popa   
mov
mov
outsb
aad
scas
add
rcr
repnz fiadd
sbb
or
add
mov
je
mov
(bad)  
mov
ret
stos
push
adc
sti    
mov
jb
pop
and
addr16 daa 
xchg
cmp
(bad)  
sarb
notb
in
push
jp
xor
xchg
(bad)  
(bad)  
push
mov
pop
sarb
pop
mov
call
mov
inc
lahf   
pop
es jmp
push
rolb
adc
jge
(bad)  
jno
sub
enter
jl
adc
loopne
dec
movsl
lahf   
repz decl
inc
sbb
lahf   
aas    
lea
sub
bnd jbe
loope
shrl
xchg
test
orl
push
push
fdivl
std    
and
pop
test
repz mov
imul
shrb
jle
or
add
pop
jmp
ss cmp
fstpt
(bad)  
sahf   
inc
je
outsl
jns
stc    
and
(bad)  
stc    
popf   
hlt    
or
mov
push
dec
cmp
mov
cmp
ror
mov
mov
dec
xor
cmpsb
insl
xchg
push
shlb
(bad)  
adc
jb
std    
int3   
pusha  
fwait
mov
jo
nop
xchg
lods
jbe
sub
stc    
insb
ss and
jo
cs in
sub
mov
xor
fldl
idiv
pushf  
cmc    
pop
(bad)  
sub
fcoms
pop
sub
lahf   
dec
pop
inc
lods
cmp
push
mov
adc
out
push
(bad)  
fsts
dec
pushf  
cmp
aaa    
inc
mov
push
xor
repz ds inc
sub
mov
add
sarl
fisubrl
cmp
dec
push
sub
std    
ret
jb
push
mov
sub
roll
adc
jmp
inc
sub
push
mov
loopne
fistl
or
pop
mov
std    
nop
sbb
in
lock push
mov
sbb
leave  
xchg
xchg
lret
mov
out
pushf  
cld    
sar
(bad)  
mov
sbb
add
add
addr16 add
and
inc
pop
inc
daa    
xor
xor
cli    
dec
shl
stos
int3   
lret   
pop
add
pop
push
mov
loope
stos
and
std    
daa    
out
cmp
outsl
cmp
inc
jle
outsl
push
mov
jg
inc
cwtl   
dec
stc    
dec
shll
shrb
add
push
or
mov
mov
aaa    
test
pusha  
test
and
cwtl   
add
dec
clc    
dec
mov
inc
pop
jmp
sahf   
sbb
add
push
inc
lock push
cmp
cmpsl
or
in
push
jo
les
cmp
data16 fsubr
(bad)  
sbb
push
push
push
cmpsl
dec
add
push
mov
insb
pop
mov
lds
(bad)  
xor
add
sbb
int3   
mov
add
fmul
addl
cwtl   
stc    
mov
mov
mov
push
xchg
push
out
adc
out
xor
mov
xchg
fild
mov
repz cmp
insb
inc
bnd jne
sub
imull
push
aaa    
mov
leave  
jo
test
push
out
ss loope
lret
or
mov
pushf  
mov
dec
std    
mov
iret   
lea
(bad)  
jg
lods
les
gs clc 
sar
fwait
dec
(bad)  
outsl
lds
das    
(bad)  
std    
test
vcvtsd2si
cld    
mov
dec
push
in
imul
pop
and
clc    
andl
push
rorl
cmp
pop
or
mov
mov
cld    
add
les
fldenv
or
js
vmovss
adc
popf   
pushf  
xor
push
cli    
sahf   
cmp
std    
or
pusha  
push
jno
sbb
adc
into   
jo
jp
rol
push
mov
sub
adc
push
sub
sbb
in
sbb
scas
std    
inc
in
nop
cli    
es repnz push
pusha  
sbb
mov
call
ljmp
mov
cs mov
(bad)
mov
adc
inc
adc
pop
mov
mov
test
pop
movsb
sti    
das    
pop
gs inc
test
(bad)  
and
ret    
aam
lock pop
mov
push
sub
inc
fstpt
imul
mov
mov
xchg
in
pop
sub
dec
loop
xor
sbb
out
xchg
fcompl
out
frstor
repnz push
stos
ja
gs cli 
xor
mov
mov
or
sbb
dec
xchg
(bad)  
sub
pop
cld    
mov
clc    
test
test
inc
(bad)  
sub
pop
add
jge
in
imul
pop
lods
xchg
cmc    
cli    
adc
ljmp
dec
je
xor
test
enter
js
cmp
add
cmp
and
sbb
or
and
push
test
loope
(bad)  
cmpsl
dec
mov
les
mov
(bad)  
xor
daa    
xlat
mov
add
lds
and
xlat
addr16 clc 
mov
(bad)  
loope
xor
divb
clc    
test
xlat
insl
outsl
and
mov
jecxz
xor
xchg
jecxz
lea
call
jge
movsl
or
xchg
pusha  
mov
xchg
pop
adc
sub
push
nop
jecxz
pop
sbb
(bad)  
mov
xor
nop
in
test
add
lods
mov
ljmp
adc
cmpsl
and
mov
mov
lea
test
lds
out
pop
cmpsb
pop
inc
sbb
jl
test
or
inc
mov
or
lock add
repz or
inc
fistp
repnz inc
lret   
enter
jbe
mov
outsb
andb
lret
push
adc
or
mov
outsb
aad
jae
outsl
sbb
popa   
insl
scas
stc    
mov
repz jmp
xor
mov
jb
mov
loope
(bad)  
xchg
push
dec
pop
mov
add
push
test
xchg
lret   
cwtl   
inc
cmp
or
jbe
imul
cld    
ret    
pop
push
pop
test
popf   
bound
push
adc
sbb
fadd
jg
lds
add
jae
gs or
cmpsb
mov
lods
addr16 fs cmp
cmp
(bad)  
(bad)  
icebp  
pop
xor
push
inc
mov
inc
adc
push
and
cmp
aad
cmpsl
je
inc
dec
ja
fmul
sub
iret   
sbb
jmp
iret   
(bad)  
lods
dec
jg
mov
fldlg2 
stos
add
mov
sub
ljmp
mov
mov
repnz sub
jg
cmp
cmpsb
mov
roll
sub
in
rolb
mov
mov
xchg
mov
jge
sub
jp
add
adc
cmc    
dec
js
scas
xor
adc
rolb
push
icebp  
je
lret   
jmp
sub
sti    
xchg
push
repnz fs adc
call
and
aam
les
stos
icebp  
in
pop
pop
es pop
xlat
push
(bad)  
mov
inc
fmull
sahf   
dec
popf   
mov
data16 lahf 
pop
sbb
xor
imul
sub
pop
jns
or
scas
clc    
in
out
inc
xchg
jns
jle
push
mov
pop
xor
sub
xor
push
mov
pop
push
mov
call
sbb
sbb
dec
or
push
dec
fist
and
insb
rcll
mov
cmp
mov
ds cmp
inc
xor
scas
mov
repnz cmpb
cmp
shrl
add
add
dec
inc
dec
inc
scas
inc
pusha  
(bad)  
or
add
add
(bad)  
(bad)  
(bad)  
incl
add
add
add
add
add
add
jns
je
insl
cs inc
jb
ja
outsb
addr16 sub
push
gs jb
imul
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
xor
data16 aaa 
xor
fs xor
add
adc
gs insl
cs inc
jb
ja
outsb
addr16 cs inc
imul
add
popa   
je
pop
add
add
add
add
add
lsl
add
jno
add
add
or
or
add
or
add
add
add
dec
or
add
add
(bad)  
and
add
add
inc
dec
inc
add
mov
or
popa   
add
jo
pop
jae
add
ret    
add
push
ret    
add
outsl
test
add
cmp
push
push
test
adc
aaa    
in
shrb
mov
sti    
gs sahf 
and
cs out
and
mov
cmp
lds
adc
ljmp
outsl
inc
push
mov
sub
aas    
ja
in
aas    
arpl
dec
xchg
aad
sahf   
in
(bad)  
ss jnp
popf   
jno
pop
orl
ja
pop
lret
mov
cmpsl
sbb
push
lods
xor
mov
inc
mov
pop
inc
mov
scas
in
jne
cmp
out
mov
test
xchg
in
jmp
in
push
(bad)  
mov
xlat
loopne
xor
cmp
or
ret    
aad
out
std    
out
and
enter
jmp
cli    
test
dec
in
pop
mov
xchg
cmpsl
js
iret   
pop
mov
aas    
jnp
inc
and
dec
add
lcall
sbb
jb
imul
add
xor
adc
popf   
pushf  
mov
stc    
imull
dec
stos
pop
pop
test
repz test
pop
inc
pop
pop
dec
dec
jns
or
jge
loope
jb
lret   
int
jno
unpckhps
bound
mov
jg
cld    
xchg
dec
in
dec
inc
fucomi
jle
hlt    
fwait
mov
jge
stc    
and
subb
pop
cs stos
jle
fist
mov
imul
lods
cmc    
dec
popf   
inc
adc
adc
cltd   
push
mov
or
inc
movsb
pop
push
imul
fs pop
insl
nop
mov
jmp
(bad)  
fildl
mov
sbb
xchg
dec
in
pop
inc
and
(bad)  
jb
xor
xchg
lds
add
mov
movsb
push
xor
jle
add
add
mov
xor
push
repnz xchg
push
cld    
cmp
adc
addb
mov
aam
push
sbb
rcll
xor
fnstsw
lods
clc    
mov
pop
mov
adc
fiadd
mov
jle
fcmove
pop
jmp
sbb
dec
sbb
out
scas
insb
mov
xchg
xchg
dec
or
xor
gs xchg
xlat
cmp
push
push
sahf   
add
mov
add
jo
cld    
xchg
shlb
mov
in
pushf  
or
subb
jg
mov
dec
aam
loope
insb
test
xchg
test
add
and
adc
das    
dec
sbb
and
int
jge
xchg
mov
repz testb
mov
pushf  
mov
mov
mov
mov
adc
cld    
lds
push
dec
ss in
arpl
inc
sbb
cwtl   
add
cltd   
cmp
rorl
(bad)  
out
(bad)  
mov
(bad)  
push
xor
cmc    
pop
cmp
xchg
into   
js
mov
inc
push
(bad)  
rorl
xor
lret
push
xchg
xchg
(bad)  
cmc    
push
inc
xor
fcoms
cmpsl
loop
les
(bad)  
pop
cli    
ret    
mov
cmc    
cmp
or
sbbl
push
mov
aad
test
cld    
mov
mov
aaa    
cli    
test
mov
mov
and
int
into   
fisub
(bad)  
ds sbb
xlat
test
ds push
push
jnp
mov
mov
out
mov
cmp
xor
gs shl
int
mov
and
cmpsb
dec
testl
arpl
push
cmp
aas    
cmp
add
add
int3   
cld    
mov
fld
icebp  
sbb
mov
pop
or
fildl
sub
int3   
shrl
out
xchg
les
rcrb
mov
iret   
in
dec
lock test
out
cli    
std    
add
mov
or
hlt    
or
and
fdivr
repz and
cli    
or
sub
and
es mov
dec
and
and
popf   
add
mov
mov
xor
jle
fidivl
add
sbb
or
push
fistl
das    
xchg
(bad)  
xchg
jae
mov
inc
cltd   
dec
jns
daa    
mov
push
sbb
cmp
loop
mov
sub
inc
in
jg
popa   
jl
jl
xchg
popf   
pusha  
add
and
rolb
iret   
mov
enter
push
scas
sbb
and
repnz cli 
in
lret
je
leave  
adc
sbb
mov
sbb
lds
cltd   
(bad)  
adc
xlat
pop
add
test
pop
xchg
mov
adc
in
in
mov
cmpl
jne
iret   
add
lret
lcall
(bad)  
(bad)  
outsl
mov
push
push
bound
add
cltd   
dec
sbb
mov
ss fwait
cltd   
sbb
test
cmc    
mov
jno
repnz arpl
adc
mov
push
push
push
lcall
std    
xchg
and
in
fildll
imul
add
enter
pushf  
repz push
mov
pop
mull
js
(bad)  
negb
movsl
jae
jp
fimul
arpl
ret    
xor
nop
ficom
mov
int
jg
jae
cli    
lcall
mov
xchg
add
(bad)  
and
sbb
jg
int
and
ffree
cmpsb
push
add
and
loope
scas
mov
sbb
jecxz
sbb
pop
push
jge
mov
outsb
cmpsb
sahf   
rcr
gs stc 
add
imul
jle
shlb
dec
xchg
add
orl
es push
scas
or
lret   
sub
mov
out
and
int3   
iret   
jnp
movsb
lods
jle
push
mov
dec
mov
cmc    
mov
test
ljmp
xchg
add
adc
mov
cmpsb
mov
xchg
cs cmp
lds
fisubr
shlb
je
(bad)  
mov
mov
(bad)  
and
out
inc
in
fs dec
or
cmpsl
cmp
jnp
jne
leave  
dec
ss leave 
mov
mov
jns
or
xchg
adc
test
imul
call
ds cli 
iret   
ds dec
jo
subl
sub
or
mov
xor
push
inc
xchg
pop
rcrb
push
sub
test
imul
out
and
sub
jge
loop
cmp
cli    
fimul
int3   
lret
scas
dec
lcall
mov
sub
xchg
fild
leave  
and
subb
mov
loope
jb
loopne
or
mov
ret    
cmp
shlb
hlt    
rep lods
in
gs popf 
xchg
adc
ds ljmp
fistpll
xchg
leave  
ret
pop
xchg
mov
scas
xchg
cwtl   
jbe
popl
in
jge
stos
test
and
insb
or
fadds
movsl
cmp
andl
xchg
(bad)  
and
in
out
clc    
xchg
mulb
scas
popf   
jbe
in
jle
lods
in
adc
(bad)  
into   
popa   
xchg
decl
cmp
lock push
add
pop
dec
out
fsub
jg
add
push
jb
js
sbb
jg
jbe
icebp  
sub
cmc    
mov
sysexit 
add
pop
std    
mov
insl
sub
add
test
shrl
sbb
fcomi
sbb
pop
mov
adc
arpl
xlat
insl
in
cmp
sub
jge
cmp
into   
jecxz
sbb
int3   
paddusb
jns
lds
lds
cmpsl
repnz arpl
ret    
and
inc
push
aaa    
in
cmpsb
mov
sbbb
fistpll
aam
insb
jecxz
jbe
cmp
push
jecxz
sarb
and
out
jge
adc
xchg
mov
mov
lea
les
popf   
arpl
les
mov
mov
or
xchg
xchg
or
inc
and
jno
mov
test
dec
or
add
cmc    
in
dec
(bad)  
insb
pop
js
xchg
inc
loope
jae
out
adc
in
repz dec
jne
lret
jne
cmpsb
mov
std    
sahf   
cmp
ljmp
in
ljmp
sbb
mov
shl
sub
mov
mov
arpl
inc
test
or
ficompl
adc
jno
cmp
jp
mov
dec
pusha  
daa    
xor
pop
sbbl
push
adc
jp
xor
mov
push
nop
sbb
xor
inc
enter
mov
push
or
loopne
int3   
lcall
inc
imulb
cmc    
je
shrl
push
sbb
pop
cmpl
rol
sub
add
sti    
mov
cmp
pop
pop
clc    
mov
push
es loope
in
roll
sbb
gs xchg
cmp
fwait
cmp
cmp
cmp
push
push
mov
xchg
lcall
not
or
dec
and
lret   
in
push
inc
or
mov
(bad)  
test
cmp
rclb
pop
jl
mov
leave  
mov
add
dec
fs loope
rol
jl
hlt    
shrb
push
cmp
shlb
clc    
fdivr
mov
out
cli    
popa   
stc    
lock lahf 
or
scas
cmpsl
mov
shl
pusha  
jnp
out
fs test
iret   
push
daa    
jle
dec
jl
stos
int3   
ficompl
ret    
or
sbb
ds xchg
push
je
loopne
fwait
std    
push
or
inc
sbbl
sbb
xchg
out
aas    
bound
(bad)  
or
rolb
dec
test
mov
sub
cmp
push
jno
rorb
scas
xor
cltd   
iret   
sbb
ja
and
fsubrs
jge
aas    
lock bound
adc
(bad)
mov
dec
sbb
(bad)  
dec
icebp  
dec
push
cmp
iret   
jmp
data16 out
aad
rorl
xor
ss mov
cld    
or
pop
push
mov
outsb
arpl
mov
scas
lahf   
jg
or
push
and
cs push
jge
gs cltd 
(bad)
ss jmp
sub
inc
jnp,pt
loopne
cmc    
sbb
jo
cli    
fisubr
int3   
(bad)  
int3   
pop
fsts
cmp
cmp
push
test
idivb
xor
divl
imul
sbb
xor
ljmp
push
xor
repnz sub
ret
push
sub
and
sub
xchg
jle
loop
aaa    
xor
fistpl
into   
dec
or
add
cmovbe
push
pop
mov
and
insb
fisubrl
sub
sbb
rcll
jecxz
sbb
inc
xchg
sub
enter
jmp
out
and
sub
mov
int3   
(bad)  
adc
and
sbb
scas
pop
cmc    
dec
dec
inc
iret   
inc
push
mov
or
adc
rcrb
xchg
mov
les
mov
(bad)  
or
cmpsb
cmc    
pop
sahf   
cmpsb
xchg
jo
xchg
sbb
xor
in
pop
sbb
jecxz
xchg
(bad)  
imul
fildl
adc
lret   
data16 decb
mov
orl
dec
cmp
jno
xchg
or
mov
int3   
sbb
(bad)  
pusha  
mov
pop
fsts
xchg
mov
lret
rclb
ss jno
and
test
in
test
fwait
pop
pop
adc
scas
push
addb
dec
shll
js
movsb
mov
cmp
mov
aam
sub
stc    
movsb
add
int3   
mov
in
in
loopne
imul
test
xchg
je
or
fdivl
loope
(bad)  
xor
xchg
dec
lea
dec
lea
scas
movsl
jp
push
mov
push
jmp
or
test
jmp
cmpsl
cld    
loope
popa   
pop
mov
push
mov
insl
add
(bad)  
xchg
inc
test
jb
test
loope
out
mov
add
jg
add
sbb
(bad)  
mov
les
adc
mov
adc
or
pop
test
lods
jns
pop
pop
xchg
mov
hlt    
xchg
mov
(bad)  
(bad)
dec
adc
(bad)  
scas
aaa    
xor
sahf   
sbb
mov
adc
mov
in
(bad)  
negb
jae
(bad)  
xor
cmpsb
arpl
iret   
je
data16 xchg
frstor
call
lret
xchg
add
icebp  
jl
dec
mov
mov
xchg
and
(bad)  
jecxz
mov
or
lret
sub
or
lock loop
adc
lret
fnstenv
jge
pop
mov
jae
push
push
cmc    
pushf  
popa   
fwait
sbb
inc
addr16 hlt 
hlt    
pop
inc
imul
ljmp
dec
in
sarl
mov
mov
int3   
cli    
push
cmp
xor
mov
stos
call
sbb
jnp
pop
lahf   
dec
mov
clc    
fisubrl
add
bound
ret
jp
mov
jae
xor
sub
mov
mov
loopne
ljmp
adc
mov
cmpsl
out
or
das    
push
cmp
into   
sbb
bswap
repz adc
adc
push
gs
test
add
pop
or
out
sub
push
pop
fwait
and
in
cmp
xlat
aaa    
jle
into   
jne
adc
xchg
js
fs loope
xchg
jmp
test
and
imul
fistp
gs ja
xor
or
fcmove
out
xor
stc    
and
adc
add
cmp
sar
(bad)  
(bad)  
rcll
jb
cmp
lods
lock jecxz
mov
cltd   
pop
and
sbb
adc
loope
xchg
shl
outsl
(bad)  
inc
inc
aad
sub
sbb
dec
popf   
cmp
xor
pop
sahf   
in
lds
mov
sbb
and
rol
mov
fldenv
jo
xor
and
subb
repz cmp
popa   
dec
inc
fstl
push
pop
sbb
mul
add
xor
pop
insb
adc
cli    
add
add
js
repz mov
mov
adc
sub
sbb
cmpsl
push
pop
inc
mov
add
pushl
or
inc
in
xchg
lret
sbb
pop
in
cmp
out
mov
daa    
cmp
not
xor
cmp
test
or
(bad)  
js
cwtl   
fsubs
or
es push
pop
and
outsb
jb
adc
addr16 ret
sahf   
cmp
mov
aas    
xchg
or
rorl
enter
clc    
cmp
shl
(bad)  
andb
ficom
mov
jbe
fwait
mov
hlt    
push
shll
mov
es mov
in
or
add
push
adc
int
pop
mov
ficoml
shlb
out
pop
mov
jg
mov
lock push
shl
jmp
pushl
enter
cmp
out
mov
jg
add
enter
call
jp
mov
addr16 pop
out
sbb
pop
arpl
lea
add
and
ds sub
add
or
or
(bad)  
movsb
push
ja
lcall
adc
xchg
lods
loope
sbb
and
sub
pop
xchg
jl
stc    
push
push
pusha  
adc
test
ja
in
daa    
clc    
stos
dec
rolb
dec
xchg
inc
fmull
xchg
enter
lea
fstl
rolb
sub
nop
(bad)  
jo
test
ret
push
push
inc
dec
xlat
dec
mov
mov
in
xlat
vphaddbd
ja
xchg
push
les
arpl
cmp
pop
pop
adc
mov
add
fwait
(bad)  
mov
sbb
ret
inc
add
mov
or
lret   
dec
jno
add
push
jge
mov
mov
in
add
in
setne
xor
xor
gs out
sarl
insl
sub
sti    
jnp
ljmp
std    
negl
(bad)  
imul
lods
(bad)  
icebp  
mov
mov
mov
sub
out
sbb
mov
mov
fnstsw
fldl
jns
movsl
imul
hlt    
xchg
test
repz js
(bad)  {%k4}{z}
inc
inc
insl
call
pop
mov
js
in
stos
lock xchg
es mov
jl
lret   
jge
push
cmp
ss
mov
fdivs
sub
stc    
repnz stos
lcall
jo
lret
cmp
sbb
mov
(bad)  
push
scas
or
das    
inc
sbb
mov
(bad)  
lcall
popf   
push
add
xor
push
dec
adc
sbb
jmp
sub
xlat
mov
into   
mov
test
xor
lcall
pop
push
xchg
iret   
loop
hlt    
pop
adc
nop
push
mov
aas    
clc    
jle
sti    
or
test
push
fcom
cli    
jae
jp
jle
pop
mov
mov
int
mov
xchg
pop
dec
pushf  
scas
loop
mov
xchg
dec
xor
pop
scas
add
jge
jl
xorl
inc
aam
inc
test
adc
mov
mov
mov
in
xor
fwait
jnp
aaa    
test
rorb
mov
loope
cmp
lea
js
lds
xchg
dec
lea
outsb
icebp  
mov
stos
and
sbb
dec
(bad)  
(bad)  
outsb
fs sbb
sub
test
arpl
sub
cwtl   
popa   
movsb
push
cltd   
xor
pop
dec
xchg
push
pop
push
jnp
loope
add
addb
xor
mov
mov
mov
and
push
sbb
dec
adc
cmpsl
dec
xchg
jnp
jns
push
mov
push
inc
pop
insl
insl
sbb
sub
fsubs
aam
dec
enter
dec
mov
out
sub
popl
(bad)  
fdivl
cmp
xor
hlt    
(bad)  
aaa    
fcomp
mov
jmp
stos
nop
lret
dec
enter
xchg
jns
movb
xchg
ss scas
inc
jl
cld    
mov
inc
adc
ret
jo
out
imul
addr16 ret 
jae
int
pop
jecxz
daa    
inc
cmpb
dec
adc
sub
add
xor
or
insb
and
xchg
ljmp
daa    
int3   
sub
sti    
jg
pop
aas    
inc
pop
js
jns
fucom
cmp
mov
push
lods
out
(bad)  
(bad)
mov
mov
mov
(bad)  
cld    
mov
dec
scas
dec
test
gs jb
or
test
inc
and
inc
ljmp
or
fisttp
inc
push
sbb
mov
js
movsl
cmp
(bad)  
fadd
mov
push
imul
sbb
xor
cwtd   
jecxz
data16 jbe
push
sar
(bad)  
jae
xor
scas
xchg
fstl
dec
mov
mov
int
mov
test
push
pop
loop
pop
fist
andl
in
push
mov
lret   
js
notb
xor
cmp
in
sbb
dec
push
fst
sbb
dec
dec
pop
mov
insl
push
ljmp
pop
fimull
xchg
addr16 int3 
shlb
mov
pop
mov
cmp
push
xor
xor
mov
(bad)  
cmpl
inc
sbb
mov
insb
xor
pop
scas
stos
ficomp
mov
subl
xor
xchg
cmc    
jp
xor
jnp
das    
push
sub
pop
mov
mov
pop
in
fisttpl
(bad)
dec
xlat
xor
test
jo
or
or
cld    
mov
ret    
(bad)
adc
fdivrl
cmc    
or
les
sbb
lods
cmc    
into   
jns
or
ss mov
in
pop
pop
xchg
sub
add
xchg
mov
gs sti 
inc
psadbw
aas    
xor
add
push
fnstenv
push
ss
(bad)  
out
popf   
ds mov
ljmp
clc    
leave  
ljmp
push
aas    
jnp
push
das    
add
daa    
popa   
xchg
xchg
inc
mov
stc    
ljmp
fwait
je
mov
faddp
cmp
sub
mov
pusha  
lods
sahf   
aad
dec
setb
ss mov
iret   
addr16 pop
cmp
daa    
lahf   
xorl
subl
pop
add
mov
popa   
into   
dec
xchg
and
cmp
inc
setp
sbb
sarb
jp
jecxz
mov
cmp
(bad)  
push
out
xchg
fsts
or
lods
aam
popa   
push
cmc    
xor
pop
mov
dec
add
mov
int
rclb
jb
push
lods
mov
das    
mov
test
bound
jno
pop
lods
movb
andl
mov
push
outsl
jp
mov
sub
xlat
stos
ret
rorl
xchg
dec
push
imul
in
inc
and
fisttpll
fwait
mov
leave  
fstpl
ds and
or
mov
and
push
dec
rep movsb
movsb
cmc    
dec
out
in
jmp
loopne
adc
sub
dec
adc
cmp
ja
jle
jecxz
inc
fistp
mov
jns
and
sbb
push
fimull
icebp  
pop
mov
sub
(bad)  
mov
jecxz
pop
xlat
(bad)  
adc
add
loope
and
(bad)  
in
ffree
repnz lret
mov
inc
push
ja
test
test
fnstsw
mov
(bad)  
outsb
mov
pop
jne
(bad)  {%k4}{z}
sub
pop
adc
fisttp
arpl
call
repz ja
cmp
sub
inc
cmpsb
(bad)  
xchg
xchg
jl
(bad)  
fwait
ja
arpl
sbb
stos
outsb
in
orb
cs sub
mov
adc
rcr
push
pop
bound
xor
pop
or
je
mov
subl
mov
mov
push
adc
psubsb
in
jmp
inc
ret    
cld    
mov
cmc    
xchg
xchg
push
push
sub
into   
mov
mov
xor
jne
fistpll
(bad)  
xor
sbb
add
mov
cmpsb
xor
jbe
dec
cltd   
dec
adc
xor
(bad)  
lods
out
inc
inc
jmp
(bad)  
jecxz
int3   
or
and
add
pop
pop
dec
(bad)  
xor
out
cmpsb
xor
sub
xor
or
aad
push
adc
push
push
fmull
ja
fisubr
pop
mov
inc
dec
or
int
jge
sarl
mov
arpl
mov
jne
push
fs jp
or
xor
lods
fsts
dec
clc    
dec
(bad)  
cld    
lret
and
or
jmp
lret
outsb
mov
in
jb
and
xorb
add
daa    
divb
fprem1 
push
push
nop
mov
sub
xor
popaw  
pushf  
and
rol
xchg
(bad)  
cmp
sbb
fld
inc
cwtl   
xlat
test
mov
es dec
data16 sti 
cmpsb
jmp
insl
adc
icebp  
xor
sub
cs clc 
mov
sbb
or
sahf   
repnz push
call
(bad)  
loopne
dec
fs xchg
test
inc
das    
sahf   
sbb
dec
add
inc
or
push
outsb
pop
dec
xlat
(bad)  
mov
inc
lret
xor
data16 mov
adc
mov
mov
outsb
cs aas 
leave  
inc
out
or
scas
pop
xor
push
pusha  
mov
test
aam
mov
lret   
jge
rolb
inc
adc
sbb
lret
inc
cld    
pop
add
push
nop
(bad)  
or
xchg
inc
cmpsl
add
les
aam
mull
(bad)  
push
sbb
add
xchg
enter
repz sbb
mov
in
cs push
sub
(bad)  
lahf   
mov
jecxz
into   
inc
mov
and
push
xlat
mov
cmpsb
out
adc
negb
outsb
leave  
pusha  
lea
jge
popf   
mov
mov
jbe
out
add
or
stos
test
nop
fsub
icebp  
ss push
(bad)  
test
ja
jmp
or
push
cmp
pop
dec
into   
jg
push
jg
in
push
add
cmc    
in
roll
imul
cwtl   
leave  
sub
sub
jp
cmp
mov
cmp
sub
scas
movsl
icebp  
dec
add
fisttpl
lods
mov
clc    
inc
out
js
lret   
fcmovnbe
mov
fnstenv
es dec
lock add
aas    
into   
aam
xor
dec
push
aaa    
jecxz
dec
pop
dec
dec
in
fild
insb
xor
or
cmc    
lahf   
out
loopne
movsb
xchg
lret
pop
inc
loopne
iret   
and
jbe
lret   
dec
and
mov
push
movsl
shll
sub
ja
in
ljmp
xchg
inc
(bad)
(bad)  
stos
jbe
mov
addr16 jmp
mov
xchg
xor
enter
or
shl
sbb
and
(bad)  
or
stc    
sbb
into   
sbb
inc
loopne
inc
fnstcw
aam
adc
ficompl
add
ret
jne
xchg
mov
adc
or
movsl
dec
call
dec
xchg
rcrb
rcl
xor
out
mov
add
sub
xor
dec
add
or
dec
push
add
xor
cwtl   
xlat
pop
fiaddl
cmp
pop
pop
(bad)  
notl
add
ffree
mov
inc
push
insl
ja
insb
jb
mov
jp
out
bound
ffreep
call
mov
dec
add
push
shrb
mov
in
sahf   
(bad)  
scas
add
jmp
loopne
lods
mov
ljmp
in
jb
fs icebp 
pushf  
js
fidivrl
ds leave 
adc
out
sahf   
stos
int3   
cmp
add
xor
out
aam
mov
and
adc
pop
addr16
rcrb
test
pop
jmp
mov
popl
imul
add
lea
xorl
or
js
(bad)  
or
in
mov
add
xchg
dec
jge
dec
ljmp
xchg
movl
loopne
fdivl
inc
cmpsb
mov
mov
ret
push
mov
mov
and
movsl
jg
jle
outsb
call
aam
stos
(bad)  
mov
cmpsb
lods
adc
cwtl   
xchg
xchg
mov
pop
sbb
imul
jmp
and
mov
fwait
arpl
xor
mov
cwtl   
aaa    
cmp
dec
pop
add
mov
(bad)  
jns
shll
shl
rolb
xor
jl
xlat
mov
push
sub
jo
dec
adc
mov
cmpsl
cmp
in
idivl
test
xor
pop
xchg
les
fstpl
stc    
and
jge
into   
lock stos
scas
cmp
loopne
icebp  
adc
pop
push
xchg
leave  
push
pop
push
inc
dec
sub
out
lock imul
mov
call
mov
fisubr
pushl
cmc    
push
dec
movsb
enter
enter
xlat
ficom
lock ds push
(bad)  
sbb
loopne
mov
jns
stos
out
outsl
sub
pop
and
cmp
pop
scas
repnz and
popa   
enter
lock push
int
(bad)  
pop
add
imul
mov
xor
push
and
push
std    
(bad)  
aam
push
jae
(bad)  
movsb
mov
imul
mov
push
sahf   
push
faddl
data16
ss sbb
inc
adc
pop
xor
dec
orl
sbb
lods
cwtl   
cmp
mov
std    
xchg
adc
and
pusha  
xor
enter
add
mov
sub
sub
insl
cmpsl
sbb
cli    
test
(bad)  
ficomp
nop
xorl
aad
jge,pt
jmp
cmpsb
mov
jmp
pop
sbb
pop
add
(bad)  
mov
sbb
rolb
out
ja
push
lahf   
mov
fstpl
incb
xor
xchg
arpl
(bad)  
fisttp
pmulhw
push
xchg
stos
push
sub
adc
mov
adcl
jl
cmp
jmp
jecxz
movsb
stc    
and
inc
pushf  
jnp
push
mov
jbe
sbb
out
adc
int3   
pop
aaa    
dec
pop
daa    
icebp  
sub
leave  
jecxz
outsl
xor
push
ja
clc    
adc
sbb
ds adc
add
and
(bad)  
jae
inc
mov
stos
adc
hlt    
push
jmp
cld    
repnz mov
and
in
imul
jns
in
adc
push
inc
xchg
add
(bad)  
out
mov
cs cmp
add
jno
lods
cmpsb
inc
icebp  
or
mov
mov
xchg
and
xchg
test
adc
dec
imul
test
dec
push
add
pop
mov
arpl
pop
ficoml
adcb
lods
mov
inc
adc
gs pusha 
icebp  
sar
dec
lret   
jbe
aad
in
iret   
lods
in
popf   
pop
inc
add
adc
sub
ss mov
and
(bad)  
pop
loopne
mov
loope
aad
xorb
test
jp
pop
(bad)  
mov
dec
or
mov
outsl
inc
xchg
mov
add
icebp  
xor
outsl
sub
push
xchg
adc
gs mov
or
sub
repnz push
xor
jecxz
jns
adc
jge
cmp
movsl
pop
xchg
fcmovnb
jb
add
dec
mov
mov
add
cmc    
pop
xchg
jnp
clc    
adc
jo
jbe
cmpsb
imul
dec
(bad)  {%k4}{z}
clc    
lahf   
lods
mov
mov
and
sub
inc
test
ds
shrb
pop
pop
push
adc
in
pop
ficomp
xchg
mov
jg
icebp  
fnsave
sub
inc
pushf  
icebp  
xchg
pushf  
ljmp
js
inc
add
adc
add
push
mov
cli    
imul
add
or
mov
jne
scas
mov
mov
jl
push
push
test
xchg
(bad)  
mov
adc
clc    
pusha  
andl
inc
imul
inc
movsb
fistpl
test
loop
ljmp
(bad)  
mov
pop
jmp
dec
sbb
loopne
repnz iret 
ret
mov
daa    
(bad)  
(bad)  
mov
fdivr
fcompl
js
enter
mov
test
xchg
sbb
push
add
dec
mov
rolb
mov
push
insl
(bad)  
test
test
push
addr16 inc
inc
movsl
cld    
mov
jg
sbb
(bad)  
push
push
xlat
push
push
aas    
and
fucomi
out
das    
mov
cmp
loop
movsl
sbb
xor
jge
mov
and
xor
push
xchg
xor
jns
mov
mov
fstpt
sbb
xor
xchg
repnz sub
push
push
jp
cmp
pop
js
daa    
imul
push
movsl
jo
insb
dec
ret    
outsb
aas    
pop
pop
lahf   
ds or
mov
pop
jmp
out
inc
sub
add
jp
jmp
and
adc
repz jno
mov
dec
(bad)  
aad
std    
rcr
inc
inc
hlt    
rolb
in
push
push
loopne
xor
sbb
push
jmp
add
sbb
mov
mov
add
decb
inc
(bad)  
jmp
xor
stc    
add
sub
mov
jmp
dec
jmp
xchg
inc
in
push
fcomi
pop
pop
xchg
mov
or
sahf   
cwtl   
loope
jl
inc
inc
daa    
jecxz
icebp  
add
xchg
daa    
ljmp
iret   
aam
or
mov
pop
or
mov
(bad)  
jae
add
mov
mov
pusha  
ss and
mov
in
and
mov
mov
mov
push
movsb
xor
or
incl
imul
dec
test
popf   
(bad)  
in
loopne
or
mov
add
in
cmpsb
(bad)  
cld    
in
cmc    
add
cltd   
dec
pop
bound
push
mov
mov
arpl
mov
imul
lods
into   
inc
cmpsb
in
push
jmp
xchg
xor
loopne
scas
enter
adc
es jae
nop
dec
ja
mov
mov
sbb
add
add
inc
xchg
loop
icebp  
mov
inc
lock sti 
aad
and
test
pushf  
lret   
push
mov
mov
mov
por
mov
add
sbb
or
pop
jo
inc
mov
jo
out
or
lret
in
mov
mov
sbb
(bad)  
(bad)  
dec
mov
ljmp
and
sbb
roll
fistl
or
pop
movsb
xor
callw
fbld
(bad)  
jne
gs add
iret   
pop
fs push
adc
jg
ds pop
movsl
pop
cld    
lods
mov
mov
ret
js
imul
push
mov
pop
loopne
mov
stos
pop
lahf   
or
jmp
inc
cltd   
(bad)  
mov
icebp  
push
out
add
jne
inc
pop
aad
push
(bad)  
mov
jmp
cld    
xlat
in
mov
xchg
addr16 test
push
xchg
mov
cmpsb
jae
test
cmp
ja
negb
popf   
push
pop
cmp
std    
lock not
bound
mov
mov
es push
test
cmp
andl
or
pusha  
sbb
pop
popf   
mov
mov
loop
pop
add
cmp
ret
mov
sahf   
push
addb
cli    
leave  
or
pop
mov
fldcw
pop
loope
xor
sub
mov
inc
arpl
push
mov
fcoml
xchg
fwait
loopne
mov
jmp
xchg
fstpl
and
js
mov
cmp
ljmp
inc
xchg
sub
repnz push
pop
(bad)  
dec
int3   
xlat
test
jle
mov
insl
xor
inc
in
(bad)  
push
ret
jp
adc
(bad)  
repnz cltd 
movsb
xchg
rorb
js
dec
loop
into   
lahf   
push
(bad)
cmp
jle
xchg
gs mov
aas    
jl
add
je
sub
push
lds
bnd jg
pop
(bad)  
xor
inc
mov
ljmp
or
dec
sbb
add
cmp
bound
lock xor
fmuls
mov
push
les
in
insb
sub
fnstcw
push
hlt    
xchg
lret
fmuls
xlat
inc
and
add
out
mov
in
hlt    
lea
fsubrp
add
ljmp
ret    
ret    
ficom
div
in
mov
cmp
je
mov
daa    
out
je
mov
or
pushf  
mov
mov
sub
mov
jecxz
pop
jnp
test
aaa    
pop
(bad)  
xlat
xchg
dec
loope
(bad)  
(bad)  
pop
mov
fcompl
int
cmpsl
dec
xchg
mov
stos
fidivrl
nop
push
repz int
repz mov
push
cs inc
jl
cmpsb
mov
and
fs
hlt    
jnp
out
pushf  
aam
mov
test
mov
iret   
pushf  
in
mov
ljmp
ljmp
shr
sub
scas
add
add
aad
jb
jo
out
cwtl   
dec
push
sub
rolb
pop
push
clc    
sbb
add
xchg
lret   
add
js
push
(bad)  
push
ret    
xor
gs mov
sbb
add
imul
dec
rcll
in
sub
sbb
and
loopne
jno
aaa    
mov
mov
in
jbe
add
(bad)  
jmp
add
stos
in
test
movsb
mov
fisttp
inc
mov
ret
int3   
push
xor
dec
in
fcompl
daa    
dec
test
fwait
dec
push
sbb
fidivrl
sti    
inc
inc
push
cmc    
daa    
lods
lcall
fiadd
sub
movsb
jno
fstp
outsl
jg
or
sub
mov
sbb
jae
test
int3   
loopne
ja
push
mov
add
sbb
loope
jmp
inc
int
push
arpl
pop
dec
jae
pop
sbb
xchg
pop
in
xchg
jae
les
(bad)  
xor
pop
ficoml
cmp
inc
ss je
loopne
dec
imul
jae,pt
call
aam
shrl
std    
repz es lahf 
jae
inc
ss dec
cmp
test
adc
(bad)  
lods
cwtl   
mov
xchg
fisubrl
(bad)  
aad
je
loop
in
in
dec
fimul
dec
fstl
dec
les
adc
(bad)  
cmp
pop
(bad)  
aas    
insl
mov
aaa    
mov
int
fiadd
sub
iret   
add
jns
fimull
sub
push
xor
xchg
jp
in
in
ret    
adc
mov
lds
ljmp
mov
lods
lods
movsb
push
xchg
out
fwait
dec
xchg
nop
rorb
loopne
xchg
fsubp
mov
nop
rolb
movl
mov
ret
icebp  
dec
std    
jle
stos
jecxz
adc
(bad)  
dec
(bad)  
adc
fwait
mov
outsl
add
xchg
into   
mov
add
ljmp
mov
inc
inc
mov
fdivrs
std    
scas
in
mov
push
popa   
mov
ret
stos
push
cli    
je
ficoml
lret   
addr16 out
(bad)  
inc
es dec
jmp
sub
xchg
push
stos
push
mov
or
out
icebp  
sbb
mov
jle
repnz mov
sub
(bad)  
scas
mov
pusha  
jge
into   
mov
std    
pop
mov
xchg
icebp  
dec
push
imul
jg
xor
and
mov
in
jo
mov
mov
xchg
push
stos
movsl
dec
cs scas
insb
push
dec
cmp
push
aad
test
in
cmc    
(bad)  
push
cwtl   
push
xor
mov
dec
sbb
or
cs xchg
orl
loop
in
dec
mov
lods
inc
daa    
mov
hlt    
or
xchg
ret    
jp
in
dec
cmpb
lds
push
sti    
and
add
xor
jo
sbb
insl
leave  
aad
inc
call
fisubrl
cmpsb
sub
lea
push
adc
dec
adc
add
and
cmp
mov
xchg
sub
fdecstp 
push
mov
(bad)  
(bad)  
mov
mov
jns
xchg
mov
fistpl
in
add
repnz mov
(bad)  
ss cmp
nop
arpl
mov
jns
sub
and
cmpsb
icebp  
mov
mov
sbb
dec
shll
lock or
subl
(bad)  
adc
bound
adcl
lods
or
push
push
xor
push
(bad)  
negb
fstpt
pop
insb
sub
movsb
xor
mov
push
dec
sbb
pop
cmp
jb
mov
mov
outsl
sub
add
lods
and
mov
push
imul
mov
(bad)  
test
stos
out
adc
push
inc
scas
push
sub
in
or
dec
je
roll
imul
and
shl
fdivr
leave  
jle
hlt    
dec
mov
pop
iret   
sahf   
test
push
mov
jmp
mov
stos
mov
aas    
push
pop
imul
insb
sbb
(bad)  
cmc    
bound
arpl
test
cmp
mov
adc
faddl
lea
xor
aas    
lea
mov
add
jno
mov
or
jne
icebp  
or
icebp  
pusha  
add
mov
jle
lods
adc
pop
fwait
sbb
lcall
sbb
aad
(bad)  
jo
icebp  
cld    
pop
or
test
dec
xor
out
adc
add
push
loopne
out
and
rorl
sub
pop
mov
jo
adc
lcall
mov
mov
data16 xchg
mov
xchg
out
aas    
rcrb
xlat
out
push
movsb
adc
out
inc
and
hlt    
xor
push
out
pop
dec
in
aam
test
cmp
adc
gs mov
and
sbb
pop
punpcklwd
lahf   
push
or
in
(bad)  
mov
xor
loop
xchg
in
add
mov
clc    
jmp
adc
(bad)  
sbb
cltd   
add
repnz mov
push
xlat
jb
jae
int3   
cwtl   
das    
test
cmp
lret
pushf  
mov
sub
push
inc
call
int
push
repnz xchg
mov
jnp
sbb
cmpsl
xlat
push
es push
mov
sbb
cmc    
lret
hlt    
pop
in
xchg
xor
stc    
fldcw
sti    
mov
mov
mov
nop
push
inc
jge
(bad)  
(bad)  
lret
outsl
xchg
insl
pusha  
sbb
pop
cmp
pop
into   
jns
sbbb
(bad)  
jmp
rcll
aas    
test
xlat
sub
mov
mov
xchg
mov
mov
jne
repnz out
and
pop
xor
ja
mov
in
inc
mov
ret
cmpsb
or
jb
ja
sub
jl
daa    
mov
push
das    
add
push
dec
imul
dec
mov
sti    
lods
adc
jle
pop
adc
push
dec
or
jbe
push
lock sub
rcll
mov
mov
jns
jp
inc
push
xchg
(bad)
clc    
mov
fcmovbe
mull
repnz xchg
repz scas
xchg
push
or
xorl
imul
or
imul
adc
fidivr
pop
mov
enter
push
ret    
cmpsl
and
mov
xor
outsb
jg
std    
jmp
dec
arpl
outsb
jl
ficomp
fnstsw
cmp
loope
ret
fist
push
scas
stos
pushf  
imul
add
pop
sahf   
mov
xor
in
mov
inc
jecxz
push
sub
jp
and
dec
jecxz
dec
jg
mov
sbb
or
cltd   
jb
xchg
sbbb
dec
std    
xchg
jo
dec
xor
push
leave  
sub
mov
in
sti    
mov
or
sbb
mov
add
fwait
push
push
pop
sub
les
xchg
lcall
lods
bound
xor
or
cmpsb
push
lahf   
jge
sub
pusha  
cmp
fmull
fwait
scas
cmpsl
loop
dec
in
fwait
lret
jle
add
jg
jns
add
stos
push
push
adc
addr16 xchg
les
(bad)  
cmc    
inc
push
and
(bad)  
scas
mov
and
lock fist
call
add
jge
lock rcl
push
cmpl
and
inc
mov
dec
xor
nop
mov
popf   
mov
popa   
je
sbb
push
xchg
cmp
xchg
movsl
cwtl   
cmp
imul
jnp
stos
add
fdivl
inc
sub
outsb
pop
inc
sbb
imul
movsl
imul
inc
pusha  
insl
stos
xchg
mov
out
clc    
aaa    
add
rcrl
sbb
sbb
inc
mov
movsb
out
pusha  
mov
jle
js
fstps
xor
mov
adc
sbb
jmp
jmp
push
mov
mov
pushl
inc
and
call
mov
stos
pusha  
xchg
push
xor
repnz sub
fiaddl
pop
popf   
pop
mov
addr16 jae
fmull
jb
mov
xchg
ret    
sbb
movsb
lret
xchg
lcall
(bad)  
mov
gs mov
xchg
fwait
test
inc
cmp
adc
repz sbb
push
jns
stos
push
xchg
mov
(bad)  
icebp  
insl
bndldx
ja
inc
popf   
fcomps
lret   
mov
sar
push
negl
paddusw
push
idiv
mov
into   
sbb
fisttp
adc
dec
xor
lcall
test
jmp
pop
or
push
movsb
adc
xchg
adc
jmp
adc
test
xor
lods
and
cs push
rorb
je
lds
in
sbb
es in
test
cltd   
pop
xchg
adc
xlat
shrl
cld    
mov
roll
imul
div
sbb
into   
jo
jns
xor
xchg
das    
mov
adc
adc
iret   
jle
clc    
push
in
(bad)  
mov
cmpb
sbb
push
inc
leave  
loopne
fdivrs
mov
scas
lods
addr16 push
ja
icebp  
adc
jno
test
fcom
mov
ss popa 
adc
gs mov
xor
test
push
fwait
push
dec
inc
mov
mov
mov
push
mov
jb
orb
lcall
loop
pop
mov
(bad)  
sub
leave  
xchg
rclb
xchg
mov
jae
ss addr16 pushf 
or
mov
pop
xchg
pop
sbb
xor
jo
in
(bad)  
neg
xor
stos
adc
push
mov
fwait
test
inc
jle
aad
dec
sub
xchg
imul
cwtl   
loopne
jmp
adc
mov
ror
jnp
cmpsl
fisubr
in
add
lock or
test
outsl
pushf  
inc
mov
je
pop
lret   
mov
lahf   
rcrb
shr
fnstsw
add
dec
outsb
ret    
xor
sub
sbbw
mov
(bad)  
lret   
xor
rcrb
mov
dec
mov
test
jge
push
cmc    
mov
mov
pop
cmp
mov
mov
jl
pop
fisttpl
xchg
inc
add
xchg
fbld
stc    
int3   
mov
std    
je
cs std 
sti    
test
mov
imul
inc
jmp
cltd   
xlat
call
vprotq
and
int
adc
lods
or
fidiv
outsl
imul
sub
mov
push
jg
pop
xchg
add
addr16 es mov
push
push
out
and
cmpsb
dec
or
(bad)  
(bad)  
ja
inc
mov
adc
mov
ss das 
adc
(bad)  
mov
jg
push
pop
push
jb
lahf   
mov
pop
clc    
enter
cmp
cli    
fs push
leave  
adc
jne
and
cmp
(bad)  {%k4}{z}
sti    
mov
inc
jnp
fbld
inc
in
dec
aad
fdivrl
ret
aad
pop
mov
pop
out
cmp
inc
shld
lret   
jp
add
pop
dec
(bad)  
loopne
pushl
jg
lret
in
lea
xchg
add
mov
lret   
xchg
call
fldcw
sbb
pop
mov
(bad)
rolb
adc
mov
fisubrl
cwtl   
inc
sbb
cmovbe
push
pushf  
outsl
scas
fs je
clc    
cltd   
mov
inc
mov
lret
(bad)  
imul
sub
out
dec
and
loop
mulb
sub
nop
mov
or
adc
push
(bad)  
mov
dec
xchg
push
aam
pop
cli    
add
mov
div
sbb
into   
test
and
sub
xchg
inc
jnp
pushf  
das    
add
fucomip
sbb
mov
call
and
call
or
cmc    
push
adc
sbb
cld    
mov
stos
in
fwait
out
pop
aaa    
repnz mov
mov
xchg
mov
add
(bad)  
sbb
or
pop
add
pop
and
test
ficom
in
push
(bad)  
xlat
inc
in
test
imul
xchg
scas
ret
addl
aad
bound
jmp
pushf  
add
decl
sbb
lods
or
xchg
test
jp
pop
inc
cli    
cmp
aam
sub
das    
stc    
xor
imul
in
fwait
subl
test
dec
aaa    
jne
insb
cli    
loope
cmp
cmc    
ljmp
stos
lods
mov
sub
mov
out
outsl
push
cmp
sub
add
pop
mov
(bad)  
ret    
inc
sbb
es out
ja
mov
sub
jg
mov
or
sub
je
fstpl
add
xlat
clc    
test
sbb
sbb
xchg
add
lods
lahf   
dec
fdiv
leave  
test
js
push
cwtl   
mov
xor
stc    
xchg
repnz rcrl
xchg
sub
sub
fnstenv
fsts
lret   
and
jp
xor
sbb
stos
xor
hlt    
jecxz
movsb
cli    
push
adc
(bad)  
fdivs
xor
and
add
mov
orl
fdivrl
ret
push
add
adc
hlt    
(bad)  
mov
(bad)  
mov
loopne
inc
es add
dec
cmp
push
pop
dec
cmp
rclb
xchg
fs dec
lret   
mov
bound
inc
dec
ds jmp
test
cmpsl
jns
fistpl
mov
push
mov
sbb
inc
cmp
iret   
sub
sbb
mov
lock ret
out
xor
add
int3   
(bad)  
ret
fdivs
adc
repnz inc
jne
out
cld    
or
sub
inc
test
cltd   
push
push
adc
pop
pusha  
sti    
xchg
adc
bound
rorb
or
out
jmp
mov
or
jmp
push
icebp  
imul
imul
add
cmp
lods
loopne
mov
add
push
push
call
inc
(bad)  
lret   
sbb
adc
pop
sarl
in
leave  
nop
les
lods
pop
push
sub
sub
mov
popf   
and
inc
pop
aam
mov
mov
pop
add
fsubrl
shr
mov
sbb
sub
pop
repz imul
inc
mov
push
mov
and
lods
mov
push
xchg
adc
add
mov
nop
inc
leave  
lea
in
icebp  
out
push
stc    
mov
xor
jo
inc
into   
test
dec
(bad)  
shlb
xlat
repnz enter
jp
pusha  
inc
mov
cmpsb
stc    
rclb
sbb
into   
insb
stos
sbb
mov
(bad)  
jb
loopne
mov
out
push
push
sub
icebp  
movsl
sbb
fsubr
jo
mov
jge
or
ss
lock push
pop
into   
pop
cmp
adc
loop
push
bound
adc
bound
repnz imul
pop
sub
push
mov
insl
mov
call
mov
and
ficompl
jno
sbb
push
add
lahf   
loopne
insl
pop
lahf   
les
out
jp
icebp  
not
test
ret    
shrb
xor
mov
push
mov
pop
ljmp
lcall
bound
call
pushf  
xchg
jbe
or
aam
aas    
pop
push
out
add
or
mov
(bad)  
xchg
mov
(bad)  
out
mov
pop
jg
in
in
pop
cld    
call
stos
ret    
rolb
xchg
adc
dec
jge
out
pop
or
xor
fsubs
jge
ss push
adc
mov
and
imul
xchg
popa   
push
jge
mov
out
fstpt
loope
mov
je
pop
adc
lret   
cmc    
mov
cli    
outsl
cmp
sbb
lret   
movsb
jecxz
jns
ja
adc
adc
roll
cs out
test
movsb
out
call
mov
push
pop
inc
and
pop
(bad)  
fiaddl
rorb
xor
and
jbe
mov
arpl
cmc    
mov
add
shlb
aaa    
cwtl   
cmp
loopne
movsb
mov
and
mov
xchg
xchg
or
shr
mov
xor
jns
dec
jno
cli    
mov
push
cmpb
imul
lcall
aad
jnp
lods
movb
mov
ja
or
arpl
(bad)  
mov
pop
mov
popf   
xchg
fildl
lods
push
inc
addr16 out
mov
ja
int
cs ret 
in
and
imul
jmp
dec
jecxz
lods
or
or
int
and
sbb
sub
data16 cmp
repz push
es and
popa   
leave  
jl
(bad)  
je
pop
or
insb
dec
dec
push
fistpl
dec
lcall
xchg
ja
lret   
mov
aaa    
sub
mov
dec
or
inc
adc
ret    
mov
or
pusha  
aad
repnz inc
cmp
dec
mov
fidiv
dec
rorl
mov
add
xorl
lret   
pop
fdiv
movnti
cmpl
stc    
addl
jl
ljmp
fbstp
sbb
push
into   
sub
push
pcmpgtw
cltd   
jno
push
test
inc
sbb
pop
insl
std    
xchg
inc
repz popa 
mov
in
add
pop
xchg
lea
sbb
push
test
add
xor
cmpb
and
les
das    
ret    
cmpsl
adc
int
pop
sbb
popf   
push
jl
jbe
jle
sub
sbb
in
pop
dec
pop
lret   
jg
rcll
dec
pop
sub
je
sub
adc
sbb
mov
(bad)  
xchg
pop
mov
add
aas    
xor
mov
sbb
jmp
inc
dec
jo
xor
xor
xchg
jo
outsb
push
cld    
push
pop
mov
sbb
sbb
aad
(bad)  
repnz pop
imul
insb
xchg
and
cwtl   
adc
pusha  
xchg
and
cmpl
adc
cwtl   
test
idivb
fimull
cmp
lret
pusha  
hlt    
cmpl
movsl
pusha  
sbb
fisttpll
sbb
xchg
pop
lods
insl
sbb
jp
sub
mov
cltd   
testl
aas    
mov
cmp
cli    
cmpb
sub
xchg
test
push
fs stos
arpl
jle
adc
sub
jle
fisttpll
aaa    
imul
mov
inc
adc
and
xor
xchg
mov
loopne
mov
push
in
ret
lret
inc
dec
jg
inc
ret    
inc
lcall
or
push
nop
adc
call
insl
cli    
jl
xchg
and
or
cmp
and
in
or
shll
les
adc
shll
sbb
div
jp
xor
icebp  
bound
mov
push
dec
lods
fcmovbe
cmp
cmc    
jge
faddl
(bad)  
pop
aad
jg
push
sub
xchg
adc
popf   
cmp
add
xor
sti    
(bad)  
push
push
jecxz
adc
add
out
repz rcrb
cmp
xor
xor
lret
push
push
mov
add
je
outsl
ficompl
out
out
cwtl   
(bad)  {%k4}{z}
or
add
(bad)  
into   
pop
mov
faddp
pop
mov
insb
dec
popf   
in
test
shlb
jns
aad
inc
(bad)  
push
push
das    
(bad)  
icebp  
mov
loopne
repz std 
cmc    
dec
fisttpl
sbb
jae
out
inc
jg
in
loopne
mov
sti    
or
fstpt
xor
icebp  
shrl
push
js
scas
pop
dec
cmc    
push
pop
xchg
cmp
mov
push
jnp
cmp
subl
push
xlat
cwtl   
rcrl
loope
or
je
push
enter
fs mov
dec
ret    
popf   
mov
push
fbstp
(bad)  
or
scas
adc
push
in
push
fwait
and
fidivrl
pop
iret   
stos
sahf   
lods
loope
or
mov
ljmp
mov
ljmp
popf   
shrb
dec
inc
pop
adcl
ja
push
addl
mov
popf   
jne
sbb
outsb
stc    
hlt    
mov
das    
xchg
push
andb
(bad)  
outsl
add
sbb
pop
jl
sbb
fnop   
jge
pushf  
dec
movsb
mov
dec
cmp
addr16 imul
push
push
adc
std    
int3   
cli    
and
add
dec
(bad)  
lret   
roll
popw
or
scas
and
xor
sub
insb
cmpsb
into   
mov
inc
sub
inc
pop
push
ret
into   
mov
je
in
add
scas
(bad)  
into   
sbb
rcr
clc    
rorl
sbb
scas
aad
add
fdivrl
mov
push
rolb
mov
xchg
mov
jno
stos
pusha  
loopne
fsts
jmp
incl
sbb
xchg
or
fdiv
jecxz
sub
gs inc
sbb
outsl
push
push
insl
cmp
int
pushf  
ret
fbld
xchg
nop
stos
loopne
movsl
lcall
setae
jbe
sub
movsb
or
jmp
jecxz
xlat
ds adc
sbb
sahf   
ljmp
je
add
ret
es inc
popa   
sbb
mov
lods
lret   
fs faddp
scas
inc
push
test
mov
arpl
xchg
hlt    
pop
sbb
enter
sarb
notl
out
jp
mov
repz in
xor
cmp
aaa    
mov
cmc    
or
add
add
dec
inc
scas
inc
pusha  
(bad)  
or
add
add
(bad)  
(bad)  
(bad)  
incl
add
add
add
add
add
add
jns
je
insl
cs inc
jb
ja
outsb
addr16 sub
push
gs jb
imul
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
xor
data16 aaa 
xor
fs xor
add
adc
gs insl
cs inc
jb
ja
outsb
addr16 cs inc
imul
add
popa   
je
pop
add
add
add
add
add
lsl
add
jno
add
add
or
or
add
or
add
add
add
dec
or
add
add
(bad)  
and
add
add
inc
dec
inc
add
mov
or
popa   
add
jo
pop
jae
add
ret    
add
push
ret    
add
outsl
test
add
cmp
push
push
test
or
jmp
das    
xchg
rcrl
fisttpl
or
add
insl
mov
pusha  
cmp
dec
fs pop
adc
xor
mov
test
push
mov
sub
lahf   
in
cmovo
stos
add
sbb
sbb
ficom
xor
in
fbld
xchg
xchg
push
das    
and
(bad)  
or
fisttp
popa   
pop
lret
std    
shrl
xchg
(bad)  
fild
adc
add
and
inc
pop
jns
outsb
bound
mov
pop
aad
pop
adc
push
lcall
pop
movsl
pop
pushl
lock test
popa   
pop
mov
mov
jmp
lds
(bad)
out
xchg
loop
fidiv
push
inc
orl
ljmp
mov
(bad)  
dec
(bad)  
(bad)  
std    
push
pusha  
std    
inc
mov
add
sub
jno
icebp  
cmp
or
ret    
stos
clc    
inc
sahf   
mov
mov
push
fsubrl
in
dec
insl
xchg
in
inc
dec
bound
out
adc
add
cld    
and
aad
sbb
ss aad
mov
push
mov
movsl
add
jl
cmpsl
xor
or
hlt    
mov
xchg
cmpsb
popf   
jnp
lret   
add
xlat
mov
fldpi  
insb
push
mov
pop
push
pop
jl
lcall
dec
scas
aam
testb
movsb
or
loopne
xlat
js
loop
out
mov
jns
sub
push
out
cmp
and
mov
in
lret   
xchg
cmpsl
push
lock pusha 
add
lret
insl
add
call
das    
mov
in
jb
xchg
xor
mov
(bad)  
dec
fbld
jmp
sbb
rorl
mov
push
iret   
push
inc
loope
and
pop
stc    
pop
mov
popf   
orb
or
(bad)  
xchg
inc
cmpsl
mov
in
dec
test
mov
xchg
imul
ss inc
push
adc
xchg
fildl
mov
mov
imul
lods
in
js
mov
imul
or
pop
cmpsl
sbb
fidivl
ja
xchg
pushl
hlt    
cmp
aad
xchg
jns
and
in
fucomp
rcl
mov
outsl
mov
in
ja
icebp  
or
mov
cltd   
push
dec
xchg
cmp
subb
lcall
jnp
inc
push
fldl
popf   
aas    
arpl
sub
lods
jl
adc
fcomp
int
lea
xchg
icebp  
xchg
pop
pop
ja
xchg
out
daa    
(bad)
push
jae
sbb
cmp
jp
outsb
scas
pop
cmpsb
fs loope
pop
pop
(bad)  
gs iret 
jmp
pushf  
cmp
add
xlat
cmc    
xor
mov
mov
cmpsl
std    
sub
hlt    
cmpsl
cmp
sahf   
and
and
ret
loop
xchg
lret   
adc
and
pop
inc
pop
mov
sbb
push
or
mov
jae
mov
into   
popa   
pop
fisub
push
jae
or
aam
insl
sbb
inc
mov
outsb
adc
mov
out
aam
inc
push
in
outsb
jns
mov
mov
addr16 popf 
cmp
push
ja
mov
ret    
enter
cmp
sub
fwait
sub
subb
rorl
lea
jno
insl
jmp
dec
jbe
outsb
outsb
inc
sbb
and
mov
loop
pop
stc    
mov
push
je
iret   
sub
js
inc
mov
inc
xchg
jno
or
imul
out
cmc    
or
mov
push
ss pop
repnz insb
xchg
adc
xchg
cs sub
inc
iret   
stos
insl
mov
adc
out
mov
push
adc
popa   
and
icebp  
fsubrs
movsl
fisubr
int
outsb
cld    
dec
(bad)  
(bad)  
add
push
mov
es mov
stos
jae
lods
add
clc    
(bad)  
fmul
xor
outsl
or
scas
dec
cs pop
mov
pop
fisubrl
jl
push
mov
mov
push
test
dec
std    
ds nop
or
pop
stos
cmp
and
xor
mov
mov
inc
inc
jl
mov
jl
xchg
test
inc
or
shll
xor
xchg
push
(bad)  
sbb
cmpsb
int
js
ror
dec
bound
pop
in
xchg
jle
sub
add
pop
fs inc
movsl
pusha  
int3   
cmp
flds
push
pushf  
rclb
repnz pop
(bad)  
nop
pop
iret   
cmpl
pushf  
or
iret   
cmp
jle
jbe
mov
loop
xorl
(bad)  
or
sub
(bad)  
push
clc    
scas
test
leave  
in
xchg
sar
out
mov
rclb
dec
fsubrs
movsl
movsl
stos
push
das    
fbld
in
pop
insb
test
mov
mov
xchg
dec
jnp
add
les
stos
cmp
(bad)  
dec
push
faddl
or
mov
mov
in
imul
or
mov
mov
(bad)  
lcall
lds
arpl
mov
xchg
push
jo
gs sbb
pop
int3   
mov
push
push
or
cwtl   
push
xchg
jmp
clc    
aam
gs
lcall
jbe
inc
mov
adc
or
mov
(bad)  
inc
jo
xchg
mov
ret
mov
and
mov
cs xor
sub
xchg
in
call
adc
pusha  
mov
xor
mov
insb
fwait
sub
xchg
add
cli    
pop
insl
jnp
mov
sbb
and
push
(bad)  
mov
sub
es addr16 mov
fidivr
test
mov
lcall
mov
inc
testb
int3   
arpl
testb
mov
in
js
inc
(bad)  
arpl
adc
stos
loope
inc
sub
sbbl
mov
push
int
ja
fidivrl
or
pushl
cmp
ljmp
arpl
(bad)  
dec
xlat
addr16 nop
inc
das    
mov
or
xchg
jl
pop
fnstcw
sahf   
scas
addr16 fst
cmpsl
pop
out
mov
mov
clc    
pop
pop
add
dec
lock mov
fwait
xor
dec
aaa    
js
sbb
xor
inc
call
pop
or
pop
mov
popf   
gs mov
outsl
xchg
jae
push
imul
xor
ja
arpl
shrb
andw
adc
push
cmp
dec
iret   
mov
mov
sbb
mov
repnz rolb
mov
cld    
movsl
or
mov
sub
fcoml
out
fmul
das    
popf   
std    
es push
out
sub
and
mov
daa    
pop
stos
sub
daa    
les
ret
jbe
jbe
lods
xor
add
js
vpmaddwd
popf   
or
jp
sbb
xchg
(bad)  
icebp  
inc
test
jbe
(bad)  
int
and
mov
jp
pop
fwait
sbb
ret    
mov
fsubr
jbe
pop
pop
cmc    
popf   
mov
xchg
push
mov
mov
stc    
push
pop
adc
push
sbb
push
mov
sbb
ret
fsubrs
inc
lea
cmp
jnp
inc
test
sahf   
inc
cmp
cmpsl
adc
out
mov
test
pop
mov
dec
cmp
outsb
in
fiadd
daa    
sub
add
stc    
pop
bound
sub
je
push
loop
sbb
arpl
bound
jge
or
ss add
nop
adcl
mov
push
data16 jo
cmp
loopne
in
int
xor
fwait
push
les
sbb
jne
mov
sub
(bad)  
or
rcll
imul
cmp
rorb
ja
insb
jg
push
stos
jmp
(bad)  
jmp
push
lds
fs pop
fucomip
nop
fldt
incl
mov
cmp
fistpl
add
inc
xor
test
nop
xchg
inc
(bad)  
push
movsl
cmp
int3   
lods
xor
fstps
imulb
xorl
sbb
push
(bad)  
into   
xchg
mov
cld    
and
cmp
das    
add
ret    
fs mov
mov
sub
xlat
mov
or
dec
jp
outsl
fwait
sbb
inc
adc
out
(bad)  
call
cld    
or
nop
scas
jo
pop
loopne
movsl
fimull
jp
ficompl
aad
bound
(bad)  
ja
add
aam
and
add
cmp
shrl
add
jnp
xchg
lock dec
movntq
out
cli    
and
mov
pop
pop
jb
dec
sbb
popf   
movsb
div
sbb
je
sbb
fwait
in
push
xor
jge
push
pop
test
push
(bad)  
pop
jmp
sti    
lock aaa 
add
push
movsb
push
inc
data16 lahf 
cmp
aad
(bad)  
lcall
test
enter
cli    
mov
icebp  
popa   
adc
loopne
lahf   
mov
jo
adc
jg
into   
clc    
pop
les
jnp
xchg
test
mov
adc
or
mov
sbb
mov
cmpsl
repz cs enter
mov
add
add
add
into   
fyl2x  
into   
out
fisub
icebp  
and
data16 jae
mov
lahf   
lock sbb
push
jg
sub
icebp  
jns
and
and
xchg
aam
pause  
arpl
and
icebp  
mov
leave  
dec
jmp
xor
popf   
add
mov
adc
leave  
push
sar
push
cmp
cmp
pop
xchg
cmpsl
jbe
xor
adc
and
cmp
mov
jle
aam
in
mov
xor
sbb
lahf   
std    
add
jnp
cli    
lods
hlt    
orb
add
mov
push
push
lret   
push
fistp
imul
test
sub
lock cmp
push
lea
pop
int3   
fbld
add
xchg
testl
icebp  
push
jl
aad
aad
pop
xor
cmp
mov
mov
loopne
push
inc
jae
ss pop
outsb
mov
add
sbbb
out
push
(bad)  
jo
paddd
rcl
and
adc
outsb
pusha  
mov
sbb
mov
inc
(bad)  
stos
loop
fidivl
pop
inc
add
paddusb
popl
icebp  
stos
scas
movsl
mov
sti    
(bad)  
nop
sbb
or
cmp
pusha  
push
decl
hlt    
scas
and
cmp
xor
push
mov
adc
sbb
ret    
mov
xchg
mov
xchg
fdivl
clc    
iret   
and
sub
or
add
jae
jle
inc
xlat
inc
or
sbb
out
and
cwtl   
sub
ret    
cmp
dec
ljmp
sub
nop
(bad)  
paddsw
and
lods
inc
enter
mov
xchg
mov
xor
sbb
pop
popf   
inc
int3   
inc
push
pop
jge
pop
xchg
and
lods
push
cmp
les
add
inc
rorb
(bad)  
fwait
icebp  
mov
adc
mov
push
add
jp
add
std    
add
(bad)  
lock fs scas
fmull
inc
(bad)  
xor
imul
or
rclb
into   
push
jl
mov
je
in
clc    
repz pop
xchg
movsl
lret   
leave  
push
mov
and
lods
push
dec
xchg
mov
jp
lret
mov
cmc    
jp
or
in
jecxz
popa   
movsb
(bad)  
jle
adc
in
mov
jb
sub
mov
dec
pop
inc
gs imul
lcall
mov
loop
cld    
mov
(bad)  {%k4}{z}
hlt    
adc
arpl
(bad)  
lods
test
xchg
out
and
imul
popf   
in
rcrl
push
jge
mov
pusha  
inc
cmp
inc
fild
and
sub
mov
and
sub
push
fisttpl
fwait
sub
ds in
clc    
andl
jnp
repz rolb
(bad)  
jg
and
xor
sbb
pop
pushf  
mov
fcmovb
inc
movsl
xor
out
(bad)  
lahf   
adcl
std    
lret   
lahf   
sbb
push
xor
and
cmc    
rorb
pop
dec
cld    
add
push
xor
lcall
jecxz
dec
sbb
(bad)  
push
xor
hlt    
mov
jp
mov
mov
push
pop
in
hlt    
push
ljmp
xor
push
and
movsb
sahf   
pusha  
clc    
sti    
outsb
lret
hlt    
inc
or
pop
dec
movb
fistp
leave  
fbstp
xor
jg
sbb
add
or
xlat
xor
cltd   
mov
cwtl   
cmp
xor
int
push
popf   
push
or
mov
sub
ja
int
not
pushf  
add
mov
out
jne
adc
lea
jmp
out
pusha  
subl
(bad)  
std    
mov
(bad)  
int3   
scas
jae
sub
pop
add
xor
cmpsb
fistpll
imul
inc
inc
mov
jae
add
xor
cmp
hlt    
pop
add
test
push
(bad)  
icebp  
test
inc
inc
pop
or
cmp
std    
mov
jmp
xor
jle
int3   
jmp
rorb
pop
jae
pop
int
pop
xchg
mov
int3   
inc
(bad)  
xor
cmp
push
loopne
(bad)  
xor
cmp
sbb
ficompl
push
rol
cmp
dec
mov
dec
add
add
push
push
mov
cmp
test
push
in
jns
add
stos
xchg
mov
jns
mov
or
pusha  
sbb
loopne
cltd   
fnstsw
arpl
js
mov
gs ret
push
cs icebp 
shlb
imulb
sub
xchg
xchg
fbstp
xchg
out
mov
mov
addl
fiadd
sar
push
dec
inc
or
mov
(bad)  
pop
pushf  
xchg
and
dec
and
in
(bad)
add
sbb
mov
push
scas
or
dec
jp
mov
test
xchg
out
movb
mov
cmpsb
in
es pop
cmpsl
ret
lds
cmpsb
sbb
sbb
lods
es jge
mov
cmp
inc
cmp
jbe
sbb
int3   
hlt    
sarl
cwtl   
cmpsl
lahf   
rclb
or
add
add
sbb
mov
jle
imul
add
inc
fsubs
push
dec
mov
jbe
sub
lods
add
shrl
mov
cmpsl
ficoml
push
add
(bad)  
mov
push
inc
fldcw
or
nop
scas
scas
fisubl
cs add
inc
sti    
jo
xor
dec
inc
aad
enter
mov
inc
lret
jno
lret   
roll
xor
lea
jmp
addr16 das 
cmpsb
xchg
bound
loopne
nop
cmp
and
fiadd
xlat
and
loop
xor
and
jl
(bad)  
fsub
jle
stos
xor
popf   
push
xor
cmpsb
pop
cwtl   
sbb
and
sti    
outsl
test
mov
daa    
outsl
lods
mov
icebp  
mov
lea
mov
jo
mov
add
xchg
fs dec
sbb
out
je
xchg
mov
inc
in
(bad)  
repnz lcall
inc
cwtl   
pop
cmp
rcrb
daa    
dec
adc
les
jbe
mov
test
xor
lret
mov
fwait
pop
data16 je
xor
sub
je
and
in
mov
pop
roll
out
jmp
loop
popf   
in
pop
jo
inc
js
repnz nop
pushf  
add
pop
(bad)  
mov
mov
mov
jb
cmpsl
stc    
(bad)  
jmp
pop
adc
lock fidivr
(bad)
(bad)  
leave  
enter
inc
aam
das    
movb
pusha  
sbb
fs adc
imul
xchg
push
cmp
(bad)  
aas    
rcrb
sub
mov
and
add
fcmovu
xor
adc
cmp
std    
and
es aaa 
ret
je
nop
sub
jmp
push
(bad)  
push
int3   
lcall
rep movsl
das    
or
xor
js
test
in
dec
jecxz
cwtl   
ljmp
(bad)  
mov
push
pushf  
sti    
mov
jo
repnz adc
pop
ret    
loopne
mov
data16 fwait
cwtl   
lods
jno
lahf   
xor
mov
xor
cmp
out
lret   
sub
inc
mov
adc
adcb
pop
(bad)  
pop
xor
hlt    
mov
sbb
dec
scas
roll
jbe
xchg
mov
int3   
sub
(bad)  
flds
mov
jbe
jg
cmp
ljmp
mov
in
inc
push
sbb
mov
xchg
std    
fstpl
outsl
mov
push
dec
hlt    
pop
xor
cwtl   
push
mov
push
add
xchg
fildl
mov
xlat
push
cmp
or
sbb
das    
out
xor
out
aas    
mov
mov
js
jl
lods
bound
jge
mov
xor
cmc    
and
push
outsb
xchg
cmpsl
mov
and
xor
lret   
jecxz
xchg
test
adc
adc
sub
pop
inc
(bad)  
adc
sbb
sub
imul
(bad)  
cmp
aam
adcl
movsb
(bad)  
xchg
fdivl
scas
into   
out
xchg
jge
out
or
fcom
xchg
jmp
add
pop
mov
insl
push
out
xchg
sub
lods
adc
dec
fwait
das    
add
dec
add
stos
rcrb
sbb
cmpb
cmp
jae
xor
mov
repnz rolb
lret
ret
insb
jno
jno
jae
mov
aaa    
mov
and
add
aam
pop
push
jbe
ret    
shrb
cmpsb
push
push
jns
in
scas
and
cmp
arpl
pop
pop
sub
mov
inc
mov
or
mul
adc
dec
cmp
mov
inc
(bad)  
negb
outsb
scas
inc
aad
pop
lahf   
test
movsl
push
aas    
jae
lods
jmp
popf   
icebp  
fs in
mov
pop
sub
sti    
dec
test
shr
pop
inc
cmpsl
js
jbe
add
push
jmp
(bad)  
(bad)  
push
fwait
jb
(bad)  
std    
stc    
aad
iret   
stos
fs loope
and
and
aaa    
mov
add
add
or
lods
vpshlb
lcall
xchg
dec
repnz pushl
(bad)  
ja
lds
das    
out
sbb
xor
lods
sub
adc
xor
xlat
test
xorb
mov
mov
add
mov
adc
pop
movsb
xchg
jae
sub
insl
scas
insl
cs mov
pop
mov
iret   
push
adc
push
fisubr
fnstcw
lock mov
(bad)  
xchg
mov
xor
aad
mov
imul
adc
mov
cltd   
fucom
out
add
movsl
push
push
rcl
pop
mov
mov
add
dec
pop
mov
icebp  
cltd   
fld
aam
sub
pop
ja
rcrl
sub
(bad)  
outsl
(bad)  
jecxz
outsb
fsubs
mov
jge
decb
data16 fiadd
gs loopne
fwait
repnz sub
add
dec
mov
es inc
xor
iret   
or
fsubl
cwtl   
pop
cmp
push
out
jmp
je
inc
sbb
stc    
mov
push
scas
push
push
fidivrl
mov
cwtl   
inc
push
adc
fwait
repz leave 
jecxz
pop
mov
pop
cmc    
into   
arpl
mov
aam
xor
inc
out
movsb
mov
mov
add
movsb
testl
aad
sbb
pop
push
inc
xorl
fistp
popf   
movsl
dec
pop
sub
cmp
jnp
or
repz inc
adc
sbb
mov
mov
mov
in
adcl
xorb
jmp
sti    
inc
nop
out
stos
test
rol
pop
repz dec
xchg
arpl
jnp
movsl
loop
push
clc    
test
sub
scas
add
ja
outsb
cld    
cmp
or
cmc    
cmp
or
sbb
xchg
cmp
lret
test
and
nop
xor
in
jb
incl
sbb
rorb
arpl
(bad)  
and
mov
pop
test
add
jmp
and
negl
(bad)  
fidiv
dec
jp
popa   
inc
or
add
mov
mov
orb
sub
xlat
mov
lock icebp 
(bad)  
faddl
hlt    
jne
in
pop
and
lods
insl
(bad)  
jae
loope
bound
lds
out
jbe
(bad)  
in
cmc    
sbb
mov
sbb
(bad)  
jne
and
(bad)  
adc
sbb
cmp
popa   
pop
sahf   
add
rcrl
(bad)  
pushf  
(bad)  
xor
js
add
dec
jg
mov
add
in
pushf  
jno
sub
call
mov
mov
push
stos
adc
aam
aad
xlat
inc
faddl
cmpsl
mov
shrb
pop
sub
fisttpll
sbb
and
push
outsl
ret
lea
and
dec
dec
and
mov
or
mov
outsb
cs
cmp
mov
mov
mov
add
and
adc
andl
ljmp
mov
std    
sti    
inc
lahf   
sub
jle
sarb
mov
pop
jae
(bad)  
xchg
outsl
loop
xchg
cmpsl
movsb
cmp
xlat
xchg
add
adc
mov
ds xchg
out
icebp  
add
xchg
(bad)  
mov
inc
mov
lret   
pushf  
out
(bad)  
push
and
add
(bad)  
pop
hlt    
add
dec
scas
loope
stos
sbb
push
std    
xchg
test
push
js
loop
mov
or
jmp
in
fnstcw
in
and
out
push
dec
inc
outsb
cmp
jg
das    
shll
(bad)  
ret    
inc
std    
pop
or
stc    
stc    
scas
cmc    
jecxz
or
mov
popf   
cs iret 
outsl
xor
sbb
mov
mov
jns
lret
mov
lret   
mov
push
out
imul
js
sbb
sub
aad
jbe
lds
jmp
mov
lods
cwtl   
mov
and
cli    
sub
repnz pop
pop
imul
mov
sbb
inc
cmp
sub
loope
(bad)  
push
jno
sub
in
mov
sub
pop
cmovne
push
xorl
push
stos
add
stos
iret   
nop
gs mov
push
nop
cmp
and
mov
out
sub
xor
inc
(bad)  
xor
cmpsb
jmp
jnp
and
fadd
push
push
popa   
out
js
jge
shlb
mov
mov
fwait
add
pusha  
(bad)  
xchg
lock gs cmc 
sti    
shll
lock icebp 
jae
push
or
xor
fs dec
xchg
pop
sti    
sub
mov
imul
dec
sub
pop
xor
ds ljmp
sbb
jle
inc
mov
(bad)  
stos
add
fwait
or
add
jne
xchg
mov
in
inc
lret   
outsl
in
in
mov
mov
lods
addr16 jne
push
repz fcoms
or
adc
sbb
add
cmp
mov
insl
and
loopne
fisttpl
inc
js
movsb
inc
fucom
movsl
(bad)  
or
loop
pop
sub
inc
or
imul
dec
xchg
leave  
mov
test
icebp  
(bad)  
call
leave  
fstpl
stos
stc    
rorb
mov
or
mov
xor
icebp  
mov
stos
inc
mov
scas
int
movl
cli    
jo
js
cld    
shr
dec
je
ljmp
fs jecxz
cmpsb
cmp
nop
push
loop
jnp
std    
cmpsl
or
jnp
lahf   
adc
test
leave  
cwtl   
add
dec
rcll
jmp
mov
lret
iret   
aaa    
ljmp
fnstsw
jecxz
ret    
data16 loopne
test
and
in
fisubr
(bad)  
mov
insl
push
jb
dec
sarl
(bad)  
lock add
sub
nop
mov
js
es scas
nop
cmp
push
cmpsb
xor
adc
jl
nop
mov
pop
adc
aam
lret
sub
cmp
inc
xchg
pop
jmp
xchg
test
mov
(bad)  
es popf 
cltd   
push
jae
insb
pop
fstl
(bad)  
stos
dec
pop
gs jns
out
ret
daa    
jecxz
aas    
fsubs
insb
arpl
adcl
insb
in
js
in
lods
mov
jo
jno
out
xor
push
xor
sub
mov
sbb
insb
jp
roll
cmc    
push
pop
scas
mov
mov
(bad)  
loopne
xor
mov
inc
dec
mov
neg
pop
pop
xchg
add
adc
lret   
xlat
je
push
jecxz
(bad)  
popf   
les
mov
btsl
test
push
pushf  
mov
cwtl   
not
push
ret    
fisubrl
aaa    
loop
and
stos
mov
daa    
or
xlat
(bad)  {%k4}{z}
in
or
inc
inc
xor
(bad)  
fldenv
inc
mov
dec
mov
in
cmpsl
test
fisttp
add
out
xor
jmp
into   
pusha  
sub
add
push
xor
imul
sbb
xor
enter
push
movsb
lahf   
popw
mov
xor
jb
jmp
aad
mov
test
enter
mov
push
add
or
les
aam
lcall
in
jge
cmp
pushw
inc
mov
lahf   
fist
mov
js
jmp
orb
and
push
pop
sub
push
cwtl   
cmp
ja
push
(bad)  
lds
and
xchg
insb
std    
sbb
out
xchg
lret
jo
add
xchg
inc
divl
dec
inc
jbe
inc
inc
mov
out
pop
cmpsb
or
addr16 in
icebp  
mov
addr16 jge
movl
add
test
loopne
fsts
pop
push
rolb
cmp
lret   
loope
xchg
std    
daa    
popf   
jae
dec
ret    
cltd   
jnp
call
cmpsl
mov
xchg
cmc    
ret
call
jg
adc
(bad)  
ret
pop
(bad)  
xor
push
das    
xchg
sbb
in
pop
add
push
xchg
insl
pop
(bad)  
jg
shrb
(bad)  
(bad)  
mov
jg
sub
jne
adc
into   
inc
jecxz
lea
movsl
inc
push
incl
cmpsl
add
leave  
aam
aas    
in
cmp
mov
push
xor
xchg
xor
add
adc
imul
repz mov
pop
leave  
inc
ja
mov
adc
data16 icebp 
jns
fild
adc
inc
bound
rorl
imul
ss int
xor
sti    
mov
add
inc
adc
pop
push
xor
xchg
lcall
leave  
mov
jp
cld    
iret   
mov
mov
jbe
dec
xchg
sbb
adc
and
inc
xchg
cmc    
push
scas
mov
shl
ss mov
leave  
mov
(bad)  
push
add
xchg
mov
xchg
out
shlb
shrl
cmp
outsl
imull
sub
(bad)  
mov
dec
mov
mov
mov
(bad)  
xor
and
jge
jecxz
jbe
mov
adc
ljmp
mov
fist
data16 rclb
movsl
inc
mov
ss pop
jmp
movsl
push
mov
loopne
add
cmp
pop
(bad)  
mov
popa   
shrb
or
loopne
fdivrp
sbb
popf   
fldl
jle
mov
push
repnz mov
dec
insb
mov
fstps
mov
jecxz
lea
jl
pop
pop
in
cmc    
stc    
mov
fcompl
sub
pop
xor
(bad)  
ret    
or
popf   
push
mov
mov
and
mov
xor
mov
sbb
mov
rcrl
jge
mov
test
fistl
pop
pop
movsb
or
cmpsb
leave  
cmpl
pop
inc
adc
inc
fs or
xchg
(bad)  
cmp
out
xchg
(bad)  
xor
or
cwtl   
xchg
and
cltd   
cmpsb
jge
mov
inc
test
mov
xlat
mov
mov
jnp
fwait
icebp  
or
mov
(bad)  
lods
push
mov
jecxz
push
(bad)  
movsl
in
addb
dec
(bad)  
mov
mov
clc    
int
dec
xchg
inc
pushf  
(bad)  
fstpt
lcall
rorl
ret    
sub
bt
dec
mov
xchg
ret    
(bad)  
mov
inc
jo
aas    
pop
and
push
cmp
inc
imul
test
fstl
xchg
and
mov
ret
pop
jno
cs dec
ss aas 
add
jl
push
mov
cmp
add
mov
sti    
pop
pop
imul
or
aaa    
xor
mov
cli    
cmpsb
sbb
dec
mov
xchg
jle
mov
pop
arpl
cmpsb
rolb
aaa    
mov
icebp  
pop
in
mov
arpl
or
xchg
mov
fwait
icebp  
sti    
adc
fsubr
xchg
out
pop
hlt    
xchg
push
xor
nop
sub
mov
push
js
repnz lock sahf 
sub
xchg
scas
adc
or
cltd   
mov
popa   
cmpsl
or
sbb
push
in
nop
sbb
fsubs
gs mov
in
lret
inc
mov
fcmovne
dec
inc
dec
push
inc
xchg
push
iret   
dec
leave  
ds or
bound
(bad)  
jbe
(bad)  
faddl
sub
pop
sbb
adc
mov
jp
mov
call
add
fmuls
je
in
call
and
jno
cmpl
cmpsl
cmp
and
xchg
fstpl
add
hlt    
pop
mov
pushf  
lock pushf 
cmp
and
xor
jne
fidivrl
pop
repnz fsts
dec
pop
cmp
insl
xchg
adc
aad
movsl
int3   
loopne
loopne
ret    
jge
mov
lods
gs and
lahf   
inc
test
xchg
movsl
stos
ret
int3   
inc
inc
push
sahf   
xchg
cmpsl
push
out
frstor
imul
test
test
jg
push
sub
leave  
add
or
mov
fsub
repnz push
sub
jb
dec
arpl
inc
inc
ja
loope
daa    
and
iret   
call
sub
or
popa   
sarb
and
inc
cmp
jno
and
movhps
sbb
dec
push
xor
mov
sub
cmp
sub
jns
fstpt
push
mov
and
mov
aas    
inc
das    
mov
jle
xchg
scas
pop
ds mov
ljmp
or
jae
cmpsl
push
jns
aad
adc
pusha  
add
pop
add
adc
in
and
mov
sub
ja
lods
pop
sbb
mov
cmp
aad
xor
push
sub
data16 clc 
stc    
jnp
imul
or
xor
mov
mov
cmpsl
daa    
icebp  
push
pop
clc    
loope
or
pop
jl
lret
js
data16 cmpsb
out
xchg
pop
sbb
mov
mov
mov
mov
mov
or
cmp
fwait
stos
add
and
stos
stos
insb
adc
mov
aaa    
sahf   
xchg
bound
jne
into   
cwtl   
iret   
pop
pop
inc
xchg
fildl
push
jae
in
stos
enter
movsl
rcr
das    
lret
scas
sti    
inc
xor
inc
adc
or
jb
pop
or
cmp
stc    
outsb
sub
adc
rorb
imul
adc
adc
test
and
push
sahf   
popf   
mov
insl
data16 cld 
ja
xor
insb
add
cmpsl
(bad)  
cmc    
and
insb
gs cmc 
movsb
imul
or
cmc    
stc    
pop
into   
ja
cmp
dec
sti    
arpl
out
push
lods
mov
mov
mov
fs jp
mov
fidivl
lock xchg
push
loope
cmc    
push
jg
sbb
push
adc
sub
and
aad
add
add
in
add
inc
push
mov
hlt    
mov
daa    
mov
sub
(bad)  
scas
dec
enter
fildl
mov
xchg
repz lcall
sub
jg
jmp
cmp
aad
int
or
daa    
mov
mov
cmp
cmpsl
loop
mov
nop
add
stc    
sbb
jecxz
mov
lahf   
iret   
into   
movsb
sarl
imul
aam
push
and
cmpsb
roll
mov
pop
pop
jae
adc
(bad)  {%k4}{z}
into   
pop
adc
test
aam
ret    
cwtl   
cmp
push
(bad)  
loope
es cs lcall
mov
arpl
rorl
(bad)  
lret   
sub
pusha  
bound
and
mov
data16 je
enter
repnz cmp
(bad)  
hlt    
mov
mov
mov
into   
popa   
les
jb
imul
lds
stos
dec
dec
and
scas
jbe
mov
and
(bad)  
es mov
add
push
sub
rol
dec
(bad)  
lock push
and
imul
not
push
or
or
dec
mov
scas
movsl
xchg
jo
dec
in
mov
rol
xor
push
ja
xchg
cmp
leave  
imul
jmp
fdivs
sbb
cmc    
mov
push
mulb
jbe
gs add
pop
mov
inc
cmp
js
lret   
fucomp
ja
mov
cs push
mov
jno
movsl
mov
pop
(bad)  
sar
decb
xchg
xchg
xchg
daa    
sbb
mov
rclb
xchg
add
outsl
or
test
xchg
sti    
notl
sub
imul
or
push
js
hlt    
add
clc    
push
inc
inc
movl
arpl
int3   
push
adc
sub
call
fistpll
(bad)  
lods
fldl
dec
push
jl
pop
mov
cmpsl
stc    
mov
adc
dec
sbb
ficompl
iret   
sbb
mov
add
jecxz
nop
sub
pop
adc
test
cltd   
mov
ret
add
mov
scas
and
les
mov
pop
xor
stos
add
into   
xchg
dec
ds push
outsl
mov
xchg
jbe,pn
nop
adc
mov
mov
pop
xor
and
cli    
bound
add
stos
or
das    
xchg
stos
inc
addl
mov
gs dec
pop
sahf   
(bad)  
loopne
inc
popa   
xchg
notb
mov
cmp
and
mov
inc
hlt    
subl
ficom
push
xlat
ja
and
test
sbb
mov
mov
mov
rcrl
adc
jo
mov
adc
mov
les
pop
push
and
fwait
(bad)  
lock pop
out
cmp
cwtl   
loopne
mov
call
decl
sbb
dec
mov
(bad)  
push
pop
push
xchg
into   
cwtl   
sbb
xor
stc    
lcall
out
int3   
cmpsb
mov
or
fcomps
add
nop
test
(bad)  
jno
adc
jmp
jg
out
adc
sahf   
bound
lds
dec
jge
enter
(bad)  
sub
mov
pop
lret
jb
sbb
mov
xchg
mov
fnsave
aad
and
xchg
dec
jl
mov
(bad)  
push
nop
cmp
inc
and
xchg
mov
fmul
adc
adc
orl
scas
nopl
add
(bad)  
pusha  
or
fldt
inc
sub
mov
cmp
movsl
xchg
mov
iret   
cwtl   
dec
xchg
adc
lds
dec
or
sbb
sub
push
lods
dec
data16 sti 
xchg
out
std    
sub
test
inc
lds
adc
rorl
jg
xchg
(bad)  
xchg
(bad)  
jb
add
in
cmc    
xor
mov
out
lcall
jnp
inc
add
dec
sbb
rorl
bound
add
call
inc
gs
lret
mov
loope
loop
jle
xchg
pop
ret    
cld    
mov
int3   
inc
xchg
pusha  
adcl
out
fwait
mov
jns
sbb
jb
dec
ret    
jnp
pop
xchg
addr16 test
xchg
aaa    
movsb
sbb
jmp
adc
js
(bad)  
xor
sub
cmp
dec
sub
xor
popa   
test
(bad)  
xchg
xchg
(bad)  
sti    
xor
xchg
out
repz out
js
xchg
in
mov
outsl
push
enter
out
in
xchg
xor
(bad)  
cmp
sti    
icebp  
jo
cmp
fild
jbe
xchg
mov
les
scas
out
ficompl
mov
stos
cmpsb
jnp
add
sahf   
cmp
add
or
(bad)  
sub
sti    
xchg
jl
ds scas
push
hlt    
dec
dec
ret
sub
xchg
push
add
mov
out
lods
jg
dec
fldl
xor
test
rolb
setg
pop
cmp
in
pop
fcoml
int
sbb
lahf   
xor
mov
pop
stos
sub
pop
and
xchg
inc
mov
xchg
sub
and
movsb
(bad)  
jecxz
and
test
stc    
clc    
shr
add
pusha  
push
mov
xchg
push
(bad)  
adc
inc
mov
pop
in
arpl
cmp
dec
jne
sbb
scas
adc
dec
inc
scas
and
cld    
inc
jno
adc
mov
mov
popa   
add
nop
push
rcll
pop
or
sbb
insl
kmovw
and
push
js
std    
inc
ja
in
addr16 push
or
xor
sbb
inc
or
out
lods
mov
lret
shll
mov
out
ds push
ret    
out
test
add
pop
enter
sbb
out
inc
cli    
shr
out
adc
pop
les
xor
sub
imul
inc
(bad)  
(bad)  
int3   
mov
(bad)  
test
sbb
into   
lret   
jge
in
cmp
adc
jle
es jmp
in
jbe
or
jp
int
or
inc
in
mov
add
ret    
add
out
pop
sub
lods
jno
(bad)  
jo
mov
mov
sahf   
fldenv
add
dec
addl
jne
leave  
call
fsubrp
das    
mov
mov
jo
jbe
sub
call
xchg
fimull
js
aaa    
xchg
scas
popa   
lea
inc
stc    
icebp  
sub
les
jne
out
ljmp
addl
in
int3   
lahf   
add
int
or
sub
xchg
inc
imul
fdiv
insl
dec
into   
inc
ret
cmp
or
add
push
out
pop
inc
jno
pushf  
dec
and
sub
pop
sub
leave  
mov
ficom
jo
movsb
inc
mov
sbb
enter
jl
xchg
add
gs das 
test
and
dec
scas
push
lret   
mov
in
pop
repnz add
loop
or
int3   
pop
inc
mov
cmp
(bad)  
repz add
out
not
mov
outsl
or
shlb
adc
out
ss insb
push
sbb
add
test
or
cmp
sub
leave  
pop
xchg
pop
jns
gs xchg
add
push
mov
pop
mov
jo
and
cmp
and
mov
or
movsl
xor
or
(bad)  
pusha  
add
cmp
ret
rolb
fcomps
jl
sbb
and
inc
ss cmp
mov
xchg
movsb
movsb
inc
lret
jae
mov
test
adc
or
pushf  
dec
cmp
imul
scas
(bad)  
std    
add
jne
xor
in
pop
and
rcrl
pushl
push
and
sub
movl
leave  
hlt    
lea
stos
lahf   
mov
rolb
mov
mov
lea
jmp
aam
cmpsb
(bad)  
lret   
(bad)  
(bad)  
shl
dec
sahf   
mov
sub
adc
cmp
cmp
pop
push
lret   
mov
jns
push
popf   
jo
outsb
cli    
lret   
fwait
scas
sbb
jbe
jmp
repz mov
movsl
andl
js
xlat
movsb
sti    
mov
lret
add
stc    
or
mov
negb
or
out
daa    
xor
scas
ror
xchg
adc
dec
xor
sub
mov
jecxz
out
push
mov
adc
xor
lock xor
push
mov
test
push
fucomp
cmp
sub
inc
addl
cld    
popa   
push
rolb
imul
addl
cs pop
dec
scas
fisub
add
add
xlat
mov
faddp
mov
adc
test
int3   
xchg
or
clc    
lret   
mov
insl
jle
cmp
xchg
mov
movsb
cmp
enter
xchg
clc    
push
xor
testb
fstpt
cmp
pushf  
pop
cmpsl
push
xchg
(bad)  
div
fwait
add
jecxz
stos
adc
sub
imul
sbb
(bad)  
or
pop
(bad)  
sarl
push
shl
xor
adc
rclb
add
int3   
in
popa   
rcrl
ja
in
fimull
or
pushf  
jecxz
or
lcall
or
in
xchg
cmovge
mov
lcall
je
adc
cld    
(bad)  
cmp
xor
lods
sub
push
inc
pop
mov
cmpsb
scas
(bad)  
pop
adc
mov
(bad)  
lret
mov
or
inc
push
mov
pop
adc
push
fidivrl
sahf   
das    
sbb
xor
adc
jle
mov
int3   
movsl
push
movsl
add
into   
repz iret 
add
sbb
ss ja
outsb
jge
inc
and
xchg
push
test
das    
pop
pop
cmp
mov
movb
pop
loope
fidivl
scas
sbb
xchg
js
insb
jne
jmp
es pop
(bad)  
daa    
dec
xchg
xchg
fadd
cmp
insl
mov
in
fwait
mov
add
pop
test
sub
and
in
xchg
mov
sub
into   
mov
std    
(bad)
push
xchg
push
sbb
mov
cmp
ss jnp
stc    
and
adc
push
pop
repnz mov
push
ret    
test
enter
arpl
push
inc
and
leave  
and
out
daa    
push
jae
into   
and
add
add
sbb
pop
(bad)  
aam
test
xor
cmp
mov
and
ljmp
fdivs
push
cmp
(bad)  
ja
sbb
cmp
(bad)  
out
gs lret
sahf   
mov
xor
pop
or
fadds
repz testl
inc
mov
xchg
in
mov
ljmp
nop
mov
and
rol
test
push
in
bound
fldl
aas    
fstpt
mov
dec
loopne
jge
clc    
daa    
xchg
sbb
test
in
mov
jge
ds aaa 
mov
mov
jnp
add
call
lods
rolb
enter
test
(bad)  
daa    
mov
cmp
dec
lds
pop
or
aam
dec
out
mov
ja
hlt    
in
push
add
jnp
xchg
xor
es jbe
fimul
push
ja
cmp
xchg
jecxz
dec
jl
es push
and
ret
pop
pop
jae
sub
dec
movsl
pop
push
xor
in
(bad)
(bad)  
inc
mov
cmovno
jbe
dec
pop
xor
or
adc
cmpsl
stos
push
std    
sbb
loop
std    
nop
int3   
out
pusha  
cltd   
xchg
mov
aam
jne
ds test
sub
in
xchg
out
and
(bad)  
cs mov
(bad)  
les
pop
fs inc
cmp
(bad)  
into   
ljmp
jne
roll
addl
idivl
push
mov
out
(bad)  
lock scas
inc
mov
scas
int
xor
mov
aam
ljmp
mov
dec
pusha  
inc
insl
cmpsl
lret   
inc
outsl
icebp  
rclb
push
adc
xor
fistl
add
xor
push
hlt    
xchg
push
das    
push
imul
adc
xchg
sub
jbe
push
sti    
mov
pop
push
add
dec
das    
mov
cmpsl
mov
or
cmc    
loopne
push
pop
xorb
fstps
dec
hlt    
loop
cld    
fisubrl
add
add
(bad)  
ret    
movb
dec
xchg
mov
fs adc
rclb
adc
into   
xchg
pop
mov
in
arpl
push
pop
stos
nop
adc
push
nop
or
push
jmp
cwtl   
ficomp
das    
out
cmp
ret    
jnp
mov
jecxz
mov
and
out
mov
lds
mov
cmpsl
fidivrl
mov
loope
xor
mov
lea
sbb
roll
pop
mov
aam
sbb
mov
inc
imul
sbb
loope
dec
and
fdiv
lea
outsb
popf   
lcall
lods
xor
icebp  
xor
popf   
xchg
imul
xchg
es xchg
jns
imul
(bad)  
and
shrb
adc
les
xchg
outsl
fst
cmc    
xor
decl
jnp
pusha  
test
(bad)  
mov
push
push
movb
add
or
push
xlat
aas    
mov
jl
pushf  
sti    
sarl
rorl
xchg
bound
xchg
mov
sub
movsb
push
jge
pop
sbb
pushf  
dec
imul
decl
xchg
add
inc
gs ss dec
sub
xchg
loop
shrb
or
push
add
or
jns
pop
cmp
xchg
jae
clc    
jg
je
stos
dec
mov
sbb
adc
sub
push
(bad)  
and
aad
icebp  
rcl
sti    
push
adc
or
jb
(bad)  
bswap
cld    
jbe
pusha  
sbb
pop
jo,pt
outsl
mov
lea
xchg
mov
inc
or
lods
xchg
arpl
push
lods
sbb
jmp
sub
ljmp
adc
and
add
dec
js
pushf  
push
loopne
fwait
dec
cwtl   
adc
add
pop
(bad)
mov
pop
stos
(bad)  
jbe
push
aad
addr16 mov
popa   
out
stos
mov
dec
ret
scas
sub
push
mov
nop
mov
pop
scas
pop
lahf   
aaa    
jb
in
rol
pop
cmp
and
add
and
cwtl   
lea
daa    
sub
mov
rcll
scas
push
arpl
lret   
data16 stos
movsl
imul
aam
add
xor
xor
xchg
pop
mov
ljmp
fdivrs
sahf   
(bad)  
call
jl
and
ret    
xlat
cmp
aam
inc
pop
pushf  
repnz
movsb
pop
dec
aam
or
daa    
cmc    
add
(bad)  
sub
sub
push
sub
test
pop
add
gs icebp 
cltd   
push
jecxz
pop
jns
push
aaa    
test
in
pop
add
add
data16 xorb
fnstcw
push
addr16 bound
pop
dec
call
jecxz
cltd   
xor
iret   
repz lret 
cmovno
cmp
iret   
mov
bound
mov
(bad)  
mov
mov
ljmp
xchg
push
adc
mov
pop
add
xor
fidivl
in
or
imul
fimul
fbstp
jge
dec
mov
lds
ss
lret   
hlt    
mov
jns
arpl
mov
jns
mov
popa   
cmp
push
cmc    
mov
jecxz
int3   
jns
mov
sub
test
add
lods
into   
cmc    
ror
repnz clc 
mov
push
scas
gs test
add
sbb
add
xchg
push
(bad)  
mov
sub
out
pusha  
adc
mov
dec
sbb
fmull
and
pop
hlt    
sub
(bad)  
repz mov
dec
jp
js
ja
test
push
test
add
lret
das    
xor
xchg
in
cwtl   
fcom
add
mov
xchg
mov
rolb
syscall 
test
hlt    
pushf  
and
or
adc
mov
movsb
xor
test
ds or
stos
(bad)  
xchg
fdivrl
or
loopne
call
mov
fldenv
(bad)  
or
xor
xor
leave  
jg
loope
mov
ret    
mov
movsl
push
sahf   
arpl
xchg
or
test
pop
cmc    
sub
push
cld    
pushf  
into   
cmp
dec
xchg
test
outsl
xchg
popf   
pushf  
push
push
dec
movsl
cwtl   
xor
leave  
xor
inc
int3   
or
dec
adc
sbb
dec
lret   
(bad)  
jmp
mov
or
cmpsb
mov
adc
or
xchg
sub
mov
(bad)  
xor
xchg
in
sarl
cmp
lea
lahf   
in
in
mov
les
and
jno
fcompl
lahf   
rclb
(bad)  
cmp
je
insl
bound
sub
cwtl   
call
(bad)  
mov
mov
cld    
sbb
add
sbb
xor
mov
into   
sub
jl
dec
adc
fcoms
cs inc
js
and
jg
ror
jo
bound
jne
jno
clc    
stos
or
sbb
adc
inc
mov
sub
push
cmp
or
push
add
xor
push
pop
popf   
add
ja
js
testl
xor
adc
mov
clc    
mov
in
xchg
jle
dec
pop
aad
std    
sti    
int3   
mov
xor
cmpsl
and
lret   
sbb
shlb
stos
call
mov
xor
gs test
pushf  
fmuls
loop
mov
pmulhrw
movsl
mov
pop
out
and
gs std 
andl
rcrl
adc
fistpll
jae
pop
xor
mov
cmc    
xlat
inc
pop
daa    
mov
dec
adc
ss std 
scas
mov
add
arpl
rcrl
mov
push
(bad)  
lock mov
and
inc
aas    
pushl
out
lods
pop
loopne
cwtl   
jb
sub
mov
dec
out
hlt    
movsl
add
cmp
into   
movsl
fnstcw
mov
cmpsb
push
add
fdivrl
out
lods
insb
sbb
mov
js
gs mov
cmpsb
adc
lcall
sbb
add
stos
mov
sti    
test
xchg
mov
hlt    
mov
rep outsl
pop
dec
aam
xor
stos
sub
call
push
orps
cmc    
mov
ljmp
add
ljmp
movsb
out
out
adc
jp
repnz mov
pop
mov
sbb
pop
repnz sti 
xor
(bad)  {%k4}{z}
lds
outsb
or
mov
sbb
or
mov
cmp
cs push
mov
cmpsl
aaa    
or
enter
fwait
jb
push
ljmp
shlb
push
add
jno
movb
pop
sub
clc    
ss or
xchg
pop
dec
std    
mov
lahf   
pop
aaa    
lods
jnp
fwait
sti    
xchg
and
xor
sbb
rorb
lea
xlat
(bad)  
sbb
nop
dec
push
mov
cmpsb
jg
jb
add
cmp
xor
in
jns
movsl
int3   
cmp
add
arpl
fcoms
loope
xchg
clc    
jg
sahf   
arpl
fwait
out
mov
push
arpl
decb
shrl
add
inc
mov
dec
add
add
mov
push
push
scas
and
movsb
in
stc    
sub
push
add
negl
inc
mov
ficomp
mov
xchg
add
dec
in
lahf   
xlat
mov
stc    
int3   
mov
jle
int
je
lds
add
cs cmp
or
pop
movb
push
int3   
fs dec
mov
push
xchg
mov
mov
movsb
jle
lret   
xchg
(bad)  
mov
test
cmp
cmpl
mov
xchg
mov
add
(bad)  
addr16 lret
xchg
mov
iret   
jnp
push
pop
inc
inc
and
sbb
icebp  
push
inc
loopne
imul
bswap
ret    
add
movsb
aas    
outsb
shr
dec
daa    
cmp
test
inc
jp
fs jge
clc    
fldcw
stos
out
mov
sub
idiv
mov
(bad)  
rorl
jo
push
imul
mov
repnz cmp
or
mov
and
mov
movsb
dec
js
or
inc
or
fsubrs
lret
mov
clc    
lea
(bad)  
fsts
cmp
and
push
adc
inc
shrl
insl
cld    
popa   
push
pusha  
std    
mov
pop
rcrl
outsl
jno
test
std    
ret    
mov
imul
popa   
sub
mov
push
inc
lods
and
scas
out
push
push
ja
fcoml
push
ja
and
imul
enter
cmc    
arpl
and
jo
xor
push
jl
inc
cmp
(bad)  
mov
add
xchg
call
loopne
hlt    
mov
cli    
lret
(bad)  
sub
cmpsl
ret
cmpsb
push
sbb
inc
push
mov
mov
js
cmp
mov
jge
sbb
jnp
fcmovne
inc
idiv
adc
imul
int
cmp
jg
push
push
out
sti    
ds inc
sbb
mov
dec
sbbl
add
pop
(bad)  
(bad)  
mov
(bad)
pop
fsubs
(bad)  
insb
add
and
adc
nop
ss mov
dec
push
pop
scas
fsubr
fmuls
lods
int
mov
mov
fs jbe
sub
nop
inc
mov
(bad)  
jns
mov
iret   
xlat
lahf   
mov
cmp
fisubr
loope
into   
cmc    
or
and
sbb
adc
inc
mov
sarb
orb
mov
xor
repz jge
(bad)  
movsb
ds insl
xchg
dec
addr16 dec
in
mov
ret    
bound
cwtl   
jo
dec
inc
hlt    
add
shlb
adc
mov
adc
pop
mov
vcomisd
pop
push
jns
jmp
sub
aam
or
movb
movsb
sbb
pop
and
xor
lods
mov
leavew 
jp
add
dec
pop
stos
xchg
mov
lret
and
xchg
mov
stc    
add
shl
pop
fdivs
iret   
mov
xchg
andl
mov
loope
mov
fwait
and
lret
cmc    
sbb
rorb
mov
insl
push
cld    
mov
cltd   
jnp
fsts
sub
lcall
lahf   
rcrl
or
or
fstpl
jo
xlat
(bad)
adc
and
dec
adc
push
ret
rcrl
cltd   
test
dec
repz loop
xlat
mov
std    
and
stos
lret
subl
mov
pop
add
stos
mov
push
jp
stos
dec
cs sub
repz enter
fisttp
jbe
or
sub
(bad)  
cmp
scas
out
cmp
sub
test
inc
scas
push
arpl
lea
mov
mov
test
push
jecxz
fnstenv
fwait
lret
add
jg
testb
lret
mov
movsb
jno
jg
fs adc
mov
add
push
sbb
out
test
xlat
adc
jnp
(bad)  
shrb
insb
fsubl
mov
sub
inc
shrb
xchg
jl
push
mov
test
addr16 es push
xor
and
aad
xor
cmp
or
add
rcll
jae
(bad)  
xchg
lret
and
das    
insl
cli    
mov
jl
lock sbb
lods
dec
mov
out
inc
jle
mov
jbe
or
test
fs rol
div
push
(bad)  
jae
cmp
data16 mov
adc
adc
popa   
mov
inc
and
push
push
push
(bad)  
xor
pop
ret    
lea
aad
int
xlat
pop
sub
pop
or
sti    
cmpsb
xchg
add
stos
outsl
dec
shrb
or
add
outsl
add
mov
mov
stos
sub
mov
fs sti 
mov
stc    
movsb
mov
fwait
mov
xchg
jns
push
mov
fild
pop
loop
add
xchg
add
sub
fisub
add
outsl
mov
push
lods
icebp  
test
imul
data16 cmc 
pop
hlt    
gs dec
flds
stos
jl
cmp
and
loop
(bad)  
ds in
ljmp
enter
rcrl
cltd   
orl
(bad)  
cld    
ret    
movb
lock adc
pop
aaa    
mov
mov
xchg
ficomp
mov
rolb
je
add
xor
push
cltd   
data16 sbb
call
int3   
outsl
hlt    
mov
inc
inc
and
jg
xchg
jecxz
jmp
mov
mov
loop
outsl
out
mov
(bad)  
or
jge
leave  
pusha  
dec
scas
inc
pop
mov
cli    
cli    
dec
add
xchg
lods
pushf  
in
(bad)  
cli    
mov
inc
dec
xlat
push
jge
sub
loop
sahf   
adc
cltd   
addb
movsl
mov
jo
sbb
add
dec
inc
dec
inc
scas
inc
pusha  
(bad)  
or
add
add
(bad)  
(bad)  
(bad)  
incl
add
add
add
add
add
add
jns
je
insl
cs inc
jb
ja
outsb
addr16 sub
push
gs jb
imul
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
xor
data16 aaa 
xor
fs xor
add
adc
gs insl
cs inc
jb
ja
outsb
addr16 cs inc
imul
add
popa   
je
pop
add
add
add
add
add
lsl
add
jno
add
add
or
or
add
or
add
add
add
dec
or
add
add
(bad)  
and
add
add
inc
dec
inc
add
mov
or
popa   
add
jo
pop
jae
add
ret    
add
push
ret    
add
outsl
test
add
cmp
push
push
test
popf   
cltd   
add
push
jns
cmp
fimull
andb
push
xchg
sbb
pop
jmp
pop
ljmp
pop
push
mov
mov
mov
add
scas
pop
das    
gs jp
fwait
outsb
add
mov
xchg
push
insb
bound
dec
jno
mov
in
callw
lahf   
xchg
add
cmp
push
jecxz
cmpsb
add
pop
(bad)  
aam
sbb
and
imul
mov
ret    
es mov
testl
test
and
dec
jmp
mov
lods
jmp
sub
add
sub
fldcw
cmp
adc
out
push
(bad)  
mov
jae
adc
imul
push
or
aad
xor
mov
cmpsl
(bad)  
fistl
popf   
arpl
jecxz
push
push
inc
jo
and
adc
fxch
jnp
pop
int
cmp
imul
adc
movsl
ret    
icebp  
add
sahf   
pusha  
int
cld    
xor
out
out
sbb
outsb
test
out
jg
pop
dec
inc
mov
stos
cmp
mov
outsb
pop
fisttpll
scas
jbe
xchg
loop
jmp
mov
sbb
cs xchg
fwait
jnp
xor
sbb
imul
xchg
cli    
pop
jae
mov
loope
lret   
roll
inc
add
inc
mov
roll
mov
xchg
lahf   
call
roll
jno
out
xchg
cld    
(bad)  
hlt    
dec
ret    
popa   
pop
jae
adc
icebp  
fwait
sub
jae
loopne
ret    
mov
sbb
ret
pop
xor
jns
mov
shr
out
xchg
test
and
fcom
loopne
cmp
pop
push
jmp
mov
fsubl
out
ret    
jg
inc
xor
pop
out
cmp
cmpsb
mov
lock lret 
jg
(bad)  
in
ret
xchg
in
push
inc
cwtl   
and
enter
cmp
xor
and
or
xor
sub
(bad)  
mov
nop
adc
cmp
pop
orl
xchg
adc
jno
dec
ja
cmp
lcall
sbb
call
inc
ficoml
call
imul
test
packsswb
and
adc
lods
aad
cmovae
inc
mov
jns
mov
push
push
sub
cmc    
dec
jmp
sarl
xchg
adc
and
push
sbb
hlt    
out
mov
mov
xor
inc
inc
lret   
scas
mov
or
pushf  
cltd   
jp
push
xchg
daa    
lods
pop
cmpsb
push
mov
push
test
mov
xchg
xor
loopne
js
(bad)  
xlat
rorb
xor
gs dec
sub
and
notl
xor
mov
out
cmp
pop
jns
shll
fcoms
sbbb
adc
adc
xchg
cmpsb
sarl
test
or
sbb
inc
shl
outsl
mov
adc
shll
and
dec
imul
add
out
(bad)  
(bad)  
mov
sub
jns
stos
sub
jmp
lods
add
bsr
mov
fs mov
add
lds
push
mov
or
aam
xchg
xchg
ret    
sti    
jecxz
in
movsb
cmpsl
cmp
pusha  
out
dec
lahf   
add
pop
inc
jecxz
arpl
mov
cli    
jecxz
xchg
sahf   
xchg
ja
or
xchg
pushl
jl
jp
push
pop
jp
fsubrs
adc
xor
and
xchg
(bad)  
fstl
fisubl
mov
pop
(bad)  
loop
insb
xor
shll
loopne
jo
iret   
xor
jo
and
test
or
mov
xchg
stc    
jmp
arpl
cmp
sub
sub
bound
in
ret    
or
push
adc
adc
(bad)  
mov
das    
rorl
in
xlat
sub
cli    
and
sbbb
adc
lock movsl
out
adc
jp
ret
out
cmp
jmp
add
inc
xor
push
pop
loop
cmp
lock adc
inc
mov
movsl
test
pop
addl
pop
or
fstpl
push
sub
push
ret
add
or
push
or
rcrl
push
sbb
daa    
clc    
and
jb
sbb
mov
shrl
out
xor
iret   
mov
sbb
mov
sub
neg
addb
int3   
pop
(bad)  
in
inc
push
sub
je
out
mov
jg
jns
daa    
jno
cwtl   
pusha  
mov
imul
and
mov
or
(bad)  
roll
aam
jbe
push
add
pusha  
push
stc    
pop
cwtl   
fcmove
cmp
fldcw
iret   
imul
dec
xchg
add
jecxz
movsl
adcb
dec
jae
jecxz,pn
movsb
jno
cwtl   
xchg
push
xorb
push
or
dec
pop
push
sbb
push
data16 mov
add
div
push
jl
lods
pop
mov
xor
outsb
cmp
pop
gs sysexit 
sbb
push
xchg
add
js
fcom
hlt    
mov
es
mov
mov
inc
pop
fsubl
push
out
mov
jno
dec
out
jmp
jno
loopne
cmp
add
scas
fs js
add
imull
inc
lcall
(bad)  
das    
and
add
xchg
cmc    
or
pushf  
das    
jnp
insl
or
push
dec
xchg
popf   
or
xchg
repz
in
jno
cwtl   
aaa    
pop
jb
std    
divb
jg
int
ret
or
and
cmp
arpl
in
mov
adc
mov
push
stos
sar
in
lock or
imul
xchg
mov
pushf  
out
mov
push
push
mov
xor
call
and
mov
or
adc
les
push
push
jg
aaa    
lds
mov
cltd   
dec
aas    
push
and
cmp
and
ss or
pop
popf   
in
inc
add
mov
adc
pop
leavew 
cmp
in
ljmp
sub
scas
xchg
cli    
mov
test
jle
dec
sbb
or
xchg
pop
xchg
cmp
add
int3   
sub
inc
cmpl
and
push
int
jb
mov
insl
lret   
gs pushf 
xchg
fimull
shll
push
push
lea
les
idivb
clc    
lcall
stc    
dec
movsl
inc
add
call
decl
gs jmp
sub
inc
cwtl   
sahf   
aas    
cmpsb
stos
mov
xchg
sbb
ds int3 
jmp
xchg
popa   
movb
inc
pop
pop
pop
push
cld    
xor
(bad)  
int3   
cwtl   
cli    
pop
sbb
lret   
stc    
dec
(bad)  
lea
pop
cmp
jge
xchg
mov
add
fldl
loope
mov
pop
loope
movl
icebp  
pusha  
(bad)  
jnp
test
loopne
xor
push
into   
orl
rorb
or
movsb
and
push
in
sbb
aad
and
xor
leave  
fwait
mov
push
push
xchg
and
je
jne
add
add
js
movsb
xlat
jg
shrb
cmp
roll
adc
ficomp
inc
cld    
xor
loop
mov
push
out
jmp
sub
shrl
in
dec
das    
popf   
jae
notl
mov
push
lret
cmp
mov
shrl
xor
mov
mov
shr
jb
sbb
push
lahf   
xlat
ret
mov
jno
pop
fistl
adc
xchg
add
or
sub
sarl
jne
loope
popf   
or
ljmp
inc
and
jle
stos
inc
dec
sub
aas    
fidivr
mov
cmp
mov
add
push
sbb
(bad)  
div
mov
inc
inc
adc
jg
and
fdivs
ljmp
aad
sbbb
mov
adc
popf   
push
mov
mov
inc
sub
test
hlt    
fildl
lret
mov
inc
and
add
xor
jg
xlat
xchg
loop
pop
arpl
push
fs enter
les
sti    
mov
and
jl
stc    
adc
jbe
inc
jg
inc
fstps
enter
add
sub
cmp
push
repnz insl
inc
sub
add
scas
mov
and
lcall
lret
jp
lcallw
xchg
sub
xor
into   
sub
cmpsl
xlat
pop
cmc    
fs lock pop
xchg
stos
mov
cmp
into   
stos
push
add
sbb
movsl
jmp
mov
dec
add
ret
in
mov
hlt    
fsubl
inc
outsl
lcall
pop
(bad)  
mov
out
(bad)  
jae
adc
cmp
dec
call
enter
jle
mov
test
xchg
aad
cmpsb
(bad)  
daa    
test
pop
(bad)  
lock pop
mov
andb
sub
fcompl
jl
mov
in
and
jbe
(bad)  
push
outsb
loope
mov
aas    
fldpi  
mov
pop
mov
dec
jge
push
add
jb
mov
sti    
sub
pop
int3   
out
push
xlat
fiadd
es push
sub
lret
dec
fcoms
dec
lods
(bad)  
add
ret    
imul
iret   
jl
sbb
jecxz
rclb
push
adc
rolb
into   
push
js
mov
sti    
and
mov
cmc    
call
xchg
adc
aad
fdivrl
addr16 xor
mov
push
adc
inc
pusha  
mov
popa   
push
fnstcw
jg
in
sbb
fistpll
movsl
and
scas
jge
loopne
sti    
jg
cmp
inc
inc
add
or
push
xchg
pop
loopne
imul
mov
fidiv
dec
xlat
xchg
fiadd
cs push
push
mov
rcrb
arpl
and
popf   
cmp
mov
test
mov
pushf  
movsl
(bad)  
cmc    
hlt    
inc
mov
inc
test
rolb
pop
push
sub
and
stc    
or
(bad)  
xor
inc
popa   
outsb
stos
push
dec
push
pushf  
(bad)
insb
iret   
in
mov
cmp
push
pop
inc
add
movsb
(bad)  
jbe
mov
lret
data16 ja
sbbl
in
cmp
adc
xor
ljmp
stos
scas
aad
in
ja
daa    
add
and
mov
in
scas
(bad)  
fimul
xor
pushf  
outsl
call
or
xor
pusha  
aad
iret   
and
xchg
add
leave  
std    
xor
in
enter
call
push
jnp
shrl
dec
and
add
mov
bound
push
sti    
jo
imul
xchg
pushf  
cmp
inc
lock test
pushl
setge
bound
jne
rcll
mov
mov
cmc    
xor
sub
dec
inc
aad
cs pusha 
dec
xchg
ret    
mov
pop
in
into   
cmpsb
xchg
lcall
push
push
cmp
mov
lret   
dec
ljmp
adc
mov
js
out
mov
and
out
add
push
mov
pop
imul
dec
or
dec
jns
jmp
inc
xchg
jge
mov
scas
mov
and
pop
xor
jmp
test
jnp
ss cltd 
repnz test
loope
fdiv
cmp
and
pop
mov
roll
scas
sbb
clc    
das    
into   
xor
pop
insl
sbb
pop
push
(bad)  {%k4}{z}
ljmp
push
aaa    
pop
mull
adcb
inc
adc
(bad)  
jb
inc
xlat
scas
test
dec
xor
or
jmp
sbb
je
mov
bnd jmp
stos
add
ljmp
or
insb
iret   
inc
mov
inc
add
mov
in
(bad)  
jge
pusha  
jae
or
push
aas    
jle
cs es mov
fnstsw
push
and
mov
call
clc    
xlat
bound
out
or
pop
int3   
div
push
int
out
sub
fistl
sbb
pop
and
xor
add
dec
(bad)  
inc
jge
iret   
xchg
loope
js
mov
(bad)  
push
in
sbb
lahf   
push
addr16 sbb
fwait
out
push
and
sbb
mov
test
pusha  
add
dec
inc
lcall
call
lahf   
lock stc 
push
rcrb
int3   
out
inc
sbb
fwait
jmp
imul
(bad)  
aaa    
insb
cld    
mov
les
push
xchg
xchg
mov
pop
insl
(bad)  
jae
mov
dec
cmp
insb
mov
pop
fwait
das    
sub
lods
sub
jae
stos
insb
popl
mov
iret   
push
add
sbb
loope
js
fstps
jmp
and
pop
aas    
add
popf   
shrd
addr16 pop
cli    
inc
xchg
pop
sbb
(bad)  
or
aas    
or
add
pop
mov
imul
or
mov
push
adc
jne
orl
xor
xor
ret    
dec
(bad)  
ffreep
mov
stc    
dec
(bad)  
sbb
xlat
jp
adc
sbb
ret    
sub
jecxz,pt
mov
in
xor
loopne
fldcw
fild
int
mov
mov
mov
insl
in
int
sbb
mov
mov
aam
add
js
aad
insl
adc
leave  
into   
(bad)  
(bad)  
sysenter 
jbe
sbbb
push
and
out
sahf   
or
mov
dec
pop
stos
fcmovnb
je
cmpsl
push
roll
pop
add
jns
adc
push
or
mov
es adc
cmp
adc
xchg
lret   
mov
repz and
mov
xor
aaa    
pusha  
xchg
sub
mov
dec
add
js
add
daa    
mov
out
and
jb
or
push
lea
lret
icebp  
push
add
mov
sub
push
sub
add
xchg
cmp
inc
mov
push
and
ret    
jl
sbb
lds
testl
test
dec
push
sbb
mov
dec
and
jae
notb
gs loop
mov
in
inc
push
insl
xchg
lcall
dec
(bad)
adc
out
mov
mov
movsb
(bad)  
aad
mov
xchg
mov
xchg
mov
dec
pop
inc
js
popa   
dec
scas
(bad)  
out
loopne
mov
(bad)
mov
dec
call
js
in
imul
(bad)  
hlt    
push
adc
push
jne
mov
xchg
out
inc
inc
push
adcb
lds
stos
pop
loopne
movsl
(bad)  
in
adc
push
pop
enter
bnd jge
insb
dec
or
jle
mov
jnp
xchg
inc
mov
scas
test
ljmp
sbb
into   
xor
mov
xor
sti    
shr
popa   
insb
add
cmp
shlb
xchg
sbb
cmp
mov
scas
std    
inc
movntps
int3   
fidivrl
das    
pop
add
xchg
xor
xchg
in
xor
mov
out
mov
ret
dec
insb
xchg
repz sbb
lods
or
mov
sub
jae
data16 or
jp
push
dec
ret
sub
jecxz
movsl
xchg
out
adc
dec
cwtl   
inc
mov
ret
add
sarl
fnstsw
jnp
nop
arpl
jnp
nop
cmp
pop
dec
fsubs
arpl
(bad)  
clc    
push
add
(bad)  
mov
cltd   
out
lods
dec
and
adc
pop
(bad)  
push
inc
(bad)  
in
cmp
movsl
lahf   
cli    
scas
into   
xor
mov
int
xor
test
hlt    
jmp
push
mov
xor
(bad)  
add
sbb
fisttpl
lcall
or
cmp
jb
lcallw
fidivr
(bad)  
inc
rclb
les
pop
mov
mov
cmp
mov
lcall
neg
xor
cmp
aaa    
mov
seto
add
jmp
mov
push
insb
jecxz
push
add
jp
or
enter
xchg
adc
xor
sbb
mov
and
push
mov
andb
dec
loope
mov
rcrl
and
inc
add
inc
repz lcall
(bad)  
cmp
popf   
sub
sti    
stos
jno
mov
add
data16 test
or
jae
mov
jo
mov
pop
xor
rcrb
pop
lahf   
popa   
popf   
ret    
movsb
and
pop
dec
mov
add
push
or
mov
xor
jl
movsb
pop
push
lcall
bound
adc
mov
jmp
dec
cs dec
xor
or
frstor
hlt    
cmp
call
inc
jae
jmp
lret   
mov
aad
pop
test
(bad)  
mov
push
cmpsl
pusha  
mov
je
xchg
out
testl
and
push
int3   
sub
fdivrp
jg
mov
dec
adc
ret
mov
push
mov
dec
pop
movb
cmp
ds adc
cmp
xor
inc
and
inc
test
cmp
pop
enter
dec
mov
jl
sbb
jne
ret
mov
or
das    
mov
imul
sbb
sbb
(bad)  
fadd
xlat
add
in
dec
add
rolb
dec
jle
lods
and
ror
fstps
out
mov
in
inc
xor
fldl
insb
out
das    
mov
mov
cmp
sbb
sbb
cmp
xchg
add
sub
sub
and
sbb
(bad)  
loop
loope
mov
mov
mov
(bad)  
mov
inc
outsb
(bad)  
lret
fisubr
sub
and
lcall
push
sub
fs pop
insl
cmp
fistpll
push
mov
pop
xchg
xor
movl
mov
push
jno
rcl
and
nop
cmp
pop
repnz popf 
cmp
pop
stos
insb
mov
std    
xor
lcall
xlat
mov
mov
bnd jmp
dec
add
popf   
mov
aam
insb
hlt    
repnz push
out
popa   
pusha  
xor
inc
das    
sbb
(bad)  
dec
stos
mov
cmc    
movntq
out
pop
imul
aam
pop
test
lea
outsl
movsb
call
jns
daa    
pop
adc
(bad)  
or
inc
adc
xchg
mov
sub
test
iret   
loopne
shld
inc
inc
sub
roll
mov
xchg
mov
aas    
sub
(bad)  {%k4}{z}
cld    
push
je
mov
or
fidivl
push
inc
insb
xchg
jmp
push
adc
in
out
decl
jge
cli    
addr16 pop
xor
mov
or
insb
sbb
sbb
jae
movsl
add
push
andl
mov
dec
scas
dec
dec
into   
loope
dec
in
xor
jns
ss sbb
mov
ja
sub
jb
jp
stos
pop
xor
pop
dec
jp
pop
dec
sub
dec
mov
shl
stc    
mov
fs push
int
dec
sub
movsb
sbb
mov
insb
cmp
bound
out
andl
pop
fdivl
jle
pop
xor
push
adc
xchg
dec
mov
adc
arpl
out
add
rorb
mov
push
aaa    
arpl
cmpsl
nop
negb
sbb
jge
cmp
pop
mov
mov
int
or
mov
test
jg
call
inc
arpl
adc
cld    
add
gs inc
xor
fiadd
fdivp
dec
sbb
(bad)  
cmp
mov
popa   
jnp
push
out
xor
xor
adc
rcrb
jbe
outsl
mov
ja
inc
jo
dec
into   
rorb
mov
les
sub
inc
mov
and
mov
push
scas
mov
insl
test
push
cmpsb
add
xchg
add
(bad)  
sbb
cmp
adcb
cmc    
cmp
out
addr16 mov
jns
cmp
mov
xor
cmp
jne
jg
and
or
adc
loopne
shl
xor
sti    
lock out
pop
test
or
call
gs cld 
mov
cmp
xor
inc
jp
or
add
add
mov
dec
adc
jne
into   
pop
and
leave  
ljmp
lahf   
jmp
push
(bad)  
ficom
fs lahf 
pop
dec
xchg
mov
push
cmp
data16 jecxz
pushl
sarl
jo
fidivr
(bad)  
sti    
fucomip
ret
push
in
loop
sbb
adcl
(bad)
cmp
fwait
mov
mov
sub
fdivrl
or
jg
and
mov
dec
mov
fs ret
outsl
roll
pop
jae
lcall
sbb
cmc    
ja
scas
lds
out
lret   
xchg
out
cld    
shrl
pop
xlat
into   
fwait
cltd   
or
xor
daa    
aas    
xchg
mov
out
pop
xor
es jne
lods
pop
jg
outsb
xchg
adc
ret
pop
out
pop
add
mov
sub
enter
xchg
jl
mov
test
imul
adc
mov
mov
and
lahf   
ja
int3   
stos
(bad)  
or
pop
movb
outsl
int3   
jne
push
sbb
and
cmpl
push
out
or
mov
inc
fs mov
cmp
imulb
scas
dec
(bad)
dec
icebp  
mov
xor
lea
ret    
fdivrs
sub
sbb
cli    
mov
outsl
lcall
xchg
sbb
pop
test
jns
inc
cltd   
mov
std    
pop
shlb
adc
jecxz
and
int
sbb
inc
mov
aaa    
daa    
ret    
jmp
in
add
push
or
sub
fsin   
xor
push
sbb
mov
cmp
aas    
mov
mov
cmpsl
push
das    
aaa    
out
hlt    
(bad)  
notb
insb
pop
and
xchg
jle
loopne
sbb
imul
ja
mov
icebp  
adc
xchg
fldt
js
(bad)  
dec
jge
xchg
mov
das    
inc
sarb
lahf   
mov
ret
cmp
(bad)  
repz iret 
jnp
xor
add
mov
add
sub
in
mov
xor
inc
cmp
fnsave
test
fildll
pushf  
push
cmp
loope
jg
xlat
xchg
mov
ds xchg
(bad)  
sbb
das    
hlt    
mov
or
loope
lcall
into   
sbb
ljmp
aad
sub
sbb
test
cmp
mov
push
jmp
scas
cltd   
jmp
push
gs aaa 
push
stos
andl
lds
add
fimul
rclb
test
imul
cwtl   
add
jecxz
adc
push
into   
mov
jg
nop
jecxz
es stc 
pop
in
cmp
enter
outsl
jo
sub
inc
cld    
mul
fldl
lods
push
lea
and
or
and
xchg
mov
imul
inc
xchg
inc
mov
pop
cmpsb
inc
lcall
sub
sub
out
inc
(bad)  
dec
add
lods
dec
cmp
(bad)  
cmp
lret   
in
inc
lret
mov
mov
les
and
outsb
mov
pop
jbe
xchg
and
pushf  
roll
fs dec
pop
sub
je
in
repz loope
cmc    
lods
cmp
pop
clc    
insl
js
mov
adc
cmp
dec
pusha  
inc
mov
inc
push
cwtl   
into   
mov
orl
les
imulb
fdivrs
and
icebp  
inc
inc
dec
cmp
push
orb
popa   
add
add
cli    
in
push
push
xchg
lea
lea
sbb
rcrb
sub
int3   
mov
cli    
cmpsb
pop
inc
(bad)  
mov
jnp
jle
jecxz
in
sahf   
mov
into   
lret   
daa    
push
fisubl
sahf   
jae
inc
mov
repz mov
xchg
insb
jecxz
loope
ss jmp
out
rorl
(bad)  
push
mov
out
sub
and
add
xchg
inc
cmp
pop
arpl
loope
std    
outsb
pop
inc
add
push
fisttpll
lods
fsubs
or
or
lahf   
cmp
jmp
scas
cmc    
les
sbb
fild
lahf   
inc
push
and
ret
pop
in
jg
aam
rcll
dec
daa    
jbe
cmpsb
mov
mov
clc    
repz js
dec
movsl
cltd   
pop
les
mov
and
and
lcall
call
roll
je
sub
mov
pop
push
pop
arpl
rolb
(bad)  
mov
rcrl
xor
into   
mov
adc
cwtl   
lret
push
adc
sbb
test
inc
jae
xchg
xchg
pusha  
jae
lret   
push
fidivrl
lea
adc
les
sahf   
pmulhw
push
lret
fidivrl
stos
bound
mov
(bad)  
cs
rclb
stos
add
inc
adc
dec
and
ss daa 
sub
cmp
or
jb
mov
mov
test
push
jle
adc
xchg
sub
mov
mov
negb
inc
jns
dec
int3   
mov
inc
fisttpll
pop
xchg
jo
jp
mov
imul
mov
sub
mov
jmp
ljmp
sbb
sub
mov
mov
(bad)  
mov
mov
push
pop
sbb
test
push
sbb
jae
hlt    
push
pop
movsb
shrb
sub
stos
in
aaa    
pop
movsl
jnp
loopne
(bad)  
mov
jne
lret
fdivs
mov
(bad)  
(bad)  
bound
dec
or
pusha  
sub
xchg
cmpsb
push
dec
addl
int3   
clc    
loope
jp
inc
or
jns
adc
rcrb
jnp
mov
cmp
dec
push
xor
and
pop
negl
ljmp
mov
jb
add
push
shl
imul
mov
push
pop
leave  
inc
sarb
jo
mov
cs std 
mov
or
mov
push
push
dec
mov
enter
test
adc
xor
or
dec
(bad)  
sbb
imul
jbe
inc
sub
jle
add
mov
push
das    
roll
mov
(bad)  
push
ret    
iret   
pop
mov
cmp
call
jmp
aam
mov
inc
fisubr
clc    
lcall
xor
pop
push
sub
(bad)  
mov
fistp
out
mov
testl
(bad)  
and
es clc 
mov
mov
xchg
in
jl
dec
push
les
cs dec
popa   
adc
(bad)  
cltd   
pop
inc
fisttp
or
rol
cmc    
in
ret    
js
and
xchg
pop
(bad)  
aas    
(bad)  
dec
mov
ja
ljmp
push
pop
data16 jecxz
lcall
ljmp
jge
out
pop
int
les
int
mov
add
imul
mov
call
sub
stos
adc
mov
out
test
sti    
int
adc
mov
inc
leave  
ja
cmpsb
push
xchg
repnz mov
push
loopne
(bad)  
hlt    
pop
mov
push
in
cwtl   
mov
jmp
mov
sbb
les
adc
fwait
inc
adc
aam
xchg
add
xor
cmp
jg
jg
and
lret   
leave  
jbe
je
jmp
std    
icebp  
and
in
stc    
push
jg
jae
movsb
mov
cltd   
add
jns
mov
xchg
dec
mov
add
aas    
stos
push
mov
lret
inc
(bad)  
loopne
jmp
inc
outsl
cmp
scas
lods
in
dec
mov
test
cwtl   
xor
push
add
adc
sbb
idiv
mov
xor
jno
inc
adc
inc
loopne
jae
sub
mov
in
lock cmp
dec
push
ror
addr16 xchg
pop
xlat
inc
out
cmpsb
mov
jb
xchg
imul
sub
fadds
add
sub
jge
cs test
les
arpl
cmpsl
dec
inc
push
and
dec
lcall
je
clc    
mov
test
push
arpl
xor
jecxz
cmpsl
cld    
aaa    
mov
sub
pop
loop
add
scas
add
mov
cmc    
(bad)  
and
or
(bad)  
int3   
(bad)  
pop
enter
pop
fbld
imul
push
cli    
cwtl   
push
jg
pusha  
aaa    
sub
sti    
cwtl   
cmpb
xchg
movsb
cmp
push
ja
push
idivl
and
adc
pusha  
or
pop
divl
popa   
adcl
and
fsubr
aaa    
fdivs
dec
jge
add
mov
out
jl
xchg
outsb
push
jp
jecxz
fstp
call
pop
mov
(bad)  
in
push
push
fwait
into   
xchg
jg
or
icebp  
pop
fwait
and
mov
scas
mov
rorl
xchg
lret   
pop
and
jle
shl
fidivrl
mov
jae
(bad)
test
push
addr16 dec
mov
ret    
dec
movl
into   
xor
lret   
fstl
push
cmp
int
sub
and
idiv
pushl
popf   
in
lock cmp
add
mov
sbb
mov
dec
scas
xor
pop
nop
inc
adc
dec
xor
ljmp
and
sbb
or
mov
ljmp
cmpsl
mov
divl
cmp
ss int3 
sub
iret   
mov
orl
lahf   
sub
add
leave  
(bad)  
outsb
pop
das    
fnstsw
dec
and
pop
add
xor
repnz daa 
stos
pop
das    
fs push
dec
fistp
int
inc
movsb
(bad)  
imul
insl
lds
and
pop
mov
rorb
arpl
ljmp
inc
fucom
les
sub
mov
(bad)  {%k4}{z}
(bad)  
fimul
inc
xchg
out
into   
mov
into   
mov
xchg
push
inc
jmp
(bad)  
data16 lock add
(bad)
test
ds sub
xchg
ret
adc
(bad)  
rcr
mov
repnz and
fidivr
bound
mov
outsl
mov
sti    
std    
xchg
js
xor
lods
xchg
inc
mov
ss je
std    
sub
pop
into   
inc
ja
xchg
inc
jne
(bad)  
out
shrb
or
pusha  
leave  
cmp
jp
mov
int
in
cmpsb
dec
fisubl
loop
inc
andb
enter
repz ffree
dec
imul
sbb
std    
and
fist
fnsave
ret    
and
or
adc
call
adc
sbb
pushf  
mov
or
jns
daa    
(bad)  
mov
rcr
or
repz mov
addb
shll
scas
fstps
pop
inc
and
test
add
or
mov
inc
jno
sbb
sub
outsb
adc
cmp
cmc    
testb
inc
pop
sti    
push
push
test
push
pop
in
lcall
dec
out
int3   
test
jne
mov
pusha  
adc
xchg
daa    
aam
dec
mov
clc    
push
and
xor
test
xchg
movsb
push
mov
in
push
push
inc
pop
mov
cmp
pop
loope
push
add
mov
adc
inc
mov
mov
jbe
roll
push
cmp
sbb
mov
add
(bad)  
in
push
jl
js
lds
pop
add
sbb
xchg
mov
jo
outsb
stc    
js
repnz xchg
sbb
add
cs pop
pop
notl
xor
clc    
cmp
push
jl
sub
pop
jg
pop
mov
or
jl
and
jl
cmpsl
cmp
fs aas 
push
adc
cmp
jmp
jp
xor
pop
stos
mov
jl
mov
nop
pop
mov
fwait
test
dec
sbb
sbb
aaa    
push
test
outsl
push
jmp
mov
xchg
jmp
adc
insb
js
xor
sub
fucomp
daa    
mov
mov
lret
fdivrs
pop
pusha  
mov
add
lods
lahf   
jmp
jle
push
inc
xor
insb
mov
add
adc
xor
bound
cmp
icebp  
or
lods
ja
jge
add
cmp
and
jmp
rcll
ds push
ret
insl
and
xchg
jg
test
cld    
mov
xor
je
mov
mov
(bad)  
jns
mov
lret
mov
rorl
das    
sub
xchg
xlat
adc
or
out
ficom
popf   
jne
mov
sarb
lret
jg
aam
subl
rorl
cmp
out
pusha  
fcomps
icebp  
adc
enter
fimull
mov
jl
mov
push
jecxz
pop
inc
dec
jg
jp
nop
adc
pop
jno
jnp
cmpsl
in
int
daa    
mov
pop
ss insb
arpl
js
stos
cmp
push
and
cmp
jo
sub
add
fdivrs
inc
xchg
das    
jbe
fsubs
(bad)  
pop
jno
mov
pop
dec
hlt    
popa   
pop
loopne
or
jne
test
push
or
jg
mov
gs das 
inc
and
push
sub
adc
cmpsb
mov
inc
cmovb
jmp
mov
xchg
push
sub
jle
mov
mov
inc
fwait
inc
push
pop
out
pop
mov
pop
or
cwtl   
test
and
mov
mov
sbb
and
pop
mov
rorb
test
jns
dec
or
es
lcall
into   
inc
add
clc    
fwait
in
sbb
mov
and
sbb
add
iret   
push
(bad)  
pop
mov
ret    
(bad)  
aas    
sub
sbb
add
std    
sbb
lods
cmp
pop
sbb
adc
lret   
cltd   
mov
lds
lcall
iret   
lea
sub
movsb
in
je
pusha  
imul
addr16 aam
pop
rclb
push
addr16 pop
push
cvtpi2ps
mov
push
inc
jae
sub
jne
stos
and
pop
imul
mov
pusha  
xchg
jo
shrb
jg
xchg
or
dec
(bad)  
in
arpl
and
in
pop
int
mov
jge
add
bound
pop
jo
xorb
insl
mov
in
sub
lret
adc
xchg
sub
or
faddl
js
adc
aaa    
sbb
sbb
loope
or
(bad)  
je
add
clc    
test
popf   
sub
push
nop
ss jl
mov
pop
sbb
frstor
mov
jb
dec
add
movb
pop
sub
sbb
dec
aad
jp
jmp
outsl
pop
cmp
stc    
mov
jp
out
cmp
and
scas
cmpsl
loope
data16 icebp 
int
clc    
mov
jecxz
mov
xor
in
xchg
leave  
jecxz
rolb
popf   
jecxz
push
cmpsl
cmpsb
pop
inc
enter
xchg
dec
(bad)  
aad
call
ret    
aad
push
dec
jae
jns
stc    
and
pop
jge
pop
cmc    
inc
cmp
and
fisub
mov
dec
cld    
aas    
mov
push
stos
imul
pop
jne
mov
push
(bad)  
fidivrl
push
(bad)  {%k4}{z}
(bad)  
mov
and
clc    
mov
test
mov
fcomp
incb
mov
repz and
inc
test
test
in
(bad)  
pushf  
mov
push
add
(bad)  
incl
imull
push
test
xchg
mov
sarb
mov
push
mov
int
xchg
call
(bad)  
push
sbb
mov
inc
dec
inc
adc
mov
inc
ret
frstor
mov
insl
into   
pop
mov
push
cld    
leave  
dec
lds
loop
dec
push
mov
and
out
(bad)  
in
sbb
jle,pt
and
ja
aas    
jne
ret    
push
sbb
les
add
cwtl   
out
scas
push
daa    
xor
lret
pop
loope
aaa    
call
jmp
test
lret
stos
(bad)
xchg
pop
dec
imul
ja
jmp
xchg
lahf   
cmc    
daa    
(bad)  
push
movsl
popf   
loop
sub
lcall
mull
repnz rclb
add
pop
cmpsb
js
sbb
push
pop
pop
idivl
push
inc
push
cmp
inc
or
sahf   
pushf  
stos
mov
pop
or
inc
mov
shrb
or
push
jbe
rcr
and
pop
ret    
aas    
dec
mov
sub
fisttpll
pop
xchg
adc
js
movsl
mov
cmp
xor
dec
mov
push
xor
(bad)  {%k4}{z}
int3   
xor
int
mov
push
(bad)  
jecxz
pop
lret
into   
lods
jne
in
cmp
imulb
leave  
js
dec
pop
and
movsb
cmp
lcall
das    
adc
push
pop
adc
and
test
aam
push
das    
pop
shrb
addr16 cmp
add
push
sbb
cmp
imul
inc
cmp
adc
inc
mov
aam
and
cltd   
fisttp
imul
imul
xchg
inc
xchg
add
leave  
push
(bad)  
outsl
fisub
sub
fsubrl
out
cs ret 
xacquire xchg
jg
mov
dec
add
enter
repnz fmull
das    
negl
pusha  
add
mov
and
dec
pop
xchg
repz
mov
in
mov
mov
out
xor
syscall 
popf   
stos
adc
repnz adcl
ljmp
scas
push
fsubrs
mov
push
(bad)  
push
cmc    
imul
cwtl   
and
xchg
pop
pop
mov
or
es push
lret   
cmpl
shrl
(bad)  
mov
push
add
jecxz
dec
lods
fmul
clc    
cmp
inc
xor
cmp
movb
fdiv
jbe
lock imul
lret   
mov
and
in
hlt    
stos
xlat
sub
loop
add
xor
push
orl
xchg
sbb
pop
std    
mov
out
lock gs
in
or
cmp
pop
add
fcmovb
sbb
xor
xor
xor
mov
mov
lods
xor
xchg
xor
aas    
and
call
cld    
jne
adc
mov
fbld
cmc    
das    
sbb
and
hlt    
arpl
mov
and
xchg
mov
lds
rorb
in
bound
sub
rol
cmp
fcmovne
push
bound
daa    
sahf   
scas
sbb
fildl
mov
addr16 pop
mov
call
sbb
je
ror
in
push
fnstsw
mov
es inc
add
mov
jl
faddl
add
test
adc
pop
add
push
lret   
push
jmp
push
sub
stos
(bad)  
mov
imul
push
jecxz
push
insl
push
mov
mov
xor
shrb
adc
dec
mov
fcmovbe
(bad)
or
xor
ss inc
orb
sbb
fistl
inc
icebp  
mov
mov
cmp
mov
xchg
ja
dec
repnz lret 
adc
xchg
in
rorb
sub
cmp
xchg
aad
data16 jmp
test
mov
adc
dec
icebp  
das    
addr16 push
and
test
mov
scas
cli    
int
int3   
push
jne
sub
jle
(bad)  
dec
push
inc
ss aam
stos
(bad)  
fldenv
mov
cmp
or
mov
mov
xor
int3   
mov
mov
gs push
cmp
xor
out
xor
jmp
and
fbstp
jo
shlb
pop
mov
mov
jbe
pop
adc
dec
lret
lret
jg
outsb
repz
out
adc
test
xor
rol
addl
fwait
mov
jecxz
imul
roll
cli    
ljmp
or
pop
cwtl   
fwait
test
pop
(bad)  
fstps
mov
fildl
clc    
jmp
fcmovne
(bad)  
xchg
push
add
and
sbb
and
fucomp
pusha  
jb
fwait
mov
cs push
pop
inc
jne
or
in
(bad)  
and
sbb
clc    
mov
mov
push
fdivs
push
inc
jl
faddl
js
mov
lret
add
sahf   
sahf   
mov
out
aam
ret
push
inc
sbb
pushf  
push
inc
add
push
push
inc
mov
mov
fisubl
push
scas
es pop
xchg
pop
clc    
pop
data16 mov
inc
jne
jge
fisub
sbb
cmp
arpl
(bad)  
pop
cmc    
xor
jae
mov
sbb
mov
dec
add
pop
orl
xchg
ret
rclb
inc
xchg
sub
sbb
notl
sti    
or
scas
xchg
ja
cli    
imul
mov
ja
push
invd   
xlat
pop
subb
lock pushf 
add
dec
(bad)  
dec
add
cmp
loope
mov
jecxz
sub
push
outsl
cmp
or
js
and
sahf   
or
int3   
(bad)  
jns
call
inc
lock xchg
xchg
loope
jge
(bad)  
inc
jl
aam
xor
popf   
and
and
addr16 js
xor
in
adc
lcall
(bad)  
sbb
call
sub
mov
sub
in
cmp
ror
xchg
jmp
(bad)  
sarl
cmp
hlt    
add
(bad)  
push
fistl
add
outsl
movsb
dec
sbb
or
jno
jnp
call
jge
dec
faddl
fisttp
sub
(bad)  
in
jp
pop
sbb
pop
pop
popf   
add
out
test
cltd   
dec
pmaddwd
add
xor
movsl
pop
sbb
rcrl
je
dec
loop
cwtl   
pop
test
cmp
mov
add
pop
mov
or
fsubp
rclb
or
adc
fistp
(bad)
cmp
inc
xor
inc
mov
push
inc
sbb
data16 mov
inc
repz add
(bad)  
mul
pop
or
or
sti    
dec
cmp
cmp
mov
int3   
scas
pop
cmp
or
loopne
add
jle
(bad)  
aam
cs in
jg
dec
ljmp
xor
mov
lods
mov
call
out
mov
enter
loope
sub
mov
mov
lods
fiadd
sbb
stc    
lock cmpsb
int
icebp  
out
arpl
push
fsubp
jne
pop
pop
or
mov
in
dec
into   
fwait
rolb
cmc    
test
inc
cmp
je
sbbl
stos
es pop
loopne
sbb
sahf   
mov
je
arpl
cwtl   
jecxz
push
adc
xchg
and
dec
rcrb
add
lret
jp
jecxz
std    
imul
xchg
add
adcb
lret
inc
jl
xlat
aaa    
mov
sbb
inc
mov
or
pusha  
es fsubrp
push
inc
mov
jmp
pop
push
push
xor
fs enter
dec
popf   
sarl
mov
outsb
add
call
cmc    
cmp
jb
dec
push
jle
mov
stc    
or
dec
in
outsl
push
movsl
outsb
rorl
into   
cmpsb
mov
lcall
or
jg
mov
test
(bad)  
sbb
daa    
daa    
mov
cltd   
daa    
sub
xchg
adc
in
cmp
lock les
add
cli    
inc
jecxz
inc
dec
stc    
mov
inc
pop
bound
mov
(bad)  
repz jne
add
enter
dec
inc
adc
cld    
xor
movsl
mov
ret
test
xchg
out
cmpsb
xchg
pop
jmp
(bad)  
xor
mov
cld    
pusha  
mov
mov
jno
push
adc
into   
sub
mov
stos
sarb
fild
sub
insl
or
pop
sahf   
or
cmpsb
(bad)  
jno
mov
xor
stos
in
sbb
ss inc
(bad)  
pop
push
and
cs
fstpl
pop
loopne
jb
addr16 mov
push
lea
add
sbb
push
ret    
scas
pop
mov
lods
das    
icebp  
(bad)  
nop
outsb
jb
iret   
pop
push
mov
dec
pop
(bad)  
mov
inc
cmp
dec
mov
iret   
or
lds
insl
add
lret
pop
and
pusha  
jne
inc
cmc    
mov
dec
fimul
bsr
std    
pop
outsl
movsb
sbb
popl
stc    
mov
push
bound
insl
iret   
int3   
and
les
pop
fildll
jg
push
stos
es stos
inc
mov
sub
(bad)  
jne
mov
xchg
fimul
add
pop
jno
imul
into   
dec
sub
outsb
and
sbb
cltd   
in
or
pop
sahf   
cmpl
xchg
aas    
test
push
or
das    
xlat
push
push
gs das 
shlb
cltd   
js
mov
sub
pop
inc
pop
add
fbstp
(bad)  
fwait
xor
or
loope
pop
negl
push
aam
or
(bad)  
shll
jmp
daa    
cmpsl
add
xchg
and
mov
in
shll
and
lret
xor
or
dec
outsb
xor
aam
sbb
je
ret    
rorb
sbb
jo
xlat
xor
sub
orl
aaa    
aaa    
jmp
or
mov
pop
xchg
stos
int
jo
xor
leave  
xchg
jbe
cmc    
rcrl
fiadd
push
popf   
sub
bnd call
and
(bad)  
mov
nop
enter
xlat
out
mov
inc
pushf  
int
ret    
push
dec
xor
lret
shlb
sahf   
sbb
test
cmpsb
push
xchg
sub
push
les
add
scas
fildl
stc    
and
imul
dec
adc
xchg
jb
hlt    
xor
adc
rolb
dec
xlat
inc
xchg
jnp
hlt    
xor
movsb
jae
(bad)  
icebp  
(bad)  
xchg
sbb
xchg
cs mov
lahf   
mov
out
stc    
fwait
sub
aam
adc
sbb
add
mov
ss push
(bad)  
je
in
lock jnp
sti    
movsl
jnp
cwtl   
add
out
scas
mov
cli    
ss test
out
mov
shl
inc
xor
push
adc
push
cmp
lret   
loopne
rorl
in
repz push
(bad)  
cmp
mulb
cmp
je
pop
cmp
dec
dec
(bad)  
fist
jbe
and
dec
jp
adc
fiaddl
mov
fwait
jecxz
sbb
adc
or
mov
fs imul
pop
mov
mov
cwtl   
sub
in
in
cs inc
and
adcb
xor
jecxz
mov
int
andb
imul
push
popa   
xchg
insl
or
divl
mov
add
out
mov
in
sbb
in
in
push
push
dec
fnstenv
fwait
dec
out
jle
sub
jmp
mov
xchg
ja
jp
or
mov
je
dec
jo
loopne
xchg
fstps
lahf   
add
cltd   
jb
mov
icebp  
aas    
movsl
and
adc
push
xor
gs stc 
jl
leave  
mov
js
and
int
push
sbb
mov
cmc    
bswap
or
sbb
xor
mov
pop
(bad)  
testb
fidiv
adc
movsl
(bad)
xchg
jp
test
push
inc
mov
cld    
enter
xchg
aaa    
and
push
sub
adc
jbe
es jns
mov
pop
in
fiaddl
or
pop
jge
mov
adc
cmp
pop
in
dec
ds
xor
pop
mov
arpl
into   
cmp
jp
scas
push
rorb
sbb
pop
lock jp
mov
dec
inc
xchg
pop
push
arpl
or
mov
cmp
jb
jb
jle
fistpll
pop
xchg
pop
cmp
cmp
decl
mov
and
xor
jmp
cld    
js
fs pop
dec
lahf   
(bad)  
(bad)  
scas
cmp
cmpsb
rcl
nop
adc
fiadd
roll
dec
incl
mov
imul
pushf  
test
mov
sub
xor
push
xor
into   
(bad)  
jb
fisub
jne
xchg
push
out
dec
shrb
jecxz
pop
xchg
ja
xchg
les
inc
mov
nop
xchg
push
enter
loope
adc
scas
(bad)  
jg
movsb
push
mov
dec
pop
fcomi
cmp
aaa    
arpl
stos
sub
push
push
push
les
inc
dec
inc
mov
pop
je
mov
dec
push
in
jp
mov
cli    
jecxz
sub
adc
out
sahf   
(bad)  
out
mov
daa    
int3   
in
or
idivl
shrl
imul
dec
add
out
hlt    
xchg
imul
push
int3   
push
and
dec
lret
cwtl   
dec
sub
je
hlt    
in
sti    
(bad)  
push
add
in
pop
scas
and
orl
push
stc    
ficomp
jb
pop
ljmp
cwtl   
xchg
aaa    
fsubrs
pusha  
dec
mov
cmovae
and
(bad)  
aam
test
sub
ret
push
shrl
hlt    
inc
daa    
jmp
xor
push
jnp
dec
repz jmp
jne
mov
inc
cmp
push
stc    
mov
mov
pop
jae
test
pop
mov
out
stc    
mov
cwtl   
cmpsb
loopw
push
xlat
pop
mov
pusha  
in
ss pop
cwtl   
hlt    
je
in
or
sbb
xor
xchg
dec
mov
js
jns
inc
jnp
loop
mov
stc    
insl
(bad)  
es sbb
scas
push
mov
(bad)  
nop
inc
adcb
lcall
mov
addl
aad
outsl
call
daa    
fdivp
add
scas
iret   
scas
in
and
loop
adc
pop
add
pop
arpl
js
(bad)  
pop
jo
cs test
(bad)  
cmpb
dec
ret
mov
(bad)  
insb
cs push
stos
cmp
xlat
aaa    
cld    
and
push
scas
and
cmp
mov
out
nop
cmp
les
lret
and
fistpl
daa    
(bad)  
xor
and
ljmp
loopne
adc
aad
out
rcrl
mov
mov
aad
fistp
mov
adc
jmp
push
mov
xchg
ljmp
sar
or
mov
aad
sub
loop
mov
inc
sub
cmp
mov
in
nop
ljmp
push
loope,pt
jle
outsb
push
(bad)  
pop
add
xor
mov
je
xchg
or
inc
sub
leave  
adc
cmp
pop
fbstp
inc
test
test
adc
push
cmp
popf   
add
call
inc
pop
jnp
lcall
(bad)  
(bad)  
push
jae
xchg
dec
jnp
adc
and
and
push
inc
bound
mov
gs jmp
and
and
mov
pop
mov
push
push
test
rcr
hlt    
mov
or
jnp
incl
sub
add
mov
and
mov
push
bound
stos
(bad)  
sub
icebp  
subb
ss adc
push
cmp
stos
inc
cld    
movsl
push
insb
dec
inc
movsl
aam
sbb
jle
xchg
inc
adc
add
xor
mov
nop
or
push
cmp
dec
dec
lea
sub
pusha  
imul
sbbl
jno
scas
mov
nop
aam
rcrl
xchg
jge
stc    
aad
cmpl
pop
mov
and
jmp
add
cmpsb
sbb
outsl
sub
iret   
(bad)  
lea
in
or
mov
dec
in
jno
push
inc
fs ja
cwtl   
sti    
lock cld 
scas
rolb
push
clc    
mov
outsb
rcll
das    
mov
pop
int3   
sbb
and
pop
ja
pop
push
mov
in
xor
cwtl   
push
jns
je
cltd   
push
dec
lods
scas
push
xchg
ja
xchg
cld    
jp
dec
add
lods
pmullw
int
das    
pop
xor
negl
sub
inc
mov
hlt    
dec
and
add
rol
mov
(bad)  
mov
cmp
jns
sub
mov
mov
(bad)  
nopl
aad
out
dec
pop
push
push
in
add
push
jmp
lods
pop
icebp  
xchg
pop
stos
xchg
loop
sbb
or
hlt    
push
test
and
jae
jp
(bad)  
out
sbb
cmp
mov
or
jno
pop
mov
lods
out
mov
lret
jle
or
clc    
pop
test
cmp
sub
add
dec
xor
or
(bad)  
jbe
sarb
aam
adc
test
mov
test
iret   
xchg
in
add
into   
push
xor
mov
std    
in
sahf   
sbb
call
inc
and
pop
nop
jle
lahf   
adc
and
test
out
(bad)  
jno
gs add
popf   
insl
dec
add
dec
sub
fiadd
lock sbb
push
jmp
jg
aam
ret
xorb
int
adc
xlat
stos
inc
rclb
movsl
ret
adc
outsl
mov
inc
out
mov
movsl
adc
insl
sub
sub
push
notb
inc
jb
pop
and
fildl
and
leave  
inc
jo
inc
mov
add
sbbl
movsb
or
sub
xchg
dec
test
jmp
jb
jnp
mov
leave  
fsub
sarb
xchg
rcl
fdivrl
inc
das    
ret
pop
jo
cmc    
add
decl
test
sub
cmp
sub
sub
mov
xchg
pop
add
and
lock mov
pop
and
(bad)  
sbb
sub
pop
mov
xlat
sarl
in
jae
popf   
(bad)  
repnz gs nop
mov
icebp  
sbb
into   
xor
lods
fnstcw
(bad)  
cmp
mov
inc
clc    
adc
xchg
ret    
push
pusha  
sbb
test
jno
lock lea
push
and
jne
push
dec
gs loop
int3   
dec
aam
mov
sub
shrb
outsl
ret    
das    
add
adc
xchg
loopne
out
loope
ljmp
push
daa    
mov
mov
add
cld    
es test
packssdw
call
and
mov
xchg
dec
std    
jb
or
imul
(bad)  
inc
rclb
pop
cwtl   
test
cmc    
mov
(bad)  
leave  
das    
mov
(bad)  
hlt    
ss pop
and
jb
ror
add
mov
xchg
jle
mov
sahf   
pop
push
sub
jle
xor
subl
push
mov
jbe
jbe
jle
pop
mov
xor
xchg
cwtl   
iret   
shrb
and
pop
fcmovnu
or
sub
or
sbb
push
ror
push
or
fildl
bound
mov
jae
or
pusha  
lret   
add
mov
xor
xchg
mov
sbb
push
pop
xor
aas    
out
xchg
call
push
jp
and
sbb
jb
pushf  
jle
mov
loopne
insb
or
imul
mov
jmp
xor
pop
aaa    
cmp
fadds
cmp
or
imul
sbb
leave  
pop
cmp
mov
push
in
pop
dec
dec
sbb
ret    
arpl
inc
out
adc
push
movsl
mov
fdivrl
jecxz
push
sbb
mov
stos
(bad)  
xor
jl
mov
fistpll
repz scas
dec
cmpsb
sbb
or
dec
ljmp
add
jp
push
jnp
out
shl
dec
fwait
xor
inc
adc
stos
das    
aas    
fs sbb
pop
jb
enter
pop
adc
out
and
popf   
call
jl,pn
iret   
cmp
xor
cld    
dec
ja
or
(bad)  
loop
lds
dec
mov
hlt    
mov
and
mov
lret   
mov
jecxz
(bad)  
je
or
ja
xchg
movsb
cld    
sub
dec
xor
push
sub
cmc    
iret   
push
adc
mov
repnz mov
test
decl
test
push
push
icebp  
rol
lods
repz ss fptan 
fwait
jo
adc
mov
mov
pop
push
inc
jp
pop
and
enter
std    
lea
pop
ficom
(bad)  
fsubrs
xchg
fstpl
inc
push
adc
aas    
lea
push
or
push
fstpt
adc
leave  
movsl
repz adc
mov
lret   
lock
imul
(bad)  
mov
mov
mull
lcall
fildl
sbb
jle
inc
ret
es sbb
stc    
xor
aaa    
(bad)  
outsb
jae
or
mov
iret   
sub
repz pop
insb
rolb
icebp  
stos
inc
out
sbb
es pop
cli    
movb
pushf  
jmp
xchg
loope
pop
ds add
stos
mov
jb
mov
add
add
dec
inc
dec
inc
scas
inc
pusha  
(bad)  
or
add
add
(bad)  
(bad)  
(bad)  
incl
add
add
add
add
add
add
jns
je
insl
cs inc
jb
ja
outsb
addr16 sub
push
gs jb
imul
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
xor
data16 aaa 
xor
fs xor
add
adc
gs insl
cs inc
jb
ja
outsb
addr16 cs inc
imul
add
popa   
je
pop
add
add
add
add
add
lsl
add
jno
add
add
or
or
add
or
add
add
add
dec
or
add
add
(bad)  
and
add
add
inc
dec
inc
add
mov
or
popa   
add
jo
pop
jae
add
ret    
add
push
ret    
add
outsl
test
add
cmp
push
push
test
dec
fiadd
stos
pop
outsl
jge
push
scas
dec
mov
sbb
mov
sub
inc
dec
les
sti    
jl
mov
mov
sub
test
in
imul
movsb
in
and
(bad)  
hlt    
jo
jb
pushf  
sub
jecxz
fildl
ss int
jge
xor
insb
and
fisttp
dec
xchg
sub
pop
mov
mov
std    
mov
je
imull
mov
rcll
or
jns
aaa    
mov
jns
adc
fdivrp
mov
push
jno
sub
mov
pcmpgtd
fistpl
popa   
stos
adcl
mov
lahf   
sahf   
test
ds sbb
jle
leave  
push
push
add
xor
add
and
movsl
xchg
das    
push
sbb
xchg
pop
mov
mov
repnz movsb
push
mov
mov
adc
insb
adc
aam
mov
adc
inc
add
mov
pusha  
jns
das    
adcb
ficom
pop
(bad)  
cwtl   
dec
and
fsubrp
jbe
add
pop
stos
loopne
or
xchg
ss jns
jne
and
in
adc
lock dec
xchg
xor
and
call
mov
sbb
(bad)  
add
loope
shrl
push
ja
(bad)  
je
mov
(bad)  
or
pop
mov
adc
add
push
pop
jns
lahf   
push
leave  
cmp
lcall
pushf  
(bad)  
mov
clc    
jno
mov
cmp
push
push
into   
in
mov
(bad)  
cmp
dec
sub
push
pop
ret    
fldenv
mov
xchg
loopne
test
cmovbe
(bad)  
stos
outsl
js
cmpl
sbb
ss mov
loope
jle
dec
inc
sahf   
jmp
scas
int
(bad)  
mov
loope
popf   
push
sahf   
movsl
sub
aas    
sub
sarb
pop
popf   
pop
enter
test
jns
rorl
sahf   
in
mov
and
mov
int
cmc    
mov
pop
clc    
jge
xor
dec
cmp
jnp
outsl
adcl
jb
push
iret   
xor
xchg
cmpsl
mov
inc
in
rcll
or
cs cs lret
cld    
daa    
nop
pop
lahf   
iret   
push
or
leave  
xchg
pushf  
pop
mov
test
adc
pusha  
cmp
stc    
xor
call
dec
js
jmp
add
popf   
in
xchg
dec
add
jle
inc
push
inc
xor
mov
(bad)  
sbb
mov
xor
jno
aas    
inc
bnd jno
inc
mov
in
popf   
inc
sahf   
and
and
mov
mov
fcmovb
leave  
pop
push
aad
(bad)  
xchg
orb
sub
xchg
aam
inc
rcr
add
test
data16 ss
pop
movsl
loop
cmpsl
cli    
mov
sbbb
dec
lret   
mov
mov
inc
mov
cmp
aad
pusha  
dec
adc
xor
(bad)  
stc    
cmp
dec
aam
lods
mov
nop
pop
imul
add
aam
xchg
jl
cli    
inc
clc    
dec
sbb
push
or
mov
repnz shrl
xlat
std    
xor
call
dec
test
scas
cs or
mov
pop
fbstp
jecxz
push
adc
ds mov
lcall
pop
out
imull
push
(bad)  
gs lret 
push
jae
cmpsl
adc
xchg
loop
lods
insb
in
jns
aas    
fiadd
js
loopne
and
pop
push
xor
jmp
pusha  
jns
outsl
pop
andl
xchg
int3   
add
test
mov
sub
dec
fwait
mov
pop
push
inc
push
pop
in
xor
mov
or
sub
push
leave  
xor
jmp
inc
in
ret
inc
jne
rcr
push
cmpsb
in
mov
lea
call
leave  
mov
push
into   
push
ds in
mov
std    
ja
pop
ret    
std    
fmull
out
cmpsl
out
ret    
movsw
insl
or
and
jle
sti    
xorl
stos
test
mov
add
scas
push
xchg
sarb
pop
xor
or
imul
adc
push
fwait
xchg
and
mov
inc
sbb
cmp
mov
lret
push
(bad)  
jb
cli    
cmp
insl
dec
aaa    
push
mov
sub
sbb
mov
push
dec
add
out
out
aam
adc
scas
cmp
mov
les
daa    
xchg
repz jo
movsb
bound
rolb
dec
insb
int
call
(bad)  
loop
aas    
add
(bad)  
dec
inc
xorl
hlt    
xor
imulb
rcll
(bad)  
aam
int3   
or
mov
fsubrp
push
out
jns
push
cmpsl
test
mov
into   
outsb
xchg
pop
push
repz
xor
ret    
ja
add
rolb
divb
and
mov
mov
dec
mov
sub
mov
imul
xor
jp
test
xchg
imul
iret   
mov
stc    
outsb
inc
mov
(bad)  
mov
fucomi
ljmp
cld    
iret   
cwtl   
add
push
mov
add
into   
dec
xchg
cmpsl
jmp
shll
fs
cltd   
popf   
pop
mov
aad
sti    
or
mov
push
adc
add
adc
mov
jns
or
and
push
jns
mov
lods
test
mov
imul
sti    
sbb
inc
lock or
insl
dec
mov
add
inc
in
repz jo
scas
mov
js
xchg
mov
hlt    
xor
or
sub
dec
dec
rclb
pusha  
or
stos
mov
sub
test
lods
push
sub
cmc    
jae
mulb
stc    
out
scas
dec
mov
ljmp
cmpsb
loop
scas
in
in
repz std 
(bad)  
cli    
fcompl
(bad)  
frstor
sub
or
sbb
sub
je
add
push
fisubrl
cmc    
test
or
lock repnz adc
test
sub
inc
in
sbb
dec
sub
xchg
lahf   
popa   
jns
adc
sub
mov
sbbb
pop
test
and
mov
int3   
push
jecxz
or
loope
fsubrl
ficom
and
push
xchg
xchg
mov
xchg
push
mov
pop
bound
fwait
or
(bad)  {%k4}{z}
sarb
pop
mov
fwait
and
add
push
cmp
aad
lea
mov
pop
or
sarb
inc
add
in
clc    
ja
mov
jle
xchg
aaa    
imul
outsb
sub
aam
sbbl
jmp
sub
add
andl
pop
push
lods
popf   
sbb
xchg
dec
insl
mov
insb
fwait
mov
outsb
pop
sub
or
inc
iret   
addr16 nop
fs or
repnz pushf 
fiadd
movsb
xchg
out
cmp
ljmp
sbb
fstps
pop
push
xor
(bad)  
lret   
in
inc
push
adc
fbld
sbb
call
xlat
add
add
dec
mov
loop
ja
or
stos
bound
cli    
lea
pop
inc
mulb
dec
and
sub
test
jg
add
icebp  
fistp
or
clc    
xchg
mov
pushl
cmpsl
mov
repz daa 
aaa    
add
adc
aas    
les
or
dec
ret    
in
cli    
int
dec
leave  
mov
test
and
sbb
xor
lods
jl
or
and
popa   
jg
mov
xor
jg
in
dec
cmp
sbb
cmc    
pop
out
test
test
pushf  
push
push
cmp
rcl
ja
enter
jmp
xchg
push
jg
rcrb
in
(bad)  
pop
test
xor
push
out
sbb
adcl
pop
push
mov
js
lods
cmp
add
mov
icebp  
adc
jmp
ret
jbe
dec
mov
push
mov
bound
inc
jecxz
pusha  
mov
add
sub
scas
add
inc
pop
jecxz
je
cmp
xchg
push
add
popf   
repnz enter
in
push
jle
mov
aaa    
jns
ds ds dec
cmp
ror
adcl
je
insb
xor
setae
mov
in
scas
loope
mov
shrl
mov
and
lds
(bad)  
std    
sbb
cmpb
add
xor
jecxz
pop
in
shr
ss mov
and
fmull
(bad)  
jns
jno
es mov
pop
cmp
fnstsw
jo
aas    
mov
int3   
(bad)  
int3   
push
(bad)  
fcoml
gs mov
dec
js
(bad)  
mov
adc
jno
mov
aad
sbb
mov
das    
jnp
rclb
iret   
mov
cwtl   
mov
add
fs out
xchg
push
insl
decl
fcompl
test
jecxz
jae
rcll
(bad)  
addr16 out
cmp
jno
lea
pop
sub
hlt    
(bad)  
sbb
scas
sbb
jge
mov
or
imul
push
xor
mov
lods
movsb
ret    
add
test
jecxz
pop
(bad)  
jbe
inc
and
push
lds
sahf   
xchg
adc
pop
inc
xor
pop
xor
ljmp
orl
fistp
or
adc
out
inc
mov
test
in
das    
xlat
xchg
addr16 jb
lods
in
jle
add
cmp
fisttpll
jnp
repnz sbb
call
push
adc
push
and
dec
test
aam
push
dec
mov
cmp
loop
sarb
push
sub
in
mov
add
push
cmp
into   
les
push
lret
sub
(bad)  
dec
cmc    
outsb
pop
jo
jge
stos
or
pop
sbb
lret
cmpsb
clc    
push
mov
insb
les
lahf   
test
mov
sub
outsb
sbb
xchg
mov
push
cmpsb
mov
sarb
hlt    
es
rcl
insl
int3   
jle
push
idivl
and
cmpsl
xor
push
cmp
lds
pop
dec
lods
jl
gs lock mov
add
stos
adc
jg
cs pop
sub
out
xor
xchg
jp
int3   
pop
xlat
outsb
cltd   
inc
fs lret 
pop
fistpll
cmp
jb
lods
popf   
sbb
jae
iret   
mov
sub
mulb
jb
cmp
scas
sbb
jmp
pusha  
testb
xor
and
lods
push
sti    
push
andb
xchg
xchg
mov
xchg
pop
leave  
sub
dec
and
mov
cmp
nop
loop
xchg
and
lods
pop
push
push
jb
xor
repz inc
data16 std 
std    
sbb
or
and
imul
fcoml
sbbl
dec
mov
pop
stos
xchg
mov
mov
loop
xor
push
inc
rclb
into   
cld    
in
xchg
dec
sbb
sahf   
jg
jl
push
pop
adc
bound
pop
icebp  
sahf   
inc
push
sahf   
dec
dec
xor
scas
mov
(bad)  
hlt    
jne
sbb
xor
cmp
pop
jno
outsb
je
pop
or
xor
xchg
icebp  
inc
sbbl
pop
mov
add
mov
xchg
or
pop
add
xchg
stos
xchg
enter
mull
bts
jne
roll
repnz inc
add
dec
sbb
mov
stc    
mov
test
aas    
(bad)  
repz inc
cmp
hlt    
pop
cmpl
clc    
xor
loopne
enter
add
fstl
fwait
xchg
jno
mov
push
lods
frstor
xchg
push
mov
jno
cs dec
jle
in
cld    
jecxz
or
pop
sbb
push
(bad)  
cmp
inc
mov
push
mov
sbb
les
add
dec
insl
mov
(bad)  
mov
mov
pop
inc
fmull
scas
test
icebp  
mov
dec
add
xor
mov
mov
and
jb
mov
(bad)  
mov
xor
and
pop
add
inc
xchg
cmp
leave  
adc
call
sbb
fcomps
push
xor
aaa    
je
sbb
cmp
ret    
cmpsl
mov
pop
jmp
cs add
mov
lret   
(bad)
add
mov
cmp
in
popa   
fs sbb
in
in
scas
jns
cmc    
pop
sti    
inc
or
insb
das    
ret
push
jg
sub
test
pop
mov
mov
aas    
lods
(bad)  
out
pop
ss mov
cmp
xchg
adc
and
lret
mov
push
sub
add
adc
in
jo
cmp
dec
jp
loopne
cmp
lret   
xchg
imul
xchg
cmpsl
cmpsl
mov
scas
rclb
inc
mov
fist
sti    
dec
cmp
aas    
mov
fldl
dec
movsb
iret   
ss iret 
mov
jge
testl
mov
ljmp
add
and
jp
add
or
mov
xor
mov
inc
aam
jp
rcll
out
dec
cwtl   
xlat
int
cli    
pusha  
lret
jns
imul
or
pop
cmp
pop
jo
insb
inc
inc
lret   
sub
stos
frstor
insb
mov
xor
push
daa    
add
fs in
pop
cmp
mov
loopne
xor
inc
sbb
(bad)  
lock imul
xchg
mov
mov
test
or
add
cwtl   
clc    
xor
int
jne
int
add
mov
and
lds
pop
in
cmp
xchg
mov
ljmp
inc
dec
lea
jg
test
out
cmp
popf   
jns
stc    
mov
and
lea
cmp
xchg
addr16 mov
xchg
shlb
jns
xchg
push
test
add
mov
jmp
lds
or
cmp
mov
ss push
push
int3   
mov
mov
js
hlt    
lcall
mov
inc
mov
mov
inc
into   
jmp
xlat
fidivrl
inc
push
or
or
imul
mov
cmp
mov
loopne
scas
push
pusha  
xor
stc    
add
cld    
dec
mov
mov
jns
dec
popf   
je
imul
popf   
inc
fcmovnb
int3   
cld    
jle
adc
push
mov
mov
ret    
xchg
scas
sub
add
inc
ljmp
mov
mov
add
mov
sti    
lds
jp
lds
cmp
loope
pop
cmp
pushf  
pop
dec
popa   
popa   
jp
mov
xchg
fnstenv
mov
bound
jo
pop
xor
push
cwtl   
pop
dec
arpl
push
(bad)  
xlat
mov
mov
(bad)  
jae
pop
push
push
ljmp
push
movsb
inc
jmp
mov
push
clc    
ljmp
outsl
dec
ret    
dec
push
adc
jle
jg
xlat
enter
negl
iret   
jle
cwtl   
adc
mov
cli    
int
mov
add
push
jnp
mov
popa   
popa   
jo
sub
lcall
mov
loope
clc    
out
fdivrl
add
ret
das    
cmp
out
add
cmp
lcall
(bad)  {%k4}{z}
(bad)  
adc
adc
jns
shrb
add
aaa    
into   
mov
out
(bad)  
enter
jae
mov
mov
sbb
pop
xor
mov
loopne
in
sub
sub
mov
bound
fcmovbe
pop
jae
jnp
pop
adc
cmpsb
jmp
addr16
inc
mov
pop
dec
loope
nop
roll
sbb
add
scas
adc
cmp
pop
mov
subb
push
(bad)  
fcmovne
loope
cmp
addl
aaa    
enter
jecxz
es mov
pop
out
hlt    
inc
xchg
test
xchg
sahf   
lahf   
cmp
mov
sbb
xchg
mov
addr16 mov
mov
xlat
push
push
ficomp
jns
cli    
mov
adc
pop
pop
xchg
sar
xor
mov
pop
mov
pop
dec
jmp
rcrb
add
outsb
inc
push
popf   
sbb
nop
add
inc
cltd   
sub
adc
(bad)  
out
add
add
mov
push
std    
addb
xchg
mov
push
ja
lcall
out
inc
pop
xor
dec
mov
mov
ljmp
jp
scas
jbe
mov
sub
xor
cwtl   
add
mov
jp
xor
ret    
in
scas
aam
inc
xor
jp
mov
lods
loop
xor
dec
cs pop
cmp
pop
pushf  
pop
and
arpl
cmpsb
(bad)  
or
jno
dec
ror
into   
mov
cli    
add
xchg
stos
inc
scas
add
je
or
bound
xchg
sub
jle
fyl2xp1 
mov
ret    
add
int3   
jge
(bad)  
faddl
sbb
outsb
mov
mov
daa    
lds
stos
ljmp
or
cmpsb
or
pop
mov
shll
mov
addr16 repz mov
xor
inc
and
jmp
cs pop
lea
add
inc
dec
xchg
or
mov
xchg
cmp
lahf   
push
sbb
mov
inc
cld    
ret
xchg
pusha  
pop
xchg
jb
int3   
mov
xchg
lea
jbe
out
daa    
clc    
loope
dec
fildl
pop
out
hlt    
fisubrl
mov
mov
(bad)  
sub
jg
xlat
mov
mov
xchg
cs dec
sbb
inc
or
xchg
mov
out
scas
mov
int
add
adc
andnps
jbe
jae
jo
xchg
incb
mov
fimul
add
jmp
mov
daa    
lret
je
jbe
add
subl
fisttpll
loop
cmpsb
(bad)  
add
mov
push
lock dec
out
xlat
push
rcr
orl
adc
loope
and
mov
add
dec
sbb
imul
or
je
inc
into   
push
and
mov
cmp
push
les
jge
mov
mov
mov
sbb
orl
mov
push
add
push
mov
mov
std    
jge
popf   
(bad)  
add
mov
clc    
loopne
stos
sti    
jmp
notl
pushf  
push
mov
(bad)  
jbe
inc
fs fwait
ret    
push
dec
lock mov
lret
push
mov
and
scas
inc
add
movsb
data16 clc 
aas    
mov
cwtl   
popf   
inc
mov
xchg
push
stos
mov
cmpsl
clc    
mov
aam
adc
enter
pop
aas    
jnp
cltd   
add
aas    
hlt    
xor
xchg
sahf   
repz aam
add
mov
repnz enter
mov
out
adc
iret   
sbb
loope
xor
repz leave 
rcrl
roll
rorb
or
inc
gs scas
dec
add
(bad)  
in
test
lods
inc
xchg
imulb
clc    
mov
cs fcmovu
mov
fadd
sbb
inc
(bad)
pop
xchg
lods
and
ja
lret
mov
dec
loopne
lahf   
leave  
and
(bad)  
cmp
dec
cmp
push
dec
popf   
xor
lcall
dec
test
cli    
in
rolb
scas
lock or
popa   
gs inc
jbe
imull
jecxz
sbb
repz pop
imul
loopne
aas    
cmp
inc
out
mov
inc
push
xchg
imul
inc
xchg
push
out
mov
ret
mov
pop
leave  
mov
jo
les
cvtpi2ps
and
cmpsl
and
inc
imul
jns
pop
push
inc
in
xor
jae
nop
(bad)  
outsb
mov
xor
(bad)  
adc
call
andb
xlat
pop
fistpll
ds hlt 
sti    
jecxz
push
jns,pt
je
fdivp
jne
dec
cmc    
es sbb
mov
jp
sub
(bad)  
pop
xchg
mov
cli    
pop
scas
lods
lds
xchg
pop
(bad)  
cmpsb
fwait
negl
sbb
stc    
callw
xchg
shl
insl
shrb
shll
lock jbe
xchg
jge
arpl
cmpsb
loope
jge
sbb
fs sbb
jmp
test
js
xor
pop
jne
xor
ds cwtl 
or
cmp
mov
xchg
ret    
add
mov
data16 jnp
(bad)  
lds
fld
leave  
xor
out
add
push
push
mov
push
in
(bad)  
sub
jne
test
int
into   
sbb
mov
negl
mov
mov
jbe
sbb
add
cwtl   
dec
mov
sub
pop
pop
jle
arpl
sub
gs scas
pop
dec
lock jge
push
ret
jmp
jne
lds
iret   
cmc    
and
sti    
lock jmp
pop
mov
mov
addr16 jp
cmpsb
push
sahf   
(bad)  
insl
adc
bound
mov
nop
inc
(bad)
cmpsl
daa    
loopne
stc    
pop
fnop   
xor
faddl
cmc    
std    
or
fldt
inc
xchg
xchg
jl
fnstenv
ficoml
push
inc
sub
mov
add
out
imul
sbb
ljmp
pop
mov
(bad)  
add
dec
mov
sar
cmp
mov
clc    
mov
push
inc
jno
add
rolb
add
jmp
cld    
std    
sub
ret
mov
pop
hlt    
jmp
mov
cmpsl
mov
mov
sti    
push
pop
aaa    
dec
inc
mov
lods
lret
mov
pop
or
mov
lcall
andl
dec
clc    
cmp
pop
testl
jmp
jle
icebp  
inc
ss push
pop
fyl2xp1 
int3   
cmpsl
bound
(bad)  
iret   
out
xchg
and
adc
ja
enter
or
dec
inc
xor
dec
mov
fs cmp
shrb
out
xchg
inc
xor
mov
repnz nop
cmp
inc
jecxz
add
bound
jo
outsl
jae
sub
sbb
stos
xchg
gs iret 
(bad)  
mov
push
cmpsl
test
into   
gs aam
mov
inc
jnp
mov
test
shr
ss mov
fiaddl
or
pop
repz push
daa    
mov
push
dec
in
adc
mov
sub
mov
outsb
les
inc
sub
mov
mov
sub
call
or
ret
and
aaa    
pop
mov
repnz int3 
sbb
sbb
sbb
setbe
mov
out
cli    
mov
daa    
(bad)  
xor
mov
xchg
push
pop
push
pop
int3   
add
or
or
adc
xchg
dec
fisttp
mull
sbb
lcall
sbbb
xor
fisttpl
stc    
das    
fwait
std    
pop
int3   
cmp
xchg
es icebp 
icebp  
sub
mov
mov
pop
stc    
mov
jnp
pusha  
pusha  
aad
pcmpeqb
fcmovnbe
in
ja
xchg
jmp
adc
imul
mov
in
mov
pop
data16 int
iret   
lods
mov
nop
xor
xchg
out
jmp
add
ds adc
bound
ret    
aam
fwait
push
out
mov
xor
fdivrs
jne
cmp
stos
jge
xor
es sub
mov
pop
lock xor
and
dec
popf   
nop
and
jg
leave  
sub
test
xchg
andb
(bad)  
repz or
aad
mov
jmp
and
mov
cmpsl
or
(bad)  
(bad)  
out
adc
outsl
je
test
inc
rcr
sub
(bad)  
pop
movsb
xor
add
les
cmpsl
sti    
push
adc
mov
and
cwtl   
psubb
jecxz
mov
push
fs pop
ret
shrl
mov
or
sbb
mov
xchg
inc
adc
mov
mov
lahf   
les
icebp  
mov
or
outsb
test
mov
jnp
xor
pop
sbb
inc
pop
push
cmpl
shrl
cmc    
sub
lcall
sahf   
test
and
mov
inc
xlat
push
sbb
fild
(bad)  
fimull
lds
xchg
rclb
data16 and
pop
sub
stos
jle
jp
inc
dec
outsl
cmp
dec
scas
jecxz
or
jecxz
out
(bad)  
repnz std 
pop
in
(bad)  
adc
xchg
sbb
loope
jp
add
adc
pop
xchg
dec
sub
aad
sarb
in
lods
dec
jnp
sub
aad
jl
ja
sbb
adc
lds
ror
jns
inc
push
fsubl
jg
mov
jo
jne
xchg
or
out
btr
stos
fnstcw
mov
cmp
rolb
gs sbb
inc
(bad)  
ja
sub
je
aam
lahf   
dec
jne
pop
sub
cmp
mov
in
jecxz
outsb
mov
lahf   
out
shrl
mov
mov
out
sub
(bad)  
sub
lods
out
mov
xchg
xchg
mov
ret    
inc
mov
add
mov
dec
or
and
lahf   
jp
fs stos
popa   
lds
stos
cld    
sub
or
cmp
movsb
imul
iret   
aad
xor
mov
sub
ss pop
clc    
adc
or
push
pop
sti    
aaa    
and
addr16 enter
dec
mov
mov
push
nop
cmp
aad
or
sti    
lret
mov
mov
lock fs aam
inc
mov
mov
and
inc
mov
mov
mov
mov
(bad)  
jae
js
add
mov
and
aas    
out
icebp  
mov
sbb
iret   
jecxz
jno
lods
(bad)  
hlt    
jbe
pop
pop
mov
(bad)  
sub
jl
cli    
fistl
scas
jle
xor
pushf  
je
ret    
lods
xchg
inc
push
lahf   
jge
inc
adc
in
and
mov
sub
push
aaa    
mov
pop
push
sti    
pop
les
adc
ror
pusha  
fdivrl
fnop   
jbe
lret
pusha  
pop
fnstsw
or
mov
cmp
gs pop
mov
in
dec
ret
(bad)  
scas
(bad)  
js
insl
jno
(bad)  
jge
adc
cmpsl
push
outsl
adc
lea
shrl
push
add
ja
or
(bad)  
nop
mov
cltd   
jle
jle
bound
xor
fcoml
enter
aam
repnz xchg
push
repz pop
in
push
jns
nop
stos
pop
loopne
add
sbb
lds
cmp
ficomp
jae
lret
jle
jb
sbb
in
fwait
push
sbb
inc
popl
xor
pop
sub
pushf  
pavgb
adc
and
hlt    
xchg
(bad)  
arpl
int
icebp  
inc
es pop
xor
push
andl
jmp
mov
cmpsl
ret
les
jae
xlat
js
cmp
fs and
(bad)  
inc
arpl
into   
adc
ret    
or
cs fs mov
pop
in
push
(bad)  
sarb
imul
jg
popf   
popa   
ss jb
sbb
cmp
(bad)  
sub
push
(bad)  
dec
lea
cmc    
xor
es jmp
(bad)  
push
daa    
push
cwtl   
add
into   
andl
or
jp
and
test
or
aam
inc
jg
sub
pop
icebp  
jbe
fldcw
lds
js
rclw
ss dec
in
arpl
js
adc
inc
mov
stc    
mov
popa   
ljmp
add
xchg
aas    
xlat
push
mov
pop
xor
(bad)  
imul
(bad)  
(bad)  
pop
icebp  
adc
movsl
push
xchg
xchg
pop
pop
ffreep
es xchg
ss mov
dec
xor
push
cld    
std    
cmp
xor
lds
aam
popa   
dec
(bad)  
hlt    
insl
js
sahf   
sbb
xchg
out
scas
pop
cmp
iret   
mov
std    
sbb
xchg
ljmp
movsl
call
xor
lods
ret
dec
cli    
out
lods
nop
mov
out
mov
lcall
sbb
out
xlat
pusha  
das    
int
loop
adc
push
cmp
daa    
jae
xlat
aaa    
(bad)  
cmc    
dec
pop
add
pop
fs clc 
mov
fwait
inc
int
outsb
clc    
scas
adc
call
insb
mov
fwait
mov
jge
sub
and
cmp
sbb
add
out
movsb
push
cmp
push
sahf   
jecxz
fist
repnz lods
sbb
(bad)  
repnz cld 
js
ljmp
cs out
sub
mov
mov
in
dec
pop
shlb
aam
mov
and
ret
cmp
out
pop
push
es add
subps
push
pop
jo
mov
xlat
dec
xchg
mov
add
jge
dec
pop
icebp  
sub
cmpb
rcrb
cmp
(bad)  
or
loopne
es ds dec
jmp
or
imul
int3   
xorl
clc    
stos
mov
lret   
shll
mov
lds
add
hlt    
outsb
and
scas
scas
xor
ret    
jb
ss dec
mov
pop
and
cwtl   
push
popa   
insl
adc
cmpsb
xchg
lods
(bad)  
aam
mov
pop
mov
aam
data16 mov
popf   
mov
xor
add
cwtl   
rolb
or
cmc    
insl
mov
jg
xchg
in
int3   
add
push
xchg
clc    
ret    
dec
or
addr16 add
sbb
add
(bad)  
repnz sub
jle
or
out
push
xchg
pushf  
and
pop
enter
mov
bound
jge
les
mov
jmp
ja
jno
shrb
mov
mov
dec
xor
mov
pusha  
cltd   
out
sub
pop
imul
pushf  
mov
sahf   
(bad)  
(bad)  
mov
add
les
cmp
clc    
dec
sub
pop
xor
push
repnz sub
sbb
sbb
cmp
cld    
and
cmp
pushf  
mov
orl
call
sahf   
cmp
rep stos
jnp
fstl
mov
(bad)  
loop
xchg
lret   
inc
dec
in
and
in
shll
sbb
daa    
mov
fisubr
push
and
stos
jmp
sbb
cmpsb
mov
cmc    
or
pushf  
mov
jmp
imul
(bad)  
lods
(bad)  
mov
inc
test
(bad)  
(bad)  
nop
cmpsb
lret
into   
es
xchg
ret    
ffree
pusha  
dec
out
aam
xchg
sub
jbe
mov
(bad)  
push
sub
jne
lea
loope
aad
data16 icebp 
les
neg
dec
fdecstp 
fstps
dec
aas    
add
into   
jo
xchg
hlt    
mov
nop
inc
jns
xchg
cli    
mov
lahf   
add
mov
pop
mov
aam
dec
je
fsubrl
add
cmp
sbb
jae
mull
arpl
push
xchg
mov
cmp
outsl
push
dec
inc
ficom
scas
push
or
mov
aad
pop
jp
ss adc
pop
or
iret   
push
movq
out
inc
insl
mov
mov
push
std    
fbstp
enter
cmc    
testb
ja
cmc    
in
in
push
pop
sbb
lahf   
push
movsl
dec
pop
push
xor
ss adc
insl
out
mov
fwait
push
fs dec
lret   
ja
push
scas
xor
sbb
cmpsb
ljmp
in
lcall
shrl
jae
jo
add
mov
mov
ja
push
hlt    
loop
popf   
xlat
repnz mov
mov
(bad)  
idiv
xor
cmp
aaa    
push
pusha  
add
outsb
cmp
push
bound
cmp
adc
fs dec
clc    
mov
bt
add
cmp
aad
je
dec
adc
out
push
jno
ret
ror
push
jmp
or
lahf   
lret
or
adc
inc
sahf   
cmp
not
push
mov
sbb
inc
jo
ret    
add
in
fisttp
adc
cld    
cmp
shll
jg
dec
adc
adc
pop
inc
mov
scas
repnz
jne
(bad)  
or
jmp
repnz xor
sahf   
popa   
and
sbb
jb
roll
xor
jo
mov
cmp
adc
in
test
loop
lea
popf   
pushf  
and
pop
add
out
lret   
shrb
icebp  
or
imul
jg
sbb
fidivrl
xchg
add
jl
pusha  
scas
in
imul
push
lahf   
gs sub
sub
enter
stc    
push
xchg
add
dec
cvttps2pi
push
(bad)  
jbe
cmc    
aam
pop
hlt    
mov
shlb
sub
test
lcall
(bad)  {%k4}{z}
into   
xchg
and
lock popa 
push
cmp
or
jnp
scas
mov
(bad)  
daa    
mov
adc
and
lea
mov
push
ja
cltd   
out
lahf   
mov
jns
bound
dec
xor
insl
jbe
out
das    
and
xchg
out
imul
fnop   
sar
fs push
movsb
pop
(bad)  
jae
xor
flds
sbb
jmp
mov
sub
sbb
xor
ficoml
jmp
jne
or
(bad)  
popa   
xor
mov
add
es jb
sub
mov
fstl
or
popf   
cmc    
inc
rorl
test
xlat
popa   
push
fldcw
xchg
data16 outsb
lret   
loopne
in
scas
stos
cmp
adc
lahf   
lock add
mov
pop
in
sub
mov
dec
cmpsl
fidiv
inc
dec
(bad)  
jl
push
enter
push
push
sbb
imul
call
lds
test
sbb
es cli 
fwait
xchg
out
pop
dec
jecxz
pop
sbb
dec
push
test
mov
clc    
adc
dec
das    
es in
in
movsl
mov
jmp
movsl
mov
arpl
add
scas
out
sbb
loop
leave  
push
std    
add
push
in
jecxz
popa   
dec
leave  
sahf   
cmp
outsl
out
push
push
or
push
mov
lahf   
mov
pop
subb
add
add
sarb
push
add
dec
add
pop
or
nop
dec
dec
ficompl
xlat
xor
pop
fwait
push
xor
mov
decl
xchg
rclb
jl
data16 mov
(bad)  
aaa    
out
jae
mov
sbb
xchg
iret   
jns
push
vsubsd
or
nop
(bad)  
shrb
movsl
lods
addr16 pop
outsl
ja
sub
repz jno
daa    
ds daa 
repz inc
or
jno
leave  
cmp
call
icebp  
int
add
mov
shr
rcrb
cli    
addr16 test
cld    
scas
sub
mov
and
mov
mov
out
sub
push
add
mov
(bad)  
pop
jle
sti    
push
sbb
xchg
cmp
movsl
cmp
ret
push
in
cmc    
xor
daa    
xchg
movsb
rorl
sub
je
jg
imul
std    
sbb
xchg
push
test
xchg
enter
cmp
fcompl
cld    
xlat
adc
loope
incl
aad
dec
pop
mov
or
push
and
jge
jp
mov
dec
pop
fmull
inc
inc
add
mov
mov
outsl
xchg
lock std 
shrl
out
dec
bound
pop
repnz addr16 fmul
aaa    
js
xor
fsubs
repz inc
or
out
repz and
test
xor
and
pop
fs push
or
cltd   
(bad)  
jb
push
xchg
les
lea
push
sbb
das    
dec
insb
scas
mov
ds dec
xchg
dec
add
popa   
mov
add
les
push
xchg
aam
jge
sub
pop
mov
push
call
push
aam
or
mov
negl
loop
sub
cmp
movb
out
popa   
mov
lods
xchg
out
cmp
sahf   
xchg
sbb
loope
mov
loopne
int3   
hlt    
(bad)  
mov
movsl
les
xchg
add
stos
and
cmpsl
cltd   
push
test
es stos
ja
mov
push
mov
and
das    
out
push
repz mov
imul
mov
test
add
xor
pushf  
std    
cmp
stos
jnp
mov
mov
xchg
psubusb
sub
push
inc
adc
pop
pop
adc
and
test
cli    
push
sub
push
push
or
es push
dec
pop
dec
out
fbstp
xchg
cmp
nop
inc
mov
add
cmp
xchg
je
test
cmp
es
xor
mov
sbb
push
insl
add
add
(bad)  
inc
cs stos
sbb
aam
dec
xor
fsubrl
stc    
mov
rcl
push
popf   
cmp
jb
mov
jmp
int
(bad)  
cmc    
mov
add
mov
sbb
loope
nop
or
fiadd
mov
sub
loopne
and
ds push
sbb
ret    
fisubr
addb
sub
cwtl   
mov
insl
cmp
adc
add
dec
adc
mov
sbb
mov
call
fcom
jnp
mov
mov
outsl
xor
in
add
jns
out
pushl
jne
pop
adc
dec
scas
bound
int
jle
ds
fistp
pop
in
rcrl
in
mov
sub
call
pop
repz adc
in
imul
(bad)  
adc
sub
jg
inc
xor
loopne
jl
jg
or
aam
shl
sub
out
popf   
pusha  
ret
mov
inc
je
inc
mov
imul
lds
sarb
pop
(bad)  
cltd   
outsl
imul
test
push
clc    
mov
xchg
jns
int
adc
dec
lea
adc
or
popf   
push
jno
push
adc
imul
xor
test
popl
gs das 
data16
ret    
adc
xorb
sbb
scas
and
jb
insl
jnp
push
out
mov
or
pop
jecxz
repz xchg
icebp  
pusha  
xor
sub
int
cmpsb
rorl
lahf   
add
data16 out
adc
das    
aas    
sarl
(bad)  
pop
cltd   
pop
and
sti    
fs and
push
add
push
ljmp
outsb
loop
in
sbb
lods
addr16 dec
jg
js
push
pop
lcall
add
mov
sbb
add
pop
xchg
adc
das    
mov
push
(bad)
sub
or
mov
lret
jge
inc
je
cli    
pop
or
sub
ret    
addl
or
jle
adc
mov
rcrb
adc
jns
lret   
pop
mov
sarb
jg
mov
pop
aam
idivl
imul
mov
pop
pop
mov
xor
sahf   
(bad)  
aaa    
mov
loop
jg
jg
sub
stos
and
gs mov
repz push
popf   
xchg
sbb
lcall
pusha  
or
jne
jg
call
cmp
xchg
mov
jmp
mov
mov
sahf   
jnp
test
pop
xor
cmc    
ja
cmp
sbb
sbb
cmp
xchg
pop
mov
repz adc
stos
in
fdivrs
add
sbb
arpl
rcrl
mov
aaa    
fldcw
or
ds shll
repnz dec
pop
jge
bound
xor
jecxz
(bad)  
fidivl
pop
or
adc
xchg
mov
mov
ja
and
dec
(bad)  
(bad)  
or
sbb
xchg
imul
xchg
push
cmp
leave  
into   
in
test
movl
je
push
cld    
mov
lock into 
or
xchg
mov
add
xchg
adc
dec
xor
(bad)  
(bad)  
int
in
pusha  
dec
mov
mov
inc
test
repz adc
cmp
inc
push
movsl
ds hlt 
xor
lea
pop
cmc    
mov
popa   
loopne
dec
shr
push
inc
or
push
cmp
mov
scas
arpl
push
cmp
adc
sbb
jne
lds
bound
pinsrw
aam
mov
adc
out
mov
dec
arpl
xchg
test
stc    
push
push
push
decb
out
into   
fisubl
sbb
dec
gs cld 
and
push
int
jnp
jo
call
inc
dec
outsb
ljmp
sbb
test
mov
notl
into   
jl
xlat
sti    
sbb
jmp
or
mov
out
jmp
dec
cmc    
enter
aas    
push
or
imul
flds
xor
mov
or
movsb
xchg
jge
jp
push
sub
out
outsl
(bad)  
mov
sbb
pushf  
sbb
lcall
int
shl
inc
xchg
stc    
xor
je
popa   
in
adc
repz mov
lret   
loop
fcomps
push
push
jp
xchg
dec
mov
js
or
sub
xlat
cmc    
xchg
mov
mov
stos
xor
loope
pop
loopne
imul
lods
or
pop
or
jne
jns
mov
inc
and
test
es out
call
lock and
int
sub
in
in
(bad)  
notb
inc
mov
jl
mov
sahf   
test
adc
out
lret   
cmc    
and
jle
into   
inc
mov
clc    
push
jo
mov
pop
mov
mov
lods
inc
mov
jne
lret
push
jb
push
push
xchg
cli    
mov
ret
popa   
pusha  
shll
xchg
and
andb
mov
insb
fidivl
sarl
pop
das    
adc
sub
pusha  
sbb
(bad)  
xor
jae
dec
dec
jo
je
dec
cwtl   
jp
sbb
dec
in
aaa    
das    
xor
rcrb
push
or
xor
and
lcall
fyl2x  
test
cli    
dec
fprem1 
jno
sbb
das    
push
and
pusha  
(bad)  
jecxz
ja
xor
vpaddusw
sbb
mov
aad
jns
lods
jp
cwtl   
cmp
mov
and
pop
xchg
adc
cmp
jno
xchg
push
cltd   
add
mov
push
xchg
sbb
js
push
(bad)  {%k4}{z}
fsubrp
sbb
adc
lds
data16 loopne
xor
fcmovb
imul
or
jae
mov
push
aad
inc
popa   
test
test
clc    
test
mov
mov
mov
or
cmp
pop
pop
bound
js
frstor
addr16 iret 
jl
inc
pop
(bad)  
xor
pop
jns
push
std    
movsb
jne
or
cmpsb
in
outsl
cmp
jne
xchg
movsb
cmpsl
mov
pop
stc    
lods
(bad)  
mov
cmc    
mov
mov
or
cmp
imul
mov
insb
std    
loopne
push
scas
addr16 sub
jbe
adc
stc    
or
jns
fwait
sub
mov
aas    
rcl
out
loopne
pop
jle
push
aas    
in
daa    
add
lret   
sub
adc
mov
or
sub
das    
cli    
push
push
dec
jns
xchg
movsb
jge
add
fs or
int3   
inc
dec
lods
lea
jbe
(bad)
mov
shlb
or
pop
and
inc
orl
inc
(bad)  
enter
repnz sub
lcall
lret   
in
fistl
out
dec
lcall
mov
mov
cmc    
pushf  
sbb
mul
sub
inc
inc
cmp
ret    
loopne
je
icebp  
fcompl
mov
cmp
xor
jge
inc
mov
out
jb
scas
mov
xlat
fistpll
rorb
push
(bad)  
sti    
mov
or
fldenv
scas
test
add
mov
mov
push
xor
dec
and
(bad)  {%k4}{z}
(bad)  
movsb
cli    
xchg
sub
push
out
mov
jns
push
or
push
fwait
scas
sub
fstps
jle
mov
js
sub
lret
push
fadds
pop
xchg
lds
adc
cmp
mov
push
in
clc    
(bad)  
sbb
sub
inc
adc
mov
(bad)  
(bad)  
stos
jp
dec
imul
out
pop
std    
fidivr
frstpm(287 only) 
pop
in
das    
jnp
insl
lods
or
imulb
push
pusha  
hlt    
inc
inc
mov
cs mov
mov
pusha  
daa    
cmp
mov
in
stc    
push
loopne
add
or
add
ret    
mov
das    
inc
(bad)  
in
mov
or
mov
inc
sbb
push
out
jbe
out
lock lea
pop
(bad)
xchg
mov
test
ljmp
push
xlat
scas
mov
jmp
sub
jne
movsl
mov
popa   
sbb
cmc    
and
dec
(bad)  
js
mov
jno
dec
mov
dec
sub
mov
xlat
lcall
stc    
pusha  
cwtl   
lret
mov
pop
xor
mov
repnz fadd
add
mov
push
pop
xchg
shr
pop
pop
jbe
push
pop
mov
dec
mov
test
sub
xchg
fisttpl
mov
scas
into   
pushf  
sub
pushf  
cwtl   
xchg
or
push
cmp
lock push
xor
add
sarb
aas    
xorl
mov
leave  
idivb
lods
shll
push
ljmp
(bad)  
mov
push
notl
pop
hlt    
mov
push
push
les
scas
addr16 jg
pop
stos
push
adc
xchg
movsb
inc
xlat
adc
and
stos
mov
mov
outsl
pop
insl
insb
and
add
mov
stc    
jo
(bad)  
mov
xor
add
fisub
scas
adc
ror
in
(bad)  
ss push
jne
pop
es loop
sub
stos
jns,pt
jnp
repz sbb
mov
jae
cmp
arpl
mov
dec
cwtl   
stos
cmp
jl
dec
out
jns
fistp
mov
cmp
sbb
pop
mov
push
push
mov
icebp  
add
mov
(bad)  
loopne
jecxz
adc
loope
ds push
xor
and
xchg
imul
fmuls
dec
or
ret    
test
mov
ptest  
adc
cmp
sbb
ljmp
jnp
lock nop
xchg
mov
dec
add
mov
in
iret   
or
jbe
xchg
dec
mov
jno
lcall
imul
fsubl
jle
fdivrl
js
or
fsubp
test
mov
addr16 int3 
sub
mov
(bad)  
shlb
push
fwait
stc    
imul
ja
int
xchg
xor
xchg
mov
test
pushf  
or
mov
xchg
add
dec
jae
inc
dec
mov
enter
cmpl
push
and
mov
cmp
jne
in
pop
fdivs
ja
test
in
sub
cmp
movsb
jbe
cwtl   
jo
popa   
and
or
shrd
lods
cltd   
add
(bad)  
cmc    
jae
je
daa    
loopne
pop
roll
mov
addr16 push
cmpsb
cs xchg
push
jo
and
push
insl
insb
xchg
mov
dec
lret
imul
pop
cli    
and
dec
and
icebp  
cmp
(bad)  
aaa    
lcall
enter
insl
out
inc
add
push
adc
pushl
mov
mov
pusha  
inc
jg
mov
adc
imul
push
xor
dec
pop
int
into   
aaa    
sbb
out
mov
add
(bad)
lret
cmpsb
jmp
mov
xchg
add
inc
add
mov
jbe
jne
iret   
mov
or
sarb
jg
add
adc
mov
stc    
push
lahf   
jge
outsl
loope
scas
pop
out
(bad)  
pop
ret    
outsb
clc    
nop
and
push
negb
movl
or
sub
repnz add
mov
push
and
mov
popf   
xor
mov
ret
mov
mov
push
push
cli    
add
jb
dec
mov
xorl
and
cmpsl
out
and
in
rcrl
dec
jae
popa   
in
pop
or
lret
lcall
bound
mov
mov
sahf   
imul
cmp
jp
lret   
cld    
jne
aad
mov
cmp
out
push
cli    
mov
cwtl   
xchg
dec
lds
mov
in
dec
(bad)  
jo
not
pop
test
popf   
aas    
cmp
(bad)  
scas
dec
(bad)  {%k4}{z}
(bad)  
push
push
mov
(bad)  
pop
cli    
sbb
xchg
and
push
mov
sub
and
int
fs mov
jno
sbb
sbb
outsl
cmc    
xor
dec
rclb
(bad)  
scas
dec
and
repz test
xorl
adc
das    
cmpl
pop
push
sub
jno
jbe
pop
jl
(bad)  
mov
insb
lcall
mov
mov
mov
es and
dec
push
cmp
icebp  
jbe,pn
mov
roll
mov
ss in
push
sbb
mov
jle
adc
imul
bound
push
jbe
push
adc
mov
inc
popa   
xchg
dec
leave  
mov
(bad)  
jae
and
or
movsb
xlat
fbld
xchg
adc
and
push
mov
fstpl
ljmp
loope
sqrtps
and
das    
fsubp
jno
notb
stc    
icebp  
stc    
int
in
and
inc
mov
stos
int3   
fwait
out
sahf   
xchg
in
imul
leave  
push
stos
adc
(bad)  
mov
mov
rorl
jmp
push
sub
mov
and
mov
mov
push
outsb
into   
mov
xchg
imul
int
add
fwait
jb
pop
xchg
lret
sbb
fs pop
jb
sub
cmpsl
dec
mov
scas
cmp
adc
adc
adc
sub
jmp
repz cld 
or
pop
addl
adc
sbb
jg
jae
xchg
add
shll
or
lret
adc
fstpt
test
dec
(bad)  
clc    
or
xchg
jl
pusha  
cmp
add
mov
cmp
repnz mov
fild
sbb
andl
cltd   
lcall
test
out
arpl
sub
imul
cltd   
jno
or
outsl
aam
push
mov
mov
add
dec
pop
test
notb
(bad)  
out
dec
mov
xor
mov
in
mov
int3   
shlb
or
jo
into   
into   
xor
test
cltd   
xchg
sub
mov
add
xchg
sub
insb
jl
pop
dec
mov
or
aaa    
test
xor
cmpsb
testb
int3   
adc
mov
cmc    
inc
rorl
adc
imul
xchg
aas    
push
sbb
add
(bad)  
sarl
dec
aas    
cmpsb
push
add
jns
or
ficompl
rcll
mov
fist
or
je
add
dec
cmp
jecxz
ds cmp
scas
iret   
push
icebp  
sbb
adc
int3   
add
out
andl
mov
lea
xor
insb
push
std    
push
movsb
add
push
jmp
adc
cmc    
xchg
inc
pop
out
pop
mov
lcall
or
xlat
xchg
shrb
push
ss in
mov
or
flds
fisubrl
pop
add
movsb
fnsave
push
add
(bad)  
mov
lea
inc
lea
adc
xchg
fmull
xor
rorb
mov
clc    
adc
mov
test
pusha  
lcall
fnop   
insl
lock mov
dec
test
sahf   
xor
iret   
mov
dec
call
mov
push
rorb
inc
adc
dec
mov
and
into   
fs mov
loopne
add
fld
jle
and
fdivrs
test
push
cli    
imul
push
insb
push
jle
cmp
add
ljmp
std    
fisubl
idivb
cltd   
out
dec
xor
xchg
les
dec
inc
push
xchg
push
cmpsl
repz and
push
int3   
(bad)  
push
push
pop
movsl
fisubr
mov
loope
(bad)  
aam
jle
sub
mov
mov
push
mov
xlat
loop
addr16 je
add
add
add
adc
and
sbb
(bad)  
sub
shrb
and
dec
int3   
mov
(bad)  
call
aad
rcl
aad
dec
or
push
mov
fbld
aas    
(bad)  
je
dec
(bad)  
push
fidivrl
xchg
add
(bad)  
jmp
sbb
dec
mov
push
jns
xchg
repnz
push
xor
push
imul
fild
(bad)  
enter
icebp  
add
repz jecxz
pop
sub
adc
pop
outsl
pop
bound
adcl
popf   
mov
mov
sbbb
popf   
cli    
popa   
aas    
and
xor
es out
inc
ss or
scas
movsl
inc
test
scas
lds
imul
push
pop
dec
dec
(bad)  
jb
dec
je
add
xchg
icebp  
js
push
out
lahf   
test
sub
out
dec
movsl
sub
outsb
mov
(bad)  
xchg
jle
push
mov
cmp
sub
shll
sbb
sub
icebp  
add
adc
lods
push
out
or
std    
mov
movsl
ret    
push
test
cmp
rclb
nop
stos
pop
popa   
lods
sbb
push
mov
inc
les
push
inc
sub
jp
loopne
lods
andl
inc
jbe
push
stos
cmc    
push
fwait
push
popf   
dec
add
sbb
lcall
out
sahf   
ret
jno
mov
xchg
dec
jmp
clc    
js
movsl
aas    
dec
sub
lods
mov
ret
iret   
outsl
aad
xorb
xor
lea
pop
movsl
pop
or
and
leave  
ss cli 
adc
faddl
icebp  
dec
and
lods
push
add
cmp
bound
inc
add
pop
lods
ljmp
adc
out
sub
cmp
mov
fistl
pop
daa    
int
or
lds
aas    
out
sbbl
xor
das    
pop
(bad)  
pop
xor
loop
pop
pop
repz ss fs stc 
lret   
in
js
add
cmpsl
cmp
out
xchg
mov
xchg
inc
push
in
out
repnz pop
sti    
cmp
add
rclb
outsl
or
push
xor
ljmp
dec
mov
mov
loopne
fdivrs
inc
std    
xchg
fs pusha 
jg
(bad)  
aas    
sub
sarb
cmpsb
aaa    
idivb
mov
lods
xchg
xchg
pop
and
mov
mov
(bad)  
lods
fidivr
adc
arpl
inc
sub
and
add
rcrl
adc
repnz mov
mov
inc
xchg
imul
inc
or
sar
fstpt
sbbb
inc
cmp
add
inc
sub
jg
mov
addr16 inc
xor
addr16 pop
movb
sub
xchg
pop
push
or
cltd   
xchg
std    
mov
xchg
ss pop
jecxz
sbb
mov
push
inc
push
test
scas
insl
dec
lods
(bad)  
and
loope
in
out
icebp  
push
or
xchg
arpl
out
mov
cmpsl
scas
test
out
jecxz
mov
sub
(bad)  
adc
gs cmp
adc
jns
cmpsb
jecxz
add
emms   
mov
imul
dec
std    
xor
dec
sbb
addr16 xchg
cltd   
dec
or
xchg
mov
and
pop
sahf   
sub
enter
xor
pop
insl
mov
push
sub
pop
mov
or
xchg
and
cltd   
pop
int3   
pop
xor
and
inc
lock frstor
jecxz
cmpsb
cmpsb
insb
clc    
stos
cmp
ljmp
xor
out
in
test
fwait
inc
int3   
cld    
jae
in
ss adc
cmp
xchg
shlb
sahf   
pop
movsl
ret    
inc
jl
bound
aaa    
std    
out
cs hlt 
test
xor
arpl
add
sbb
pop
pop
cs or
scas
or
cmp
fdivs
cmp
cmp
dec
dec
mov
mov
mov
xchg
shll
out
cmpsb
cld    
sub
mov
push
inc
jnp
mov
aad
data16 jecxz
mov
ret
push
xchg
in
out
ret
dec
add
add
shlb
les
int
lods
inc
jns
int3   
loop
pop
add
xchg
int3   
pop
test
add
incb
mov
cmp
mov
cmp
dec
cmp
ret
cmpsl
sub
aad
fnstcw
leave  
mov
nop
sbb
ss jle
arpl
adc
mov
push
out
xchg
sbb
add
aam
icebp  
out
sbb
and
adc
iret   
or
xchg
jno
mov
jecxz
cmp
insl
lcall
xchg
jp
sahf   
sub
pop
out
clc    
mov
fldenv
inc
sbb
in
mov
push
into   
mov
add
and
movl
sahf   
sub
insl
or
outsb
xor
pop
dec
out
inc
ret
data16 sub
sbb
pop
sbb
js
stos
dec
movb
dec
sbb
(bad)  
pop
fsub
into   
xor
arpl
sub
dec
lret
fsincos 
jp
testl
lcall
mov
xchg
push
ja
jg
sub
repnz xor
dec
jp
aam
and
rcr
outsb
and
mov
ds cli 
enter
mov
out
cmp
add
push
nop
add
mov
add
inc
aad
(bad)  
iret   
and
test
sbb
ljmp
dec
das    
jne
shr
mov
test
mov
mov
xchg
xor
or
adc
push
xchg
mov
les
aad
pop
gs cmp
nop
pop
mov
sub
or
xor
(bad)  
xchg
pop
test
addr16 sbb
jg
push
push
mov
das    
lahf   
pop
mov
add
add
dec
inc
dec
inc
scas
inc
pusha  
(bad)  
or
add
add
(bad)  
(bad)  
(bad)  
incl
add
add
add
add
add
add
jns
je
insl
cs inc
jb
ja
outsb
addr16 sub
push
gs jb
imul
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
xor
data16 aaa 
xor
fs xor
add
adc
gs insl
cs inc
jb
ja
outsb
addr16 cs inc
imul
add
popa   
je
pop
add
add
add
add
add
lsl
add
jno
add
add
or
or
add
or
add
add
add
dec
or
add
add
(bad)  
and
add
add
inc
dec
inc
add
mov
or
popa   
add
jo
pop
jae
add
ret    
add
push
ret    
add
outsl
test
add
cmp
push
push
test
inc
outsb
add
pushf  
sub
cmp
(bad)  
arpl
mov
mov
in
bound
out
push
cs pop
dec
mov
xchg
(bad)  
(bad)  
xchg
fildl
sbb
pop
movsb
or
mov
mov
(bad)  
xchg
push
push
jb
mov
xchg
inc
mov
cmp
jmpw
int3   
scas
std    
mov
dec
pop
xchg
xor
je
js
ljmp
jecxz
arpl
mov
push
shr
fidivr
(bad)  
mov
sahf   
outsl
or
cmc    
xchg
in
mov
or
cmpsl
dec
and
cli    
mov
xchg
jns
mov
loope
pop
add
inc
jg
sbb
imul
dec
rcrb
pop
sbb
push
popf   
in
test
lcall
add
mov
insl
fidivrl
out
jle
jecxz
mov
pop
pop
cs push
movsl
scas
mov
test
adc
pop
push
adc
sbb
jb
inc
shlb
fimul
jge
inc
and
in
xchg
(bad)  {%k4}{z}
out
jle
mov
mov
daa    
lds
test
push
lock cmp
gs enter
(bad)  
clc    
aad
lods
test
and
dec
add
sbb
les
pusha  
mov
(bad)  
scas
mov
add
cwtl   
add
or
mulb
mov
lea
addr16 ss dec
ljmp
les
ror
xor
aad
repz mov
cmpsb
push
or
cmp
mov
clc    
jns
jmp
sbb
loopne
jne
sbb
enter
push
mov
xor
movsb
fsubrs
xchg
and
mov
insb
jle
gs cmp
jecxz
push
and
jge
sbb
push
mov
pop
xlat
insb
sub
mov
xchg
and
inc
addr16 mov
les
call
dec
arpl
inc
int3   
into   
push
mov
out
cmp
jae
add
std    
lcall
mov
into   
bnd jle
(bad)
jl
xchg
pop
mov
pop
inc
jmp
es cltd 
cmpsl
fcoml
ljmp
hlt    
enter
mov
adc
jne
cli    
int
xchg
jge
sbb
ds mov
cmp
call
adc
(bad)  
in
(bad)  
ffreep
and
out
bound
arpl
cld    
jle
sbb
aas    
mov
daa    
inc
xor
inc
inc
mov
aad
inc
jbe
sub
push
sbb
fnstenv
repnz inc
test
test
mov
test
stos
xor
lock mov
les
xchg
and
and
mov
insl
xchg
dec
xchg
out
inc
sub
addr16 gs xchg
sub
and
dec
pusha  
mov
decb
jne
jge
leave  
incl
hlt    
pop
push
push
xor
xchg
jbe
pop
sub
adc
std    
push
(bad)  
mov
test
dec
xchg
mov
inc
mov
je
inc
test
cmp
push
ds dec
xchg
jg
clc    
(bad)  
add
dec
cmpsb
xor
call
bound
arpl
xchg
sahf   
add
add
xlat
or
cmp
inc
mov
pusha  
aas    
incl
ljmp
out
pop
cltd   
or
and
outsl
jle
(bad)  
jg
xchg
jecxz
das    
pop
stos
scas
mov
imul
sti    
enter
scas
jbe
dec
dec
fistpll
lea
aaa    
jne
pop
push
js
mov
lods
cmpl
adc
mov
rcrb
xchg
push
cli    
mov
test
bound
dec
lret   
pxor
mov
movb
pushf  
das    
pop
and
(bad)  
mov
out
cli    
cwtl   
mov
pop
sub
sbb
mov
inc
sbb
sub
fdivrl
iretw  
ror
push
mov
scas
adc
push
mov
mov
sbb
js
xlat
adc
sub
push
sub
popf   
(bad)  
mov
bound
add
decl
jmp
sar
arpl
add
lcall
fildll
jb
and
scas
pop
out
lret   
sub
mov
cmp
xlat
inc
jl
and
push
mov
stc    
jmp
stos
test
rcrb
cmp
pop
mov
arpl
mov
aas    
fcomps
mov
outsb
cmp
jne
std    
lret   
or
jcxz
mov
scas
cwtl   
outsb
fdivl
aaa    
in
inc
lds
es in
inc
lahf   
inc
call
mov
and
fdivr
pop
test
in
sbb
outsb
dec
std    
cmp
test
inc
movsb
daa    
paddd
in
(bad)  
bound
mov
les
imul
mov
stos
test
lahf   
and
push
mov
test
inc
cmpsb
add
int
mov
rorl
scas
cmpl
rcll
mov
scas
sub
fs mov
in
jmp
jne
add
sbb
push
xchg
lret
data16 daa 
test
sbb
in
xorb
xor
mov
add
mov
imul
sub
or
mov
out
mov
ret
adc
jno
pop
les
and
push
loop
je
je
sub
enter
(bad)  
pop
aaa    
test
push
ja
into   
jns
xor
sub
outsl
xor
pop
push
pop
pusha  
rol
pop
stc    
push
cmpsl
fwait
test
cwtl   
mov
dec
dec
mov
pop
test
test
lahf   
out
popf   
dec
mov
xor
addr16 pop
mov
mov
repnz inc
ds mov
test
lret   
jae
aas    
loop
add
xor
stos
iret   
inc
sarl
jns
cs insl
xchg
jns
mov
sbb
jae
mov
aad
adc
mov
pusha  
add
test
and
in
shlb
test
int3   
les
lods
(bad)  
lock xchg
ret    
clc    
das    
into   
scas
fidiv
push
jo
insb
adc
jp
imull
jae
fidivl
cltd   
and
shll
sbb
mov
test
repnz inc
jp
inc
or
sbbl
(bad)  
rcrl
dec
fdivrl
addr16 int3 
lret   
lods
or
mov
sbb
mov
add
rol
dec
nop
dec
lds
fldl
ljmp
ret    
sti    
stos
pusha  
push
pop
lock dec
out
js
in
(bad)  
dec
std    
pop
push
mov
lea
and
mov
jno
out
sbb
cli    
mov
push
jno
je
jg
add
or
fsubrs
sbb
or
lcall
sbb
leave  
clc    
(bad)  
fsubrs
loop
push
cltd   
cmp
popf   
sub
push
add
jbe
push
(bad)  
aas    
xchg
xor
scas
xchg
inc
mov
(bad)  
inc
add
(bad)  
mov
out
cld    
add
imul
cmp
stos
loop
nop
pextrw
dec
xorb
popa   
sti    
xchg
hlt    
ret
lret
mov
cmc    
testl
outsb
add
xchg
mov
lcall
pop
push
rcrb
jg
stc    
cmp
add
in
mov
add
add
repnz lea
loopne
pop
sub
mov
sbb
mov
mov
push
xorl
jnp
fsubrl
inc
out
mov
fnstenv
scas
push
adcb
and
xlat
rcrl
or
subl
jp
fstp
divps
add
or
xor
mov
or
xchg
cmpsb
and
cs stos
pushf  
jno
cmp
jno
daa    
xchg
lds
stos
or
or
xchg
movsl
mov
adc
(bad)  
out
das    
or
mov
adc
insb
pop
or
lock
iret   
push
insb
mov
push
push
data16 or
out
and
in
ret    
fistpll
in
mov
stos
xchg
ljmp
lock xchg
add
and
rcrb
nop
inc
push
push
shlb
ret
es ret 
negl
xchg
or
cs inc
ss push
mov
shlb
jg
mov
lods
fimul
and
ret
mov
test
mov
jo
mov
pop
push
xchg
loopne
xor
inc
leave  
pop
inc
ljmp
dec
pusha  
pop
cld    
cmp
stos
or
xor
sbb
jbe
popf   
iret   
and
pop
jmp
out
daa    
inc
lods
jno
xchg
dec
sahf   
cwtl   
xchg
clc    
pop
lret
dec
rcrb
jae
lea
sub
je
xchg
into   
dec
(bad)  
leave  
and
and
dec
pop
add
es ss out
pop
mov
or
xchg
jns
sub
jecxz
dec
lcall
and
jo
ficompl
nop
imul
lock ja
or
(bad)  {%k4}{z}
fldt
call
loop
in
jb
aas    
movsl
adc
inc
dec
test
repz fistp
inc
insl
xchg
sub
lds
mov
and
jne
fstps
test
sub
add
dec
stos
xor
nop
lcall
cmp
dec
push
pop
add
movsb
sub
push
mov
cmpsl
mov
xchg
rolb
add
inc
popa   
lds
(bad)  
and
sub
stos
mov
ret
sahf   
mov
popa   
push
and
fisubl
mov
inc
insl
jg,pt
movsl
ljmp
inc
outsb
ror
pop
pop
dec
add
rolb
rorl
in
outsb
out
lock jp
inc
mov
mov
les
dec
scas
fs push
mov
ret
rolb
scas
aam
outsb
call
sub
fwait
pusha  
and
icebp  
pop
outsb
fstl
or
lcall
leave  
jno
daa    
push
inc
xor
jp
fwait
(bad)  
lret   
mov
fiaddl
mov
aaa    
(bad)  
xor
scas
mov
sub
dec
movl
into   
dec
out
imulb
insl
stc    
push
mov
xchg
fcoms
mov
cmp
aam
xchg
pop
mov
dec
mov
mov
jecxz
ljmp
stc    
movsb
or
jnp
leave  
data16 test
(bad)  
repnz les
fsubr
lret
loopne
add
or
sbb
ds stos
dec
lret
fnstenv
jbe
and
xrelease xchg
pop
push
push
fdivl
adc
stc    
xchg
mov
flds
and
int
fidivr
sahf   
push
outsl
mov
add
xchg
jmp
add
stos
and
in
jecxz
xchg
insb
xchg
cmp
adc
(bad)  
cmp
icebp  
pop
pop
cmp
test
std    
lahf   
cmp
cld    
into   
and
cltd   
test
jge,pt
or
mov
les
lock pusha 
sbb
cmp
jl
add
aas    
inc
xchg
push
arpl
push
repnz sbb
sub
mov
push
outsb
adc
pushf  
sahf   
fucom
iret   
dec
inc
xor
(bad)  
fdivrl
in
inc
ss push
dec
sbb
jmp
pop
stc    
sbb
add
popf   
mov
into   
fimull
xor
jp
cmp
out
lea
sub
and
(bad)  
stc    
pushf  
stos
add
xor
(bad)  
jle
cwtl   
jne
xchg
pop
icebp  
lret
lods
sub
jo
js
push
dec
mov
or
push
dec
jl
ret    
fistl
cwtl   
out
inc
cmpsb
lret
cmp
and
popf   
jnp
aam
or
(bad)  
dec
pop
cltd   
call
repnz dec
aad
fsubrl
pushf  
aaa    
inc
test
jnp
data16 aaa 
aad
jmp
aas    
mov
ja
call
mov
and
mov
cmp
xchg
adc
test
iret   
cmp
cmp
dec
pop
mov
mov
ret    
mov
in
mov
and
mov
repz sub
in
lret
leave  
test
shrb
out
movsb
push
pop
xor
shr
lahf   
dec
mov
dec
sub
call
add
xchg
add
fwait
sbb
int
xchg
add
lds
adc
aas    
int
clc    
outsb
mov
out
xchg
mov
scas
popa   
cmpb
mov
decb
es mov
pop
jecxz
add
push
stos
out
orl
mov
sub
int
(bad)  
add
adc
cmc    
xchg
and
xor
push
dec
(bad)  
pop
out
pmaddwd
mov
(bad)  
int
xchg
xchg
js
cmc    
push
jl
jle
adc
cmp
inc
fcmovne
shrb
xlat
dec
xor
mov
sbb
inc
push
push
repz js
aas    
cmc    
jns
dec
repnz hlt 
push
les
jb
push
cmp
or
fist
loope
mov
inc
xchg
inc
jns
bound
in
psrlw
jbe
mov
xchg
pop
mov
push
outsl
mov
into   
mov
mov
mov
add
inc
stos
push
pop
ret    
xchg
aaa    
loope
add
mov
into   
adc
cwtl   
push
fmull
dec
or
leave  
cmpsb
cwtl   
pop
decb
adc
inc
cmpsl
movsb
xor
ds mov
jae
ja
hlt    
push
loopne
cmp
adc
aaa    
push
es push
lods
push
push
cmp
pop
dec
test
icebp  
adc
sub
iret   
sbb
stos
jae
orl
add
scas
fdiv
and
xor
stos
xchg
in
test
aaa    
or
outsl
in
call
and
enter
xor
sub
ret    
dec
sub
add
pop
push
je
jge
out
stc    
in
or
push
add
adc
cltd   
int
pop
cmovne
ss pusha 
adc
jg
pop
ja
sub
scas
xor
cmpxchg
das    
hlt    
es not
sub
cltd   
and
adc
imul
and
or
shrb
mov
dec
add
mov
repz jle
sahf   
aaa    
fisttpll
(bad)  
jns
xchg
pop
sub
xlat
or
fcompl
pop
test
outsl
push
fbstp
or
fs xor
stos
(bad)  
ja
and
ret    
pop
push
cli    
sbb
add
call
ss aaa 
pop
inc
and
and
lret
pop
daa    
xchg
inc
push
movl
xchg
(bad)  
sbb
and
sub
jo
xchg
icebp  
je
cmp
adc
aas    
lret
sbb
(bad)  
pop
xchg
add
fwait
insl
xor
mov
fs
int3   
xchg
push
jae
insl
ds cs aam
pop
out
in
movnti
xor
xchg
jnp
xor
xor
sub
faddl
pop
lock test
add
in
or
add
sahf   
movsb
addr16 aad
add
imul
jmp
aas    
aam
stos
leave  
dec
sbb
cmpsl
jecxz
popf   
mov
xchg
pushf  
(bad)  
leave  
push
mov
mov
(bad)  
ljmp
test
sbb
dec
loope
adc
int3   
push
shrl
pop
cmp
stos
and
out
cmp
dec
jne
add
jp
(bad)  
or
in
cmp
mov
(bad)  
or
pop
and
cmp
lret
andl
stos
test
cmp
fistl
pop
xor
add
pop
scas
push
adc
(bad)  
xor
and
ljmp
rclb
lods
and
icebp  
test
seto
pop
(bad)  
fwait
cmp
jae
insl
jmp
cmp
jnp
push
sarb
mov
mov
(bad)  
aam
xor
outsl
sbb
adc
fidivr
loopne
fchs   
lret   
push
cmp
leave  
imul
bound
cltd   
ret
leave  
or
mov
addr16 aam
ret    
ss mov
in
push
lcall
sbb
xchg
or
rorl
fisttpll
in
aas    
push
add
aam
insb
fyl2x  
sbb
jl
mov
lods
xor
call
push
paddsw
jg
imull
mov
cmp
adc
pop
lahf   
push
int3   
scas
(bad)  
fs loopne
loopne
mov
mov
fs dec
pop
repnz fucomi
pop
mov
inc
je
mov
xchg
lds
lahf   
jg
or
dec
sub
loop
out
nop
pushf  
mov
fadd
mov
gs push
inc
lock push
xchg
mov
push
ret
push
xor
movl
xor
and
dec
sbb
dec
pop
push
roll
sbb
inc
pop
lret   
pop
fnstenv
cmp
mov
mov
dec
adc
daa    
mov
out
dec
call
sbb
loope
and
mov
add
pop
(bad)  
or
mov
push
aam
(bad)  
jo
scas
call
call
aas    
sbb
add
dec
sbb
mov
pop
stc    
jmp
(bad)  
cmp
cmp
vaddsubpd
loope
lods
mov
ja
insb
or
inc
xchg
in
jbe
lcall
pop
rcrl
fmull
push
mov
rcrl
xchg
jl
and
test
mov
aam
call
gs icebp 
mov
out
std    
xchg
loope
adc
xor
mov
xchg
mov
adc
(bad)  
xor
sti    
push
xchg
adc
dec
push
popl
out
jmp
add
and
sbb
fwait
xchg
sub
jle
xchg
sbb
das    
push
or
sbb
mov
cmc    
jl
test
cmpsl
cmp
(bad)  
pop
lcall
sub
push
add
cmp
or
pushf  
jns
jae
jecxz
dec
(bad)  
mov
out
(bad)  
pushf  
sbb
rcll
notl
gs stos
in
aad
xchg
ljmp
inc
pop
pop
idivl
nop
das    
jecxz
scas
sub
jnp
dec
cmovbe
add
jge
sub
(bad)  
mov
or
inc
cs add
adc
xor
dec
sub
push
test
and
mov
dec
cltd   
loope
lahf   
(bad)  
les
and
dec
sub
mov
sub
jnp
push
lods
sub
(bad)  {%k4}{z}
lret   
lahf   
push
mov
sub
int
imul
mov
sbb
sub
inc
test
pop
hlt    
es dec
mov
push
imul
push
rolb
es jnp
xor
pusha  
xlat
mov
lock enter
pop
movsb
dec
movb
in
lds
icebp  
insl
lods
add
xor
xor
jge
cli    
dec
dec
das    
xchg
jb
inc
xchg
mov
lock jae
mov
push
mov
push
outsb
jno
add
sbb
cmp
push
add
paddw
scas
repz inc
mov
and
and
xor
stc    
xor
jle
xor
rcll
pop
dec
mov
aaa    
pop
pop
fwait
inc
pop
cmp
inc
out
(bad)  
aad
mov
iret   
jo
push
(bad)  
fistl
push
cwtl   
jg
(bad)  
rcrb
push
pusha  
loop
and
std    
dec
cmp
inc
cli    
mov
jno
xchg
push
adc
neg
movsb
sti    
inc
orl
sub
inc
popa   
(bad)  
inc
ds
fstpl
fsub
mov
lcall
ret    
jp
stc    
dec
sahf   
mov
mov
and
ss fwait
ljmp
aas    
cld    
and
pop
mov
int3   
inc
mov
sbb
jle
repnz dec
mov
adc
aam
or
insl
mov
sbb
mov
sbb
xor
xor
in
cmpsl
rcl
scas
in
outsb
(bad)  
nop
xchg
aam
inc
lock ljmp
addr16 add
mov
push
out
into   
das    
ss dec
(bad)
jecxz
push
cmp
scas
dec
ja
pop
mov
mov
xchg
inc
xchg
outsl
mov
inc
stc    
arpl
rcl
repz xchg
xchg
dec
mov
xor
insl
mov
popa   
pop
cmp
and
inc
pop
cmp
and
jne
(bad)  
shrb
xor
push
mov
dec
ffree
mov
repnz add
push
enter
or
cmpsl
loopne
stc    
xor
(bad)  
popf   
and
in
(bad)  
mov
out
or
test
fnstcw
xchg
pop
bound
in
mov
dec
loope
lock es jae
add
and
call
sub
call
pop
in
leave  
mov
lret   
loope
mov
xchg
cmp
adc
jg
inc
loope
lods
push
or
xchg
in
and
mov
or
adcb
and
sub
fistpll
ds gs out
(bad)  {%k4}{z}
out
jb,pn
pop
lahf   
das    
xor
inc
fstps
add
dec
lods
mov
sub
xor
pop
add
add
mov
pop
sti    
shl
mov
sub
jae
push
mov
sahf   
xchg
xchg
(bad)  
xchg
into   
jge
mov
fwait
sti    
dec
xor
xchg
lea
jle
mov
xchg
test
mov
lahf   
pop
lret
clc    
arpl
mov
dec
add
sub
xchg
rep stos
pop
cld    
xchg
daa    
add
xchg
cmp
mov
mov
shll
addr16
xchg
pop
pop
jp
xchg
push
mov
sahf   
push
stos
push
mov
or
insl
mov
aad
cwtl   
cpuid  
and
pop
xchg
xchg
outsl
dec
inc
out
(bad)  
adc
mov
or
mov
cmp
push
cli    
lret   
in
mov
repnz aam
test
fdivrs
add
(bad)  
aad
xor
adc
and
pop
add
pop
xchg
xor
repnz lods
ds mov
addr16 jns
popl
adc
push
adc
arpl
push
iret   
cld    
pushf  
orl
add
sub
mov
xchg
mov
cwtl   
jg
rcrl
xchg
mov
add
xor
mov
pushf  
adc
sbb
lds
test
scas
lds
aas    
mov
and
loope
pusha  
movsb
ret    
sub
mov
jecxz
bound
mov
fisttpl
cmpb
and
movl
or
sbb
dec
je
shlb
pop
pop
mov
mov
aad
sti    
jns
jbe
adc
lcall
(bad)  
or
cmp
(bad)  
insb
test
fisubl
sahf   
movb
es lcall
add
sub
mov
push
gs xchg
adc
and
xor
adc
ja
mov
mov
pop
movhps
mov
loop
jnp
les
orl
sub
pop
jl
cli    
test
daa    
xorb
push
lret
fmuls
in
lods
push
xor
ret
xchg
test
loopne
pop
repz repnz addr16 push
push
gs jno
sbb
sub
jecxz
fist
leave  
ss enter
xlat
jmp
test
flds
mov
das    
cmp
add
mov
in
(bad)  
icebp  
(bad)  
iret   
inc
insb
out
shlb
stc    
lock pop
add
jmp
mov
push
fsubrl
and
lods
pop
aad
push
and
pusha  
outsl
xor
int3   
mov
jnp
fdivr
mov
cs cwtl 
xchg
sarb
xchg
cli    
in
in
rcll
adc
sub
push
push
or
(bad)  
mov
push
shr
rclb
and
out
sbb
(bad)  
xchg
mov
sarl
cli    
xor
or
cmc    
subl
xchg
cltd   
popf   
or
cmp
repz add
xor
mov
rol
rcrb
pop
enter
push
mov
push
xor
outsl
mov
jb
test
sub
jnp
ror
data16 jle
in
sbb
cmpsl
and
popa   
data16 fpatan 
movsb
ljmp
or
fwait
pop
and
jbe
pop
mov
inc
stc    
mov
test
mov
fsubrl
sarl
jo
xchg
and
outsl
and
rol
imul
add
leave  
push
push
hlt    
scas
out
push
aas    
insl
fistpl
sbb
add
mov
fdivr
or
xchg
cmc    
jae
and
outsl
sti    
push
adc
mov
(bad)  
int3   
in
(bad)  
dec
jge
repz jle
xor
pop
mov
lret   
jmp
movsb
jl
push
lock pop
mov
je
out
leave  
push
push
enter
dec
or
vpavgw
push
mov
imul
mov
xlat
sbb
aam
jne
popl
in
push
pop
out
nop
and
add
in
notl
add
lods
or
rcrl
cs mov
in
mov
pushf  
dec
mov
mov
js
les
je
data16 ja
insb
sub
push
add
(bad)  
xchg
mov
pop
ss inc
cmpsb
lret
fsubs
stos
fistpll
fsubl
push
aad
lret   
rorb
fidivl
lahf   
mov
repz push
roll
cmp
mov
xchg
xchg
(bad)  
ja
(bad)  
imulb
mov
stos
mov
pop
jbe
xchg
push
mov
movb
dec
mov
pop
insb
jp
or
movsl
rcrl
sbb
test
stos
das    
xor
je
aas    
or
mov
iret   
stc    
xlat
jae
imul
imull
lcall
stc    
sahf   
ljmp
fisubr
mov
jle
cmc    
enter
(bad)  
lea
mov
fnop   
call
jae,pt
add
inc
je
jmp
fldt
mov
lcall
(bad)  
cmp
fnstsw
jne
inc
xchg
add
stos
mov
jb
fs adc
fmull
pop
pop
and
in
jne
test
int
or
es icebp 
mov
xor
jp
cmp
aam
ljmp
into   
pop
dec
sbb
(bad)  
mov
test
xor
pop
rcr
push
cwtl   
sbb
fcmovnu
movsb
and
mov
ljmp
dec
int
xchg
inc
push
sbb
jno
dec
inc
xlat
push
add
dec
leave  
push
xchg
fcoml
cmp
sbb
xlat
mov
scas
xchg
mov
popf   
cmpsl
jo
jo
addr16 mov
cmpsl
imul
xor
xor
mov
faddl
aad
cmp
fcmovnu
das    
int
dec
dec
cmp
dec
xor
insb
add
ficoml
xor
pushf  
(bad)  
hlt    
xchg
sub
xchg
push
and
adc
int3   
cli    
ret
repz add
cmp
cmp
fisubr
xor
(bad)  {%k4}{z}
in
pusha  
movsb
cmpsl
cmp
pop
hlt    
(bad)  
incb
mov
lods
loope
int3   
movsl
loop
shrl
icebp  
xchg
ljmp
shl
or
sub
mov
jp
jmp
jge
cmpb
in
clc    
mov
inc
ja
lahf   
xchg
popf   
in
jno
dec
(bad)  
std    
cmp
stos
mov
sub
or
out
jns
(bad)  
adc
lret   
hlt    
inc
test
sub
(bad)  
lds
xchg
sbb
repnz mov
pop
or
cmpsb
jg
pop
sub
dec
es
(bad)  
lahf   
movsl
mov
inc
push
sarb
rorb
shr
inc
pushf  
addr16 push
sbb
cs and
sbb
loopne
cmp
aad
js
push
test
call
int
fbstp
pop
leave  
ja
daa    
lret   
cmp
lods
test
idivb
inc
fiaddl
mov
jnp
sub
addl
mov
cmp
(bad)  
jecxz
cmp
dec
xlat
pop
mov
notl
rep lods
leave  
lock push
sub
imul
jmp
leave  
or
fisttpl
inc
mov
and
add
(bad)  
(bad)  
or
pop
xchg
pop
cmp
xor
push
mov
dec
(bad)  
jmp
aas    
inc
jae
js
fldt
or
jb
inc
fnstenv
or
cmpl
enter
lods
mov
jne
cmpsl
cltd   
in
rcll
movsl
andb
add
add
and
or
neg
enter
mov
mov
rcl
jne
(bad)  {%k4}{z}
call
loop
xchg
lret   
or
and
and
pop
mov
psubb
lock xchg
add
or
negb
insb
and
das    
jbe
fnsave
sub
aam
cmc    
or
or
data16 fstsw
mov
jne
data16 loope
shll
cmp
pop
addr16 push
push
mov
pop
mov
fimul
sahf   
loop
mov
fsubp
sub
das    
pop
or
cmpsl
out
mov
jbe
cmpsb
gs
aas    
pop
data16 sbb
pop
subl
sbb
pop
or
cmpsl
cmp
sub
pop
aam
jmp
mov
mov
add
imul
loop
aad
inc
lds
and
out
dec
std    
fwait
(bad)  
xlat
cmp
cmp
cmp
hlt    
jbe
(bad)  
fildll
aas    
mov
mov
sbb
les
dec
mov
cmp
pop
mov
pop
xchg
inc
nop
pop
mov
in
aaa    
jbe
clc    
stc    
popf   
test
mov
jge
dec
xchg
mov
inc
out
loopne
arpl
adc
adc
pop
xlat
inc
and
sbb
sbb
mov
mov
push
xchg
and
lret   
sub
mov
cmpsl
lcall
fwait
mov
test
xor
popf   
jmp
call
push
mov
or
(bad)  
xchg
nop
dec
popl
out
ljmp
ret
cwtl   
add
push
in
or
push
loope
mov
stc    
pop
xor
bound
inc
test
movl
sbb
pushf  
leave  
pop
push
inc
enter
sbb
mov
in
aad
xchg
mov
dec
xchg
mov
dec
movsb
pop
movhps
pop
lods
aad
inc
jbe
sub
js
cltd   
xor
ret    
sbb
jg
pop
fwait
jg
jmp
jno
xor
xorb
pop
fwait
sbb
push
test
mov
mov
jnp
lods
dec
cmp
rorb
stos
movsb
sub
cmpsb
xor
and
mov
dec
(bad)  
jne
stc    
in
dec
dec
adc
aam
out
cmp
aam
sbb
jmp
in
rep movsw
fs push
push
inc
add
add
xlat
insl
insb
inc
inc
ljmp
xchg
add
(bad)  
outsb
cmp
test
outsb
loope
addr16 fcmovbe
inc
mov
xchg
mov
into   
popa   
sbb
sahf   
sarl
cmp
xor
test
loop
cltd   
adc
xchg
push
xchg
jmp
mov
shl
sbb
fstpl
xor
mov
por
mov
scas
mov
push
pop
sbb
inc
add
(bad)  
outsl
pushf  
xchg
es cld 
(bad)  
adc
mov
ret
xor
and
insb
insl
jns
mov
lret   
add
loop
inc
jmp
ljmp
(bad)  
jae
xchg
das    
sub
mov
sub
lock push
adc
fild
mov
and
fwait
int3   
push
fmull
jo
das    
add
fisttpll
inc
or
cli    
jae
(bad)  
lock icebp 
gs mov
inc
rclb
push
jb
stos
mov
fwait
xor
imul
daa    
out
sub
je
push
jns
sub
fs pop
sahf   
out
(bad)  
pop
xchg
aad
lods
loop
ss cltd 
aam
jge
push
incl
fcmovnb
(bad)  
sbb
or
mov
add
push
loopne
test
add
mov
fstpt
test
cmp
jmp
jmp
cmp
mov
jne
sub
pop
frstor
jge
or
fnsave
mov
mov
insl
inc
scas
jmp
leave  
test
ficom
fildl
cltd   
push
add
aaa    
movb
add
test
jle
out
js
scas
mov
sub
gs stc 
mov
push
jbe
dec
pop
add
fistp
jl
mov
fidivrl
dec
sbb
fisubl
push
outsb
or
movsl
rolb
jae
in
sub
andl
gs jle
push
mov
adc
dec
stos
mov
cmp
dec
sbb
add
pop
fisubrl
and
cmc    
push
int
(bad)  
xchg
arpl
(bad)  
fsubrl
and
aas    
sbb
stc    
jl
test
jbe
mov
push
sbb
mov
das    
inc
loope
push
cmp
cltd   
(bad)  
inc
stc    
sar
icebp  
add
in
(bad)  
cmp
sti    
ret    
xor
mov
cmp
jb
lahf   
movsb
mov
xor
sub
push
movl
insb
add
xchg
dec
std    
in
cmp
mov
jae
movsl
mov
lods
cmp
arpl
jbe
pop
or
test
out
dec
in
cmp
xchg
xchg
int
out
dec
jmp
mov
stos
jl
jo
test
test
aas    
or
push
(bad)  
stos
ret
jne
fcompl
cmp
ljmp
stos
jp
pop
outsb
push
(bad)  
mov
in
jns
stos
jle
lods
inc
movsb
aaa    
xor
cmp
sbb
inc
xor
insl
scas
cmp
inc
inc
mov
lods
add
add
outsb
int
push
and
mov
cmp
out
add
ja
lcall
out
cmp
andb
fwait
sbb
jns
dec
mov
in
pop
lret   
fist
std    
xchg
into   
push
push
jnp
out
in
mov
es insb
orl
mov
bound
push
movsl
lods
icebp  
gs xchg
mov
add
lahf   
cld    
sub
jne
cwtl   
xor
(bad)  
lahf   
into   
popa   
in
xor
stos
mov
test
hlt    
mov
pop
mov
inc
(bad)  
or
pop
mov
in
fdivl
mov
movsl
jl
push
(bad)  
leave  
(bad)  
out
add
fisttpl
rorl
sbb
mov
inc
xchg
int
mov
movsb
cmp
cmc    
outsl
idivb
aaa    
clc    
pop
mov
add
xchg
mov
add
adc
(bad)  
jo
push
dec
icebp  
xor
xchg
test
or
fs lret 
sbb
int3   
xchg
or
aas    
xchg
jb
mov
jle
rolb
push
adc
popf   
test
dec
sbb
adc
cmpsl
dec
jae
mov
xchg
sbb
jnp
lock sub
ret    
push
mov
adc
mov
inc
dec
push
adc
js
call
orb
dec
add
and
lock out
test
inc
js
rcll
and
int3   
mov
mov
mov
inc
xor
ret    
enter
fiadd
sub
cltd   
xorl
xchg
mov
xchg
dec
cmp
outsl
push
jecxz
roll
dec
mov
addb
dec
call
pop
jmp
adc
int3   
jmp
icebp  
xchg
lock mov
mov
popa   
pop
aaa    
or
ljmp
add
subl
in
test
inc
mov
cltd   
mov
push
sbb
(bad)  
jae
sbb
movsl
jne
mov
out
(bad)
xor
insb
inc
int
outsl
bound
or
sbb
adc
sub
dec
rorb
les
sub
push
add
scas
jnp
mov
or
xlat
scas
(bad)  
(bad)  
lret
push
fsubs
xor
repnz stos
cmp
pop
dec
jl
(bad)  {%k3}{z}
xor
cmpl
pop
or
inc
stos
andl
sub
cld    
frstors
rcrl
xor
xchg
jle
les
mov
jg
pushf  
or
dec
inc
or
inc
push
jb
xchg
mov
push
aam
cwtl   
push
call
out
jmp
rcr
push
jp
push
dec
incl
and
pop
dec
push
repz shll
or
leave  
xchg
or
daa    
fmulp
jmp
xchg
out
inc
add
mov
push
jp
add
cli    
test
dec
insl
hlt    
int
push
jle
mov
sbb
jl
dec
subl
mov
add
incl
cmp
inc
sub
out
sbb
cmp
add
aaa    
imul
arpl
sbb
mov
ljmp
insb
jl
xor
xchg
push
xchg
(bad)  
fsubr
stos
xchg
stc    
test
fwait
ret    
jl
jns
(bad)  
pusha  
leave  
out
iret   
fs
mov
cmpsb
fnstcw
xor
addl
fidivr
inc
adc
cltd   
sbb
xchg
aam
jmp
dec
cli    
jne
adc
jecxz
push
mov
mov
xchg
sub
cmpl
enter
in
mov
ljmp
dec
loop
loope
stos
out
lcall
inc
cmp
lods
movsl
jo
inc
cwtl   
xchg
sub
adc
mov
add
pushf  
push
int
jl
leave  
inc
test
inc
inc
aad
insl
fstl
lods
mov
fs stos
inc
push
cli    
cmpsb
inc
jecxz
sbb
dec
xchg
rcrl
ja
or
pop
xlat
movsl
ljmp
inc
adc
xor
add
in
rdtsc  
(bad)  
jb
cmp
pop
add
rcl
mov
(bad)  
mov
ljmp
mov
push
outsl
dec
mov
(bad)  
sbb
sahf   
and
push
cmp
xchg
dec
popa   
repnz ljmp
mov
(bad)  
and
push
in
xlat
jo
sbb
dec
jno
fldt
adc
and
nop
ret
sahf   
cmpb
(bad)  
jns
and
xor
mov
popf   
cmc    
push
and
xchg
inc
loop
imul
(bad)  
mov
ljmp
arpl
mov
dec
cmp
adc
outsl
ss or
in
jge,pt
clc    
fldenv
andl
(bad)  
sbb
pop
xchg
pop
ret    
rcrl
jecxz
mov
mov
pop
loopne
jno
and
adc
aaa    
movsb
and
push
inc
test
mov
adc
sub
cli    
dec
cwtl   
in
pop
jmp
mov
shlb
push
push
adc
je
rclb
xor
pop
dec
xor
(bad)  
fs jbe
sbb
sahf   
sbbl
push
hlt    
fidiv
(bad)  
(bad)  
icebp  
cmp
pop
mov
cli    
pusha  
cmp
and
das    
addr16 out
lahf   
(bad)  {%k3}{z}
ljmp
fistl
or
xchg
mov
jge
adc
rcl
mov
pop
fdivrl
test
lahf   
sti    
jl
mov
dec
mov
mov
or
call
fnstsw
push
and
jns
or
jmp
fptan  
mov
popa   
clc    
bound
icebp  
aas    
stos
lock pop
push
pop
adc
(bad)  
push
mov
into   
inc
lods
cmpsl
pop
cld    
fcomip
add
stos
movsb
adc
mov
pop
scas
pop
or
push
lcall
outsb
stc    
arpl
adc
repz sbb
gs cmp
add
inc
add
and
cmpsl
enter
xchg
ja
ljmp
cmp
loopne
stos
pop
fs hlt 
movsl
loope
adc
inc
out
insb
xchg
call
mov
stos
push
lret
pop
outsl
cmpsl
push
pop
dec
and
xor
pop
imul
mov
icebp  
lds
pop
lods
xlat
xor
mov
push
and
arpl
jge
xchg
mov
and
sbb
loope
mov
dec
cmpsl
sub
out
or
adc
jge
in
rcl
aad
cmp
in
and
ret
lea
dec
movsb
cmp
cltd   
sub
(bad)  
add
popa   
pop
repz sbb
add
sub
in
sbb
mov
jmp
mov
ljmp
xchg
in
inc
jno
cmpsl
pop
push
xchg
imul
stc    
inc
pop
insl
push
(bad)  
cmp
push
(bad)  
mov
mov
aaa    
push
xor
and
rcll
push
sbb
lret
scas
shr
jb
lret
out
cmp
imul
mov
aaa    
or
inc
mov
adc
xchg
into   
jge
pusha  
xor
repz push
adc
and
test
mov
cmp
adcl
mov
mov
loopne
xor
jns
cmpsl
pop
std    
es in
sub
loop
add
mov
in
sar
(bad)  
fsubl
jo
addr16 in
stc    
in
fs out
shl
sub
es jmp
pop
dec
push
adc
test
cmp
mov
cwtl   
bound
inc
scas
into   
mov
jbe
jmp
shlb
fsubrs
mov
movsb
movsl
repz fnop 
test
xorb
lock xor
pusha  
insl
bound
adc
sbb
sbb
jno
ret
roll
adc
and
bound
push
inc
dec
sarb
cmp
ret
fwait
mov
sti    
lahf   
std    
adc
push
push
mov
sbbl
mov
jae
push
pop
adc
mov
sub
add
pop
es into 
mov
repnz mov
cltd   
add
mov
xchg
clc    
jle
icebp  
push
mov
lods
pop
iret   
popf   
(bad)  
repz xchg
shrb
jb
and
stc    
call
push
int3   
inc
out
iret   
inc
int
rcll
xlat
mov
movsb
test
xchg
int3   
rcrl
icebp  
xor
pop
and
xchg
adc
mov
movsl
(bad)  
in
cmp
lret   
xor
add
mov
cmp
xchg
les
mov
jo
mov
into   
dec
cmp
mov
inc
pop
ret    
xchg
(bad)  
ret    
adcl
or
lahf   
push
sub
imul
adc
sbb
lret
jmp
inc
pop
rcrb
fisttpl
ja
inc
enter
imulb
xchg
and
adc
loopne
(bad)  
mov
imul
inc
mov
addr16 popa 
adc
fbstp
std    
bound
imul
cmp
pxor
xchg
(bad)  
xor
popf   
test
push
push
sub
pop
pop
movsb
(bad)  
and
inc
std    
mov
pop
enter
enter
fist
cs aad
mov
repz xchg
xchg
jmp
sub
sti    
dec
jmp
in
sti    
adc
mov
js
daa    
mov
es mov
mov
int3   
cltd   
into   
jb
or
and
cmc    
push
xor
call
daa    
mov
fidivl
(bad)  
je,pt
mov
int3   
fs mov
rcr
dec
sub
jo
(bad)  
jne
xchg
push
lahf   
test
out
sub
subl
fs out
mov
test
or
int3   
push
mov
dec
sbb
or
mov
out
iret   
jmp
out
add
xchg
bound
push
jp
int
(bad)  
adc
jp
or
repnz int
push
and
pop
add
(bad)  {%k3}{z}
sti    
xor
dec
xor
adc
or
pop
popl
sti    
ret
outsl
test
nop
and
clc    
pusha  
arpl
push
xor
jg
sbb
sbb
mov
pop
ror
cs lret 
aas    
fwait
arpl
xchg
out
mov
jb
push
mov
js
cmp
lret   
or
mov
jnp
(bad)  
mov
sti    
stc    
hlt    
insl
push
mov
inc
mov
dec
xor
loop
lahf   
cmp
jbe
adc
jmp
adc
cmp
inc
imul
pop
mov
in
pop
(bad)  
insb
pushf  
cmp
mov
sbb
mov
repz repz jecxz
sub
mov
and
stos
(bad)  
jnp
arpl
xchg
push
roll
dec
fwait
sub
mov
cli    
leave  
imul
aas    
loope
xlat
jmp
popf   
inc
or
pop
pop
sbb
icebp  
push
sub
insb
inc
(bad)  
sar
outsl
cld    
in
xor
cmp
aaa    
lret   
push
jmp
add
inc
pop
test
mov
and
push
mov
decb
icebp  
push
pop
aad
adc
xor
insl
xor
ret    
cmp
insl
inc
mov
push
cmpsl
dec
dec
jge,pn
(bad)
popf   
xlat
sub
cmpsl
xchg
and
cwtl   
cmc    
sbb
or
jae
lcall
loop
lock pusha 
(bad)  
iret   
mov
inc
or
pop
xor
ja
jbe
add
push
fisubr
test
fsubl
inc
pop
insl
push
sbb
test
cmp
lcall
mov
fsubs
cmp
adc
addr16 cmp
sub
cmc    
into   
xchg
adc
push
loopne
xchg
jl
loop
cmp
icebp  
imul
lret
jno
sbb
fdiv
cmc    
std    
test
mov
gs addr16 ror
daa    
dec
cmp
fucomip
out
mov
out
loope
loop
sub
sub
sbb
mov
push
push
jecxz
cmp
xor
xchg
mov
adc
mov
lahf   
out
jecxz
jbe
daa    
mov
and
mov
mov
xchg
sbb
test
test
addr16 out
jg
(bad)  
(bad)  
ret    
sub
enter
push
push
nop
xchg
mov
(bad)  
roll
cmpsb
jb
inc
into   
movsl
mov
test
xchg
push
cmp
xchg
movsb
clc    
clc    
stos
inc
insl
je
dec
fcoms
sub
push
dec
sub
pop
cmp
push
cmp
mov
and
cmp
add
loop
xor
lahf   
fildll
adc
fst
bound
fdivr
adc
jg
and
sbb
jae
sahf   
pop
cmp
mov
enter
pop
or
xchg
int3   
test
pop
sti    
ret    
ficoml
ja
fnstsw
shrb
loop
je
nop
(bad)  
or
(bad)  
sbb
mov
pushf  
rorb
rol
or
lret   
sbb
add
pop
sbb
and
push
adc
adc
mov
dec
dec
dec
rorl
add
and
jbe
es neg
inc
pop
dec
jns
pop
xor
insl
cwtl   
loope
(bad)  
jmp
xor
cs pop
inc
in
andb
dec
(bad)  
push
jmp
imul
adcl
xchg
repz pop
mov
sbb
add
adc
xchg
insl
add
in
jbe
int3   
xor
outsl
and
popa   
sbb
aas    
es
decb
addr16
dec
ss mov
pop
ss xchg
aas    
inc
push
ja
js
dec
sub
test
cmc    
in
push
and
jge
xchg
loop
pusha  
sbb
scas
mov
insb
bound
mov
push
les
cmp
mov
lock popl
and
jl
mov
jnp
xchg
lret   
lsl
insl
cmpsl
or
adc
sub
jmp
xchg
in
test
pop
iret   
push
lahf   
leave  
pop
dec
pop
adc
mov
xor
and
mov
sarb
push
adc
addr16 dec
adc
jae
call
insb
stos
sub
push
xchg
and
adc
adc
mov
dec
sbb
jae
or
pop
lcall
je
nop
jne
(bad)  
sti    
loopne
movsb
js
xor
cmp
cmpsl
ret    
mov
cmp
inc
aad
shrl
xchg
ja
out
cs
stc    
mov
aaa    
popf   
sub
jne
push
mov
inc
sahf   
repz stc 
mov
jmp
outsb
(bad)  
jno
inc
test
sbb
cmp
adc
add
pusha  
out
and
xchg
inc
add
icebp  
cltd   
iret   
(bad)  
rolb
stc    
sahf   
jp
cmp
xchg
leave  
mov
sub
dec
int3   
mov
mov
imul
push
fsubl
jmp
subl
sarl
lds
ret    
(bad)  
daa    
pop
(bad)  
lret   
mov
push
cmp
push
sub
xor
mov
pop
scas
ja
inc
enter
movsl
sub
mov
push
or
xor
inc
mov
pop
jle
test
sahf   
js
jnp
cli    
xor
mov
add
pop
fistl
inc
(bad)  
mov
clc    
out
jmp
jmp
in
test
ljmp
or
in
movsb
push
nop
rcrl
testb
rclb
comiss
jg
xor
pop
xor
sub
roll
mov
fs jne
sub
movsb
test
pop
xchg
mov
(bad)  
cwtl   
lock popf 
mov
movsb
sbb
sub
push
outsb
(bad)  
lret   
cmc    
sahf   
lahf   
push
inc
dec
cli    
mov
insl
sarl
gs je
or
out
rcr
cmpsb
hlt    
jmp
(bad)  
int
lods
(bad)  
test
loop
pushf  
decb
pop
dec
mov
fnstcw
outsb
add
aad
dec
jl
movsl
int
sbb
mov
jnp
sub
mov
pop
loopne
dec
sbb
or
imul
int3   
shl
inc
ja
sub
lret
sbb
rclb
call
and
fldlg2 
sub
or
sub
cmc    
cs pop
xchg
ja
mov
andb
fbstp
lock hlt 
repnz aaa 
mov
add
and
js
(bad)  
push
jecxz
les
ds out
pop
mov
shlb
pop
jle
scas
lret   
(bad)  
xor
rol
loope
int3   
js
sahf   
stos
outsl
test
pop
jle
daa    
fwait
(bad)  
mulb
cmp
xchg
lcall
ja
or
adc
pushf  
cltd   
push
lret
sbb
xchg
mov
cmp
in
dec
push
ja,pt
cmp
mov
cmp
mov
push
addr16 std 
jnp
pop
add
in
cmp
sbb
leave  
dec
gs pop
cmp
mov
mov
and
inc
or
mov
mov
mov
and
das    
(bad)  
dec
mov
sub
sbb
hlt    
int
push
clc    
and
fnsave
sub
pop
ret    
or
dec
add
pop
pop
xlat
sub
jp
lock cmp
fwait
sub
xchg
jecxz
push
test
push
jnp
push
push
add
cmpsb
inc
lods
jae
js
hlt    
xor
jae
loopne
push
xchg
insb
xor
sub
mov
adc
adc
push
push
stos
sbb
fcmovb
sbb
xchg
sub
sahf   
test
mov
add
mov
dec
pop
xor
or
cmp
fisubrl
adcb
sub
pop
or
loopne
xchg
testl
mov
shll
test
pop
xchg
jle
rolb
in
mov
sub
pop
aas    
pop
out
inc
inc
sub
incl
imul
and
leave  
bound
lcall
push
add
add
cmp
push
push
repz lea
(bad)  
in
fimul
cmp
and
push
xchg
leave  
movsb
push
jno
mov
adc
popf   
loope
sub
addr16 ja
(bad)  
lcall
mov
std    
dec
dec
hlt    
sub
sub
test
repz add
cmovle
stos
sbb
(bad)  
in
out
out
aaa    
xor
test
stos
ljmp
mov
out
adc
aad
fcomps
add
lahf   
push
pop
stos
cltd   
test
insl
sbb
xchg
imul
sti    
enter
xor
or
int
xchg
test
add
cltd   
jbe
cmp
push
(bad)  
jns
sub
pop
mov
pop
jno
jnp
popf   
loope
pusha  
arpl
jne
imul
xor
push
xorl
icebp  
push
and
shll
arpl
les
ret
pop
mov
int3   
ss jp
divb
loopne
sbb
iret   
add
cltd   
rcr
(bad)  
add
sub
sbb
sarl
mov
jns
test
xchg
test
lods
scas
sub
and
insb
inc
dec
fstpl
and
inc
jae
cmpsb
in
out
rorl
inc
jne
cmpsl
fistl
aas    
in
mov
or
aam
sti    
enter
imul
pop
in
sub
stc    
sti    
loop
pop
jnp
xchg
stos
outsl
sarl
scas
hlt    
cmp
mov
jl
aad
sub
mov
ret    
cld    
fcmovb
jne
inc
out
hlt    
jae
frstor
cmp
or
adc
mov
mov
ficoml
outsb
data16 jg
mov
call
dec
sub
scas
mov
fnsave
and
stos
dec
imul
mov
sbb
cmp
in
(bad)  
mov
cmp
sub
cld    
test
aaa    
cmp
pop
loopne
mov
leave  
mov
mov
hlt    
loop
push
loope
xchg
push
test
inc
ret    
ficom
fist
stos
rolb
cmp
jecxz
add
push
sahf   
iret   
push
(bad)  
fidivr
and
fistp
push
es mov
push
cmp
cmpsl
pop
xchg
shlw
fadds
jnp
lods
dec
loop
inc
int
add
push
inc
hlt    
incl
cmp
lea
mov
pushf  
or
enter
sub
sub
icebp  
js
add
lods
movsb
jns
sarl
mov
cmp
inc
pop
ds addr16 aas 
mov
add
pop
dec
dec
insb
jmp
dec
int
call
mov
mov
or
movsb
pop
xor
sti    
cmp
mov
cltd   
imul
in
jg
lahf   
push
push
test
repz lds
aam
and
xor
rorl
mov
jg
add
(bad)  
in
add
mov
icebp  
aam
push
push
adc
ds out
sbb
dec
inc
adcb
clc    
sbb
out
insl
adc
push
pop
fbstp
cmp
mov
push
sub
test
repnz adc
imul
mov
js
xor
xor
(bad)  
pop
mov
fimull
js
iret   
(bad)  
pusha  
stos
pop
cmp
push
pop
add
xlat
and
pop
cltd   
shrb
das    
fiadd
in
pop
sub
dec
mov
xchg
jno
adc
adc
mov
aaa    
cwtl   
loopne
pop
cmp
jmp
jecxz
call
loopne
orl
mov
(bad)  
adc
adc
cli    
lock pop
mov
rorl
test
insb
fnop   
sbb
pop
add
(bad)  
xor
pop
enter
push
out
out
cmpsl
outsl
es
cmp
or
in
mov
shrb
cmpsb
fldlg2 
fsubrs
dec
daa    
dec
xor
sub
push
lods
sbb
mov
mov
loope
ret    
shl
lret
cmp
lcall
negl
jmp
icebp  
loop
(bad)  
and
mov
push
sbb
aad
or
fcoml
scas
pop
scas
jg
or
jl
rcll
jmp
push
push
test
addr16 dec
pushf  
les
mov
add
pop
lock mull
push
stos
and
cmpsl
pop
cmp
insb
and
(bad)  
mov
dec
push
aad
xchg
dec
and
adc
cli    
push
xchg
jl
movsb
lock add
subb
out
jb
(bad)  
(bad)  
cli    
mov
dec
jo
mov
int3   
push
jo
xchg
push
jne
add
inc
push
(bad)  
js
pushf  
xchg
popf   
mov
mov
je
cmp
xchg
ret    
aaa    
sub
mov
mov
cld    
and
sub
inc
pop
popa   
das    
imul
in
sti    
jo
testb
pop
xor
mov
lea
push
or
cmp
jg
fwait
add
adc
fildll
out
ss mov
daa    
mov
push
mov
test
hlt    
push
loop
push
adc
cmpsl
cmp
sti    
mov
and
pusha  
push
mov
(bad)  
div
or
pop
fwait
push
sub
int
repz cmp
call
sbb
aas    
aaa    
es insl
in
test
push
(bad)  
arpl
inc
mov
jbe
sub
aaa    
mov
sbb
lret   
(bad)  
aas    
jle
sbb
call
lret
test
orb
add
addr16 mov
je
mov
loopne
scas
xor
fcomip
or
js
jnp
fs
pusha  
mov
xchg
lods
cmp
decb
adc
push
sub
aam
fldl
movsb
pop
dec
push
fwait
push
aas    
push
rcll
mov
lahf   
pop
fbld
add
pop
cmpsb
scas
jp
and
mov
jmp
push
inc
out
jo
fcom
sahf   
lods
lcall
jge
lret
mov
push
pop
repz and
adc
rorb
adc
testb
lcall
mov
jmp
or
outsb
mov
out
(bad)  
(bad)  
mov
and
and
ds or
jl
(bad)  
lods
pop
add
in
sbb
mov
in
gs mov
mov
mov
ja
das    
dec
sub
adc
xor
jmp
leave  
int3   
cwtl   
inc
and
outsl
mov
fcoms
push
mov
les
bound
enter
jecxz
test
data16 rorb
dec
cmp
mov
das    
ds xchg
add
push
insb
inc
mov
add
add
dec
inc
scas
inc
pusha  
(bad)  
or
add
add
(bad)  
(bad)  
(bad)  
incl
add
add
add
add
add
add
jns
je
insl
cs inc
jb
ja
outsb
addr16 sub
push
gs jb
imul
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
xor
data16 aaa 
xor
fs xor
add
adc
gs insl
cs inc
jb
ja
outsb
addr16 cs inc
imul
add
popa   
je
pop
add
add
add
add
add
lsl
add
jno
add
add
or
or
add
or
add
add
add
dec
or
add
add
(bad)  
and
add
add
inc
dec
inc
add
mov
or
popa   
add
jo
pop
jae
add
ret    
add
push
ret    
add
outsl
test
add
cmp
push
push
test
inc
popl
or
xor
cmp
sub
lods
jle
out
xchg
stos
push
daa    
fsub
fdivs
jo
cwtl   
xchg
inc
negl
push
xchg
inc
int
xor
jecxz
dec
xor
popf   
cmp
xor
fwait
adc
mov
mov
xor
cmpl
inc
xor
jle
dec
dec
inc
inc
in
add
pop
xor
out
push
lret   
or
insb
adc
push
mov
mov
xchg
inc
lea
scas
arpl
lret
xchg
fiadd
dec
jbe
mov
imul
rorl
or
iretw  
mov
outsl
cmc    
es mov
push
inc
jp
sub
data16 arpl
sub
fs jl
rclb
cltd   
nop
fisub
imul
xor
add
popa   
and
jns
mov
cltd   
pop
mov
sbb
jnp
mull
xchg
mov
lcall
mov
sub
xchg
fiadd
scas
lahf   
jnp
and
jnp
popa   
div
mov
or
inc
std    
push
ja
mov
das    
add
lods
add
loopne
repz push
dec
cld    
cmp
lahf   
aas    
into   
ret    
push
movsb
push
pop
jle
(bad)  
dec
sub
xchg
push
ljmp
jp
clc    
popa   
add
icebp  
mov
out
enter
arpl
scas
and
and
nop
xchg
pop
fs pop
mov
dec
jmp
xor
(bad)  
jns
add
(bad)  
pop
lock cmp
pop
mov
xchg
dec
jne
pop
mov
into   
mov
mov
pop
lds
adc
aam
mov
mov
scas
push
out
push
fwait
add
cmp
imul
dec
in
xor
mov
push
jb
in
mov
and
pop
xchg
xchg
es pop
mov
push
insl
mov
je
lock
addr16 xor
je
inc
insb
shrb
outsl
pop
jo
inc
loopne
jno
dec
rcr
fadds
mull
out
dec
pop
mov
and
push
insl
dec
(bad)  
aas    
jmp
iret   
jae
fistp
xor
push
inc
push
(bad)  
ja
jmp
out
insb
jno
rclb
hlt    
aas    
adc
sub
subb
clc    
lods
loope
das    
mov
cmp
push
mov
pop
dec
or
xchg
fldt
popf   
out
add
cmp
inc
lods
xchg
les
jge
xor
xor
xlat
pushf  
sub
mov
imul
(bad)  
scas
test
lret   
xchg
and
sbb
sbb
jne
lea
scas
dec
add
xchg
ret    
or
scas
gs push
inc
sbb
add
sti    
pop
push
fldl
je
mov
dec
add
in
mov
into   
add
cld    
cmp
hlt    
out
jle
jns
icebp  
(bad)  
imul
pcmpeqd
mov
jbe
cltd   
mov
in
or
jg
dec
stos
imul
mov
int3   
pop
inc
dec
sub
int
fdivr
inc
stc    
ja
inc
fildl
in
adc
mov
ret
xchg
fstpl
cmc    
addb
push
sub
mov
lods
xchg
dec
inc
sub
gs cltd 
jnp
inc
out
mov
pop
cmp
xor
add
xchg
mov
xor
mov
fimul
or
and
add
sub
imul
push
adc
or
inc
pop
loope
pop
jmp
dec
jbe
adc
sub
mov
repnz sub
scas
pop
inc
add
jle
mov
sti    
xlat
nop
cmp
xchg
test
clc    
pop
mov
pusha  
jae
or
add
add
jbe
mov
mov
nop
mov
outsb
jb
adc
js
popf   
and
pop
fistl
aaa    
(bad)  
ja
(bad)  
test
mov
stc    
decl
scas
dec
pop
(bad)  
mov
and
pop
divb
push
add
std    
out
mull
rorl
mov
push
orb
sbb
xor
sub
cmp
sti    
xchg
dec
popl
movsb
(bad)  
pop
ret    
rcrb
mov
data16 mov
add
jb
add
push
int3   
cmc    
jl
sahf   
fistpll
stc    
xchg
sti    
ja
xchg
mov
or
je
dec
xor
push
sbb
fs xchg
adc
push
mov
rclb
(bad)  
call
sbb
scas
inc
add
lret   
push
frstor
pop
imul
or
mov
bound
mov
cmp
adc
insb
leave  
mov
xchg
leave  
xchg
jbe
data16 das 
es data16 jno
pop
std    
jmp
iret   
add
dec
ror
ds mov
cmp
sbb
sti    
push
aam
into   
mov
cmp
cmp
mov
inc
ljmp
mulb
cmp
cwtl   
(bad)  
fwait
stos
cmpsb
cmp
and
jno
addr16 adc
mov
arpl
(bad)  
xchg
jg
dec
(bad)  
pusha  
and
push
mov
cmp
push
(bad)  
loop
inc
pop
cmpsb
xor
aam
(bad)  
pop
xor
loop
adc
mov
popf   
xor
mov
(bad)
pop
ret    
fildl
dec
pop
aas    
nop
xchg
inc
mov
loopne
pushf  
adc
mov
call
jp
rcrl
ja
inc
adc
or
mov
dec
je
adc
lcall
mov
push
leave  
(bad)  
add
arpl
mov
jbe
xchg
(bad)  
mov
lock arpl
push
les
inc
loopne
sldt
sarl
out
hlt    
lods
hlt    
(bad)  
pop
imulb
sbb
not
push
(bad)  
xchg
out
adc
or
mov
jmp
jle
das    
sub
sbb
mov
jne
add
sahf   
dec
mov
lods
cmp
ss push
or
adc
in
dec
jecxz
loopne
out
inc
pop
sub
jecxz
fimull
xor
lahf   
or
xchg
nop
adcl
(bad)  {%k3}{z}
pusha  
insl
mov
cs push
cmp
jg
cmp
in
mov
sub
xor
fld
(bad)  
aas    
mov
outsb
add
movsl
(bad)  
lahf   
jb
iret   
inc
sbb
out
jo
orl
fstps
ret
fiadd
lret
jg
jle
mulb
call
or
lods
ss or
adc
mov
jbe
addr16
jecxz
lret
test
les
mov
lcall
jle
(bad)  
or
dec
lahf   
sub
sbb
cmp
nop
mov
movsl
sub
cld    
shr
jns
lret   
lret   
mov
insb
leave  
pop
and
subl
jg
xchg
or
lcall
and
dec
das    
mov
xchg
cmpsl
push
pop
loopne
sub
ljmp
call
push
jo
mov
adc
scas
inc
decb
xor
mov
movsl
ljmp
sbb
imul
sahf   
loopne
mov
or
test
int
xchg
icebp  
pushf  
add
bound
out
mov
sarl
and
cmpsl
pop
bound
inc
or
jle
ret
pop
insl
push
aas    
cmp
mov
test
adc
js
mov
jne
stc    
addb
loope
add
int3   
popa   
mov
pop
insl
jmp
sbb
aaa    
test
jl
jne
popaw  
ss nop
repz data16 std 
int3   
orb
lahf   
mov
out
out
xlat
xchg
mov
mov
call
out
cs add
mov
cwtl   
pop
pop
inc
stc    
leave  
das    
fwait
add
mov
out
cmc    
mov
and
pop
sti    
dec
out
scas
sub
adc
stos
movsb
mov
adc
pop
or
dec
adc
inc
add
into   
inc
add
aas    
lods
and
mov
cmpsb
sbb
adc
lods
mov
mov
push
rorb
or
add
inc
jae
push
js
sbb
or
in
push
xchg
test
rdtsc  
mov
sbb
andl
hlt    
idivl
aam
mov
(bad)  
fidivrl
or
jb
cmp
in
cs inc
lods
cld    
sub
and
(bad)  
or
(bad)  
jb
unpcklps
cmc    
jns
clc    
cmp
fiaddl
mov
stc    
imul
add
imul
ljmp
mov
xor
mov
cmp
dec
out
push
repz jmp
andl
lea
xlat
xor
mov
jne
xchg
loop
(bad)  
in
aam
push
inc
fisubr
sti    
adc
pop
popf   
cld    
dec
sub
mov
mov
aam
xchg
add
inc
xchg
clc    
pop
mov
jae
rolb
int3   
imul
fidivl
dec
outsl
(bad)  
shrb
jne
cli    
mov
xor
add
mov
sub
imul
xor
jo
enter
(bad)  
fistpll
mov
loop
push
add
adc
adc
and
cmp
popf   
cmp
adc
out
out
mov
or
mov
mov
fcomps
sysenter 
push
leave  
scas
lahf   
inc
std    
mov
sub
push
sti    
jecxz
pop
daa    
cmp
insb
dec
pop
mov
jns
clc    
lahf   
ficompl
or
mov
add
pusha  
or
xor
mov
fist
sbb
scas
sbb
add
sbb
sbb
add
jl
lret
sbb
adc
adc
fisubrl
inc
xchg
or
or
ds insl
scas
rcr
and
pusha  
xor
int3   
or
pop
arpl
sub
sahf   
push
push
cmpsb
adc
ja
mov
jbe
xor
xchg
xchg
add
cli    
cmp
dec
jae
rorl
aas    
mov
sahf   
inc
daa    
mov
dec
daa    
dec
and
and
das    
sub
in
mov
arpl
jl
out
jns
pop
xchg
or
aas    
aam
jmp
jmp
(bad)  
mov
mov
push
ss push
test
movsb
or
mov
sub
mov
cli    
mov
mov
in
cwtl   
inc
jne
ds mov
pop
test
and
(bad)  
nop
outsb
adc
mov
test
jbe
mov
dec
das    
xor
es shr
add
mov
jge
sub
(bad)  
faddl
(bad)  
je
ret    
adc
jne
mov
jl
mov
leave  
sub
sbb
cld    
ret    
cmp
xchg
pop
in
xchg
lods
cld    
imul
adc
mov
pop
lock cwtl 
mov
repnz add
(bad)  
or
punpcklwd
cmp
adc
ss jbe
mov
kmovw
fiaddl
mov
mov
xor
add
fadd
int
daa    
aam
jl
add
xor
xor
jno
rcll
xchg
in
packuswb
clc    
cmpsb
repnz xchg
paddq
adc
dec
es dec
or
int3   
je
add
outsb
cmp
add
pop
add
int3   
dec
test
in
xchg
xor
aas    
inc
enter
mov
ret    
popa   
test
sti    
das    
sub
ds gs adc
mov
mov
dec
push
pop
out
lret   
adc
nop
cmp
movl
push
stos
ficom
imulb
into   
(bad)  
mov
inc
mov
xchg
mov
lcall
sub
push
or
xchg
test
cld    
rcrb
jb
scas
data16 std 
jecxz
jp
dec
(bad)  
cs fwait
stos
(bad)  
jge
cmp
xor
sarl
sub
cli    
push
test
cmp
xor
push
or
mov
lods
adc
cmp
aad
aas    
lods
jl
push
call
fimul
loope
mov
in
cmp
xchg
xchg
mov
sbb
pop
cmp
xor
loope
push
cmp
mov
sub
arpl
fs jge
fwait
pusha  
add
in
inc
sbb
or
sbb
fistl
hlt    
lds
ja
(bad)  
push
dec
dec
sub
jp
or
rol
mov
cli    
xchg
(bad)  {%k3}{z}
int3   
xchg
pop
(bad)  
sbb
xchg
rorl
mov
mov
in
fcmovu
or
faddl
inc
(bad)  
mov
arpl
sarb
dec
mov
jmp
leave  
decl
(bad)  
xor
aas    
cmp
or
xlat
sahf   
test
imul
lods
mov
add
pop
mov
xor
pcmpgtd
std    
mov
insb
inc
iret   
loope
(bad)
mov
std    
mov
clc    
push
mov
les
imul
fcoms
dec
xor
inc
scas
rcr
adc
fwait
test
pusha  
aad
xchg
daa    
dec
lock jge
mov
add
out
cmc    
xor
and
outsl
mov
push
add
int
shll
or
inc
dec
(bad)  
lock shrb
jne
xchg
roll
add
or
ret
fiadd
ret
mov
or
xor
sub
lea
(bad)  
fistl
in
jbe
add
push
hlt    
hlt    
pop
xchg
jge
cwtl   
fs clc 
cmpsl
popa   
movsb
sbb
push
add
pop
mov
cltd   
mov
add
mov
(bad)  
outsb
lods
push
push
imul
test
or
mov
or
pop
(bad)  
das    
dec
js
add
push
test
mov
sahf   
mov
push
add
dec
pop
jnp
pop
pop
add
jp
xchg
jne
sbb
sti    
test
pop
sub
dec
adc
cli    
insl
test
ret
(bad)  
and
pop
xor
lock or
aaa    
add
mov
mov
(bad)  
jmp
jle
inc
jmp
aaa    
(bad)  
cmp
inc
mov
movsb
push
jns
lahf   
cmpsb
pusha  
jno
loopne
xor
mov
arpl
sbb
sbb
cmp
sbb
cmp
in
out
imul
pusha  
inc
jno
jo
test
int3   
scas
xor
rcrb
insb
in
les
ljmp
push
jecxz
mov
aam
fs mov
fistp
inc
mov
xchg
adc
fdivs
mov
cmp
ja
push
loope
lods
xor
in
fistpl
out
fwait
popa   
movsl
es aas 
lret
test
jae
(bad)  
mov
jnp
sar
out
call
out
mov
idiv
pusha  
lahf   
verr
sub
mov
mov
jbe
dec
leave  
dec
gs inc
test
xchg
mov
adc
pop
int
int
mov
mov
cltd   
ss xchg
(bad)  
xchg
ret
add
mov
movsl
jno
pushf  
aas    
xor
out
pop
into   
stos
push
rorb
mov
ds fcomi
int
adc
popf   
pop
insb
out
add
jg
jp
jbe
movntps
dec
andb
outsl
repnz xchg
adc
fcmovb
lea
or
dec
dec
imul
insl
push
sbb
(bad)  
bound
push
add
repnz dec
mov
jle
js
dec
dec
sub
data16
xor
mov
sub
mov
cmp
shll
mov
out
(bad)  
fs
enter
cmpsl
in
repz pop
pop
mov
xchg
xchg
pop
pop
add
sbb
out
movsb
rcrl
cs xchg
sub
xor
dec
in
adc
popf   
adc
ja
adc
pop
xchg
push
loopne
jbe
mov
pop
mov
push
mov
lcall
dec
xchg
fimul
stc    
jge
dec
add
jg
sarb
fcoms
cwtl   
xchg
mov
xor
in
sahf   
adc
stos
fdivl
xchg
aad
in
fdivp
mov
mov
aas    
push
outsb
jmp
mov
inc
jecxz
sahf   
call
mov
in
jg
imul
icebp  
push
cmpsb
test
jg
push
mov
push
lods
fstl
movsl
mov
and
push
cmp
sbb
test
mov
mov
call
push
(bad)  
push
lcall
mov
gs stos
ds es cmp
movsb
fidivl
loop
test
jne
pop
dec
sahf   
xorw
cmpsb
rolb
subb
jnp
push
loope
inc
aad
mov
fwait
loopne
insl
mov
mov
cmc    
mov
loope
fmulp
sub
fcomp
cltd   
add
jns
mov
jecxz
sahf   
insb
add
inc
(bad)  
rclb
(bad)  
xchg
adc
fsubl
lock jnp
xchg
mov
or
pusha  
and
push
add
les
movsl
jg
lahf   
mov
add
movlhps
xchg
imul
xchg
xlat
cmp
xchg
adc
mov
push
dec
jecxz
(bad)  
jg
insb
lahf   
je
and
idiv
stos
xor
ljmp
lods
movsl
inc
decb
out
bound
ficoml
inc
fwait
adc
mov
sub
xchg
sbb
cmp
fiadd
inc
in
mov
cli    
rcll
adc
push
(bad)  
jb
fisttpl
pushf  
pop
xchg
jb
xchg
sub
pop
jmp
cs addr16 cs xor
js
mov
dec
cmp
adc
dec
hlt    
lea
sbb
sub
lea
(bad)  
call
nop
gs mov
and
inc
int
les
pop
in
inc
out
add
push
push
jne
sub
pop
jne
aaa    
aaa    
mov
xor
into   
cmp
adc
enter
lcall
xchg
push
jmp
cmp
popf   
ror
dec
hlt    
jl
mov
cmpsb
scas
fldenv
lods
fidivrl
sti    
aad
cmp
add
xchg
mov
adc
or
lods
xor
and
mov
mov
dec
mov
inc
rol
pop
pop
or
inc
xchg
rol
int3   
push
xchg
adc
imul
push
mov
call
inc
dec
imul
sbb
dec
push
push
mov
mull
jg
cmp
and
cmp
push
and
mov
mov
xor
(bad)  
mov
pop
adc
lea
sbb
push
outsb
je
popa   
jb
add
shrl
enter
adc
js
mov
loopne
arpl
mov
clc    
test
(bad)  
mov
dec
ror
mov
cmp
aam
fistpl
adc
jg
mov
mov
divb
out
push
ss or
roll
and
adc
icebp  
and
dec
sub
xchg
jmp
sbb
jbe
int3   
jb
sbb
cwtl   
inc
lds
shrl
jno
insb
fsubr
(bad)  
ss
mov
sub
ret    
movsb
(bad)  
cmpsb
dec
iret   
or
add
dec
in
xchg
dec
(bad)  
adc
xchg
iret   
sbb
mov
dec
sarl
lret
mov
js
movsl
lret   
in
push
(bad)  
rcrl
lret   
adc
dec
mov
push
repz or
cmp
jg
ret
lods
loope
bound
loopne
(bad)
pop
rorb
pusha  
lds
push
mov
add
addr16 inc
fwait
jbe
popa   
inc
ss jno
movsl
and
(bad)  
call
imul
(bad)  
cmp
xchg
divb
jno
popf   
les
cwtl   
or
sub
sti    
(bad)  
jnp
fsubl
fstps
push
(bad)  
int3   
or
aas    
mov
dec
push
loopne
adc
lcall
push
mov
dec
test
jne
stos
sub
je
sbb
jnp
xorl
inc
aaa    
outsb
ficom
orl
push
mov
sbb
adc
aad
sbb
test
subl
movsb
mulps
add
in
push
dec
mov
sbb
cmpsl
mov
popf   
push
adc
faddl
scas
hlt    
cld    
sbb
dec
jl
add
sub
adc
insb
lcall
loopne
add
adc
scas
mov
out
fwait
aas    
push
cmpsb
pop
lea
xchg
adc
mov
movsb
stos
dec
je
push
sbb
mov
jmp
xor
jno
pop
xor
dec
push
xor
repnz
jns
hlt    
fwait
rorl
xor
pusha  
add
insl
ja
and
xor
xchg
add
das    
dec
and
insl
xchg
dec
mov
cmpsb
fmuls
lds
bndldx
jmp
out
push
clc    
add
adc
jecxz
in
mov
(bad)  
mov
(bad)  
cmp
xchg
mov
pop
out
xchg
push
and
or
mov
mov
les
imul
pop
movsl
in
mov
iret   
test
outsl
pop
lock jmp
in
adc
push
iret   
(bad)  
mov
xchg
mov
aaa    
jbe
adc
outsb
rcll
xor
sub
or
fistp
pop
cmc    
insb
stos
cmp
xchg
fmull
fs jg
popf   
push
fist
pop
sub
data16 xor
inc
xor
and
mov
jmp
lret
lcall
push
mov
fs data16 adc
andl
int3   
pop
mov
mov
insl
push
fdivr
dec
sub
jb
es sub
jbe
mov
rclb
scas
or
ffreep
mov
jmp
mov
add
out
mov
stos
fisub
(bad)  
mov
leave  
cli    
push
aad
push
outsl
dec
cltd   
lahf   
mov
lock adc
ror
je
data16 aas 
dec
out
jae
jg
lret   
xchg
cli    
push
and
stc    
fwait
ss clc 
dec
leave  
xchg
push
sbb
addl
ret    
jbe,pn
fnstenv
pop
add
or
add
pusha  
lods
jo
push
lret
sahf   
in
mov
int3   
and
popl
inc
gs
je
out
cmc    
push
ret    
jae
cmp
pop
outsb
js
push
xor
iret   
xchg
mov
aaa    
(bad)  
xchg
test
into   
and
or
sub
scas
rol
ss jmp
mov
xor
push
or
lds
sbb
mov
js
add
sub
int
arpl
mov
push
jecxz
inc
mov
outsb
cs in
addr16 lock mov
mov
cmp
ret    
and
jo
jmp
mov
mov
fwait
dec
(bad)  
stos
push
repz into 
push
std    
pop
loopne
xchg
mov
xchg
xchg
movsl
pop
jg
lahf   
inc
pop
push
sub
xchg
popa   
cmc    
sarb
pop
icebp  
mov
(bad)  
mov
shrl
stos
or
sbb
incl
imul
ret    
xor
adc
cmp
or
testb
and
mov
sub
movsl
push
pop
call
out
pop
(bad)  
lret
subb
ljmp
mov
enter
into   
nop
rolb
sbb
mov
sahf   
mov
cmp
inc
mov
jg
enter
fisttpll
inc
adc
and
sub
lret
fild
xor
lds
sub
mov
ss cmp
cmpsl
mov
push
push
cmc    
ja
adc
sub
dec
mov
test
jg
jbe
inc
nop
mov
dec
ss imul
inc
call
sub
jecxz
addr16 pop
jg
mov
adc
xchg
mov
loopne
dec
fsubl
ds dec
outsl
push
stos
dec
mov
aam
mov
andps
adc
and
inc
sbb
dec
pushf  
push
xchg
lods
mov
imul
cmp
fisubrl
sbb
pop
mov
pop
aam
je
mov
adc
scas
ja
jnp
cld    
lds
scas
arpl
cmp
imul
mov
sub
insb
aas    
inc
add
mov
aam
out
cmp
push
or
xchg
mov
fiadd
cmp
sbb
or
and
jno
inc
ss popa 
(bad)  
lods
xor
mov
xor
adc
addr16 in
cmpsb
inc
adc
nop
cmp
stos
fcoml
mov
(bad)  
pop
repz repnz loopne
push
idivl
xchg
jl
aas    
xchg
(bad)  
leave  
lret
movsl
mov
cmp
and
jns
xchg
or
dec
sbb
(bad)  
stc    
sub
push
inc
frstor
das    
pusha  
cmp
ljmp
pushf  
sbb
or
push
test
jg
fucom
inc
repz scas
sbb
lods
and
mov
xorl
mov
(bad)  
(bad)  
popa   
cmpl
and
pop
cmp
int3   
pushf  
ss jno
add
xor
jge
jg
aam
fildl
jns
dec
cwtl   
pop
xchg
repnz push
dec
push
dec
imul
push
fadds
jbe
or
stos
xor
fs pop
addr16 push
test
cmp
sbb
cmpsb
loop
xor
mov
xchg
push
stos
cmp
mov
dec
shlw
lea
sbb
add
outsb
pop
and
mov
repz mov
(bad)  
lahf   
push
fisttp
leave  
mov
mov
pop
jmp
mov
ror
aas    
jae
rcrb
cmp
xor
xor
ds lock and
mov
xlat
push
stc    
das    
xchg
xchg
jbe
mov
ds inc
mov
mov
(bad)  
je
dec
ljmp
arpl
dec
xor
mov
push
jb
push
in
fstl
pop
jg
loope
xchg
xor
stos
mov
neg
bound
sbb
imul
inc
pushf  
sub
in
jbe
gs push
stos
push
(bad)  
imul
mov
pop
xchg
pop
add
push
inc
outsl
cmp
lea
xor
add
dec
or
xor
lock cmp
enter
lahf   
dec
cli    
dec
push
cwtl   
cmp
inc
dec
inc
cli    
sbb
pop
in
ds lcall
imul
cmp
stos
dec
xchg
mov
sti    
push
jg
sahf   
loopne
dec
cld    
adc
xor
mov
aas    
xchg
dec
clc    
xor
xchg
(bad)  {%k3}{z}
jmp
lret
inc
and
dec
popf   
lcall
pop
inc
mov
jmp
dec
inc
add
aaa    
jge
push
call
outsl
dec
or
cld    
xor
add
pop
add
bound
push
jnp
subb
aad
xchg
adc
pop
dec
jecxz
mov
lcall
ficoml
fcoml
(bad)  
dec
movb
push
aaa    
lods
lret
out
inc
cmpsb
adc
jle
inc
test
pop
adc
fist
cmp
dec
sarl
mov
push
adc
inc
in
sqrtps
sbb
ret
scas
in
rolb
mov
pop
jne
xchg
pop
pop
int3   
push
lcall
pop
cmp
icebp  
movsl
push
cs push
mov
pop
push
in
rclb
add
and
lods
add
and
mov
ss insb
call
push
inc
jmp
mov
jmp
mov
mov
jns
xchg
aaa    
cmp
iret   
ja
fcomps
popf   
in
dec
pop
pop
scas
mov
adc
lea
lods
jle
mov
xchg
mov
mov
insl
xchg
arpl
in
xor
xor
xor
out
fstl
push
adc
ljmp
push
and
cld    
ret    
cmc    
ds or
pop
mov
ljmp
mov
adc
clc    
call
jo
cmc    
in
sti    
aad
outsb
mov
mov
add
shrl
mov
or
mov
adc
add
or
aaa    
fldenv
outsl
inc
xlat
mov
or
or
(bad)  
imul
in
lret
xorl
mov
pop
in
fcompl
lock jmp
push
scas
xchg
add
jp
inc
(bad)  
in
int
stos
cmpsl
push
fimull
pop
sub
in
push
les
sbb
(bad)
pusha  
jnp
push
mov
cmp
sbb
loopne
add
insb
mov
(bad)  
jno
cmp
xchg
ret
fmul
data16
dec
cmp
mov
sbbb
je
cmp
jb
call
jnp
jbe
dec
mov
cmp
cmp
outsb
nop
sub
pop
lea
or
daa    
jae
lock pcmpgtb
inc
xchg
popf   
mov
inc
cs mov
or
fidiv
popa   
pop
(bad)  
mov
pusha  
push
or
(bad)  
adc
je
ja
and
rorl
sbb
add
enter
push
pop
inc
add
imulb
scas
pop
sub
xchg
or
push
jge
adc
pushf  
mov
sub
ret    
sbb
push
inc
stos
jb
mov
or
out
lcall
pop
cmp
sub
xor
push
cmp
in
dec
xchg
mov
mov
sub
icebp  
xchg
rcrb
in
xchg
arpl
mov
adc
lods
sbb
scas
nop
cmp
call
jne
push
in
lods
mov
fs push
sub
lds
aas    
mov
pop
jg
jbe
xchg
mov
addr16 aas 
(bad)  
jge
ja
lods
daa    
pop
jle
rcll
popf   
(bad)  
sbb
mov
lret   
out
cmpsb
cmp
sub
pop
dec
pop
or
out
iret   
fidiv
or
bound
cs sar
mov
inc
add
add
ljmp
test
ja
jg
mov
cli    
dec
add
adc
(bad)  
or
push
sarb
repnz sub
jge
inc
clc    
inc
decb
stc    
pop
mov
ljmp
pop
arpl
mov
hlt    
pop
ret    
ficomp
xor
xor
(bad)  
xchg
les
xchg
and
mov
mov
repz ja
sbb
(bad)  
ja
aad
pusha  
push
xor
or
or
xchg
or
aas    
loopne
inc
stos
fiaddl
icebp  
pop
lret   
test
pop
outsb
cs sbb
and
fistl
sub
mov
xor
push
jl
int
jecxz
lahf   
sbb
jmp
mov
inc
(bad)  
sub
loop
(bad)  
sub
adc
(bad)  
xor
mov
jmp
lods
pop
adc
xchg
cmp
dec
nop
loope
add
arpl
(bad)  
add
jmp
call
(bad)  
in
(bad)  
dec
movb
sub
mov
sbb
notb
inc
cmp
bound
push
mov
shll
sbb
lods
fyl2xp1 
std    
pushf  
jmp
stos
xor
cmp
sti    
loopne
sub
sbb
jp
lcall
sub
or
rol
fidivrl
xchg
push
sbb
pop
cs push
mov
repz jo
jecxz
jnp
addl
sbb
add
mov
ficoml
dec
inc
mov
sbb
adc
out
ss dec
(bad)  
(bad)  
daa    
aaa    
aad
pop
aad
movsb
push
lock adc
shll
add
or
scas
add
mov
xchg
xchg
test
(bad)  
mov
dec
jmp
icebp  
(bad)  
or
xorb
sbb
push
mov
shll
xchg
push
cmp
add
cmp
inc
mov
icebp  
add
rol
cmp
lock in
cltd   
sub
cltd   
cmp
jmp
pop
cmp
pop
pusha  
mov
aas    
outsb
mov
(bad)  
out
pop
sbb
loopne
hlt    
cmc    
adc
mov
jle
cmp
mov
mov
jg
add
stc    
sbb
or
sbb
fisubrl
test
add
cmpsl
aas    
ss and
popl
inc
mov
sub
fldt
pop
or
ret    
adc
stc    
jns
out
mov
jb
daa    
je
xchg
jmp
push
data16 add
(bad)  
mov
add
(bad)  
mov
out
loope
les
ja
sbb
faddl
iret   
sbb
repnz sbb
lret   
int3   
mov
mov
or
xor
push
sbb
fistpl
lods
push
popa   
imull
fsubr
xor
aam
test
(bad)  
xor
das    
cmpsb
and
adc
jmp
pop
je
jmp
sbb
mov
push
stos
addr16 sub
sahf   
pop
idivb
imul
add
call
ss add
pop
aam
mov
shll
mov
pop
jl
sbb
loop
and
xchg
(bad)
loop
inc
sub
add
add
pop
sub
cmp
cmp
hlt    
push
sub
aas    
mov
in
pop
mov
mov
dec
aaa    
mov
clc    
mov
cmp
movsl
mov
mov
sub
xchg
lea
cmp
xchg
sub
sub
sub
mov
ja
mov
ss pop
jg
aad
xorl
mov
sub
int3   
loop
addr16 mov
xchg
jns
leave  
mov
push
xchg
fwait
or
mov
sbb
int
int
roll
cmp
mov
pushf  
jg
das    
xchg
xor
data16 mov
add
(bad)  
outsl
shrb
repnz ds faddp
lea
and
push
xchg
add
insl
cmp
or
aaa    
pop
dec
xchg
nop
idivb
pop
jmp
or
jae
(bad)  
xor
xor
nop
fcmovnu
add
sub
dec
mov
test
or
aas    
movsb
and
out
add
sub
addr16 mov
stos
mov
mov
ret    
pop
mov
loope
xor
xchg
xchg
lret
jns
dec
mov
cmp
push
repnz xor
jecxz
(bad)  
jae
push
xor
cmpsl
ss mov
push
cmp
jg
stos
shrb
xlat
add
movsb
cmp
cmp
sub
test
test
xchg
push
mov
js
pop
mov
in
pop
mov
mov
cli    
scas
dec
mov
arpl
int
aam
cmpsb
xor
dec
inc
cmpl
sbb
stos
xor
sahf   
pop
lea
outsl
shll
stc    
pop
mov
pop
mov
or
notb
or
push
cmpsb
cmpsb
and
imul
lret
in
subl
out
xor
adc
in
mov
sbb
test
fmull
mov
xor
inc
enter
cwtl   
shlb
pushf  
jp
scas
mov
sbb
int3   
dec
ss mov
sbb
iret   
stc    
sar
enter
push
cmc    
in
lea
out
stos
push
orl
icebp  
jbe
or
cmp
cmpsb
mov
int
pop
imul
dec
cmp
jmp
pop
lds
add
pop
inc
fsub
lcall
push
jmp
jmp
pop
aaa    
add
loope
xchg
cld    
pop
js
shr
in
repz cmpsl
out
iret   
push
jl
cmpl
or
mov
loope
sbb
and
push
dec
and
scas
int3   
mov
cmp
pop
fbstp
inc
adc
in
lods
cmp
xchg
imul
rclb
mov
push
mov
aaa    
test
out
(bad)  
fstpl
leave  
lds
push
push
pushf  
jp
test
mov
sub
icebp  
push
cld    
sbb
dec
loopne
sbb
out
in
push
mov
shlb
inc
mov
icebp  
icebp  
mov
pusha  
push
lcall
adc
iret   
mov
int3   
loopne
jmp
and
xchg
mov
xchg
test
and
mov
fwait
nop
or
cmpsb
sbb
sti    
xchg
and
hlt    
add
icebp  
or
pop
ds mov
cwtl   
(bad)  
mov
push
push
ret    
(bad)  
sarb
(bad)  
mov
jmp
daa    
push
rorb
movl
cmp
dec
xor
(bad)  
clc    
in
push
scas
and
or
loop
push
es sbb
stos
dec
btr
movsl
arpl
fsin   
jb
dec
dec
in
adc
push
inc
dec
push
outsb
lds
sub
jmp
mov
adc
inc
arpl
ljmp
mov
sub
in
inc
(bad)  
cmc    
fnstenv
fmuls
loop
jmp
das    
sar
add
xchg
dec
or
mov
push
iret   
jnp
out
xchg
(bad)  
mov
insb
int
mov
xchg
mov
push
std    
dec
fs mov
ret    
add
and
pop
wbinvd 
xor
imul
mov
ror
xlat
loopne
pushf  
mov
in
and
xchg
popa   
outsb
lods
sti    
insb
add
les
xlat
push
cli    
mov
setbe
frstor
inc
clc    
fwait
stos
pop
jae
jmp
and
jmp
inc
or
xchg
rclb
sahf   
addr16 stc 
jae
jle
test
sbb
inc
mov
(bad)  
ja
xor
xchg
sarb
xchg
in
rolb
shl
cltd   
test
push
ror
mov
mov
xchg
and
ret    
xor
repz int
push
call
pushf  
pop
shlb
sbb
iret   
jae
fsubrs
fldcw
xchg
les
dec
addr16 xor
sti    
ficom
out
xchg
outsl
insl
mov
mov
sub
cltd   
jb
adc
push
rcrl
mov
push
stos
pop
push
add
ficompl
cmpsb
sti    
aad
lahf   
adc
mov
int
mov
xchg
xor
sahf   
mov
or
fwait
rcrl
out
sbb
dec
cmpsb
outsl
out
(bad)  
xor
faddl
jmp
scas
pop
xchg
xor
mov
int3   
fs jbe
inc
(bad)
lds
rorl
lds
xor
movsb
lret   
xchg
cmp
aad
stos
cmp
xchg
(bad)  
mov
lahf   
push
stc    
sub
jp
inc
idivb
aas    
adc
mov
and
stos
jno
loope
jnp
hlt    
jno
popf   
rcrl
jl
dec
mov
je
xor
imul
lahf   
push
into   
in
fwait
cmp
add
mov
(bad)  
inc
dec
add
scas
ljmp
cmp
leave  
xchg
loopne
dec
loopne
(bad)  
xor
fisub
pop
int
jle
or
(bad)  
push
cmc    
jae
loopne
mov
add
aam
test
cltd   
lds
lea
inc
inc
push
subl
aam
mov
xchg
(bad)  
mov
loopne
dec
out
icebp  
and
popa   
cwtl   
(bad)  
jns
dec
mov
push
and
adc
sti    
daa    
test
mov
xor
push
(bad)  
mov
or
sbb
mov
test
mov
mov
ljmp
mov
aas    
jecxz
jmp
dec
dec
pop
aad
mov
sbb
mov
jge
jo
mov
xchg
mov
cmp
xchg
and
push
push
fnstcw
pop
adc
inc
add
sub
push
das    
pop
lock sub
rcrb
outsb
mov
mov
jl
ffree
dec
(bad)  {%k3}{z}
leave  
mov
mov
loop
jae
(bad)  
dec
adcb
jb
xor
lret   
mov
(bad)  
jb
mov
aas    
imul
mov
iret   
mov
popa   
mov
add
loopne
ja
adc
in
(bad)  
ret    
and
mov
stos
mov
in
test
sbb
or
test
std    
push
inc
dec
pop
outsl
(bad)  {%k5}
pushf  
int3   
dec
popf   
outsb
xchg
in
push
jns
sbb
inc
loope
inc
mov
(bad)  
imul
adc
rorl
stos
sub
jp,pt
sbb
jle
push
mov
mov
ret    
repnz popl
dec
mov
push
adc
js
pop
sti    
add
(bad)  
fdivrl
sarl
pmaxsw
mov
cmpsb
dec
(bad)  
scas
addr16 push
pop
hlt    
mov
pushf  
xchg
add
aas    
fldl
insb
nop/reserved
(bad)  
imulb
movsl
ret
xor
cwtl   
stos
mov
ret
inc
fdivl
mov
pop
(bad)  
sbb
imul
aad
xor
cwtl   
rolb
mov
xchg
inc
jmp
and
add
and
inc
add
xchg
dec
jns
fsubp
adc
jb
pop
sarb
test
adc
sbb
fistpll
leave  
xchg
mov
popa   
add
ja
inc
inc
cli    
dec
mov
adc
add
dec
push
mov
push
dec
inc
iret   
aas    
push
and
push
ljmp
mov
xchg
add
mov
jge
jbe
mov
mov
add
push
add
sub
pop
(bad)  
incb
ljmp
adc
mov
jno
or
icebp  
lods
jne
dec
adc
cld    
rcrl
cmp
repnz lods
pop
icebp  
sub
mov
lret   
cwtl   
sahf   
jb
and
dec
mov
scas
test
sbb
aaa    
inc
mov
pop
xchg
mov
jmp
add
out
test
inc
xor
jo
cmp
rcrl
xor
lret
movsl
mov
outsb
lcall
out
mov
data16 loop
aas    
and
xchg
xchg
push
push
sbb
and
add
add
mov
cwtl   
or
adc
mov
nop
lods
loop
mov
mov
pop
pop
(bad)  
ja
add
ret    
cmp
adc
gs cmp
in
fildll
inc
ret    
mov
call
push
mov
daa    
xor
testb
fldenv
pop
gs stc 
adc
and
jb
fcomp
cld    
jp
clc    
popf   
insl
in
sub
mov
(bad)  
cld    
scas
decb
lds
dec
mov
out
in
inc
int3   
inc
jle
(bad)  
jl
xchg
mov
into   
ror
popa   
jmp
fdivr
jle
(bad)  
ficompl
xor
(bad)  
cltd   
pushf  
es mov
(bad)  
jno
hlt    
or
in
sbb
(bad)  
aaa    
adc
dec
sub
(bad)  
pop
inc
add
pushf  
in
enter
add
sub
imulb
sbb
jg
test
sbb
std    
imul
outsl
movsl
aas    
mov
loopne
rclb
mov
sbb
mov
sub
xchg
imul
negb
push
daa    
cltd   
xchg
and
add
pop
into   
lods
scas
bound
fiadd
xor
xor
hlt    
mov
dec
adc
dec
lods
rcl
fsubrs
push
xchg
adc
push
jb
sub
or
inc
jge
jne
mov
mov
jmp
fnstenv
cmpsb
jecxz
cmpsl
cmp
outsl
push
in
xchg
cmp
imul
and
dec
pop
pusha  
sti    
mov
ss cwtl 
push
mov
sub
adc
(bad)  
mov
xlat
mov
xor
out
pop
in
(bad)  
loope
(bad)  
negb
push
mov
add
sbb
sub
inc
mov
mov
mov
insl
lcall
sbb
and
xchg
divl
icebp  
sub
pop
fbld
or
push
or
pop
lret
xchg
arpl
lea
std    
sbb
imul
and
or
je
scas
int3   
jns
fidivr
xchg
adcb
push
and
lcall
push
sub
mov
add
pop
cmp
cld    
repz cmp
push
out
fwait
out
addl
dec
push
mov
xor
(bad)  
ljmp
dec
add
inc
inc
testb
jno
jb
add
push
(bad)  
mov
inc
(bad)  
loop
inc
cld    
lret
fstps
data16 mov
add
push
insl
jns
aas    
arpl
cmp
jns
ret
mov
lods
ljmp
dec
(bad)  
mov
cltd   
push
insb
icebp  
frstor
jb
ljmp
(bad)  
cvtdq2ps
(bad)  {%k5}
lret   
loope
add
xchg
jbe
cmc    
sub
cmpsl
sbb
in
std    
(bad)  
lods
repz push
pushf  
cltd   
mov
sub
fucomip
dec
xor
xchg
ja
(bad)  
push
push
inc
cwtl   
dec
jo
mov
loope
jg
mov
inc
push
pop
int3   
pop
inc
mov
loope
dec
test
xchg
jge
insb
in
aam
rcrl
add
xchg
std    
fiadd
xchg
mov
andb
das    
lods
pop
(bad)  
ljmp
dec
push
mov
int3   
xor
nopl
mov
xor
sub
jns
cld    
sub
sub
fdivrs
std    
sbb
xchg
xor
add
add
movsl
xor
mov
bound
add
adc
aaa    
(bad)  
std    
leave  
pop
mov
imul
push
or
xor
and
push
push
sbbl
repz jp
std    
and
(bad)  
or
inc
jg
mov
xchg
push
(bad)  
(bad)  
xor
movsl
jb
int
cld    
jl
mov
mov
jno
xchg
push
cwtl   
gs ret
lcall
jl
jg
cmp
mov
cltd   
xor
mov
inc
sbb
pop
fiaddl
rorb
dec
xor
push
call
insb
push
stc    
sbb
fisub
fldenv
and
mov
cmc    
mov
int
movsb
pusha  
mov
push
cli    
or
pop
and
ljmp
sub
push
xbegin
push
xchg
aaa    
pop
adc
inc
mov
xchg
mov
mov
sbb
into   
jmp
icebp  
aam
ficomp
clc    
divl
repnz out
push
push
insl
pop
sub
call
testb
rcl
xor
or
int3   
popf   
shrb
inc
jns
inc
fsubs
test
imul
cltd   
push
jle
add
add
in
stc    
mov
mov
mov
aas    
ja
cmp
mov
push
pop
cmpsl
pop
call
add
test
fidiv
stc    
mulb
movsl
inc
data16 out
jmp
lret
(bad)  
cmp
movsb
enter
lock push
dec
out
sbb
push
out
sbb
rolb
out
mov
aad
imull
mov
pop
xchg
add
cmp
jg
aam
push
lret
ja
repnz inc
pop
inc
icebp  
push
in
add
paddb
xor
test
leave  
inc
ja
and
movsb
mov
(bad)  
push
ss xchg
add
push
std    
leave  
mov
dec
mov
adc
test
inc
cmp
jb
xchg
mov
add
rolb
in
ror
dec
daa    
sbb
arpl
pop
imul
scas
arpl
fsub
movsb
pop
cmp
dec
lods
aaa    
inc
mov
dec
jnp
mov
out
dec
add
xchg
push
mov
hlt    
jno
cltd   
movsl
push
inc
sub
les
jp
and
test
cmp
(bad)  
mulb
sar
lcall
(bad)  
xchg
leave  
loopne
jle
mov
push
cli    
in
inc
es or
shl
jg
stc    
sbb
inc
push
mov
(bad)  
xchg
aad
sti    
je
xchg
fs ljmp
jns
test
aam
outsl
cli    
xchg
sbb
cli    
call
fbstp
mov
data16 loop
adc
int
mov
fwait
or
inc
addr16 pop
ds xchg
add
gs jae
add
adc
out
ja
xor
(bad)  
mov
(bad)  
cmc    
adc
sub
jns
std    
add
stos
xchg
jns
outsb
stos
mov
mov
std    
sahf   
jns
mov
dec
clc    
pop
add
mov
ret    
cwtl   
inc
test
mov
fcompl
add
mov
jle
mov
pop
pop
fild
cmp
xchg
xchg
test
inc
sub
and
push
or
mov
test
ficomp
andb
add
imul
jecxz
mov
ret
jno
xchg
xchg
jnp
imul
mov
xor
sub
adc
xchg
push
or
inc
shl
outsb
scas
mov
ss inc
inc
mov
push
xchg
inc
(bad)  
mov
je
out
sub
or
std    
push
xchg
fs in
mov
scas
shrb
pop
cld    
fwait
pop
mov
mov
fidivrl
fiadd
sbb
ja
push
jb
call
aam
(bad)  
xor
lcall
adc
outsb
pop
xor
sub
and
push
jg
jecxz
push
add
pop
adc
xlat
or
shrb
dec
jae
adc
cmpsl
bnd jae
xchg
nop
fdivrs
jecxz
sbb
lret
sbb
(bad)  
lcall
mov
or
jecxz
mov
testl
stc    
fwait
mov
dec
push
sbb
mov
sti    
cli    
adc
or
pushf  
lods
cmp
inc
(bad)  
mov
jle
sub
jle
inc
movsl
insb
xlat
push
sub
mov
xor
das    
push
scas
adc
push
xor
adc
mov
mov
cmpsb
sbb
inc
lcall
push
gs addr16 sub
push
mov
mov
mov
mov
nop
add
adc
push
cld    
jp
inc
mov
andl
insl
jne
(bad)  
fs pop
cmp
inc
or
fisttpl
lds
jo
jp
cmc    
mov
xlat
loope
adc
sarb
ret    
(bad)
push
aad
mov
inc
pop
adc
ss popa 
or
dec
add
jmp
sub
imul
xor
mov
pop
sub
(bad)  
daa    
dec
fisubrl
mov
pop
adc
xchg
mov
(bad)
cwtl   
sub
into   
(bad)  
and
cld    
xor
out
scas
cli    
or
lock xor
inc
jae
sbb
mov
xor
orb
aam
lods
push
and
scas
shrl
(bad)  
adc
(bad)  
inc
sbbb
call
stos
inc
out
mov
xlat
inc
lods
mov
add
out
pop
aad
mov
dec
xor
jmp
addl
jae
push
pop
gs push
cmp
leave  
lahf   
sub
sbb
in
test
dec
mov
sub
mov
adc
pop
(bad)  
dec
push
mov
call
sub
imull
xor
test
loopne
push
push
sahf   
jno
rorb
mov
daa    
push
fsts
stc    
sar
(bad)  
and
icebp  
cmpsb
jp,pt
aam
leave  
mov
lcall
push
xor
fdivl
inc
insl
jb
fucom
pop
repz or
lret   
nop
jmp
adc
stos
jb
push
jo
sub
sub
popf   
dec
add
shll
push
aas    
or
jmp
pop
push
je
cmpsl
(bad)  
out
es mov
xor
or
jecxz
jo
stos
push
les
and
shrb
test
xchg
iret   
adc
cmp
fisttpl
insl
jl
(bad)  
enter
lods
pushf  
jg
adc
(bad)  
repnz
cs push
push
adc
popf   
mov
movsl
mov
dec
jae
add
imul
adc
stc    
cltd   
imul
in
daa    
jmp
in
pop
dec
adc
mov
and
pop
ret
or
cmpsb
inc
rorb
push
mov
pop
aaa    
iret   
jg
push
dec
xor
mov
adc
or
push
imul
int
jle
mov
xchg
inc
inc
cmpsl
in
fs in
mov
pop
mov
ret
loop
mov
stos
les
cmp
and
push
mov
call
scas
cmp
(bad)  
lock lods
and
addr16 lahf 
add
out
dec
(bad)  
ljmp
xchg
dec
repnz adc
repz cmpsl
push
test
mov
insb
add
test
jnp
cmpsl
out
xchg
stos
pop
sub
lret   
dec
lret   
sub
cmp
in
mov
inc
clc    
sbb
pop
mov
es mov
iret   
shrb
stos
outsb
xor
cmpsb
mov
xor
mov
lea
and
jp
push
scas
outsb
add
cltd   
xor
ss inc
mov
pop
test
rcr
idivb
mov
scas
cmp
stos
fucom
xchg
mov
jcxz
aas    
insl
and
adc
not
js
jae
test
sbb
pop
cmpsb
fistpl
xorl
aam
cmp
mov
or
mov
add
fisub
les
and
cmp
test
mov
test
stc    
out
adc
pop
pop
ret    
(bad)  
and
repz cwtl 
nop
inc
xlat
mov
outsl
inc
cmp
sub
in
jmp
dec
and
xchg
mov
mov
sbb
mov
inc
jl
(bad)  
in
mov
sahf   
mov
xchg
xchg
inc
push
add
mov
mov
stos
hlt    
dec
xchg
jns
shlb
xchg
ja
xorl
jne
xor
sbb
jecxz
push
inc
ja
add
xor
adc
(bad)  
sub
sub
lds
(bad)  
in
(bad)  
inc
pop
lcall
or
add
lret
and
shrl
jne
pushf  
cmp
out
int
cmp
xchg
or
dec
popl
icebp  
adc
test
cli    
jae
xchg
test
lcall
push
inc
xchg
or
sub
dec
xchg
lods
pop
adc
das    
inc
cmpsb
mov
adc
sub
and
pop
mov
push
shl
mov
popf   
push
jbe
mov
inc
sbb
xor
dec
jl
pop
cmp
mov
jge
sbb
popa   
paddb
pop
fimull
pop
mov
faddl
(bad)  
fwait
pop
fnop   
mov
xchg
cmc    
stc    
cmp
into   
das    
es jb
or
sbb
loopne
pop
(bad)  
int3   
push
jmp
idivb
test
lods
mov
outsl
flds
add
daa    
pop
(bad)  
mov
lret
out
mov
sarb
jecxz
repz mov
add
mov
addr16 jae
dec
push
pop
(bad)  
sbb
xlat
xchg
insl
into   
or
in
xchg
adc
sbb
pushf  
or
in
pop
pop
jbe
mov
cli    
popf   
test
aam
aad
test
(bad)  
pop
cli    
inc
fadds
stos
data16 mov
aaa    
xchg
or
xor
testl
loop
int3   
jno
mov
adc
push
mov
jmp
iret   
and
jno
add
ret    
sub
dec
fwait
mov
je
(bad)  
leave  
bound
aam
cmp
or
sbbb
and
mov
fcompl
inc
jp
and
xchg
mov
out
(bad)  
gs push
sbb
mov
(bad)  
mov
cmc    
jb
movsl
mov
push
xor
rol
loop
push
or
movsb
stos
sub
sarl
sbb
enter
jo
mov
and
mov
add
out
sahf   
(bad)  
(bad)  {%k5}
clc    
in
mov
cmp
lret
mov
inc
sub
sbb
loope
popf   
into   
mov
mov
movsl
ds stos
cmp
pushf  
sub
(bad)  
call
scas
mov
cli    
xchg
jg
movsb
popa   
test
mov
cmp
ljmp
jo
popf   
in
jle
push
mov
nop
inc
lahf   
pop
movsl
sub
lret   
jmp
inc
pop
lods
out
mov
iret   
into   
clc    
cmp
outsb
pop
sbb
rclb
mov
xchg
cmp
push
jmp
aas    
add
adc
mov
outsl
int3   
cli    
mov
mov
and
adc
repz cwtl 
cmc    
mov
shl
jge
mov
xor
or
setle
mov
mov
mov
in
jle
jne
(bad)  
mov
mov
test
inc
movzwl
hlt    
sub
add
frstpm(287 only) 
iret   
ljmp
mov
push
and
loopne
sub
out
aaa    
or
in
out
dec
pop
and
jl
lods
sub
dec
jmp
test
pop
mov
and
in
push
mov
in
lcall
add
push
xor
sbb
xor
std    
sbb
ss in
push
xchg
negb
and
add
(bad)  
xchg
add
xchg
fld
xchg
orl
mov
test
cmc    
xor
xor
jge
jg
adc
nop
pop
cmp
pop
sbb
inc
mov
adc
mov
loop
push
in
mul
push
sahf   
daa    
dec
lcall
add
loop
daa    
mov
int3   
roll
nop
mov
push
outsb
scas
jne
inc
js
or
stc    
rorb
jns
sbb
pop
xchg
mov
push
jmp
mov
sub
das    
mov
and
push
dec
jg
mov
ffree
jns
imul
xchg
adc
repz sbb
es out
testb
xchg
pop
push
and
arpl
mov
je
inc
mov
popa   
int3   
lea
fisubl
sar
mov
cmp
push
mov
pop
sbb
push
lods
jecxz
inc
js
enter
lret
fist
aas    
adc
sub
jecxz
or
add
add
dec
inc
dec
inc
scas
inc
pusha  
(bad)  
or
add
add
(bad)  
(bad)  
(bad)  
incl
add
add
add
add
add
add
jns
je
insl
cs inc
jb
ja
outsb
addr16 sub
push
gs jb
imul
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
xor
data16 aaa 
xor
fs xor
add
adc
gs insl
cs inc
jb
ja
outsb
addr16 cs inc
imul
add
popa   
je
pop
add
add
add
add
add
lsl
add
jno
add
add
or
or
add
or
add
add
add
dec
or
add
add
(bad)  
and
add
add
inc
dec
inc
add
mov
or
popa   
add
jo
pop
jae
add
ret    
add
push
ret    
add
outsl
test
add
cmp
push
push
test
jmp
add
ret    
inc
iret   
mov
test
popf   
jb
jle
cmovbe
loope
fldl
dec
push
nop
xor
imul
mov
xchg
cmp
es jne
clc    
push
pop
std    
imul
jae
xchg
sub
subl
out
and
xchg
jmp
notb
or
pushf  
test
(bad)  {%k5}
int
loop
insl
pop
ds mov
jg
hlt    
pusha  
cmpsb
test
sbb
inc
sti    
imul
sbb
sbbl
dec
pusha  
aas    
rcrl
sbb
mov
ja
ss adc
orl
mov
pop
jbe
aam
mov
xor
push
pop
in
inc
imul
cltd   
adc
loop
lock imul
xor
rclb
test
jns
and
sarl
push
add
adc
pop
test
xchg
adc
push
lods
shrl
add
(bad)  
sbb
faddl
mov
imul
inc
inc
cmp
fwait
jle
fs
xchg
add
mov
xchg
jg
push
lea
in
fcmovnu
test
nop
pop
and
aad
jb
jb
aas    
push
pusha  
and
insb
mov
adc
mov
sbb
fucom
repz cmp
aad
dec
das    
cmp
pusha  
insb
(bad)  
bnd jle
push
incl
shll
arpl
jno
mov
or
rcll
push
push
xchg
xchg
sub
jnp
push
lret
and
adc
and
add
int
inc
or
cwtl   
sbb
orb
lret
lds
xlat
ja
ret    
test
xlat
pop
aad
add
bound
mov
push
or
nop
or
mov
dec
jno
ret
dec
mov
fsubl
xchg
negb
dec
jne
jb
rcll
lods
push
ja
sub
sar
das    
mov
pushf  
or
pushf  
aad
ret
cmp
xchg
add
arpl
adc
mov
lcall
inc
roll
jne
in
and
xor
or
les
outsb
mov
jmp
fisttp
push
pusha  
loop
fs cs jmp
outsb
mov
lret
xor
push
das    
jne
mov
push
push
ja
lret
imul
jbe
aam
in
fist
ret
fdivs
add
mov
add
pusha  
jp
add
jnp
sub
hlt    
std    
and
adc
mov
mov
mov
in
sbb
xchg
call
out
popa   
repz pop
leave  
nop
or
mov
pop
pop
xlat
push
aad
xlat
lods
popa   
mov
aaa    
sbb
sti    
(bad)  
xchg
imul
lods
mov
in
adc
ljmp
jne
pusha  
and
add
not
xor
inc
mov
mov
call
xor
adc
jp
les
sbb
jmp
es inc
or
xchg
insb
inc
fst
add
ror
cld    
aam
push
shlb
out
push
sbb
into   
inc
dec
mov
imul
sbb
pop
ret
xlat
scas
and
mull
cmp
popa   
fs or
push
ljmp
and
jae
flds
mov
(bad)  
jno
jle
clc    
jge
or
jo
lock imull
mov
out
pop
inc
xchg
insb
cmp
cmc    
xchg
jmp
dec
pop
jo
ljmp
sbb
push
pushf  
aas    
sti    
jbe
repnz push
ret
lahf   
adc
lahf   
cmp
fincstp 
jae
pop
xchg
ds xor
(bad)  
rorl
loop
push
outsl
mov
jecxz
jne
adc
or
xchg
bound
scas
loop
repz or
das    
xchg
and
js
rorb
jnp
movsb
push
sub
jmp
xlat
sub
stc    
fldcw
adc
inc
jo
sbb
lea
cmp
jae
pushl
xor
cmp
jnp
out
jo
leave  
lea
mulb
add
popf   
push
or
daa    
inc
pop
xchg
divl
rorl
mov
xor
test
stos
pop
dec
(bad)  
or
sub
jl
icebp  
mov
mov
sbb
std    
call
scas
jno
inc
bound
and
and
and
mov
gs fcmovb
jne
js
or
mov
mov
sbb
xor
jno
lds
mov
add
(bad)  
out
inc
inc
add
bound
sub
cmp
rclb
movsl
scas
push
out
int3   
call
test
clc    
rorb
rclb
(bad)  
push
xlat
jl
sbb
cmp
ret
ret
popf   
(bad)  
lret   
lock jle
scas
pop
mov
addb
add
ja
xchg
out
into   
xchg
mov
(bad)  
dec
(bad)  
les
xlat
fbstp
jp
ss mov
jnp
xchg
and
stos
sub
push
mov
ss call
in
mov
mov
mov
inc
fstpt
cwtl   
lret   
dec
xchg
mov
insb
jecxz
push
and
xor
jnp
adc
xchg
fidivl
cmp
xorb
jo
ss dec
mov
push
std    
notl
mov
jbe
and
jne
xor
inc
test
andb
ja
outsb
fbstp
add
add
cwtl   
lock call
ret
xchg
pushl
push
mov
icebp  
xchg
ret    
xchg
mov
test
lret   
(bad)  
adc
pop
mov
sub
push
and
fcomps
setg
(bad)  
fbstp
lods
inc
insb
ljmp
xchg
xlat
inc
mov
test
add
sti    
popl
(bad)  
pop
push
popf   
xor
fwait
dec
push
popa   
test
jae
les
cmpsl
adc
insl
arpl
inc
and
test
and
mov
mov
in
sub
mov
(bad)  
icebp  
fstps
lds
dec
mov
data16 cmc 
mov
int
mov
cld    
enter
ja
inc
cltd   
cmpsl
rolb
pop
or
sahf   
cmc    
cmc    
ret
(bad)  
sbb
inc
lcall
xor
or
fmuls
adc
xchg
xor
lret   
jb
fcmovu
mov
xor
add
inc
rclb
dec
push
or
stos
cmp
mov
icebp  
inc
out
push
xchg
ret
xor
je
adc
repnz clc 
mov
or
sub
adc
ret
scas
adc
cltd   
jb
push
inc
jge
iret   
adc
add
jns
xchg
jg
xchg
outsl
adc
mov
icebp  
iret   
dec
mov
cmp
in
push
mov
stos
push
cmp
in
int3   
pop
pop
cmpsl
mov
mov
push
push
push
add
or
repz in
adc
pop
daa    
mov
inc
ds mov
mov
xchg
or
or
lea
mov
xor
adc
les
ja
stos
in
pop
into   
shlb
mov
lret
pop
mov
and
ds xchg
call
(bad)  
std    
outsl
inc
xor
gs xor
ret
out
cltd   
xchg
sub
ret
clc    
(bad)  
test
cltd   
popf   
mov
daa    
(bad)  
pushw
nop
shlb
imul
fimul
mov
xchg
arpl
pop
aaa    
xor
sub
pop
repnz dec
pop
sarl
movsb
mov
fs out
pushl
push
rorb
das    
andl
and
inc
mov
adc
mov
pop
lods
es sbb
lods
(bad)  
arpl
or
inc
mov
jl
fucomi
outsl
fcmovnu
add
loope
mov
lock jmp
cmpl
mov
lods
push
lahf   
push
cwtl   
test
cmpsb
jmp
rcrl
imul
(bad)
mov
mov
jmp
push
jae
incb
add
pop
js
pop
add
fnop   
in
clc    
dec
in
xchg
xchg
icebp  
mov
(bad)  
jecxz
fimull
and
das    
cmp
add
icebp  
xchg
scas
pop
stos
sti    
sbb
jo
and
xorl
and
cmp
push
cs push
mov
icebp  
in
shrb
and
inc
fnsave
mov
arpl
jg
(bad)  
iret   
call
adc
outsb
cmp
into   
cmp
push
fsubrs
or
notl
sahf   
pop
mov
fstps
push
add
fsubrl
push
cld    
xor
jmp
sbb
(bad)  
out
stc    
(bad)  
jg
dec
sbb
mov
stos
repz and
cmp
ficom
adc
jmp
hlt    
sbb
ljmp
inc
cmpsb
mov
icebp  
icebp  
sub
push
add
or
mov
cli    
sbb
adc
into   
(bad)  
mov
shrl
insb
fdivrs
repnz inc
int
and
mov
cmpsl
out
jb
add
(bad)  
popl
insb
mov
pop
jmp
fild
int3   
bound
(bad)  
loop
in
sub
xlat
stc    
lcall
(bad)  
(bad)  
ja
rcrb
or
inc
dec
mov
(bad)  
sbb
in
(bad)  {%k5}
jmp
add
mov
sub
popa   
movsb
popa   
insl
ret
into   
pop
jp
add
inc
lock jmp
jne
mov
lea
sbb
sub
mov
inc
aam
jb
test
insl
aad
fnstcw
mov
sub
movsl
(bad)  
stos
repz shlb
in
in
daa    
adc
sub
fdivrs
dec
sub
es addr16 jae
fcomps
and
mov
sub
mov
test
imul
cmp
mul
test
adc
or
inc
mov
fistpll
push
cwtl   
lods
and
push
jp
cmpsl
lds
and
outsl
xchg
insb
mov
aad
rclb
mov
pop
btc
sub
(bad)  
mov
sar
stos
inc
jmp
loope
(bad)  
add
push
fildll
jo
(bad)  
cmp
stos
js
movsb
call
int
inc
dec
adc
pop
sbb
in
imul
movsl
lds
xor
cmp
arpl
xchg
adc
adc
jl
add
out
cld    
fs dec
aam
imul
pop
jae
loop
jno
pop
inc
sbb
daa    
and
lea
fs cmp
(bad)  
push
das    
lret
repz js
jbe
and
in
shlb
test
inc
jecxz
sbb
fidiv
repz leave 
addr16 pop
into   
leave  
or
bound
and
and
(bad)  
aaa    
fnstcw
in
cld    
data16 fdivl
jns
xchg
in
mov
mov
and
xor
neg
push
jns
or
mov
js,pn
lea
pop
(bad)  
and
push
fidiv
(bad)  
xor
pop
jle
jne
ret
aaa    
xlat
bound
push
ffreep
movsb
lcall
mov
mov
mov
jb
sbbl
jbe
add
xchg
xor
inc
jl
pop
xor
or
adc
cmp
dec
adc
enter
xlat
popf   
jp
aaa    
mov
test
test
in
sub
mov
sbbl
pop
enter
jnp
ss aaa 
push
xchg
(bad)  
xor
xlat
push
dec
jle
js
mov
in
xchg
adc
inc
mov
xadd
cltd   
inc
dec
jbe
and
add
push
add
(bad)  
gs ja
ret    
pop
scas
xchg
lea
inc
inc
cmpsb
mov
mov
mov
dec
pusha  
cld    
and
jnp
xchg
shll
sub
mov
cmp
fs ja
packuswb
fsubrs
inc
clc    
mov
inc
(bad)  
cmp
rcr
cli    
mov
add
and
(bad)  
data16 mov
push
les
int3   
dec
dec
push
adc
cli    
imul
pop
xor
sbb
fnsave
lahf   
(bad)  
sub
ds fs or
cli    
xor
in
insb
dec
xchg
dec
std    
rcrl
aad
fnsave
cmp
enter
jecxz
mov
cmp
mov
push
fsubrs
daa    
and
test
xor
add
pop
pop
in
subl
or
add
xchg
aad
imul
ljmp
inc
cli    
test
stc    
pop
xchg
andl
sbb
pop
mov
subb
jno
xor
pop
push
gs xchg
rorb
xchg
test
cmpsl
inc
ds mov
jp
dec
out
ret
sahf   
jmp
es test
ljmp
fnstsw
int3   
adcb
add
mov
pusha  
ja
pop
stc    
or
nop
(bad)  
push
cmp
mov
rcrb
test
daa    
jmp
lcall
ljmp
xor
dec
outsb
(bad)  
jbe
mov
pop
add
sti    
(bad)  
mov
sti    
ja
es xor
adc
sbb
cmp
rclb
mov
adcl
in
cmp
lods
cmpl
push
cli    
xchg
push
outsl
add
rcrl
fwait
dec
mov
pop
enter
js
add
sub
inc
xchg
or
fidiv
or
es sub
pop
mov
(bad)  
xor
add
jae
xlat
hlt    
pusha  
lea
dec
sub
mov
adc
dec
mov
cwtl   
outsl
push
out
imul
(bad)  
loopne
inc
testl
mov
jo
scas
mov
enter
inc
adc
mov
loopne
dec
fmuls
mov
push
sbb
enter
add
add
test
test
mov
and
adc
(bad)  
dec
cmp
push
xor
ljmp
pop
aam
cmpsb
mov
mov
mov
and
aam
sbb
pop
push
ret
sbb
mov
sub
jne
push
sbb
fs aaa 
or
insl
inc
xchg
inc
lods
mov
sarl
mov
xor
mov
mov
cmp
sarl
cmp
int
add
js
ja
mov
mov
add
and
lds
cwtl   
add
js
pushf  
xchg
movsb
pop
pop
cmpsb
out
imul
(bad)
jl
test
clc    
mov
iret   
sbbl
negb
lret   
xchg
into   
loop
mov
leave  
lret   
mov
adc
stos
clc    
mov
dec
push
cmp
mov
mov
cmpl
lret
add
jno
pushf  
test
popa   
pop
arpl
mov
outsb
popa   
adc
push
stos
push
clc    
inc
out
add
push
adc
imul
cld    
or
sub
mov
add
lods
dec
lcall
rclb
push
or
fldl
or
cmp
(bad)  
mov
mov
or
rdmsr  
mov
fisttpl
mov
(bad)
icebp  
movl
and
sti    
xchg
(bad)  
jmp
fisttpll
mov
out
ljmp
clc    
push
fdivrp
push
mov
xchg
and
lret
int3   
adc
loopne
loope
jo
cmp
das    
push
adc
mov
pop
pop
mov
mov
dec
xor
and
inc
jg
xor
mov
xchg
pop
cmp
push
mov
das    
insb
fwait
cmpsl
loope
jo
test
adc
aas    
dec
mov
add
or
push
mov
push
out
daa    
sarb
jl
adc
sub
(bad)  
in
out
(bad)  
icebp  
cmc    
out
cwtl   
icebp  
add
dec
jo
mov
sub
or
mov
aas    
aas    
mov
stc    
adc
fdivrl
xchg
out
fsubrl
push
in
push
sbb
dec
add
adcl
das    
jbe
addl
pop
add
ret
dec
mov
dec
or
jecxz
pop
xor
mov
lret
pusha  
and
insl
rcll
ljmp
loopne
movsb
rcrb
lods
jo
cmp
or
fdivs
lods
gs xchg
loop
mov
mov
hlt    
and
mov
inc
int3   
(bad)  
aaa    
mov
lret   
insl
and
lcall
pop
mov
push
adc
push
jmp
mov
inc
arpl
cmpsl
dec
dec
push
orb
push
int3   
loopne
rorb
sahf   
xchg
repnz
or
inc
stos
mov
dec
loop
mov
add
sbb
std    
(bad)  
incl
imul
push
mov
and
js
cmp
jmp
push
fcmovnu
popa   
addb
sub
cmc    
stc    
add
dec
inc
sub
cmc    
jne
mov
pop
sbb
mov
xchg
jo
test
adc
jle
aam
mov
cld    
(bad)  
sub
mov
dec
inc
mov
and
cmp
ret
push
std    
sbb
fdivl
and
repnz pop
or
fdivl
pop
cmpsb
mov
fcmovnu
movzbl
push
jl
mov
lret
mov
lcall
mov
xor
nop
repnz icebp 
and
xchg
add
cwtl   
jns
sub
lea
std    
xor
mov
xlat
aam
xorb
into   
mov
jge
and
lret
and
sbb
scas
push
ret    
or
loopne
adc
push
sub
iret   
(bad)  {%k5}
ljmp
add
lahf   
repnz mov
push
inc
imul
xchg
(bad)  
push
inc
movsb
es aas 
cmpb
mov
push
mov
mov
push
cmp
dec
mov
sub
cmpsl
jp
jg
lret
pop
sbb
orl
pop
aam
aam
inc
push
inc
addr16 pop
(bad)  
add
sub
and
cmp
sbb
push
cmp
xchg
mov
(bad)  
xor
(bad)  
aad
adc
lret   
or
cltd   
pop
add
dec
push
dec
jmp
add
clc    
and
sbb
popf   
cmp
test
fbld
sub
call
testl
pop
rcrb
push
push
pop
repz xor
out
nop
shlb
pop
sub
cltd   
xor
push
mov
fucompp 
jns
cmp
pop
jmp
push
pop
sub
cli    
sbb
ret
push
out
es loopne
and
push
imulb
(bad)  
sti    
in
jno
mov
in
push
and
aaa    
stc    
(bad)  
fldenv
(bad)  
dec
cmp
dec
lds
pop
out
or
sbb
mov
inc
test
xchg
and
ljmp
cli    
or
inc
cltd   
repnz inc
mov
jp
inc
stos
jg
mov
xchg
hlt    
cmpsb
push
js
pop
add
pop
xchg
out
sbb
xchg
(bad)  
or
jmp
add
jmp
jo
(bad)  
les
inc
or
fbstp
stos
pop
loop
jae
mov
aas    
mov
(bad)  
mov
adc
pop
hlt    
or
and
inc
pusha  
dec
pop
or
jmp
bound
adc
jg
pop
outsb
aad
dec
(bad)  
inc
xchg
les
fmull
sti    
icebp  
adc
sub
xor
sahf   
add
mov
mov
pop
lahf   
scas
inc
stos
or
or
pop
mov
adc
adc
sub
sbb
adc
icebp  
clc    
mov
call
lds
(bad)  
lcall
lret   
xchg
jle
cld    
sahf   
int3   
ret    
int
(bad)  
into   
xchg
ja
and
ret
mov
jb
fildll
xchg
fildll
add
push
dec
jecxz
clc    
add
inc
movsb
adc
pop
jge
ss push
rorl
add
lock cs setae
jae
add
mov
or
shll
repz mov
add
jnp
loope
adc
(bad)  
or
rorl
push
cmp
push
pusha  
in
pop
push
insl
inc
xchg
out
out
mov
scas
dec
jl
leave  
push
enter
jno
cmp
and
rcrl
xor
pop
push
mov
mov
in
testl
dec
leave  
pop
sahf   
(bad)  
sub
shl
out
mov
rolb
sub
or
dec
and
ficom
mov
cs aad
rorb
add
nop
lcall
sub
push
xchg
and
ss jecxz
pop
fiadd
outsb
stos
fistp
inc
mov
ja
(bad)  
inc
in
aad
mov
icebp  
mov
popa   
lcall
push
lods
dec
sub
push
add
inc
ret    
dec
pop
pop
(bad)  
rolb
dec
dec
jbe
scas
xchg
loop
cwtl   
add
and
mov
mov
outsb
mov
pushf  
mov
js
lret
push
out
popf   
pop
mov
dec
mov
test
pop
xchg
dec
fwait
(bad)  
hlt    
cmc    
cmp
pop
push
sub
xchg
dec
fprem  
xor
das    
lock jno
mov
pop
rcrl
(bad)  
lcall
push
cmpsb
mov
jge
push
push
sub
xor
testl
or
xor
jg
ljmp
push
jo
xchg
add
nop
mov
call
adc
sub
and
add
sub
xor
sub
mov
stos
fsubs
fnstcw
cmp
mov
sub
lret   
or
(bad)  
mov
cmp
call
or
mov
mov
popa   
add
adc
pushf  
stos
mov
mov
jmp
movsb
imul
sahf   
fisttpll
test
movsb
or
jnp
scas
mov
pop
je
ret    
jmp
or
mov
movsl
mov
nop
les
sti    
cmc    
adc
cmpb
mov
lods
hlt    
lahf   
(bad)  
sub
mov
(bad)  
pop
outsl
icebp  
xor
sti    
push
popf   
inc
pop
pop
push
fidivrl
pop
shr
push
and
repnz cmpsb
(bad)  
pop
push
xchg
push
mov
leave  
sub
xchg
mov
jae
mov
ret    
mov
pop
cmp
loopne
sbb
add
mov
shlb
or
xchg
push
adc
stos
sti    
nop
data16 xlat
(bad)  
addr16 pushf 
stos
(bad)  
push
psrlw
mov
icebp  
xchg
pushf  
(bad)  
dec
movb
or
cmpsl
pop
jbe
popa   
mov
iret   
(bad)
out
aam
je
jg
stos
and
cmpsl
std    
idivl
or
jne
call
cmp
imulb
pusha  
push
fldl
push
xlat
cmpsb
mov
ror
push
jmp
mov
add
js
ret    
mov
or
adc
sub
repz and
ljmp
mov
imul
sbb
les
jecxz
scas
cmpsl
and
xorl
sbb
cmpsb
cmpsb
push
inc
xchg
mov
addr16 xchg
add
int3   
insl
jbe
sub
push
popf   
rorl
fsubs
outsl
adc
pop
je
dec
mov
dec
sbb
or
mov
ja
decl
or
pop
push
lods
addr16 fincstp 
mov
pop
push
gs int
xchg
lret   
mov
sbb
cld    
jmp
pop
push
inc
rcll
or
mov
xchg
mov
ss in
mov
imul
or
(bad)  
outsb
push
sti    
fdivl
jns
or
bound
and
popf   
push
out
sti    
loop
lods
subl
in
mov
add
mov
in
je
or
cmp
and
xor
mov
add
bound
pop
testb
popa   
and
(bad)  
add
pop
(bad)  
sbb
pop
xchg
mov
iret   
div
pop
mov
xlat
in
pop
lret   
lahf   
inc
jle
cmpsl
fcmovnb
pop
cmp
xchg
(bad)  
cli    
cvtps2pi
push
in
mov
mov
dec
push
insb
xchg
leave  
cmp
les
mov
push
movsb
repz mov
scas
enter
(bad)  
mov
sub
stos
out
or
cmp
sbb
pop
sub
scas
push
fiadd
(bad)  
mov
push
(bad)  
(bad)  
cmc    
mov
cmp
mov
and
jne
rcll
push
adc
and
push
pushw
mov
or
fcomps
cltd   
cld    
scas
xchg
cld    
shlb
sahf   
xchg
xchg
dec
dec
enter
insb
xor
cld    
mov
jle
loop
fadds
xor
movsb
sti    
arpl
ja
xchg
insl
jae
into   
cmp
xchg
out
xor
stc    
stos
inc
(bad)  
(bad)  
lods
cltd   
and
hlt    
(bad)  
jp
jmp
mov
call
mov
mov
pop
xor
mov
pop
enter
jp
jle
aaa    
jecxz
xchg
xchg
aad
xchg
cmp
lods
cld    
pop
adc
scas
jbe
ss arpl
lret
mov
sub
ds inc
fwait
mov
pop
mov
leave  
aam
in
jmp
push
mov
xor
add
data16 lahf 
in
mov
nop
aam
mov
js
or
or
shr
sti    
mov
aaa    
push
jbe
pop
sbb
add
insl
add
pop
pushf  
imul
inc
(bad)  
in
loop
mov
lods
cmc    
inc
xchg
and
jmp
xchg
sbb
(bad)  
(bad)  
lea
and
pop
data16 lahf 
pusha  
jmp
out
mov
mov
je
in
jmp
mov
in
pushf  
jp
test
mov
jae
sar
mov
jp
xchg
jb
push
outsl
jecxz
fwait
roll
mov
xchg
data16 and
cmp
insl
cmpsb
shlb
lcall
mov
push
mov
and
negb
arpl
jle
adc
pop
aad
or
jp
movsb
cmp
popa   
shrl
ret
int
and
dec
daa    
lods
shl
sub
dec
pop
pop
fdivrl
icebp  
jae
adc
xor
int3   
or
movsl
insl
das    
loop
(bad)  
aaa    
push
sub
(bad)  
enter
lahf   
xor
arpl
add
(bad)  
adc
lret
jecxz
pop
lcall
and
cld    
lret
imul
push
push
xchg
scas
or
out
cmp
data16 daa 
into   
fnstsw
insb
insl
mov
(bad)  
outsl
es pop
xchg
mov
push
xor
xlat
sub
inc
(bad)  
in
out
jmp
cmp
push
loop
and
das    
int3   
mov
jmp
test
lea
andl
cmpsb
add
std    
cmp
(bad)  
fcmovu
jns
(bad)  
int
lahf   
or
sbb
(bad)  
xor
add
sti    
rcrl
outsb
(bad)  
cld    
fisubl
fcomp
mov
ljmp
add
xor
mov
insb
out
cmpl
into   
sbb
test
out
in
xlat
mov
mov
dec
jle
cltd   
mov
dec
scas
jo
or
mov
fucomip
cld    
int
pop
inc
pop
pop
popa   
or
jb
jle
mov
test
inc
inc
xor
add
push
hlt    
adc
or
(bad)  
cmp
hlt    
negl
sub
pop
divl
xchg
das    
out
sbb
jnp
mov
fsubrp
or
mov
insl
in
mov
out
out
popa   
in
add
mov
in
inc
mov
jle
rclb
or
mov
push
jno
mov
sbb
cltd   
lcall
xor
fidivr
jbe
mov
mov
push
cwtl   
popl
xchg
ljmp
push
(bad)  
xchg
flds
sub
or
push
mov
jg
sub
cmp
loope
mov
push
ja
mov
push
jp
nop
pop
jbe
jp
jge
ds cli 
dec
xchg
sub
lret
mov
dec
sbb
or
clc    
js
scas
cmp
mov
and
ljmp
daa    
xchg
cmpsl
mulb
mov
jg
seto
es out
lcall
fisubl
cmp
sub
icebp  
xchg
in
sbb
inc
sbb
out
andl
dec
and
sub
clc    
outsl
mov
neg
jmp
add
divb
(bad)  
or
xlat
js
in
mov
pop
push
stos
xlat
pop
xchg
dec
and
jecxz
mov
push
xor
ficomp
cmpsb
xor
ret    
mov
and
enter
mov
mov
fwait
bound
loope
cmp
addl
enter
aas    
mov
sbb
sbb
addr16 mov
fnstcw
jg
jle
jno
sub
mov
subb
fcmovbe
mov
jecxz
cmp
sbb
pop
ljmp
lock in
(bad)  
ss xor
stos
push
mov
push
aaa    
jg
adc
pop
mov
rcll
icebp  
rcll
add
movsl
jecxz
lds
jns
imul
(bad)  
jg
hlt    
ss inc
stos
pop
add
gs imul
dec
mov
push
jbe
ljmp
mov
sub
test
in
mov
fsts
stos
(bad)  
mov
mov
repz sbb
sub
pop
and
sub
push
inc
push
fs pushf 
cmpsb
loopne
dec
or
(bad)
sub
xor
das    
adc
fisttpll
imul
std    
std    
sub
push
fld1   
orl
popf   
jo
add
adc
scas
ret    
add
cmpsl
lods
(bad)  
mov
jns
shlb
lcall
cmp
bound
and
jle
test
cmp
sub
shll
aad
ss das 
dec
in
mov
or
xchg
add
cwtl   
out
into   
fnstsw
or
das    
pop
mov
iret   
jmp
insb
and
add
fsubl
movsl
xor
repnz cmp
xor
repnz pop
push
or
scas
mov
xchg
dec
mov
movb
outsb
cwtl   
mov
testl
in
sbb
pushf  
mov
mov
jo
jge
lret
outsl
xchg
fsubr
pop
je
(bad)
xor
pop
icebp  
mov
sbb
pushf  
lds
(bad)  
icebp  
jo
mov
insl
mov
scas
outsl
imul
test
inc
movsb
js
add
pop
testb
fwait
andb
ret
push
loope
add
pop
call
gs es inc
jge
push
mov
sbb
xor
jne
ljmp
(bad)  
call
sbb
xchg
test
dec
dec
add
imul
pop
ss push
cmp
ret    
mov
mov
mov
test
inc
and
sub
scas
mov
jno
dec
out
mov
enter
cmp
dec
ret    
cmp
add
jle
dec
cmp
aas    
push
call
sub
or
inc
scas
dec
push
sbb
lcall
dec
mov
lods
daa    
sbb
ret
(bad)  
or
sti    
ret    
jp
adc
idivl
jecxz
or
xchg
jne
push
daa    
movsl
and
stos
xchg
sub
or
mov
std    
lahf   
inc
(bad)  
(bad)  
scas
(bad)  
ja
adc
sbb
sbb
xor
add
adc
ret    
in
sub
loope
repz sahf 
lods
mov
push
adc
(bad)  
xor
arpl
jae
inc
add
mov
sub
mov
sbb
xchg
jge
jno
iret   
pop
leave  
push
cmp
jne
inc
xor
sbb
pop
push
mov
out
fidivrl
lds
xor
xchg
data16 mov
push
pusha  
mov
in
popa   
pop
mov
loop
and
xchg
mov
into   
jae
pop
cmpsb
out
push
rcll
jns
lds
and
jp
adc
mov
add
jns
xchg
aas    
in
jns
dec
xor
jp
or
arpl
lret
add
push
sbb
or
lahf   
mov
push
lahf   
fildll
popa   
add
pop
push
rorl
add
adc
pop
xor
(bad)
daa    
sbb
inc
dec
xor
out
mov
sbb
test
test
mov
iret   
lods
cmp
mov
inc
(bad)  
call
lahf   
sahf   
cli    
sbb
dec
arpl
ss push
push
cmp
sar
out
jg
dec
mov
psrlq
stos
sar
movups
jge
adc
(bad)  
insb
or
add
add
jp
scas
ret
xchg
test
and
es into 
push
inc
insl
and
dec
sbb
jg
lret   
cli    
mull
xor
xor
scas
xor
(bad)  
int3   
fisttpl
jp
mov
pop
inc
jecxz
add
(bad)  
int
xchg
fwait
mov
fmuls
cltd   
inc
fs or
or
fnsave
gs
sti    
mov
mov
adc
fist
clc    
sbb
stos
jmp
sbb
sbb
scas
mov
(bad)  
pop
push
jae
cmp
(bad)  
xor
or
int3   
sub
cmp
pusha  
pop
mov
mov
push
add
inc
pop
mov
jns
in
or
adc
cwtl   
mov
es ror
jmp
mov
xor
or
movsl
adc
jecxz
pop
das    
loope
out
imul
(bad)  
test
lret   
jmp
dec
xchg
lea
cmp
push
mov
repnz lods
cltd   
ds repnz pop
add
mov
cmp
popf   
sbb
mov
es jmp
add
lahf   
insb
sar
cmpsb
cmp
jns
dec
add
lahf   
jno
mov
dec
jae
inc
in
int3   
and
jae
inc
notl
clc    
sbb
testl
negb
stc    
in
adc
xchg
adc
int3   
stc    
mov
and
nop
add
(bad)  
cs pop
push
outsb
imul
(bad)  
lea
ret    
(bad)  
xor
cli    
clc    
addr16 xchg
cmc    
fistpl
or
negl
and
lock pop
mov
dec
mov
jb
inc
adc
jne
cmpsl
adcl
sub
mov
popf   
hlt    
rol
int
pop
sub
ljmp
sbb
dec
xor
loopne
inc
sub
xor
jmp
add
and
push
or
mov
push
sub
pop
mov
addr16 add
push
aaa    
jl
xor
in
lea
mov
mov
fwait
mov
dec
rclb
jo
dec
jmp
aam
lahf   
pop
lds
ret
fdivrs
push
push
inc
into   
dec
insl
push
xor
pushf  
jae
xrelease xchg
cld    
mov
addr16 mov
lods
in
ficomp
mov
repz
xor
sar
dec
jns
mov
ds aam
jbe
sub
mov
dec
in
adc
adc
add
fdivrl
push
push
mov
rol
pushl
mov
mov
cld    
xchg
push
loope
add
mov
ja
aaa    
xlat
iret   
pop
test
daa    
mov
iret   
hlt    
fwait
test
sbb
pop
sbb
mov
cld    
pop
add
pop
jbe
inc
fs ljmp
iret   
jo
cmp
in
cmp
sub
and
jle
pop
pop
iret   
call
jmp
aaa    
sbb
add
ljmp
test
and
inc
hlt    
lods
les
xlat
lcall
push
daa    
push
pop
add
fldt
fistpl
push
es push
push
movsl
push
dec
sub
lods
icebp  
test
int3   
loop
xchg
test
inc
push
imul
sar
clc    
mov
and
xlat
pop
inc
dec
sbb
out
test
xchg
dec
test
aas    
out
data16 aaa 
add
data16 mov
addr16
mov
cmp
out
pop
mov
in
push
ret    
mov
test
daa    
aam
mov
in
xor
sti    
pop
out
repz cmp
shrb
fiadd
pop
mov
lods
ljmp
out
jecxz
sbb
sub
mov
add
mov
frstor
mov
loope
push
mov
in
lock or
sbb
xchg
out
pop
dec
pushf  
xchg
dec
inc
test
jmp
inc
out
jbe
scas
ss xchg
mov
push
xor
std    
outsl
ljmp
stos
das    
ljmp
loopne
pop
hlt    
outsb
jb
out
sbb
movsb
in
jae
jmp
jecxz
jecxz
repnz mov
dec
loop
sarb
std    
pop
test
and
clc    
lock add
enter
test
aas    
in
jns
jne
cmpsl
adc
or
and
push
or
cli    
push
xor
aam
adc
mov
mov
xor
add
rorl
jle
cli    
leave  
xor
jecxz
(bad)  
insb
lahf   
and
ja
xchg
mov
mov
mov
push
iret   
fs nop
call
(bad)  
lea
dec
ss push
xchg
arpl
lret
daa    
or
roll
(bad)  
push
pop
loop
or
mov
lods
sub
out
mov
into   
idivl
cmpsb
call
inc
sbb
repz jecxz
clc    
out
xchg
mov
xchg
xlat
pop
adc
mov
daa    
or
cmp
push
cmp
and
scas
fwait
stos
in
or
lcall
data16 or
ds sub
or
fildl
add
inc
push
or
cmc    
mov
jo
roll
icebp  
out
xor
movsl
push
(bad)  
jne
push
sbb
loop
fwait
mov
(bad)  
dec
mov
dec
jbe
shrl
mov
movsb
jge
gs insb
jae
jo
cmp
movsl
call
xlat
jns
dec
fimull
cld    
mov
sbb
movsl
fcompl
or
mov
imul
(bad)  
iret   
jge
cmc    
in
cli    
xor
sbb
xchg
cmp
push
jns
outsb
outsl
(bad)  
iret   
xchg
inc
mov
mov
shrb
arpl
jns
xor
test
mov
popa   
xchg
dec
andl
lods
push
pop
or
leave  
repnz scas
pop
into   
lahf   
xchg
stos
call
push
cmp
pop
(bad)  
mov
xor
ficoml
adc
push
in
in
xor
lahf   
sbb
outsl
lret   
mov
add
cmp
dec
imul
cmp
inc
jno
dec
mov
or
in
sub
cmp
inc
and
sqrtps
inc
push
push
ljmp
xchg
mov
cwtl   
decb
sbb
add
xchg
dec
nop
or
sarl
stos
sub
mov
fdivrs
jge
mov
rol
mov
lahf   
nop
bound
add
xor
les
sub
sbb
test
sbb
imul
or
test
dec
cmp
js
popf   
lock pop
mov
pop
mov
(bad)  
pop
ds push
sub
test
mov
xlat
ds inc
jbe
inc
add
test
adc
cmp
hlt    
dec
adc
pop
aad
imul
mov
xor
jp
xchg
push
sub
mov
sbb
cmp
scas
sub
adc
lods
dec
inc
dec
stos
or
(bad)  
sub
jo
test
ficompl
bound
leave  
insb
arpl
test
shrl
ficomp
mov
xchg
mov
fsubrp
rcrl
mov
jb
cmp
lds
mov
add
sarb
sub
daa    
mov
cmp
or
cwtl   
inc
fistl
(bad)  
push
dec
sbb
cmp
cmp
pop
(bad)  
add
daa    
mov
add
in
out
je
(bad)  
xchg
ljmp
push
movsb
fdivrs
mov
lcall
loop
inc
leave  
add
je
rcrb
cwtl   
stos
fbld
push
mov
rcrl
sbb
adc
fs sahf 
(bad)  
aaa    
mov
add
fwait
rol
jae
push
neg
inc
dec
pop
pop
adcl
push
test
(bad)  
pop
or
push
inc
sub
adc
out
and
cs sbb
jmp
mov
push
dec
jns
stc    
push
inc
out
fisubrl
jo
stos
insb
pop
cs xor
inc
jne
pop
lcall
lahf   
sbb
pop
sbb
cmpsb
jne
jge
push
mov
xor
cmp
aaa    
scas
aam
adc
inc
gs
shrb
(bad)  
int
inc
jbe
jmp
adc
push
xchg
test
jno
pop
arpl
outsl
mov
or
push
cmp
mov
aas    
add
pop
add
jne
dec
push
xabort
outsb
lods
and
pop
in
add
in
pop
js
adc
mov
outsb
pop
mov
leave  
mov
test
xchg
cmp
mov
xchg
sbb
push
fwait
stos
loope
push
sub
popa   
mov
sub
push
mov
xor
mov
(bad)  
jle
mov
sbb
out
inc
les
ret
jmp
pop
mov
lahf   
fwait
(bad)  
jae
adc
stc    
int
dec
mov
mov
inc
cs xor
fdivs
ficomp
rcl
and
loope
cs add
or
fsubrs
mov
mov
sub
lahf   
aas    
jl
push
add
jmp
fmull
into   
add
mov
and
(bad)  
jnp
adc
data16 or
outsl
mov
fmul
push
popa   
je
ja
dec
xor
hlt    
add
jle
(bad)  
aam
xor
xchg
hlt    
mov
inc
hlt    
xchg
in
and
dec
negb
fucomp
xchg
sahf   
std    
pop
cs pop
ja
(bad)  
into   
mov
loop
outsl
mov
in
jecxz
fadds
movsl
lods
aad
test
mov
fsubr
clc    
nop
je
dec
sbb
(bad)  
jae
test
sbb
mov
cmc    
pop
iret   
fstpl
jmp
cmp
arpl
inc
enter
or
jb
lahf   
cmpsl
fs pop
in
pop
cmp
mov
repnz out
xor
fisubl
add
push
mov
pop
jl
pop
xchg
mov
dec
out
(bad)  {%k5}
(bad)  
lcall
dec
jb
(bad)
pop
test
adc
mov
fisttpl
mov
shlb
rorl
adc
aas    
or
cwtl   
fwait
adc
imul
xchg
and
and
ret
call
jg
ja
mov
imul
push
aaa    
insl
enter
out
mov
sbb
and
mov
in
push
jmp
imul
cmpsb
push
push
adc
sbb
or
mov
cmpsb
fadds
inc
scas
rcll
(bad)  
mov
or
cmpsl
std    
xchg
jge
(bad)  
hlt    
sbb
pop
(bad)  
and
sub
stc    
mov
cmp
and
inc
into   
rcll
rcr
xchg
arpl
push
add
outsb
xor
std    
dec
cld    
lods
popf   
cmpsb
cmpl
xlat
loop
test
mov
cmp
pop
push
sbb
and
jb
push
dec
clc    
or
cmpsl
push
daa    
sub
sub
pushl
sub
dec
repnz rcll
dec
mulb
in
sbb
aas    
xor
mov
jp
je
mov
and
adc
lock push
adc
or
sbb
xchg
pop
sub
fildl
in
insb
popf   
aam
in
hlt    
clc    
xchg
add
lcall
cmp
pop
imul
les
(bad)  
mov
mov
jo
popa   
rcll
loope
push
dec
jb
pop
rcll
push
mov
scas
enter
adc
dec
xor
cmp
in
fcoms
xor
dec
xlat
mov
mov
add
pushf  
dec
xchg
push
push
imul
jnp
inc
xchg
repz add
(bad)  
mov
sbb
mov
out
lcall
xor
mov
outsl
lret   
add
dec
push
push
jl
hlt    
subb
xchg
push
test
pop
inc
insb
pop
pop
ret
mov
test
std    
aas    
fadds
push
out
mov
push
rcr
int
mov
sub
mov
es sbb
pop
sarl
rol
out
pop
jmp
arpl
cs mov
mov
adc
pop
or
sbb
js
and
sub
test
stos
dec
inc
xor
notb
adc
scas
cmp
mov
pop
mov
(bad)  {%k5}
fstl
cmp
in
or
inc
xchg
inc
mov
jmp
lret   
xchg
jmp
into   
sub
lods
and
(bad)  {%k5}
out
sbb
adc
inc
push
xlat
mov
popa   
inc
jp
test
xor
xlat
(bad)  
sahf   
enter
cmp
jno
jb
insb
les
sub
daa    
loop
jns
xlat
popf   
cmp
nop
inc
popa   
js
or
das    
sub
mov
pop
and
jg
xor
jecxz
sti    
dec
lods
outsl
xor
ljmp
es lock xchg
inc
mov
std    
test
out
mov
jbe
arpl
jbe
aam
pop
and
inc
sbb
mov
sub
inc
push
and
jo
inc
cmpsb
pop
mov
sbb
jp
pop
pop
mov
and
pop
mov
aaa    
pop
cs xor
and
lret
sbb
es xor
xor
test
or
cmp
pop
xchg
pop
shr
stos
flds
push
loope
in
xlat
push
and
or
push
in
leave  
outsl
gs lcall
inc
fs mov
dec
jl
mov
(bad)  
repnz mov
mov
jne
mov
and
popf   
clc    
inc
mov
jae
cmp
lret   
aaa    
mov
subb
aam
inc
daa    
clc    
mov
mov
out
lds
test
push
lret
jnp
inc
mov
sbb
ret
adc
pop
sahf   
xor
pop
rcrb
or
(bad)  
in
add
js
and
fisubr
sti    
or
or
mov
aaa    
dec
jae
pusha  
add
sub
cmp
sub
cmpsb
jg
pushf  
rcr
cwtl   
dec
mov
push
std    
gs push
mov
ja
mov
add
int
std    
fnop   
lcall
ucomiss
jp
out
inc
shl
sbb
xchg
ret
mov
faddp
(bad)  
and
mov
faddl
or
lcall
ja
aas    
mov
mov
pop
mov
(bad)  
lret   
(bad)  
sbb
mov
fistp
iret   
std    
rcl
mov
js
(bad)  
sub
push
push
sub
mov
xor
lahf   
and
and
xor
or
jae
sbb
jbe
in
fadds
mov
dec
(bad)  
dec
mov
leave  
clc    
jl
jecxz
ja
inc
add
imulb
mov
or
or
jno
push
(bad)  
(bad)
movsl
add
xor
scas
insl
pop
mov
repz or
ss cltd 
call
(bad)  
adc
cmpsl
mov
and
scas
mov
lock push
cmp
lahf   
cwtl   
mov
aam
mov
adc
and
repz inc
test
enter
sub
add
inc
jb
insl
xchg
mov
pop
xchg
xchg
push
nop
(bad)
xchg
aad
push
xor
test
inc
inc
repnz scas
pushf  
mov
add
imul
sahf   
jb
(bad)  
sarb
adc
cmpsl
xchg
stos
jp
push
mov
(bad)  
pusha  
stos
add
mov
jmp
bswap
or
xchg
(bad)  
repz mov
ret
das    
faddl
add
jmp
movsl
shrb
lahf   
in
mov
add
mov
cmpsl
icebp  
adc
inc
jecxz
rorb
pop
jno
fwait
mov
jl
sub
sub
xchg
pusha  
adc
in
je
jg
dec
imul
hlt    
ljmp
fldl
seta
inc
push
mov
pop
fdivp
inc
(bad)  
je
add
push
insb
(bad)  
dec
rcl
cmp
or
lret   
mov
clc    
mov
inc
xor
rclb
cs
and
and
xchg
adc
xchg
sbb
mov
mov
cwtl   
jbe
rcrl
int
push
and
ret    
pushf  
sahf   
adc
push
dec
testl
xchg
in
cmc    
and
sub
sahf   
popa   
repnz fadds
fld
repnz and
call
cmp
shrb
loop
sub
cwtl   
push
icebp  
add
lods
mov
jmp
aaa    
pop
and
adc
cwtl   
dec
sub
ret
insb
xor
fwait
in
mov
es jb
pop
mov
rcll
inc
cmc    
imul
sti    
xchg
ret    
mov
xor
push
nop
pop
ret
ljmp
pop
dec
adc
cmp
stc    
sub
lock imul
cmp
stos
mov
adc
sti    
std    
mov
je
call
push
fildl
adc
(bad)  
cli    
ret    
out
xchg
xorl
dec
lock xchg
jl
call
fmuls
push
std    
popf   
xor
fnsave
mov
mov
outsl
iret   
xchg
inc
dec
push
push
daa    
(bad)  
mov
push
xor
sbb
add
adc
mov
lds
sbb
lcall
popa   
cmp
pop
xchg
mov
into   
pop
xchg
lret
or
jle
fistl
(bad)  
test
xor
in
js
xlat
aaa    
adcl
xorb
mov
and
popa   
cmc    
test
ret
or
add
(bad)  
push
std    
jb
pop
ficomp
push
lods
adc
push
or
add
sbb
adc
(bad)  
lock ljmp
mov
fstps
cmc    
mov
outsl
fildl
push
sets
loopne
insb
scas
stos
fs int3 
pop
jbe
in
pushf  
into   
mov
in
push
pop
add
dec
cltd   
cltd   
inc
jmp
mov
loop
pushf  
xlat
cs push
fisttp
rolb
pop
(bad)  
dec
das    
jl
xor
add
sub
push
dec
repz mov
mov
dec
aas    
mov
sub
rcrl
dec
(bad)  
fistpll
les
int3   
scas
lret   
lods
aam
sub
cmp
and
mov
enter
sbb
add
push
and
jns
add
mov
mov
scas
push
mov
pop
jnp
pop
enter
imul
hlt    
inc
lock negl
mov
dec
daa    
xchg
inc
jnp
pop
push
mov
in
cmp
push
ret
(bad)  
(bad)  
adc
sbb
sub
dec
dec
mov
jge
mov
dec
repnz rcll
sarl
cmp
cmpsl
or
outsb
push
insl
cmp
(bad)  
xchg
shr
mov
in
into   
xor
loopne
pop
hlt    
add
cwtl   
jg
fst
push
insl
xchg
test
and
in
push
iret   
pusha  
outsl
imull
sbb
outsl
idiv
xchg
cltd   
hlt    
enter
ss nop
add
jp
imul
lret
scas
push
sub
xchg
cli    
sub
mov
sub
and
push
sub
pop
daa    
xor
pop
pop
sarl
js
aaa    
sarl
xchg
inc
out
or
lods
imul
movsb
add
fsub
cmp
lret   
sbb
xchg
fbstp
addb
pop
pusha  
out
scas
js
aam
and
push
fidivl
mov
imul
sub
fnstenv
mov
push
pop
mov
push
xor
jnp
add
andb
(bad)  
dec
cmp
mov
lock
icebp  
sub
or
add
(bad)  
ss mov
fistpl
sahf   
pop
in
fdivr
hlt    
adc
aaa    
jp
fxch
jmp
mov
jae
sarl
stos
es call
add
push
push
and
dec
dec
and
jp
(bad)  
jnp
inc
cmpsb
pushf  
mov
cmp
lock pusha 
aad
inc
sbb
lock dec
dec
scas
inc
jo
lock mov
aam
scas
jp
xchg
xor
outsb
ret
mov
ret    
jns
aam
das    
or
xchg
sbb
and
inc
mov
cmp
in
pop
arpl
sub
pop
mov
test
imul
push
fisubl
scas
pop
pop
dec
sbb
push
jecxz
lretw  
pop
mov
push
xchg
(bad)  {%k5}
call
mov
or
(bad)  
pop
sub
loopne
mov
push
repnz sub
(bad)  
rorb
ret
mov
push
mov
mov
aam
jge
or
push
cmpsl
push
test
bound
mov
add
icebp  
cmc    
jne
or
(bad)  
mov
(bad)
rcr
sub
xchg
adc
hlt    
addr16 ret 
dec
push
jae
mov
outsb
cmp
sahf   
mov
push
int
xchg
aas    
fs mov
shl
movsb
fnstcw
cmp
push
test
dec
inc
sbb
and
mov
mov
sub
jno
ret    
pop
adc
jne
mov
inc
push
cwtl   
lea
std    
icebp  
(bad)
ffree
mov
rorl
arpl
ret
aas    
stos
lcall
fsts
xchg
add
mov
mov
mov
inc
push
add
mov
arpl
fcomps
into   
sysexit 
movsb
test
pop
aam
pop
sbb
js
nop
inc
call
iret   
ss hlt 
mov
sub
das    
lods
cmp
js
stc    
add
in
mov
(bad)  
xchg
ds stos
adc
xchg
jbe
(bad)  
mov
xchg
jmp
subb
cmp
mov
hlt    
jge
push
xchg
sahf   
sub
push
or
out
add
int3   
(bad)
mov
and
xor
out
clc    
sub
cmpsl
sub
dec
or
jmp
int
adc
inc
les
xor
xor
push
(bad)  
out
mov
push
sub
jge
scas
test
xor
cmp
mov
movsl
hlt    
nop
pop
adc
jo
call
xchg
sub
add
xchg
jb
lods
add
lea
fstps
jno
(bad)  
int3   
jecxz
inc
inc
mov
sbb
lods
cli    
push
mov
sbb
pop
sbb
pop
scas
push
pop
movsl
adc
iret   
pop
jae
(bad)  
cmp
mov
fdivrs
mov
mov
bound
xor
adc
outsl
(bad)  
aam
jp
xchg
adc
outsl
in
xor
inc
sub
sub
cmp
cwtl   
pop
(bad)  
fsubl
xor
and
sti    
mov
aam
cmp
mov
lods
add
jge
push
(bad)  
ljmp
push
(bad)  
jae
pushf  
sub
sti    
std    
adc
daa    
sbb
sub
jno
aaa    
or
out
lret
aas    
int3   
hlt    
sbb
pop
xor
test
das    
adc
in
cld    
aas    
(bad)  
in
mov
mov
popa   
divl
das    
jl
xchg
push
xor
test
in
cmp
rcll
idivl
mov
mov
sbb
les
sbb
push
adc
ja
pop
ja
push
repz scas
lcall
xor
cmc    
inc
scas
loope
or
icebp  
cmp
inc
xchg
loopne
mov
add
and
and
jp
pop
mov
pusha  
stc    
stc    
arpl
imul
jne
push
cmp
(bad)  
mov
xor
(bad)  
outsl
sub
sub
leave  
(bad)  
inc
or
pop
mov
xor
out
mov
shr
movsl
(bad)  
or
push
(bad)  
outsl
jecxz
or
xor
aam
mov
pop
aas    
push
pop
stc    
cmc    
dec
push
ja
imul
mov
ja
subl
xor
adc
jmp
adcl
xlat
push
test
jae
stos
pop
mov
jl
xor
mov
sbb
enter
fidiv
sub
mov
lods
mov
dec
outsb
xor
xchg
sub
test
xor
lret
es ret
push
jne
xor
int3   
push
and
daa    
iret   
pushf  
lahf   
inc
mov
into   
lret   
into   
repnz sbb
lret
inc
repnz mov
ss aad
or
dec
xor
rcrb
push
lods
and
pop
scas
popa   
call
ja
xchg
int
and
lret
sbb
mov
cmp
ds mov
stc    
xchg
add
add
dec
inc
dec
inc
scas
inc
pusha  
(bad)  
or
add
add
(bad)  
(bad)  
(bad)  
incl
add
add
add
add
add
add
jns
je
insl
cs inc
jb
ja
outsb
addr16 sub
push
gs jb
imul
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
xor
data16 aaa 
xor
fs xor
add
adc
gs insl
cs inc
jb
ja
outsb
addr16 cs inc
imul
add
popa   
je
pop
add
add
add
add
add
lsl
add
jno
add
add
or
or
add
or
add
add
add
dec
or
add
add
(bad)  
and
add
add
inc
dec
inc
add
mov
or
popa   
add
jo
pop
jae
add
ret    
add
push
ret    
add
outsl
test
add
cmp
push
push
test
js
add
or
insb
jle
lods
inc
xchg
test
cmp
mov
gs dec
push
test
das    
mov
xchg
xor
jb
or
jo
ret    
lea
lret   
cmpps
xchg
pop
scas
movsl
inc
mov
push
add
xor
xchg
mov
jo
movhps
mov
fimull
mov
mov
mov
jmp
xchg
int
sbb
cli    
pop
stos
mov
out
cmc    
and
push
or
jl
ja
mov
divl
ja
lcall
icebp  
inc
xchg
ja
into   
jg
push
sbb
jns
jbe
or
xchg
add
cmpsl
aam
mov
popf   
mov
(bad)  
imul
dec
pop
lea
push
mov
xchg
fimull
nop
cmpsb
lods
fidivr
push
add
or
inc
stos
add
mov
imul
xchg
cmp
xor
adc
movsb
in
in
xor
mov
out
popa   
xor
sbb
je
fwait
clc    
out
fmuls
sub
jo
(bad)  
jne
mov
sbb
lret
lcall
and
mov
inc
cli    
ret
push
int
mov
call
pop
xchg
xchg
jns
xor
add
stos
pop
xchg
movsb
xor
lret
add
push
aad
or
mov
in
and
cmp
int
das    
pop
pop
cmp
adcw
mull
pop
mov
rcll
orl
call
les
aad
test
jle
fs fnstenv
sbb
outsl
dec
and
dec
fsubp
inc
dec
fcoms
mov
(bad)  
or
mov
push
add
adc
cs ret 
inc
dec
mov
cltd   
mov
pushf  
fisttpl
test
cltd   
bound
and
lahf   
jle
jg
xchg
movsb
adc
jns
mov
leave  
popf   
negl
dec
pop
sub
stc    
mov
orb
pop
shlb
sub
push
or
and
xor
push
stos
pop
xor
loop
jg
push
sbb
gs int
sub
fisub
pushf  
call
sahf   
out
cmp
or
es sbb
iret   
xor
push
xorb
fdivs
jl
sub
aaa    
jo
loope
sub
xchg
cmpsb
adc
in
pop
test
push
fldl
daa    
fwait
bound
clc    
arpl
xchg
fnstcw
sti    
loopne
neg
loopne
cli    
push
or
outsl
mov
or
add
outsb
lock jmp
mov
scas
push
data16 scas
jecxz
out
lahf   
and
in
or
cmpsl
lods
outsb
jae
in
jecxz
add
and
in
mov
cmpsl
adc
stc    
lret
sub
adc
xchg
xlat
xor
dec
jg
or
mov
loope
out
sbb
aad
fs jmp
stos
sbb
or
in
mulb
fwait
adc
add
sub
mov
and
out
bound
pop
ret
inc
mov
jb
lcall
or
xchg
or
hlt    
xchg
jle
adc
sub
cwtl   
ljmp
pop
cmc    
bound
outsb
mov
mov
xchg
aad
push
aam
mov
icebp  
(bad)  
adc
ljmp
or
rolb
es mov
or
and
xchg
test
mov
sub
xchg
dec
adc
sar
out
inc
xchg
enter
std    
cmp
enter
hlt    
lds
sub
jnp
sbb
push
je
jno
push
orb
cwtl   
sarl
xchg
mov
push
pop
rcll
data16 aad
rclb
mov
rcl
pop
sbb
inc
mov
repnz inc
pop
scas
xor
pop
leave  
mov
fbld
pop
shr
gs loop
out
movsb
mov
pop
mov
adc
sahf   
mov
and
sti    
loopne
push
cmp
mov
ret    
lock and
mov
cmp
mov
sbb
sarb
inc
sti    
push
or
sbb
mov
scas
add
pop
mov
inc
and
loopne
sbb
and
icebp  
orl
push
pop
addr16 test
dec
test
xor
out
cmpsb
add
in
xchg
push
sbb
jmp
adc
xchg
dec
aad
sub
into   
xlat
js
sbb
push
adc
dec
js
call
sbb
inc
xchg
mov
and
(bad)  {%k5}
aam
xchg
dec
mov
(bad)  
ss mov
pushf  
jg
cmc    
dec
pop
inc
(bad)  
repz fwait
arpl
cld    
int3   
mov
mov
insb
insb
aam
loope
mov
(bad)  
lret
(bad)  
jno
xchg
lret   
js
int3   
xchg
xlat
push
push
(bad)  
popf   
fs mov
gs push
xorb
adc
movsb
in
add
enter
imul
or
sbb
sti    
xchg
popa   
and
push
and
cmp
jl
iret   
dec
xchg
(bad)  
rcrl
mul
xchg
neg
(bad)  
iret   
inc
loop
mov
fs xor
test
(bad)  
cmc    
pop
push
push
rcrb
or
add
xor
mov
jmp
hlt    
push
adc
js
mov
outsl
inc
mov
cmpsl
lret
addl
hlt    
lea
and
(bad)  
mov
jmp
mov
add
popf   
adcl
cld    
out
call
daa    
inc
roll
cwtl   
cli    
push
fnsave
scas
fstps
xchg
inc
int
pop
ja
add
xchg
sub
mov
sub
xchg
sbb
push
bound
test
cmp
out
xchg
stos
cltd   
ret    
fs mov
insl
cmpsb
and
ja
xchg
test
(bad)  
adc
das    
pop
(bad)  
and
cld    
pop
jnp
mov
stc    
dec
lods
out
mov
sbb
lods
push
popf   
pusha  
lret
aaa    
adc
lret
hlt    
mov
inc
popa   
dec
cwtl   
fisubrl
insb
(bad)  
movsl
sub
sub
into   
not
xor
add
loope
xor
into   
bound
nop
inc
fs pop
shl
mov
add
decb
mov
jb
aam
push
mov
adc
stos
pop
xor
rclb
xor
xor
inc
push
cmp
aad
scas
fistpl
mov
xchg
sbb
hlt    
test
add
mov
inc
in
push
cmp
mov
cmpl
pop
imulb
(bad)  
sbb
aad
add
dec
push
or
ret
cmp
xor
jle
fisubr
pop
xor
aas    
xor
scas
in
(bad)  
sbb
fwait
pop
pop
cli    
icebp  
pop
and
(bad)  
popa   
push
xor
cs imul
push
jmp
jg
icebp  
dec
(bad)
divb
ret    
mov
and
inc
fisttpll
out
mov
shrl
jmp
lret
dec
xor
nop
loopne
fmul
repnz and
jg
adc
inc
jmp
pop
mov
push
xchg
mov
pop
sub
mov
ja
js
fwait
jae
fdivr
fwait
inc
mov
(bad)  
and
mov
add
imul
dec
fisubrl
(bad)  
jl
add
nop
out
(bad)  
ficoml
mov
sub
iret   
and
push
pop
mov
movsl
stos
cli    
sarb
call
aas    
fmuls
inc
cmpsb
loop
mov
dec
addl
ss pop
out
ds out
xor
xchg
pop
xor
push
lds
jge
stc    
pop
aad
ffreep
mov
mov
aam
jnp
outsb
push
jne
jl
mov
aad
dec
je
sbb
es std 
add
sub
adc
clc    
stos
hlt    
sub
inc
movsl
(bad)  
xchg
sub
adc
into   
int
xor
imul
cmp
out
pmaxsw
jge
sbb
pop
call
stos
ret    
ret    
mov
cmp
pop
pop
insl
sahf   
jmp
aam
aas    
ficom
pop
out
and
cmp
adc
ret    
xchg
add
repz push
push
jmp
aam
dec
dec
gs jnp
fwait
imul
pop
push
or
scas
xor
mov
ss push
mov
sub
push
push
inc
jle
daa    
xor
mov
and
and
mov
or
in
icebp  
mov
mov
lock xchg
test
outsl
aas    
lret   
(bad)  
mov
movsb
add
je
pop
cmpb
mov
bnd jne
out
int3   
fisubrl
loope
mov
xchg
jg
jae
ja
jp
pop
push
xor
notb
es
or
(bad)  
imul
jge
and
dec
adc
jb
cmp
mov
add
movsb
cld    
aas    
(bad)  
mov
xor
pop
rclb
test
xor
mov
jne
mov
and
ret    
(bad)  
mov
sub
adc
jo
push
adc
data16 scas
add
inc
fs
aaa    
rolb
cmp
rcl
lods
jne
out
insl
mov
std    
arpl
xor
out
shlb
test
mov
enter
into   
push
out
call
mov
out
js
fisubl
jae
pushf  
shrl
xchg
out
and
fwait
ja
out
adc
fs push
bnd jo
int
mov
aaa    
fnsave
jmp
scas
adc
and
cwtl   
sub
inc
mov
lods
lcall
and
pop
xor
push
jnp
pop
adc
and
mov
lods
jno
push
pop
push
push
mull
ljmp
insl
ret
mov
xchg
xchg
in
stos
adc
pop
je
movsl
cmc    
rol
mov
adc
fstpt
into   
test
dec
fs mov
in
or
out
push
idiv
daa    
jge
mov
js
leave  
das    
outsb
in
insb
xchg
repz mov
cmp
clc    
mov
xor
jmp
inc
jo
movsb
lods
sbb
scas
movsb
adc
sbb
xchg
(bad)  
xchg
and
and
sarl
(bad)  
jmp
mov
dec
es xchg
nop
in
fs jp
lods
cltd   
mov
jbe
call
sub
sub
jno
stos
faddl
outsb
mov
shll
and
and
(bad)  
mov
(bad)  
je
xor
mov
popa   
xor
(bad)  
jbe
lret   
stos
popf   
or
lcall
loop
mov
xlat
bound
xchg
les
imul
sub
in
xchg
push
add
and
test
mov
jnp
dec
mov
imull
sbb
cmp
shr
lret   
inc
lret   
lcall
pushf  
cmp
lds
stc    
das    
rolb
(bad)  
xchg
sbb
push
jno
in
sbb
cmpsl
lea
add
ret
inc
loop
lods
jg
xor
cltd   
xchg
mov
popf   
sti    
(bad)  {%k5}
fcompl
jo
jbe
or
nop
sahf   
push
pop
jb
mov
lods
mov
insb
dec
xchg
ds push
das    
int3   
icebp  
mov
add
mov
inc
enter
addr16 jmp
pop
enter
mov
(bad)  
adc
sub
insb
outsb
sub
imul
negl
out
add
mov
inc
cmp
pop
cwtl   
sbb
xor
int
pop
pop
out
daa    
pop
adc
mov
push
clc    
sbb
add
shrb
dec
imul
add
es pop
es push
or
in
jnp
mov
sub
mov
pop
pop
std    
mov
bound
es js
jge
movsb
pushf  
mov
push
jmp
xor
mov
test
nop
les
mov
int
jmp
add
popa   
pop
shrb
rolb
or
test
repnz cmp
push
pop
fstpl
adc
sbb
imul
outsl
lods
jbe
xchg
into   
pop
cmp
xchg
inc
jmp
adc
cmp
insb
out
mov
and
cmpsl
sbb
mov
fs cmp
repnz lret 
push
xabort
mov
mov
js
test
xorb
mov
cmp
mov
int
xchg
test
lret   
les
sub
jo
and
shll
sub
fdivrs
and
cld    
jae
aas    
mov
call
sbb
xlat
(bad)  
inc
push
sbb
pop
xor
lret
pop
fwait
jnp
fidivrl
scas
fildll
imul
xorl
mov
push
aas    
fdivp
and
jmp
xchg
dec
fwait
clc    
imull
xchg
push
mov
push
rclb
pop
or
scas
push
cmp
push
xlat
fcmovbe
or
inc
dec
and
push
daa    
stc    
jns
adc
or
loope
jmp
punpckhwd
add
lea
pop
pop
imul
scas
push
pop
sub
in
mov
push
jecxz
mov
add
jns
cmp
rorl
rclb
mov
mov
fwait
xchg
pop
scas
(bad)  
pop
out
sub
out
add
sub
mov
and
and
xchg
cmc    
mov
sbb
push
fs data16 lahf 
mov
push
pop
mov
ret    
mov
rolb
and
maxps
xchg
loop
push
fs push
add
jno
jbe
pushf  
inc
jle
jo
addr16 cmp
hlt    
inc
ja
inc
or
xchg
jg
bound
(bad)  
jnp
je
lods
jmp
pushf  
xchg
jle
or
pop
mov
lahf   
sbb
fadds
xor
pusha  
std    
lcall
add
pop
xor
pop
aaa    
insl
xlat
dec
enter
xchg
cmp
push
lret
fcomp
adc
enter
loop
bound
lods
push
xor
mov
cmp
or
(bad)  
inc
cmp
xchg
sahf   
mov
test
push
jae
outsl
rcrb
jl
lds
mov
sub
lods
adc
add
or
(bad)  
(bad)  
mov
aad
dec
inc
fwait
mov
ja
cmp
leave  
xlat
cltd   
pushf  
int
mov
cmp
popf   
jmp
call
rcr
push
and
sti    
pop
mov
and
ss xor
jae
dec
mov
shrl
mov
aaa    
mov
cmpsl
lods
dec
push
mov
imul
sbb
loopne
out
cmc    
inc
mov
pop
lcall
dec
out
pop
ret
sub
add
push
sbb
pop
mov
mov
jnp
popa   
fistl
outsl
pop
sub
aaa    
dec
jbe
scas
lock jmp
in
or
in
aad
outsl
jg
lods
push
inc
push
leave  
test
(bad)  
cld    
mov
push
sbb
push
mov
or
mov
or
pop
stos
xor
gs jo
sbb
lret
jbe
pop
fnstcw
es in
out
sbb
ficomp
in
lahf   
in
dec
(bad)  
lods
xchg
xor
jp
(bad)  
dec
es
cmp
cmp
mov
adcl
fcompl
jne
pop
sbb
pop
enter
lock out
mov
jne
fidivr
jge
xchg
mov
pop
data16 sub
cmp
mov
imul
fildl
(bad)  {%k5}
out
mov
xorb
(bad)  {%k5}
lds
loop
sahf   
add
push
out
das    
cmp
jmp
mov
cmc    
sti    
scas
xchg
push
sub
enter
into   
daa    
mov
dec
mov
addr16 sub
lahf   
push
stc    
mov
in
hlt    
push
lret   
loopne
test
mov
ds pop
lret
xchg
mov
cld    
popf   
jo
xor
icebp  
xor
sub
dec
addr16 fxch
jns
xchg
sbb
sub
scas
pusha  
fisubrl
xor
mov
int3   
arpl
xor
out
aad
inc
pop
(bad)  
cmpsl
fwait
xchg
inc
sbbl
loop
sub
movsb
adc
push
mov
lock adc
pop
cmp
add
pop
pop
scas
mov
push
ret    
testl
(bad)  
dec
add
dec
sbb
aaa    
idivl
repz push
cmp
test
(bad)  
fcmovne
jge
xchg
dec
xor
sub
scas
add
jns
sub
and
jae
mov
repz push
jo
out
pop
icebp  
(bad)  
icebp  
xchg
sub
inc
push
(bad)  
cwtl   
jno
mov
movsb
mov
dec
pusha  
fcomp
std    
mov
inc
shll
iret   
(bad)  
repz push
fdivl
jg
cwtl   
ss sbb
add
fstl
loop
in
nop
(bad)  
mov
sub
mov
ja
xchg
jg
cmc    
div
in
push
negl
mov
lret   
sbb
mov
out
and
mov
or
and
xchg
insl
push
mov
xchg
push
jne
add
sub
in
pop
cmc    
in
push
mov
mov
lret
cli    
data16 mov
and
iret   
pop
cmpsb
xchg
test
push
clc    
and
jne
pop
cs inc
pop
(bad)  
sti    
stos
mov
test
in
mov
lret
xor
push
fnstcw
test
leave  
sbb
andl
insb
push
jge
loope
js
jb
or
lahf   
dec
cmp
dec
adc
dec
jp
xchg
xchg
cmp
xchg
stc    
xchg
sahf   
imul
jae
mov
ret
lcall
pop
scas
scas
nop
ficomp
mov
inc
push
stos
rcr
cmp
inc
push
rcr
inc
mov
jle
shr
mov
pop
add
pop
push
mov
sbb
das    
mov
adc
pop
scas
mov
fwait
loopne
lcall
test
pop
pusha  
sbb
(bad)  
and
test
add
lahf   
cmp
add
outsb
or
jns
jmp
mov
pop
xor
xor
lret   
fldt
sbb
xor
int3   
pop
and
and
sbb
ret
and
jae
cmp
(bad)  
out
data16 repnz fidiv
cli    
push
insl
(bad)  
xor
jmp
mov
insb
imul
clc    
and
or
xchg
ss ret
ss ja
lcall
dec
pushf  
pop
cmp
jp
xlat
dec
mov
dec
sub
scas
or
mov
fisttpll
aad
jb
add
test
jo
dec
sbb
cmc    
or
fadds
xor
and
test
(bad)  
lahf   
jo
aad
notl
jecxz
push
fs pop
outsb
sub
xor
cmp
test
stos
dec
arpl
ret    
mov
and
mov
mov
repz mov
lds
push
test
add
and
out
addl
(bad)  
lahf   
repnz push
mov
sub
in
(bad)  
xchg
pop
xchg
pop
shll
pusha  
dec
cmpsb
xchg
pop
xchg
and
xor
test
inc
addr16 aaa 
into   
loopne
jmp
movl
stc    
int
mov
and
jp
inc
data16 sbb
dec
xchg
push
fistpl
inc
jnp
push
test
test
or
jb
cwtl   
rolb
test
sbb
cmp
add
fwait
sahf   
or
jecxz
xchg
push
lahf   
lea
xor
xor
dec
pop
mov
or
dec
mov
movsb
shlb
or
adc
gs lcall
lock push
arpl
aas    
jb
nop
and
mov
(bad)  
test
lock fsubl
push
ret
push
jae
imul
loope
in
xchg
inc
addb
scas
pop
stc    
xlat
jne
jg
sbb
in
aam
mov
dec
(bad)  
lahf   
ret    
cmp
rolb
and
insb
cmpsl
pusha  
mov
adc
sub
cwtl   
lds
pop
jne
(bad)  
(bad)
fcoml
outsb
mov
and
push
add
sbb
dec
adc
aaa    
outsb
fidivl
sti    
idivb
imul
repz ror
pop
addr16 or
pop
pop
inc
add
or
insb
movb
outsl
js
call
lods
push
add
aas    
add
test
jge
mov
cmp
push
pop
arpl
rcrl
cwtl   
pop
pop
dec
mov
loope
dec
(bad)  
in
inc
cli    
push
out
mov
test
das    
pop
pop
sti    
and
mov
std    
fucomi
outsl
loope
loop
sub
das    
sub
jae
outsl
jle
int3   
fdivs
jecxz
cwtl   
xchg
outsb
mov
sub
hlt    
aas    
lret
sub
sub
je
div
scas
mov
outsb
dec
sub
xchg
pop
adc
pop
or
push
(bad)  
in
mov
jno,pt
jbe
mov
xor
sbb
add
sub
js
lret
out
xlat
dec
add
xchg
dec
mov
clc    
sub
jb
fstl
(bad)  
jp
dec
scas
pusha  
xchg
adc
mov
push
jbe
lock xor
jo
inc
(bad)  
lods
in
stos
jo
jmp
push
jnp
(bad)  
sti    
mov
lods
xchg
add
jecxz
mov
push
xor
imul
imul
adc
xor
mov
aad
lahf   
test
mov
scas
lcall
mov
cs fucom
jne
cmc    
int3   
rcl
loope
bound
movsb
les
shlb
pop
pusha  
mov
cltd   
enter
mov
or
(bad)  
lahf   
mov
iret   
imul
cltd   
push
dec
pusha  
add
push
fsub
fwait
(bad)  
xor
loop
clc    
push
call
stos
cltd   
jge
mov
pop
mov
sbb
mov
mov
and
cmp
leave  
sub
mov
inc
add
xor
popa   
clc    
and
dec
(bad)  
and
fwait
lds
jp
pop
xchg
sbb
cmp
jnp
in
inc
fmulp
movsl
jnp
xchg
add
push
mov
dec
mov
out
jbe
stos
jbe
mov
scas
mov
sbbl
arpl
cltd   
or
icebp  
mov
sti    
rcr
push
push
sbb
and
mov
(bad)  
mov
push
xchg
push
xchg
or
pop
dec
mov
out
xor
in
jecxz
fwait
jno
and
clc    
call
sbb
test
and
xchg
xor
insb
mov
or
xchg
and
mov
dec
push
jno
lds
mov
push
sub
andb
(bad)  
and
and
mov
fstpl
in
sbb
inc
pop
(bad)  
mov
add
(bad)  
insb
scas
xchg
inc
popa   
push
jbe
movsb
imul
jns
mov
fdivrl
push
rcrb
add
cmp
fwait
outsl
loopne
cmp
cli    
cmp
mov
in
and
xor
dec
xchg
je
dec
or
aad
pusha  
das    
mov
stos
mov
jns
inc
cmpsl
dec
(bad)  
call
xchg
testl
jbe
popa   
lret
repz push
lods
sub
incb
or
mulb
stc    
lea
sub
inc
pop
inc
in
xchg
inc
hlt    
cmp
mov
and
stos
dec
aam
int3   
pusha  
xor
cmp
push
jbe
dec
(bad)  
fistl
xchg
rcrl
das    
andl
iret   
push
pop
push
popa   
xchg
mov
(bad)  {%k5}
(bad)  
cmpsb
push
sub
and
inc
sbb
push
mov
cmpsb
stos
lea
shll
add
ds add
xchg
out
fisubr
add
daa    
inc
and
mov
lock shl
cltd   
int
cs pop
call
adc
and
inc
pop
jb
adc
ret    
push
jp
neg
mov
sbb
adc
xchg
aaa    
sbb
insl
dec
push
lods
lods
sub
ss
xchg
mov
cmpb
pop
mov
shr
cmp
cs pop
insl
dec
xchg
jmp
and
push
mov
inc
mov
inc
pushf  
and
icebp  
pushf  
ret
push
adc
pop
pop
xor
fadds
dec
mov
in
rcrb
das    
enter
dec
sbb
dec
sub
adc
iret   
fistpl
lds
loope
xchg
sbb
xor
and
lock mov
pop
rcl
cmpsl
mov
jge
in
cmp
loopne
cmc    
sbb
and
outsl
jne
add
jno
dec
loop
mov
imul
(bad)  
std    
pop
mov
pop
push
jb
lea
scas
mov
xchg
(bad)  
loope
xchg
arpl
imul
dec
les
movsl
lea
les
xchg
dec
negb
(bad)  
jg
orl
xchg
imul
dec
pushf  
fsubrl
in
scas
adc
fiaddl
fiaddl
rcrl
mov
(bad)  
sub
adc
pop
dec
or
and
into   
xor
and
loopne
sbb
xchg
loop
push
jmp
mov
xor
aaa    
push
sti    
dec
gs insl
popa   
sub
sahf   
add
jbe
lods
and
fbstp
sarb
mov
add
push
sub
fstl
repz sbb
pushl
sub
rcl
push
test
sub
mov
and
sbb
mov
pop
lcall
scas
enter
sub
data16 daa 
fisubr
das    
push
or
push
mov
gs add
cmp
scas
jmp
(bad)  
orl
adc
mov
lds
emms   
dec
pusha  
jle
lods
(bad)  
in
mov
push
in
jle
stos
sub
mov
pop
xor
adc
js
mov
cs hlt 
aam
cmpsb
ja
xor
jecxz
outsb
andl
out
jge
pop
into   
xchg
daa    
in
fcoml
lea
jmp
negb
push
out
out
arpl
push
ret
xor
cltd   
xor
push
push
dec
add
xchg
xchg
mov
loope
add
iret   
sar
in
adc
sbb
bound
in
ss or
ja
inc
dec
xor
mov
push
mov
adc
lret   
js
push
arpl
or
and
sbb
dec
push
pop
in
faddl
lds
mov
mov
and
xchg
mov
jae
mov
jecxz
pushf  
inc
cmp
pop
mov
mov
and
movsb
xor
je
out
or
stos
aaa    
(bad)  
aaa    
sub
or
dec
cmp
imul
(bad)  
in
(bad)
js
push
jae
pop
cmpl
inc
imul
dec
pop
xchg
mov
pop
pop
sbb
mov
cmc    
push
sbb
adc
or
add
rcrb
das    
imull
iret   
inc
or
sub
scas
mov
fs push
lods
sub
xchg
cs mov
or
adc
add
mov
adc
addr16 jns
jae
mov
jmp
pop
pop
out
dec
adc
or
mov
sbb
ficompl
stos
aad
sub
popa   
call
in
xlat
addr16 xor
cmp
mov
xchg
(bad)  
fs lock insl
xchg
outsb
jbe
mov
lods
mov
dec
stos
push
mov
add
ret
(bad)  
sub
sbb
sub
and
and
dec
pop
stc    
and
aad
cwtl   
sub
scas
nop
pop
adc
mov
arpl
loop
les
int3   
(bad)  
mov
imul
or
shll
inc
icebp  
push
(bad)  
call
add
adc
xor
mov
or
(bad)  {%k5}
cmpl
push
lock and
add
ljmp
adc
dec
mov
hlt    
(bad)
pop
ds daa 
sti    
adc
pop
gs mov
clc    
pop
pop
outsl
scas
insl
dec
incb
clc    
push
cmp
lret
(bad)  
aam
data16 test
cwtl   
mov
roll
and
add
inc
dec
jnp
sbb
ljmp
enter
jecxz
mov
les
inc
gs pop
movsl
and
sbb
sahf   
js
xchg
xchg
es scas
jge
(bad)  
in
inc
gs or
mov
sub
rol
sahf   
mov
xchg
ds icebp 
test
cs sti 
test
jae
arpl
inc
adc
(bad)
mov
lret   
adc
lods
push
subl
(bad)  
jle
into   
enter
(bad)  
dec
add
push
popa   
inc
xchg
inc
xchg
sahf   
lods
inc
pop
push
lods
add
adc
and
stos
iret   
jecxz
(bad)  
aas    
(bad)  
pop
sub
popa   
stc    
cmp
adc
push
(bad)  
ljmp
test
pusha  
jg
pusha  
arpl
out
lahf   
sbb
xsaveopt
mov
cmp
pop
mov
cwtl   
push
mov
pop
push
into   
icebp  
cmp
add
mov
jb
out
sbb
jp
(bad)  
jae
mov
loop
aaa    
ret
xor
adc
mov
in
xor
adc
(bad)
mov
(bad)  
pop
mov
mov
das    
out
jb
std    
cmpsl
sub
pop
jmp
sbb
jge
dec
pop
mov
jge
scas
ss pop
stc    
and
lea
ja
(bad)  
sti    
lock jge
mov
rclb
cmc    
arpl
and
stos
xchg
inc
cmp
rcll
stc    
mov
push
(bad)  
jmp
(bad)  
adc
negb
adc
adc
mov
andl
shrb
or
arpl
cli    
and
dec
sbb
push
icebp  
(bad)  
dec
mov
or
mov
cmpb
jbe
loop
xor
mov
int3   
add
pop
arpl
jns
cmp
hlt    
emms   
(bad)  
imul
lods
rorl
cltd   
stos
mov
cmpl
adc
pusha  
mov
stos
sbb
jo
orb
(bad)  
test
movsb
or
sbb
mov
jbe
push
cs xchg
fimull
idivb
xchg
hlt    
sbb
das    
fmull
test
pop
(bad)  
enter
fisubrl
jae
mov
popf   
push
stos
inc
and
scas
inc
jp
rcll
aaa    
xor
push
sbb
iret   
dec
jp
shl
data16 xor
mov
fcompl
insb
inc
mov
addr16 cld 
pop
cmpsl
mov
push
mov
cmp
fmuls
scas
inc
sbb
mov
notl
pop
cmp
(bad)  
iret   
outsb
pop
mov
mov
in
pop
popa   
sbb
add
mov
or
lret
adc
je
jmp
out
sbb
push
xchg
es sbb
pop
icebp  
insb
dec
fiadd
(bad)  
sbb
adc
stos
ljmp
nopl
sub
and
cmp
in
pusha  
ror
lahf   
dec
push
sub
enter
push
inc
mov
add
cmp
insl
jnp
mov
add
mov
(bad)  
xor
pop
jmp
inc
(bad)  
mov
std    
(bad)  
push
sbb
test
out
dec
dec
xchg
cwtl   
lock pop
loopne
not
ret    
jo
xchg
push
mov
inc
cmp
xchg
or
mov
add
mov
fidivrl
aad
xchg
push
cmp
fdivrl
inc
add
or
and
mov
in
lds
pop
jb
push
xor
mov
cmp
aad
pop
push
stos
cmp
or
xor
mov
aaa    
and
out
sti    
or
ud1    
pop
push
xchg
push
(bad)  
in
xor
push
outsb
loopne
jmp
pusha  
sub
pusha  
jp
dec
and
jb
mov
out
inc
leave  
addr16 jae
imul
sar
sarl
dec
cmp
xchg
mov
int
cmp
and
push
pop
pop
sub
xchg
mov
imul
movsl
adc
ljmp
ss jmp
outsl
repz xor
fcom
lock outsl
in
mov
mov
push
bound
cmc    
push
pop
mov
into   
xchg
(bad)  
and
push
addr16 jne
jnp
movsl
movsb
mov
arpl
jl
sub
mov
cmpl
jecxz
in
jo
add
rcl
in
or
ret
mov
xor
xor
mov
ret    
push
fnstenv
mov
pop
pop
(bad)  
inc
sub
std    
stc    
cli    
into   
or
inc
xor
out
in
ficompl
push
xchg
sub
jo
sbb
mov
jno
mov
and
lahf   
scas
fwait
cmpsb
adc
jle
push
lcall
adc
add
insl
lret   
(bad)  
or
jmp
cmp
cltd   
mov
cmpl
nop
cmp
mov
jb
pop
out
push
mov
lea
sbb
enter
jae
fsubs
add
jg
jnp
cli    
jns
movsb
repz inc
jns
(bad)  
xor
adc
xchg
dec
bswap
xchg
popf   
dec
fnstenv
enter
cmp
add
push
mov
test
mov
add
aas    
jbe
pop
or
sbb
fsubs
cld    
cld    
adc
dec
out
negb
mov
cmc    
mov
xchg
inc
cmp
call
stos
rep outsl
int
mov
pop
js
test
and
add
mov
popa   
xchg
les
out
(bad)  
sbb
stc    
es inc
mov
shrl
mov
sbb
adcl
pusha  
and
cmpsb
cmp
out
dec
xlat
(bad)  
sub
xor
into   
cmp
cli    
out
call
test
cmp
lods
out
inc
add
sub
sbb
xchg
sub
xchg
cltd   
mov
xorb
cmp
daa    
mov
es sub
sub
test
xchg
mov
aad
and
arpl
ss insb
mov
imul
rolb
(bad)  
in
aad
pop
push
int3   
mov
mov
inc
or
and
(bad)  
dec
shrl
inc
mov
fnstcw
bnd jl
mov
(bad)  
mov
cmp
out
test
sbb
xlat
fs cli 
cltd   
pushf  
in
or
jmp
insl
clc    
int3   
mov
stos
or
mov
scas
inc
fs and
jae
sub
mov
push
jnp
lods
dec
call
mov
or
mov
dec
pushf  
test
fistl
movsl
lods
mov
scas
imul
push
(bad)  
daa    
imul
mov
mov
dec
popa   
and
(bad)  
jecxz
mov
ret
stos
(bad)  
mov
xlat
xchg
jne
ss mov
enter
aas    
push
sbb
mov
xor
xor
cmpsl
push
jne
repnz cwtl 
cmp
and
inc
loop
jge
dec
popf   
into   
(bad)  
insl
les
imul
(bad)  
sbb
mov
xor
bound
je
fcomps
push
and
add
pusha  
push
dec
mov
sbb
jae
mov
mov
and
add
ds ljmp
popa   
inc
xor
test
adc
bound
mov
fisttpl
and
push
mov
outsb
xchg
sarb
push
jb
sub
and
mov
jno
ja
dec
stos
add
sub
mov
in
rclb
xor
mov
lahf   
mov
int
cs lcall
mov
jecxz
and
or
xor
cltd   
sub
js
lea
(bad)  
mov
jp
daa    
inc
pushf  
test
xchg
mov
pop
inc
lahf   
or
fs jge
loope
dec
aad
out
mov
lret   
clc    
xor
(bad)  
mov
dec
xchg
add
sti    
cld    
(bad)  
call
mov
fisttpll
in
mov
aas    
das    
popf   
movsb
sbb
jp
ret
cltd   
movsl
or
add
lds
bound
movsb
dec
cld    
movsb
div
clc    
sbb
loope
and
fwait
insb
inc
or
add
(bad)  
and
xor
xlat
test
dec
jecxz
jmp
bound
fisubrl
rcr
movsb
mov
shlb
fisttpl
sbb
notb
dec
mov
jle
scas
adc
mov
push
pop
sti    
xchg
sbb
push
jnp
movsl
fwait
cmp
fisubl
xlat
sti    
xchg
mov
jle
fimul
aas    
das    
dec
push
orl
mov
mov
clc    
pop
dec
lods
inc
out
cmc    
sub
jge
or
scas
lods
mov
push
int3   
pop
and
pop
mov
pop
loope
cmp
inc
test
or
xor
cld    
push
addr16 ret
mov
inc
sar
push
jbe
cs pop
push
lahf   
pop
cmp
popa   
mov
daa    
adc
mov
fsts
fldl
dec
mov
je
movb
or
sbb
shrb
dec
push
push
mov
xchg
outsb
fcmovnbe
in
enter
pop
bound
sub
bound
xor
orb
pop
aam
(bad)  
push
cltd   
lods
mov
sub
mov
cmp
test
out
frstor
pop
pushf  
xor
ds or
jg
xor
icebp  
inc
xchg
std    
fnop   
insl
mov
jl
out
aam
movsl
push
sbb
dec
lret
jmp
pusha  
insl
pop
or
addr16 sbb
xchg
or
cmp
lret
aam
into   
inc
xorb
ljmp
leave  
push
mov
push
(bad)  
jnp
push
stc    
or
dec
push
push
fldcw
pop
jbe
(bad)  
push
and
rclb
lods
mov
pop
cld    
addl
push
jb
dec
arpl
into   
add
mov
aas    
xchg
adc
xchg
(bad)  
mov
outsl
xchg
xchg
enter
push
notb
inc
je
loop
sub
in
lock or
imul
loopne
rolb
addr16 cli 
cmp
xchg
pop
loope
cld    
fild
or
dec
cmp
inc
cmp
fwait
repz mov
cmp
pop
add
gs mov
and
test
mov
adc
mov
pusha  
pop
adc
mov
pop
imul
stos
sbb
jno
cmp
mov
pop
xor
lret
sub
mov
out
fstpt
cmpsl
xorl
jbe
mov
xor
outsl
adc
jbe
xchg
jnp
sub
inc
push
xor
lea
mov
adc
dec
ljmp
mov
mulb
mov
dec
mov
decb
xor
jne
lods
js
pop
and
or
test
inc
test
enter
sub
mov
inc
jne
shlb
repnz and
ss scas
sahf   
mov
int
(bad)  
leave  
scas
push
jg,pt
lods
dec
push
rcrl
popl
mov
jp
(bad)  
leave  
push
or
repnz insb
and
pop
das    
inc
movsb
adc
data16 mov
jecxz
adc
push
(bad)  
xchg
sbb
pop
mov
xlat
adc
sbb
addl
dec
pop
daa    
dec
out
mov
mov
in
fdivrl
fsub
push
aad
sti    
adc
sahf   
mov
cltd   
inc
mov
fiaddl
push
cmc    
test
jmp
pushf  
push
lcall
or
loopne
pop
pop
les
cmp
mov
ljmp
out
or
sbb
gs mov
mov
mov
push
mov
cmp
and
addr16 sub
mov
outsb
adc
cwtl   
sti    
mov
cli    
jp
xchg
jae
mov
lahf   
fiadd
pop
lock outsb
ljmp
out
cltd   
and
adc
jle
in
cltd   
js
dec
mov
xchg
ds leave 
lcall
dec
mov
ds
push
mov
leave  
cmp
aaa    
out
stc    
mov
ret
mov
sbb
(bad)  
(bad)  
je
cmp
(bad)  
add
mov
mov
push
scas
stos
cltd   
fisub
sbb
adc
add
je
dec
adc
jmp
cmp
inc
fbstp
sbb
push
or
(bad)  
stc    
push
xor
scas
and
shlb
inc
and
sahf   
stos
xor
out
out
mov
push
sub
mov
sub
insb
adc
pop
fincstp 
pop
pop
fiadd
inc
ss jge
sub
push
das    
pop
(bad)  
in
insb
js
cli    
pop
lock jle
(bad)  
xor
popa   
gs fst
fild
add
roll
add
les
pop
pop
or
inc
inc
out
stc    
pop
or
test
dec
jae
or
cmp
(bad)  
xchg
and
outsl
xchg
pop
push
lret   
(bad)
sahf   
push
xchg
push
sub
bound
mov
mov
pop
popa   
or
xchg
xlat
xchg
mov
sub
sarb
std    
mov
add
push
pop
push
inc
mov
pop
xchg
cmp
sub
sub
ds pop
fiadd
std    
mov
mov
lret   
fistpl
call
cmp
ret
test
ljmp
push
insl
aam
add
mov
loope
jecxz
jns
mov
loopne
std    
leave  
add
mull
fsubr
xchg
pop
jp
push
sbb
clc    
xchg
sahf   
(bad)  
fbstp
movsb
push
(bad)  
cmpsl
and
mov
test
pop
xor
rcl
push
ja
jo
sbb
test
mov
loop
aas    
gs repz mov
mov
mov
arpl
jmp
daa    
lds
mov
inc
add
daa    
jae
fwait
aas    
jecxz
sarl
popa   
(bad)  
test
sub
add
sub
jnp
add
loope
in
clc    
inc
xchg
pop
bnd jl
pop
jns
lea
out
pop
out
incl
sbb
jne
in
mov
call
xor
pop
xorb
inc
cmpsl
fisub
lcall
scas
sub
add
jae
mov
out
push
clc    
out
and
jle
ret
and
adc
imul
movsl
lret
divl
mov
daa    
lock and
(bad)  
popf   
push
and
and
cmp
(bad)  
(bad)  
out
jge
mov
movl
enter
push
dec
jae
out
popa   
mov
aas    
pushf  
or
mov
test
out
ficoml
adc
inc
pop
sub
movsl
xchg
mov
add
stos
js
outsb
in
(bad)  
je
sbb
xchg
stos
daa    
xchg
pop
dec
aad
aam
pop
scas
cld    
sbb
or
es jle
jp
lea
pop
push
sbb
loopne
xchg
sbbl
xchg
or
stc    
sub
(bad)  
cmp
cmpsb
stc    
pop
sub
(bad)  
fist
xor
inc
ds stos
add
cmpsb
popl
pop
out
pusha  
ss
dec
inc
adc
mov
lock mov
mov
daa    
popa   
sub
ficomp
inc
cli    
mov
xor
or
insb
push
mov
bound
cmp
push
ja
xor
es sub
jg
jge
sbbl
imulb
scas
pushf  
shrl
push
mov
xchg
add
aad
jl
xchg
pop
add
iret   
int3   
jg
mov
dec
scas
cmp
movsl
lret   
mov
xchg
pop
(bad)  
dec
in
subl
and
sbb
and
insl
mov
imul
(bad)  
cmp
pop
insl
jecxz
cwtl   
sbb
mov
incl
rol
enter
xlat
push
ret    
fwait
aaa    
xchg
movsl
fstl
call
jl
mov
lret
pop
or
jmp
pop
pop
rclb
das    
inc
mov
aam
aad
cmp
push
out
xchg
xchg
sub
pushf  
ja
int
aam
sub
iret   
xchg
(bad)  
int
mov
dec
(bad)
loope
rorb
mov
addr16 inc
cld    
stos
in
add
mov
xchg
aad
les
pop
mov
jmp
rolb
xor
iret   
sbb
nop
aad
inc
aam
(bad)  
jb
aad
push
repz lea
sub
mov
aam
add
jmp
adc
sub
scas
and
dec
insl
mov
pop
or
or
or
inc
sub
inc
inc
js
mov
xor
inc
inc
push
add
(bad)  
pop
jb
push
jne
rorb
cmp
sbb
inc
mov
inc
xchg
mov
(bad)  
xchg
rcr
add
and
inc
or
js
insl
cmpsl
aam
adc
lods
adc
pop
data16 mov
lds
stos
out
and
push
jb
push
out
xchg
dec
stc    
add
jns
jecxz
or
cmp
inc
xor
pop
movsl
mov
aad
jl
testl
inc
sub
push
inc
pop
mov
sub
sub
jge
mov
jne
insb
dec
pavgb
testb
fisubr
jns
out
int3   
inc
call
iret   
insb
fdivrs
mov
sub
aas    
mov
xor
or
sar
out
mov
adc
lock push
mov
stc    
std    
loopne
xchg
dec
cld    
fiadd
mov
fxch
or
add
pmulhw
fistp
sahf   
fwait
leave  
cltd   
xor
sbb
(bad)  
sahf   
or
xchg
ror
mov
jno
lock sbb
cmp
dec
mov
rcrl
xor
stos
fdivs
rolb
shrl
and
jmp
mov
es jno
push
jg
sub
cwtl   
and
pop
mov
inc
dec
inc
ja
add
xor
adc
jae
imul
jmp
mov
movsb
cld    
dec
xchg
ljmp
arpl
inc
jmp
xor
sbb
ss out
push
jne
or
sub
mov
cmp
or
jmp
cmp
jo
inc
jl
pop
shlb
(bad)  
mov
ret
pop
fildll
adc
out
jbe
ja
xchg
jmp
pop
imul
stos
add
xchg
pop
fnstcw
mov
add
mov
mov
adc
mov
insb
sti    
daa    
cmpsl
nop
je
aas    
fistpll
sar
jge
mov
and
stos
data16 into 
mov
mov
lret
adc
scas
(bad)  
jnp
stc    
pop
xchg
arpl
(bad)
sub
add
push
test
in
xchg
decb
cmp
lret   
out
adc
push
dec
call
in
jb
xchg
arpl
in
or
sbb
sub
fldcw
movsl
fs test
out
and
mov
test
pop
adc
or
xchg
push
inc
or
out
pop
ss
mov
sub
lcall
inc
or
jb
lret   
jge
aam
sub
jecxz
sbb
dec
es xor
xor
sbb
ficomp
sti    
enter
lock xchg
add
(bad)  
in
xchg
cs inc
(bad)  
mov
out
stos
lret   
and
push
add
loopne
cld    
or
daa    
out
insl
daa    
jp
iret   
cmp
sbb
push
data16 xor
je
jnp
mov
cli    
aad
(bad)  
mov
jo
dec
xorb
push
pop
pop
sub
push
jp
(bad)  
cmc    
lea
or
(bad)  
mov
xchg
setb
xchg
mov
jbe
jmp
gs sub
test
push
arpl
pop
shrl
push
mov
push
bound
fdivs
push
jp
loope
push
inc
mov
lcall
cmp
hlt    
jle
xor
mov
xchg
sub
(bad)  
mov
icebp  
iret   
adc
ljmp
pop
lock mov
(bad)  
sbb
push
(bad)  
inc
fcomps
mov
sbbl
pop
(bad)
sub
sbb
dec
bound
cs pop
aam
xchg
ffree
sbbl
xor
loop
in
pop
mov
ret
mov
add
sub
push
xchg
icebp  
sub
les
push
popf   
loopne
xchg
cwtl   
lods
subl
stc    
aaa    
sbb
mov
out
mov
jb
mov
imul
sahf   
mov
xchg
inc
jo
stc    
test
bound
mov
jno
ja
lods
adc
ss cs mov
sub
or
out
jns
jge
(bad)  
mov
mov
push
push
pop
add
sbb
sub
scas
into   
dec
mov
ja
add
mov
sahf   
sub
sub
add
popa   
loopne
cmpsl
xor
out
inc
sbb
loope
rcrb
sarl
pop
jle
add
pop
(bad)  
fcoml
sahf   
dec
jp
adc
mov
jnp
jne
mov
mov
xchg
stos
push
pmuludq
popf   
xlat
fild
sub
rcll
stos
jmp
not
in
jae
sub
mov
mov
dec
dec
push
popa   
ljmp
mov
mov
scas
ss ret
dec
nop
lret   
arpl
outsb
cmp
mov
push
loope
mov
mov
lods
pop
and
shlb
sbb
mov
and
jle
mov
add
ret
sub
mov
adc
pop
pop
icebp  
aam
push
push
cwtl   
push
adc
mov
lods
lret   
add
sti    
mov
inc
lods
test
and
push
out
xchg
movups
mov
push
ss shl
out
aam
bound
pop
jmp
sbb
repnz push
lods
daa    
cmp
roll
push
subl
pop
add
es and
jbe
pop
sub
or
ret
fildl
jno
dec
mov
mov
ret    
jne
xlat
cs inc
cli    
xchg
sub
jecxz
mov
xchg
push
push
pop
mov
jno
cmp
insl
stos
or
call
je
dec
cld    
movsl
cmp
jp
sub
pop
dec
or
xor
lcall
mov
(bad)  
xchg
lcall
(bad)  
jns
sub
test
adc
aad
dec
jb
push
inc
pop
imul
jle
out
adc
test
push
es mov
into   
idiv
adc
lahf   
(bad)  
mov
mov
inc
inc
loop
add
xor
out
or
mov
adc
decb
add
jb
insl
jns
ja
push
inc
in
test
ss repz addr16 in
int
cmp
into   
(bad)  
mov
xchg
cmp
gs dec
push
(bad)  
adc
daa    
mulps
and
gs xor
cltd   
imul
inc
dec
mov
dec
cltd   
inc
pop
in
mov
push
(bad)  
jb
or
sub
or
iret   
mov
mov
fwait
push
lock or
mov
lock jne
or
cs sbb
jno
lret
xchg
nop
outsb
dec
add
movsl
mov
mov
ljmp
xor
pop
sahf   
fildl
adc
xor
cmpsb
hlt    
push
(bad)  
mov
dec
mov
clc    
sbb
and
insb
add
and
xchg
into   
pop
cld    
and
(bad)  
mov
push
jg
sbb
dec
inc
and
jg
mov
cmpsb
or
or
jnp
mov
cmp
cmpsb
sti    
mov
lcall
popf   
pop
xchg
and
ret    
pop
add
sbb
ss movsb
rcrb
push
pop
neg
nop
xchg
(bad)  
cmc    
and
hlt    
push
add
sar
sbbb
push
cwtl   
xchg
fdivr
mov
std    
xchg
out
repz aam
sbb
hlt    
nop
dec
mov
mov
dec
adc
repnz xchg
mov
mov
dec
adc
arpl
inc
mov
lock cld 
dec
popa   
or
lods
inc
test
test
mov
flds
movsb
cmp
ds out
test
call
in
js
and
lea
pop
pusha  
xchg
insb
adc
dec
es pop
push
and
mov
(bad)  
dec
cld    
sub
mov
clc    
dec
and
xchg
in
pusha  
sbb
add
shr
cmp
adc
test
inc
adc
jo
repnz or
jbe
dec
and
lds
add
mov
mov
sarl
lods
pop
jmp
jae
push
out
nop
lods
and
lret
xorl
xchg
ds vhsubps
movsb
mov
xor
aam
cmp
adc
adc
rcll
mov
push
jae
dec
stc    
adc
js
inc
adc
jp
jbe
mov
bound
aad
pop
lcall
andb
inc
xchg
push
adc
sub
sahf   
mov
mov
ljmp
test
repz cmp
push
jg
jl
mov
movsl
or
push
push
mov
adc
mov
mov
out
mov
cmp
xor
or
mov
push
repnz fwait
(bad)  
push
dec
dec
mov
inc
mov
fst
(bad)  
movsb
imul
add
and
pop
je
and
adc
jne
popf   
imul
test
ss lock cmp
lcall
cmp
incl
add
adc
and
lea
push
js
std    
pop
es cltd 
add
fsubl
dec
push
fldl
aas    
out
fsubrl
pop
gs push
pop
outsl
adc
cmp
leave  
sbbl
dec
jg
lods
lds
add
and
mov
data16 aam
fisubr
adc
xchg
jl
xor
dec
mov
inc
sub
rcrl
jo
pop
pop
dec
pusha  
mov
adc
adc
and
push
mov
lods
jbe
mov
test
mov
and
aas    
mov
push
cmp
(bad)  
xchg
mov
sub
mov
cmp
push
adc
xor
loop
pop
cs das 
cmp
jl
xchg
and
add
xor
adc
add
and
push
add
test
sub
mov
adc
lock jb
dec
in
aam
(bad)  
jb
inc
popa   
ret
mov
mov
lahf   
mov
inc
pop
(bad)  
shrl
jne
mov
bound
int3   
add
in
jns
mov
in
roll
add
cmp
in
pop
inc
push
or
jmp
push
ljmp
movsl
push
test
int
lret
or
insb
in
cmpsb
cs ss in
sub
leave  
jle
jnp
inc
push
push
stos
test
fwait
ret    
push
inc
loope
(bad)  
fsubrp
das    
xlat
and
sbb
(bad)  
cmp
jecxz
mov
push
pop
lds
inc
(bad)  
push
lock mov
hlt    
and
movsl
add
mov
outsb
cwtl   
into   
jl
jne
xor
jo
sub
test
cli    
rcr
jnp
lahf   
inc
cs test
addr16 dec
outsb
jp
pop
pop
data16 mov
jg
adc
jno
jae
jno
xchg
jns
or
adc
jg
bound
(bad)  
stc    
xchg
lds
add
and
fnstcw
stos
mul
push
cmp
add
int
or
sub
rcrl
mov
test
arpl
test
movb
add
in
xchg
push
xchg
cmpsb
jno
jne
jg
inc
push
call
outsb
cmp
call
sbb
sti    
ss ja
xor
lds
sarl
(bad)  
or
clc    
pop
xchg
loop
pop
scas
and
aas    
or
movsl
enter
xor
dec
sbb
mov
xchg
(bad)  
hlt    
mov
pop
mov
sbb
movsl
les
enter
fsubrl
pop
xor
mov
lret   
and
ret
xchg
xlat
inc
sub
dec
loopne
fldenv
js
arpl
jnp
sar
add
notl
(bad)  
cs cmc 
cwtl   
jle
inc
repnz
mov
sti    
clc    
mov
mov
mov
push
lods
aad
jl
rcll
xor
push
std    
out
in
xor
scas
cmpl
outsl
cmpsl
mov
cmp
imul
sbb
inc
sub
aaa    
mov
iret   
push
pmaddwd
dec
out
movsb
insb
push
pop
adc
in
sub
pop
xchg
push
and
or
test
sub
pop
xchg
gs mov
jnp
sub
inc
jno
inc
sbb
cwtl   
call
sub
aad
add
sti    
add
push
fcompl
(bad)  
sub
int3   
mov
addr16 hlt 
jecxz
(bad)  
enter
iret   
fisttpll
dec
bound
hlt    
pop
adc
mov
sti    
inc
add
cmp
les
push
sub
(bad)  
int3   
dec
or
in
mov
(bad)  
decb
jg
aaa    
xchg
fbstp
push
cmpsb
sarl
adc
test
test
xor
mov
and
pop
sahf   
mov
push
inc
mov
lcall
sub
sub
int3   
(bad)  
and
out
cmpsb
add
es jmp
rorl
jp
pop
add
jno
enter
lods
sbb
mov
call
sbb
push
and
adc
jb
push
aas    
add
lea
or
(bad)  
iret   
push
(bad)  
push
fs jae
fidivrl
jg
inc
mov
lcall
fs stos
lahf   
aaa    
dec
cli    
mov
sub
sbb
scas
je
cli    
add
add
dec
inc
dec
inc
scas
inc
pusha  
(bad)  
or
add
add
(bad)  
(bad)  
(bad)  
incl
add
add
add
add
add
add
jns
je
insl
cs inc
jb
ja
outsb
addr16 sub
push
gs jb
imul
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
xor
data16 aaa 
xor
fs xor
add
adc
gs insl
cs inc
jb
ja
outsb
addr16 cs inc
imul
add
popa   
je
pop
add
add
add
add
add
lsl
add
jno
add
add
or
or
add
or
add
add
add
dec
or
add
add
(bad)  
and
add
add
inc
dec
inc
add
mov
or
popa   
add
jo
pop
jae
add
ret    
add
push
ret    
add
outsl
test
add
cmp
push
push
test
insb
rolb
ret    
ret
jns
dec
jg
mov
rol
add
mulps
aad
dec
sbb
jb
add
lock movsl
cmpsb
(bad)  
fucom
es jae
mov
inc
aas    
(bad)  
pop
cmp
addr16 pop
out
int
mov
mov
ds xchg
nop
(bad)  
cmc    
push
into   
(bad)  
insl
cld    
fwait
out
jnp
dec
scas
sbb
lahf   
call
in
cmc    
xchg
cmpsb
push
inc
sub
jg
push
ret    
ss or
(bad)  
xor
popf   
xchg
push
out
lret
test
mov
and
push
call
dec
cmp
aad
ret    
inc
adc
pop
xor
sti    
mov
sbb
lret
(bad)  
dec
iret   
or
dec
arpl
dec
and
add
iret   
xor
mov
inc
sahf   
movsb
rcrb
movb
mov
cmp
inc
outsl
pushf  
jne
out
sbb
or
mov
rorb
pop
clc    
int3   
add
cmpsb
cltd   
and
jbe
mov
es out
pop
ret
loop
arpl
mov
unpcklps
mov
xor
adc
jle
sub
icebp  
xorl
std    
mov
dec
sub
jge
in
adc
xchg
(bad)
sub
dec
mov
(bad)  
lret   
fucom
imul
gs gs push
pushf  
mov
xchg
cmp
xchg
adc
in
or
push
iret   
xor
sub
xchg
dec
(bad)  
xor
cs cmp
pop
pop
out
sbb
inc
lahf   
incb
popf   
and
dec
jecxz
xchg
sub
scas
push
stos
push
loopne
mov
cmp
add
or
pop
test
push
leave  
lret
mov
outsl
jmp
test
aam
cmp
mov
push
xchg
sub
sub
bound
sub
into   
addr16 dec
cs aas 
pop
ret
imul
or
fisubl
pop
inc
enter
dec
les
add
fisubrl
pop
ret    
mov
pushf  
out
popa   
or
pop
negl
mov
test
sbb
push
xor
xor
adc
add
mov
stc    
add
out
pushl
and
and
inc
cmp
jb
call
pop
fdivrs
stc    
sub
icebp  
ljmp
mov
jmp
out
cmp
jle
leave  
sub
icebp  
lods
clc    
jbe
jns
cltd   
stc    
bound
push
xchg
imul
ds pusha 
testb
push
fmuls
shrb
pop
js
sub
test
and
mov
shl
xchg
mov
in
push
daa    
jae
lea
xchg
pusha  
shlb
push
enter
inc
into   
jmp
sub
cmp
xor
fucomi
dec
(bad)  
dec
(bad)  
mov
daa    
scas
ja
mov
xchg
push
jmp
jb
mov
in
jne
adc
lea
lret
mov
push
or
or
icebp  
outsb
icebp  
xchg
ret
test
adc
mov
push
stos
sbb
rcl
shrb
popf   
inc
jne
pusha  
mov
popa   
push
cmc    
lds
pop
jecxz
daa    
js
mov
pushf  
cmp
sbb
push
andl
insb
or
(bad)  
cmp
flds
jl
cmpsl
popa   
mov
sub
test
jmp
lcall
fidivr
pop
and
cltd   
fbstp
xchg
xchg
sbb
fldenv
jo
sub
pop
in
xchg
sarl
fwait
mov
adc
popa   
fidiv
inc
insl
rcrl
repz push
jbe
jno
adc
aam
sub
mov
out
imul
(bad)  
mov
dec
and
mov
or
test
aas    
test
sbb
adc
and
ljmp
adc
sbb
frstor
movsl
cmp
xchg
push
jge
sbb
(bad)  
lock jl
xchg
fwait
in
int
mov
adc
push
test
mov
pop
lods
cmp
lock aas 
and
and
jg
cmp
sub
xor
jno
dec
mov
xchg
mov
pop
dec
enter
mov
cmp
int
out
cli    
scas
sbb
das    
cmp
pusha  
push
pop
rorb
std    
add
clc    
test
xchg
das    
jg
(bad)  
cld    
xchg
rcrl
push
dec
add
movsb
cli    
insb
ss cs xchg
xchg
xor
and
adc
rcr
lods
push
lcall
or
or
iret   
cmp
lcall
inc
frstor
daa    
(bad)  
sti    
adc
mov
movsl
ds mov
ds pushf 
cmpl
pop
cmovge
gs ljmp
daa    
(bad)  
mov
xor
int3   
and
ja
cmpsb
add
mov
sbb
add
xchg
add
insl
mov
push
lods
scas
inc
fnstenv
cmp
bound
loop
movsb
btr
xchg
pop
dec
jne
pop
or
push
adc
and
xorb
(bad)  
xor
(bad)  
dec
out
rcll
int3   
repz and
or
loopne
xor
cmp
push
incb
xchg
jmp
ret
add
ljmp
in
xor
out
mov
dec
outsl
lock jae
mov
pop
xor
aam
int3   
sub
and
loope
jbe
outsb
cltd   
xchg
jbe
jmp
dec
mov
jmp
pop
sub
test
jp
popa   
hlt    
std    
enter
and
push
push
cmpl
pop
movsl
cwtl   
arpl
cmp
adc
iret   
fwait
mov
jbe
lcall
jne
cwtl   
js
scas
xchg
int
add
scas
jnp
es xchg
adc
inc
push
and
int3   
push
sahf   
lret   
pop
push
sub
sub
mov
inc
stc    
mov
dec
nop
test
adc
arpl
cmpsl
jb
(bad)  
xor
adc
js
cli    
mov
push
ss dec
pop
mov
inc
mov
cmpsb
or
mov
inc
icebp  
xor
sbb
push
jmp
mov
les
loop
fnsave
inc
dec
movsb
push
mov
int
pop
or
imul
(bad)  
into   
mov
or
pop
lods
ret    
cwtl   
insb
inc
popa   
subb
sbb
xchg
xchg
clc    
lcall
adc
clc    
push
or
cmp
sbb
mov
in
arpl
lret
xor
xchg
aad
std    
popf   
icebp  
add
sub
subl
sub
adc
repnz rcl
ljmp
scas
xorb
or
sahf   
in
outsl
add
les
dec
mov
clc    
push
mov
inc
adc
stc    
(bad)  
fnop   
mov
(bad)  
leave  
(bad)  
mov
push
xchg
ja
fimul
and
fisttpl
mov
xor
stc    
fwait
cmp
mov
scas
sub
xchg
dec
pop
into   
dec
mov
sub
outsl
leave  
pop
std    
cwtl   
sub
stos
or
andl
xchg
push
faddl
hlt    
stos
or
data16 mov
xchg
cmc    
repz and
mov
dec
test
adcb
add
pop
stc    
das    
add
in
inc
mull
jg
mov
push
lcall
cmc    
pop
xor
js
insb
xchg
aad
ja
dec
push
lock mov
xchg
pop
push
xor
cld    
outsl
dec
negb
xor
jge
push
int3   
or
jb
loop
fisttpll
jmp
lea
fcmovne
pop
pushf  
addr16 das 
sub
test
pop
cmpl
xchg
mov
inc
xlat
pop
xor
sbb
movsb
out
inc
xchg
pop
pop
sub
pop
ja
mov
adc
(bad)  
cmp
in
shrl
std    
push
icebp  
xchg
pushf  
sbb
push
clc    
mov
test
jl
inc
mov
icebp  
cmp
sti    
jle
or
pop
and
sahf   
dec
xchg
fnsave
pop
adc
pushf  
pop
mov
(bad)  
(bad)  
sahf   
cmp
sahf   
stos
fisttpll
add
stos
inc
xchg
pushf  
sti    
add
or
outsb
sbb
add
or
aaa    
adc
jp
xchg
inc
stc    
inc
mov
sbb
jbe
mov
jno
in
loop
int3   
pop
push
jnp
ja
mov
cmp
jne
es pop
ret
ficoml
mov
lret
clc    
mov
icebp  
popa   
mov
mov
fstpl
push
andl
aas    
mov
fisttpl
outsb
das    
jge
daa    
daa    
sbb
cmpsl
in
idivb
je
xchg
sbb
test
mov
xchg
pop
movsl
and
push
movsb
push
mov
stos
push
push
popf   
push
shrl
sub
mov
loope
out
jp
xorl
bound
movsb
push
pop
test
js
loope
push
mov
fldenv
dec
and
repz cs std 
lret
test
add
lods
aad
jnp
cwtl   
lahf   
roll
int3   
pop
jp
shrb
cmp
das    
mov
jns
lds
imul
inc
cld    
fsubl
js
push
rorl
cltd   
cmc    
ss xor
mov
or
nop
push
(bad)  
adc
mov
ss dec
jne
lret   
sti    
and
in
das    
dec
inc
dec
imul
push
push
subl
in
mov
cli    
int
jle
ret    
insb
pop
jb
dec
xlat
push
ret    
sarb
flds
and
xor
add
loop
mov
test
loope
out
inc
cld    
lret
(bad)  
repnz les
js
and
fcmovnbe
pusha  
(bad)  
fs
cld    
mov
xchg
in
pop
or
pop
fsubrl
sbb
(bad)  
iret   
(bad)  
dec
fstp
inc
sbb
add
popf   
jno
leave  
fisubrl
add
sbb
stos
xchg
xchg
call
(bad)  
mov
pop
scas
pop
xchg
push
cld    
fisub
cmpsl
imul
int
(bad)  
jl
xor
outsl
pop
xor
in
mov
stc    
add
cmp
jo
out
icebp  
fucompp 
fwait
jp
mov
jae
rorb
movsb
push
imul
fisttpl
push
mull
mov
lea
mov
mov
rcll
pop
sbb
(bad)  
hlt    
clc    
or
push
out
jmp
mov
dec
push
adc
fist
in
aaa    
xchg
movsb
pop
xor
sub
lcall
sbbl
push
pop
cmp
and
xchg
ja
pusha  
bound
dec
loope
sbb
xor
cmp
outsl
loope
cmp
popa   
imul
les
xchg
or
add
mov
jp
insb
rclb
out
es divps
lock inc
mov
lds
jp
sti    
mov
and
pop
pop
mov
xchg
push
adc
imul
daa    
cli    
push
adc
fsts
insb
inc
adc
pop
inc
cli    
lods
lret   
pusha  
divl
stos
lods
repz cmpsb
sub
push
sub
push
cmpsl
sarb
test
sub
cmp
pop
(bad)  
ret    
fsubrs
iret   
pop
movsb
mov
clc    
outsl
lds
cmp
stos
xchg
int3   
loopne
dec
movsl
mov
xchg
sub
(bad)  
jnp
scas
fcmovne
fcmovnu
xor
cmp
loope
jae
add
jle
cmp
int
mov
mov
ret    
adc
mov
insl
das    
es jecxz
jle
or
sbb
add
nop
xorb
lods
ret    
insb
mov
add
jb
add
lods
cli    
inc
push
pusha  
ret    
ret
dec
xchg
int
mov
xlat
scas
rcl
ffreep
fs dec
ja
cmc    
sahf   
xlat
cmp
sti    
push
mov
dec
and
lcall
push
and
push
or
lret
(bad)  
scas
(bad)  
jge
jp
insb
sub
sarl
lods
pop
and
sub
cmp
xlat
ja
insl
test
lods
sub
sub
and
push
lahf   
(bad)  
mov
push
jle
xor
jbe
add
jo
fnstcw
and
xor
scas
push
sbb
test
sbb
xor
push
in
pusha  
jno
sbb
jbe
mov
cmpsb
pop
test
mov
mov
xor
test
jge
int
mov
loope
pop
cmp
dec
and
fisttpll
int3   
cli    
into   
call
adc
cmpsb
pop
xor
arpl
cwtl   
movsb
lret   
mov
ljmp
sarb
jbe
adc
push
push
xor
shll
adc
xchg
xchg
cmp
or
pusha  
in
lcall
loop
ljmp
hlt    
je
aam
mov
add
ljmp
aas    
lret
ret
inc
sub
(bad)  
or
stos
push
cs in
wbinvd 
fucomi
dec
ffreep
iret   
push
ss sbb
or
cs pop
lahf   
mov
sub
push
loopne
std    
ret    
dec
(bad)  {%k5}
out
sub
xchg
xchg
dec
push
fistpll
adc
lods
ret    
xchg
xchg
nop
adc
adc
or
loope
mov
jne
xchg
add
rolb
clc    
out
pop
rorl
enter
or
pop
adc
pushf  
inc
dec
cli    
pop
mov
xchg
in
in
scas
in
inc
cld    
in
xchg
test
lods
in
rcrl
in
dec
leave  
mov
inc
mov
push
test
scas
cs pop
sbb
xor
shlb
hlt    
es pop
(bad)  
mov
jne
xorl
dec
push
(bad)  
mov
fstpl
sbb
push
jmp
jns
pusha  
jb
arpl
jmp
lods
xor
dec
jmp
rcrl
addr16 pushaw 
ljmp
pusha  
sub
cmp
fld
mov
lea
pop
mov
shl
mov
and
decb
xchg
out
rcr
pusha  
add
btc
inc
sahf   
adc
lds
ds inc
lcall
xchg
jecxz
scas
movsb
gs lcall
sub
dec
add
push
mov
sti    
lods
pop
cmova
cmp
mov
mov
ret
pop
push
add
in
jle
sbb
imul
xor
(bad)
mov
xlat
xchg
lcall
(bad)  
jo
mov
or
mov
jge
push
in
mov
ret    
inc
hlt    
or
or
jne
mov
pinsrw
out
fmull
pop
sub
inc
lods
rolb
mov
lret   
pop
xchg
(bad)  
xor
push
pop
ljmp
fstl
pop
cmp
xor
mov
push
pushf  
arpl
xchg
mov
pop
add
fs dec
(bad)  
sub
test
cli    
push
cmpsb
mov
ret
mov
add
cmp
fsubrl
sub
xchg
neg
(bad)  
xchg
mov
inc
cwtl   
mov
cld    
mov
inc
jae
shrb
mov
sarl
rcll
test
and
negl
insb
ss stc 
dec
dec
mov
xchg
dec
test
and
mulb
in
or
push
and
in
sub
cmpsb
jg
(bad)  
or
jge
pop
add
xchg
popf   
dec
mov
pop
dec
mov
in
and
push
dec
mov
add
in
stos
sub
ss aam
mov
inc
push
push
pop
repnz cmp
push
xor
aaa    
(bad)  
push
stos
insl
icebp  
repnz mov
outsl
fsubrl
test
aaa    
xor
xchg
push
out
sahf   
loop
ret
push
mov
stos
and
(bad)  
(bad)  
jb
push
add
ret
cmp
xlat
fmul
adc
push
pop
mov
sub
out
loope
jae
call
mov
ljmp
rorl
push
sub
std    
lock insb
insl
pop
notl
and
stos
(bad)  
out
icebp  
mov
push
fnop   
xor
sbb
test
inc
xor
ds mov
cli    
or
(bad)  
mov
jl
mov
loope
xor
(bad)  
imul
cwtl   
inc
lret   
ja
insl
les
(bad)  
out
xor
call
inc
lods
insl
sbb
dec
adcl
lods
jecxz
mov
mov
mov
mov
pop
in
mov
std    
inc
mov
nop
xchg
cmp
pop
jg
or
cltd   
rol
movsl
out
shl
add
lahf   
pop
add
xchg
pop
data16 sbb
jns
add
insl
aaa    
(bad)  
sbb
in
js
push
cmp
pusha  
and
sbb
ret    
(bad)  
loop
fldenv
(bad)  
jnp
inc
xchg
mov
outsb
(bad)  
adc
sub
pop
(bad)  
ds push
lock pop
lods
pop
outsl
add
jo
jae
jae
jb
jl
mov
push
xchg
jae
xorl
cltd   
push
aam
fist
cli    
mov
cs cmp
test
outsl
sbb
lods
out
dec
xor
cmp
insl
loope
popl
scas
frstor
pop
sbb
loope
xchg
dec
loop
mov
hlt    
mov
pop
pop
dec
add
lcall
popf   
movsb
jmp
leave  
mov
jg
and
int3   
jmp
pop
aad
das    
imul
cli    
xor
mov
clc    
rolb
jp
int
xchg
and
inc
push
rorb
sbb
add
pop
ret    
or
out
sbb
ljmp
push
cli    
ret
and
or
mov
mov
imul
arpl
repz inc
mov
imul
sysret 
addr16 mov
std    
std    
mov
inc
aad
lods
sub
js
and
and
or
and
aaa    
jmp
fistl
aaa    
(bad)  
ja
movsl
das    
pop
push
dec
sti    
daa    
fscale 
mov
jnp
push
xor
mov
push
xchg
xchg
pop
movsl
out
das    
xor
lods
js
stos
cwtl   
fdivrs
ror
sarl
and
bound
jge
mov
mov
idiv
jne
call
(bad)  
cmp
lret   
push
add
sbb
cmpsl
gs repz pop
inc
loop
leave  
inc
jmp
jo
push
sub
add
jg
or
xor
loop
and
mov
xchg
add
je
inc
push
xchg
push
push
dec
cmp
mov
and
loop
adc
je
(bad)  
xchg
dec
fildl
fdivs
repnz
scas
and
lds
sub
mov
adc
test
nop
mov
mov
popf   
subl
cmpsb
pop
pop
mov
jns
fsub
dec
xor
jnp
mov
dec
xchg
cli    
bound
sbb
mov
sbb
pop
pusha  
and
subl
fisttpl
or
xorl
cli    
fildll
jl
(bad)  
jmp
jo
hlt    
incb
cmp
cmpsl
nop
inc
pop
adc
sbb
aas    
push
fwait
out
xor
push
or
mov
lret
jne
lret
test
out
ja
popa   
mov
sbb
imul
sbb
bound
and
mov
mov
add
punpcklbw
inc
jbe
pusha  
cld    
in
and
cs pop
popf   
pushf  
or
push
or
std    
in
(bad)  
adc
out
xchg
push
push
xor
sbb
out
iret   
ror
aam
sub
adc
push
insb
popf   
test
scas
jb
push
xchg
pushf  
outsl
adc
jns
in
popf   
cli    
xchg
mov
jecxz
sahf   
movl
sti    
push
inc
xor
jno
les
add
mov
popf   
test
add
mov
adc
popa   
std    
xchg
lods
movsb
mov
dec
lods
lea
inc
repnz pop
int
pop
or
aad
add
shr
adc
push
jae
loope
fucomi
rol
cli    
inc
dec
and
pop
icebp  
mov
aam
cmp
sbb
inc
sarb
jnp
push
xor
iret   
stc    
leave  
jl
jnp
adc
rcr
aaa    
add
jbe
insl
or
mov
mov
(bad)  
lods
mov
aas    
dec
adc
sbb
mov
roll
mov
rclb
stos
stos
subb
in
adc
adcl
sub
int
int
mov
mov
cmp
dec
fildl
ljmp
fs pusha 
add
pop
sbb
loope
jmp
inc
sub
les
xchg
lods
and
fsts
pop
ret    
or
lahf   
ficoml
scas
jnp
clc    
add
loop
pop
push
cmp
and
leave  
pop
push
pop
lods
aad
cmp
jmp
adc
les
imul
push
movsb
shrl
outsb
push
movl
ljmp
(bad)  
xor
mov
fldl
jo
into   
aam
data16 sub
mov
subl
hlt    
sbb
fdivrl
mov
sub
mov
imul
popa   
aad
fimull
dec
add
sbb
popa   
fistl
mov
pop
xchg
(bad)  
adc
dec
loope
imul
or
mov
adc
and
xor
xor
mov
in
cmp
mov
imulb
dec
inc
test
mov
mov
in
or
jo
push
inc
add
lret
xchg
and
sti    
scas
push
mov
leave  
sbb
mov
pop
mov
in
jne
sub
in
pushf  
jbe
mov
cmp
mov
jmp
adc
ljmp
xor
clc    
xchg
cmp
popf   
insb
jae
push
in
sub
sub
loope
int3   
insl
xchg
sbb
pop
dec
add
adc
and
xchg
xchg
clc    
(bad)  
mov
sub
or
inc
pop
leave  
cs push
(bad)  
push
mov
cmp
cmp
(bad)  
mov
int3   
adc
jle
sbb
push
gs push
sar
(bad)  
or
in
mov
or
dec
popa   
or
mov
jmp
mov
adc
pusha  
xor
jo
cwtl   
flds
add
cwtl   
int3   
xchg
xchg
(bad)  
out
xchg
mov
pop
repz sub
mov
pusha  
pop
rorl
in
and
xchg
sub
or
xor
icebp  
das    
mov
lea
mov
aam
jg
inc
aam
int
fwait
pop
arpl
pop
or
enter
mov
popf   
imul
sbb
jle
mov
add
push
add
outsl
inc
push
cli    
jmp
aam
daa    
pop
ljmp
data16 int3 
inc
or
insl
(bad)  
gs ds mov
mov
sbb
add
mov
dec
and
rolb
(bad)  
fcomps
mov
mov
cmp
in
pop
jns
(bad)  
in
pop
lea
or
das    
in
out
and
(bad)  
mov
les
dec
rcl
mov
inc
xor
cmp
cld    
imul
in
lcall
popa   
neg
(bad)  
(bad)  
jge
push
add
cld    
popf   
popf   
xor
(bad)  
mov
push
xchg
fisubr
cmpsl
fsubrl
jns
out
xchg
cmp
xchg
cmp
rol
daa    
and
xor
fcompl
cld    
and
test
ds push
movsl
adc
sub
mov
into   
add
or
divb
add
sti    
mov
insb
add
scas
gs in
test
or
fucomi
lods
mov
inc
mov
mov
cpuid  
data16 jge
negl
repnz inc
mov
movsb
jl
jge
sub
or
mov
mov
mov
inc
dec
pop
inc
fnstenv
mov
xlat
pop
lds
xchg
and
cmc    
sti    
popl
mov
inc
mov
xchg
jno
or
mov
imul
sbb
sbb
rol
loope
sub
inc
push
mov
lods
mov
and
or
std    
lods
rolb
mov
inc
call
test
jle
mov
xchg
test
xchg
aam
mov
dec
arpl
out
jb
ljmp
sub
out
dec
mov
dec
mov
push
cmc    
movsl
ja
mov
sahf   
ret
sub
sbb
push
mov
push
sub
or
int
add
lret
subl
and
dec
push
sahf   
popf   
pop
rcl
xchg
mov
mov
pop
sub
je
inc
aas    
(bad)  
ljmp
rcrl
lock outsl
je
sub
roll
adc
popf   
cmp
in
icebp  
adc
pop
push
cmp
xor
shr
lods
sbbb
push
mov
bound
(bad)  
ja
jge
mov
cmc    
mov
add
popf   
mov
dec
jecxz
mov
adc
out
scas
in
cmp
push
leave  
(bad)  {%k5}
aam
and
bnd ret 
fdivr
push
mov
push
mull
ds mov
outsb
push
imul
fimul
ljmp
fldenv
cld    
mov
imull
add
stos
cmpsl
ss push
cs push
fidiv
mov
sbb
sub
out
inc
fstps
xchg
insb
jmp
xchg
fcomi
mov
fs cmc 
enter
ds mov
pop
sbb
dec
pop
and
mov
mov
mov
into   
bound
div
gs iret 
mov
xchg
loope
movsl
in
xor
mov
(bad)  
iret   
test
or
jge
xor
cmp
lods
(bad)  {%k5}
out
jne
dec
jo
movsb
push
lret
gs mov
aad
insl
pop
jecxz
pop
pop
enter
xor
sbb
push
inc
sub
movsl
pop
cmp
inc
not
pop
pop
aad
pop
icebp  
mov
mov
loopne
cmp
pushf  
push
out
jmp
adc
(bad)
(bad)  
int3   
imul
mov
out
ja
sti    
out
into   
inc
or
or
in
mov
cmp
aaa    
jne
popa   
cmp
pop
cmpsb
mov
add
pop
jp
inc
jge
bound
xchg
push
xchg
inc
dec
loopne
sahf   
xor
cmp
push
sbb
adc
sbb
pop
adc
jnp
data16 mov
inc
enter
lret
mov
std    
sbb
popf   
jmp
fadds
mov
jge
frstor
lods
mov
into   
dec
mov
lahf   
sub
js
xchg
aaa    
cli    
test
jns
das    
dec
and
dec
test
xchg
in
cmpl
lds
ror
pop
pusha  
push
lea
adc
mov
pop
mov
das    
or
enter
inc
mov
adc
fldt
mov
push
mov
aas    
shrl
sub
xlat
fistpl
addb
sahf   
cmpsb
insb
sub
arpl
xchg
pop
stc    
sbb
pushf  
adc
lret   
xor
imul
lds
add
fdivrs
xchg
pop
xor
cwtl   
push
adc
mov
jle
fiadd
sbb
jl
movsb
outsb
cmp
push
push
mov
mov
dec
xchg
mov
pushf  
shlb
sbb
aaa    
pop
inc
jbe
xchg
push
aaa    
adc
inc
jge
push
es cld 
scas
pop
je
shll
movb
xor
shrb
aaa    
cwtl   
stos
sbb
sub
aad
jge
pushf  
rorb
mov
mov
adc
ljmp
cmp
lea
sahf   
dec
add
inc
outsb
pop
icebp  
pop
sbb
mov
or
int
pop
aam
jle
jns
sub
std    
jp
(bad)  
adc
sti    
lcall
cs lret 
popa   
adc
xor
add
mov
sahf   
adc
dec
sub
std    
mov
push
daa    
inc
arpl
sub
dec
and
sti    
rcrl
pop
ja
sbbl
dec
xor
mov
mov
push
sbbb
int3   
mov
shr
incb
lret
xor
pop
jp
lods
push
fiaddl
(bad)  
cli    
and
fimul
scas
mov
mov
pop
inc
dec
add
xchg
daa    
fcoms
pop
add
insb
xor
out
and
shl
cmp
push
jb
ljmp
sbb
cltd   
xor
xor
add
inc
incl
ja
pop
sub
xlat
rol
test
pop
mov
and
mov
add
inc
cld    
(bad)  
aaa    
mov
popa   
push
and
mov
sub
dec
and
sbb
jns
add
call
pushf  
lea
(bad)  
jno
dec
cmp
flds
imul
inc
pop
addl
mov
inc
xchg
dec
mov
imul
pop
xchg
cli    
add
pop
pop
fxch
in
xlat
sub
add
dec
(bad)  
and
pop
pop
add
pop
test
(bad)  
mov
or
jno,pn
imull
and
fs add
jns
(bad)  
je
and
stos
xchg
add
pop
jno
dec
jne
dec
and
xchg
arpl
ds pop
ljmp
dec
(bad)  
ret    
xor
jge
xchg
pop
sbb
push
mov
nop
loopne
xchg
popa   
push
loopne
xchg
ret    
cmp
(bad)  
(bad)  
jo
mov
and
sub
sbbb
pop
mov
int3   
aad
cmp
dec
cmpsb
cmpsl
fs push
sub
mov
xchg
or
mov
sub
mov
dec
stos
jbe
push
(bad)  
or
xchg
insl
in
push
pop
dec
enter
jae,pt
lahf   
mov
jmp
in
xor
lock or
in
xchg
xor
and
cmp
push
xlat
jmp
sahf   
jne
fsubs
mov
add
ljmp
mov
inc
or
inc
sti    
push
add
sub
mov
xchg
test
mov
mull
and
icebp  
push
imull
(bad)  
sub
adc
in
cwtl   
mov
lahf   
inc
mov
cli    
and
into   
or
dec
stos
cmp
add
adc
pusha  
leave  
pop
jbe,pt
dec
in
jmp
jo
adc
dec
cmp
pop
addr16 out
outsl
subb
fcompp 
mov
jle
out
mov
jne
mov
imul
repnz mov
das    
mov
loopne
push
dec
or
mov
jnp
adc
xchg
(bad)  
cmp
mov
imul
or
sar
lret   
enter
fwait
(bad)  
testl
adc
cmp
loopne
pop
push
int3   
xchg
ret
add
decb
outsl
movsb
lcall
pop
test
xor
pop
or
dec
sub
or
nop
(bad)  {%k5}
cmc    
add
pop
sub
inc
pushf  
dec
adc
pop
push
jge
insl
repnz pop
xor
ljmp
jno
push
lods
popf   
lods
push
inc
in
outsb
insl
loop
test
xchg
in
mov
pop
lcall
icebp  
imulb
cmc    
inc
mov
cmp
adc
dec
sbb
sub
xor
call
xor
scas
dec
or
jp
push
movsb
xchg
aam
cltd   
cli    
jp
jmp
mov
in
daa    
sub
adc
cs ret
in
loop
int
arpl
mov
push
dec
push
ret    
ja
stos
add
cli    
mov
shrl
pop
mov
add
xchg
pop
inc
enter
mov
(bad)
js
xor
or
adc
lahf   
orl
out
adcl
movsb
or
add
(bad)  
out
inc
or
into   
mov
popf   
jns
mov
popa   
int
jo
movsl
sarl
push
or
mov
push
enter
inc
sti    
gs call
pop
(bad)  
jecxz
in
sbb
jl
cltd   
test
es out
and
jne
sub
adc
pop
jl
or
jo
ss ss
mov
sub
push
push
jb
jg
je
xchg
push
fildl
iret   
xchg
insl
cwtl   
test
pop
dec
imul
ja
mov
add
lock jbe
mov
xor
pop
and
sbb
jmp
mov
test
mov
aas    
pop
add
pushf  
out
cltd   
cltd   
mov
mov
xchg
mov
loop
fs loopne
xor
loop
mov
rcl
movsb
lods
pop
ja
mov
adc
dec
std    
xchg
cmpsb
dec
(bad)  
dec
xor
mov
xlat
insl
call
in
cmp
inc
cwtl   
push
sub
push
ja
push
out
sbb
lea
pop
sar
mov
and
dec
mov
dec
jnp
inc
scas
jge
dec
pop
repnz xchg
(bad)  
mov
mov
insl
mov
pop
mov
push
(bad)  
test
jl
add
popf   
jno
pop
mov
addr16 dec
sbb
xchg
fs test
mov
mov
mov
movsl
mov
mov
add
lds
enter
pop
sbb
inc
or
shr
ret    
inc
je
and
movsb
int3   
fldenv
and
test
orl
dec
pusha  
sub
je
mov
repz jmp
call
data16
int3   
xor
mov
jge
popf   
daa    
in
cmpl
rclb
push
mov
clc    
mov
mov
dec
hlt    
push
fldt
push
cmp
push
pop
xor
out
mov
xchg
imul
insl
shlb
cmp
pusha  
mov
outsb
sub
ret
push
daa    
addr16 jbe
popf   
cmc    
js
not
xchg
push
rep insb
fdivl
arpl
(bad)  
mov
sti    
rolb
cs idiv
jmp
pop
aad
ljmp
mov
mov
roll
mov
jge
jb
enter
fucomip
xchg
dec
mov
or
adc
sahf   
add
movsl
outsb
scas
mov
movsb
stos
inc
dec
into   
ss cmp
mov
lret
inc
out
mov
jo
insb
mov
cwtl   
jecxz
loop
cmp
out
divb
test
out
int3   
inc
fsubs
das    
mov
(bad)  
xchg
adc
(bad)
stos
out
dec
outsl
jnp
lea
(bad)  
fisubrl
mov
mov
out
dec
cmpsb
(bad)  
xor
outsb
in
test
xor
dec
sub
cmpsl
sbb
stc    
cmpsb
pop
mov
xor
sub
pop
(bad)  
fcom
or
inc
push
ror
or
sahf   
jg
cmp
lcall
xor
push
add
aad
sbb
sub
inc
cmp
(bad)  
xor
in
sti    
jae
pushf  
(bad)  
cld    
pop
mov
mov
nop
or
lea
cwtl   
lock and
cs adc
data16 jl
push
cmp
negb
aad
push
push
aas    
sub
push
mov
dec
fildll
test
or
shll
out
inc
(bad)  
mov
outsb
mov
fcmovu
into   
mov
lret
push
arpl
adc
(bad)  
lock out
arpl
ds pop
mov
insb
repnz insb
xchg
std    
push
cld    
xor
stc    
(bad)  
testb
ljmp
outsb
mov
and
les
sub
sbb
mov
xchg
stos
fs cltd 
or
cltd   
test
cltd   
cs mov
mov
test
ret    
fbld
xlat
in
add
pop
mov
add
pshufw
fadds
fnop   
xchg
xlat
jne
push
scas
pop
daa    
leave  
xchg
pop
daa    
lahf   
repnz lea
imul
jge
and
sbb
jns
iret   
and
jbe
push
cmp
imul
int
cmp
cmpsl
add
mov
bound
or
call
ja
lods
pop
ds pop
cmpsl
mov
(bad)  
loope
adc
in
lods
call
mov
mov
insb
imul
adc
(bad)
int
mov
push
jbe
aas    
add
(bad)  
mov
lea
stc    
add
inc
and
rclb
xchg
dec
push
jnp
fs scas
pop
or
popa   
outsb
icebp  
inc
pop
and
pusha  
aaa    
sub
repz fildll
mov
add
xor
in
mov
jl
mov
cmp
xchg
loope
sbb
scas
sbb
stos
fistp
stc    
movsl
dec
xor
xor
shlb
mov
(bad)  {%k5}
fsub
xchg
cmp
enter
in
fsubl
add
(bad)  
das    
lret   
jno
fimul
mov
imul
and
(bad)  
push
loope
pushf  
mov
cmp
mov
adc
adc
jl
push
insl
xchg
rcll
pop
push
outsb
jne
clc    
adc
leave  
sbb
push
stc    
or
lret
mov
adc
notl
mov
ljmp
pop
scas
adc
mov
adc
lret   
sub
dec
fimul
sbb
add
mov
fidivl
push
push
imul
add
and
popa   
push
mov
fsub
popa   
xor
in
push
sbb
jbe
pop
sbb
stos
shrl
pop
ffreep
push
cmp
cmp
cmp
scas
mov
push
push
sarl
mov
push
es cmp
mov
lods
xchg
mov
mov
dec
adc
popf   
pop
dec
(bad)  
cmpsl
or
push
adc
or
movsl
fdivrl
mov
inc
pop
cmp
movsb
adc
mov
fstpl
movsl
hlt    
or
ret    
sub
push
cs call
or
dec
in
lds
jl
sbb
xchg
movsb
xlat
mov
insb
das    
jne
pop
push
and
pop
les
push
scas
inc
mov
adc
cmp
orl
mov
fsubr
mov
mov
lret   
push
sbb
jb
aaa    
and
dec
fldenv
lods
sub
fisubr
sbb
xchg
jb
loop
(bad)  
sti    
pop
int3   
mov
in
mov
pop
lea
sub
imul
outsl
mov
out
add
mov
das    
push
and
das    
out
cmp
push
add
push
aaa    
xchg
sbb
mov
aam
repz test
mov
jns
sti    
inc
hlt    
and
(bad)  {%k5}
fldl
loopne
mov
rol
cmp
xchg
mov
jecxz
outsb
ss jbe
nop
jecxz
adc
dec
jns
fsub
les
mov
in
sbb
xor
jmp
jg
mov
jmp
test
test
pushf  
jmp
pushf  
(bad)  
cmp
hlt    
(bad)  
push
imul
xor
sbb
je
dec
dec
jmp
pop
adc
cmp
ret
int
push
xchg
cltd   
xchg
inc
cmpsl
xchg
mov
sbb
fldenv
stos
cmp
fdivs
enter
cmp
bound
mov
sbb
out
and
sbbl
push
(bad)  
cmc    
dec
or
dec
mov
add
adc
test
xor
mov
fwait
rcr
pop
insb
mov
imul
movsl
sub
push
int
out
out
cwtl   
jmp
call
sbb
xor
adc
(bad)  
pop
mov
gs fs nop
cltd   
or
sub
in
adc
add
add
cmc    
and
push
push
fwait
push
add
adc
lods
pop
test
add
fs xchg
adc
mov
push
daa    
ret    
sub
add
ds mov
lea
ficomp
push
fcmovnbe
mov
xor
pop
mov
pop
xchg
fildll
add
pop
fisubrl
out
pop
aam
cli    
mov
loope
loope
pop
cmp
or
mov
push
dec
mov
out
push
pop
cmpsb
(bad)  
fs jae
repnz enter
mov
fcomi
inc
jns
xor
adc
fistpl
add
notl
xchg
xlat
mov
xor
pavgb
enter
cmp
icebp  
dec
xor
push
inc
add
sub
xor
leave  
icebp  
jae
xchg
js
mov
mov
in
cwtl   
push
sbb
push
mov
out
pop
out
scas
das    
push
ljmp
xor
fadds
sbb
dec
pop
dec
jmp
stos
jae
cmp
and
and
adc
mov
sbb
jecxz
mov
ja
sbb
in
cmp
test
jns
sbb
pop
hlt    
cwtl   
mov
jo
dec
stos
pop
mov
bound
cmpl
push
(bad)  
pop
xchg
(bad)  
or
mov
(bad)
pop
push
jmp
in
sahf   
fiaddl
adc
push
pop
stc    
add
and
cli    
out
mov
stos
test
sub
(bad)  
int3   
sbb
je
sbb
mov
mov
ficomp
int3   
aad
rcrl
insb
sbbb
aad
dec
sbb
rcrb
mov
mov
jmp
adc
cli    
pop
and
fs pop
jmp
in
popa   
xor
push
cmp
xchg
push
add
int3   
push
cmc    
imul
jb
xor
punpckhdq
mov
jae
loop
prefetch
add
iret   
movsl
mov
enter
aam
jmp
in
fst
pusha  
(bad)  
cmp
xor
xchg
(bad)
push
xor
aad
jecxz
mov
scas
ljmp
les
rolb
mov
sbb
add
inc
add
cmpsb
jp
dec
or
adc
add
outsl
(bad)  
xor
imul
add
(bad)  
fcomps
pop
xor
mov
rclb
ja
test
cmp
xor
insl
daa    
pusha  
idiv
inc
icebp  
ss lret
jbe
dec
stc    
cld    
mov
fdivrl
std    
jle
push
ret    
mov
add
ret    
sbb
mov
sar
xchg
pop
movsl
cmpsb
cmc    
xor
out
mov
jne
(bad)  
lea
cmp
mov
out
mov
pop
lahf   
loop
inc
test
pop
push
(bad)  
ficompl
ljmp
sahf   
pop
lods
leave  
fsubp
mov
mov
mov
fmuls
cmp
jp
mov
jmp
fimull
int3   
adc
lods
nop
mov
xor
pop
or
fwait
dec
mov
sar
jmp
adc
add
mov
pop
mov
inc
in
cmp
lea
outsl
out
dec
or
mov
scas
iret   
cmp
(bad)  
xchg
pushf  
(bad)  
sbb
sub
(bad)  
mov
rorb
(bad)  
pop
es add
lea
(bad)  
mov
or
add
ss xor
sbb
xor
lea
outsb
mov
push
add
inc
dec
rorb
stc    
mov
mov
loop
pop
mov
adc
in
push
mov
xor
sarl
adc
out
cld    
mov
inc
push
jo
in
pushf  
mov
pop
andl
xchg
fisubl
aam
sbb
test
adc
jno
xchg
imul
inc
jmp
dec
out
add
jg
andl
cs or
mov
data16 mov
xchg
(bad)  
mov
push
add
add
add
cltd   
adc
pop
test
roll
bts
fiaddl
sbb
mov
inc
rclb
inc
jne
mov
sbb
rep movsb
aaa    
bound
lods
mov
push
cmp
ss das 
in
cltd   
push
bound
lods
rolb
cs fcmove
sbb
dec
cltd   
jl
or
and
adc
inc
mov
daa    
fsubs
popf   
xchg
dec
lahf   
xor
int
popf   
add
and
sti    
adc
into   
xchg
dec
sub
out
out
and
xchg
(bad)  
ds push
out
in
push
cli    
jl
mov
jmp
dec
rcrb
fwait
push
es mov
adc
jae
(bad)  
stos
push
out
jp
push
mov
mov
adc
test
stos
sub
jmp
hlt    
mov
mov
fisttp
in
sbb
out
(bad)  
rcl
cmp
(bad)  
ss pop
push
or
add
hlt    
stos
cld    
sbb
mov
push
lds
inc
xor
pop
xchg
cltd   
imul
movsb
inc
and
sbb
aad
add
mov
imul
dec
pop
mov
jecxz
cmp
fisubl
mov
cs pop
mov
add
jl
pop
push
add
iret   
out
inc
push
sbb
push
pop
enter
adc
out
add
add
push
aas    
int
fistp
xchg
(bad)  
mov
fsubs
push
sbb
pop
mov
sub
jp
dec
mov
dec
or
sub
je
(bad)  
jmp
ret
or
push
ss clc 
insb
mov
cmc    
or
dec
test
cmp
pusha  
fadds
push
push
sbb
cltd   
stc    
xchg
fistpll
leave  
xor
jmp
arpl
and
ja
int
lods
bound
fs sub
(bad)  
sbb
xlat
mov
rorb
sbb
dec
adc
int3   
shll
lret
ss jp
pop
cmpsl
push
sbb
xchg
int3   
jnp
test
je
inc
lret
loop
fwait
notb
push
xchg
cs mov
jno
(bad)  
in
sub
(bad)  
or
(bad)  
out
and
insb
ljmp
jge
sub
les
outsb
cmp
cmpsl
xchg
pop
out
(bad)
data16 jg
mov
sub
cmpsb
xchg
(bad)  
ljmp
lcall
dec
and
lcall
mov
mov
adc
iret   
rcl
insb
mov
cwtl   
pop
dec
lds
stos
inc
int3   
ror
jmp
movsl
dec
dec
add
es popa 
inc
add
mov
testb
pop
sahf   
(bad)  {%k5}
std    
adc
popa   
(bad)  
sub
enter
inc
(bad)  
fdivrs
add
sbb
loop
idiv
mov
inc
lret
ret    
jl
jl
cmpsb
cwtl   
addr16 hlt 
je
xor
pop
mov
shlb
sbbl
mov
xchg
push
cmp
nop
lret   
or
stos
aaa    
add
or
(bad)  
cltd   
xchg
mov
out
test
mov
jns
fldl
cmpsb
adc
cmp
cmp
icebp  
add
paddw
sub
cmp
mov
es int3 
jl
xlat
jle
pop
xor
or
jne
inc
scas
push
call
mov
popa   
jge
leave  
mov
test
mov
xchg
or
jp
xchg
xor
jb
imul
sbb
add
pop
mov
sbb
movsb
adc
pushf  
fsub
jo
aas    
pop
lret   
testb
sbb
test
push
dec
jmp
stos
mov
sbb
cmp
inc
lar
std    
bound
sub
stc    
mov
and
lret
scas
imul
jg
mov
lcall
sbb
into   
sarl
in
xchg
lahf   
push
fiaddl
xchg
leave  
arpl
sub
push
or
or
xor
sbb
xlat
xor
ljmp
into   
inc
mov
pop
cmp
aas    
mov
jge
xor
pop
inc
fwait
pushf  
dec
into   
test
subl
mov
cltd   
int
mov
pop
stc    
enter
jg
mov
pop
cli    
andb
mov
js
or
add
les
int3   
push
addr16 lcall
stos
iret   
and
enter
rclb
xchg
jb
pop
das    
ja
xchg
or
xor
testl
dec
pop
inc
(bad)  
xor
pushf  
mov
jbe
scas
cmp
mov
ljmp
test
sub
and
push
cld    
movsb
adc
icebp  
xchg
int
loopne
ret    
ss int
sti    
iret   
push
inc
and
pop
cmpsb
lods
and
(bad)  
xor
xchg
xchg
iret   
cmp
jno
mov
insl
xchg
cmp
leave  
xlat
or
dec
sti    
call
mov
mov
xchg
lret   
lods
cwtl   
insl
movsb
and
sbb
dec
xor
mov
in
pop
sbb
ja
lret   
repz rorl
jne
xchg
inc
cmpsl
mov
das    
mov
mov
and
jbe
push
or
fs push
(bad)  
lea
enter
scas
outsb
(bad)
push
mov
xlat
push
std    
scas
lds
pop
sahf   
jns
sti    
loopne
xor
shl
dec
inc
sub
mov
mov
inc
(bad)  
jno
mov
and
outsl
mov
mov
cld    
lds
dec
inc
mov
pop
aas    
xor
cmp
(bad)  
call
add
jb
pop
mov
xor
fist
jbe
sbb
sbb
push
outsl
mov
ficomp
andb
(bad)  
sbb
dec
xor
inc
mov
sar
inc
push
sahf   
or
pop
call
outsl
sub
cmpsb
stc    
jecxz
leave  
mov
mov
mov
cs mov
test
xchg
add
testb
ds push
adc
mov
repz dec
mov
mov
je
cmc    
(bad)  
mov
lret   
notb
call
out
sub
jg
lret   
push
push
cmp
iret   
movsl
push
or
fidivl
repnz stos
data16 and
mov
addr16 mov
lods
lret   
jae
cs inc
nop
jne
dec
mov
lock scas
sbb
ss aam
ret
fcomi
sbb
stos
lds
mov
je
lock or
or
mov
(bad)  
cmpsb
mov
aaa    
sarb
mov
jecxz
or
cmpsl
sarl
push
cmp
daa    
cmp
enter
jle
jo
mov
outsb
pop
int3   
mov
mov
dec
xor
movd
loop
outsb
pop
sub
stos
mov
nop
lcall
add
add
mov
cmp
xchg
inc
lods
xchg
and
adc
fidivrl
scas
clc    
xlat
fwait
mov
sub
pop
ret
pop
js
mov
gs mov
mov
mov
xor
mov
sub
dec
mov
insb
shll
dec
mov
adc
sbb
cmpsb
ja
add
loope
out
fwait
test
xchg
cmp
outsb
and
cmp
add
xor
sbb
nop
(bad)  
imul
cmp
cmp
into   
rorb
push
outsb
lods
pop
cwtl   
rcrb
sub
adc
inc
sti    
inc
and
mov
nop
scas
push
cli    
popl
sti    
sbb
pushf  
bound
dec
vmovsd
adc
scas
sti    
repnz xlat
xchg
xchg
fdivrl
sarb
adc
pop
pop
(bad)  
jge
pop
and
cld    
in
adc
std    
mov
popa   
cs insl
lock ja
cmpb
movsb
sub
ds push
sbb
lea
xchg
sbb
pop
cmp
sub
imul
mov
lcall
ds out
iret   
adc
add
ja
sub
or
in
lea
adc
leave  
out
fnstsw
lcall
es jae
inc
mov
out
add
or
mov
xchg
dec
mov
test
sub
pushf  
ljmp
cld    
xor
lret   
or
push
sub
mov
and
fnstcw
movl
dec
sbbb
lods
lds
or
(bad)  
scas
dec
mov
add
ja
push
push
push
sub
inc
int3   
test
sub
arpl
inc
outsb
scas
add
fistpl
or
dec
mov
sub
popf   
mov
inc
jno
sbb
(bad)  
fcoml
daa    
inc
cmp
in
(bad)  
ljmp
xchg
movsl
test
inc
sbb
mov
mov
xchg
cmc    
mov
push
jns
jg
outsl
enter
cwtl   
jb
(bad)  
sbb
mov
ljmp
dec
and
jbe
mov
adc
daa    
mov
sti    
stc    
xor
ficompl
pop
pop
outsl
ja
inc
adc
into   
add
leave  
or
jge
scas
(bad)  
andb
sub
xchg
sbb
dec
icebp  
push
enter
jne
jg
mov
push
sbb
dec
xlat
sub
inc
jno
mov
cmpl
xchg
jno
mov
mov
insb
lods
push
decl
fldenv
mov
and
xchg
addr16 test
frstor
aad
mov
(bad)  
insb
xchg
add
xchg
lea
outsl
pop
sbb
popf   
xchg
xchg
call
(bad)  
jne
inc
dec
push
dec
dec
mov
fnstsw
jnp
mov
cli    
pop
push
scas
clc    
repz lea
ret    
pop
shrl
inc
mov
sub
(bad)  
xor
addl
jge
lahf   
mov
mov
cmp
js
(bad)
cltd   
pop
jns
inc
ja
push
sbb
loopne
nop
dec
push
dec
push
pop
inc
sub
add
pop
xor
mov
fwait
test
into   
(bad)  {%k5}
out
cmp
call
dec
xchg
lods
push
and
arpl
add
aaa    
rcll
jbe
mov
(bad)  
mov
int3   
or
imul
ret    
test
add
lea
mov
push
inc
loopew
rcrb
mov
dec
lcall
sub
push
cmp
frstor
insl
adc
fnstenv
int3   
cli    
jnp
add
incl
dec
mov
fucomi
cmp
xchg
(bad)  
xlat
mov
data16
dec
rcrl
inc
and
sbb
xchg
ret    
push
and
fimul
cmpsl
and
shrb
sub
iret   
inc
xchg
jb
adc
and
movsl
mov
push
roll
lret   
pop
popa   
mov
icebp  
in
mov
add
pop
test
cmp
es cmp
mov
aas    
cli    
dec
cmp
(bad)  
loopne
mov
mull
push
call
cmpsb
dec
xor
stos
iret   
stos
popa   
out
int
sub
jle
add
imul
roll
nop
scas
inc
pop
add
lahf   
jl
mov
out
mov
xchg
ss or
or
or
mov
js
cltd   
ror
sbb
and
mov
das    
cld    
push
sbb
pop
mov
jae
in
imul
pop
insb
inc
sbb
pop
or
aas    
push
sub
js
push
divl
sub
fmul
pop
pusha  
jle
mov
mov
sub
sub
loope
mov
cltd   
int3   
xor
(bad)
xchg
dec
cmp
push
add
cmpsl
sahf   
adc
pop
inc
lea
bnd jno
int
into   
sub
or
js
add
(bad)  
or
sub
add
push
mov
lahf   
push
mov
push
notl
(bad)  
ss jae
(bad)  
cmc    
jecxz
sub
ljmp
xlat
mov
adc
arpl
(bad)  
je
jne
pop
adc
rorl
(bad)  
in
xchg
dec
adc
outsl
popa   
mov
stos
mov
and
or
enter
pop
cs
push
out
lret
push
insb
adc
push
aas    
repnz mov
mov
jbe
call
insl
loope
inc
pop
pop
pusha  
out
inc
into   
jl
xor
jecxz
jbe
add
cmpsl
adc
popf   
(bad)  
mov
stc    
adc
lods
pop
jne
add
(bad)  
andl
mov
mov
daa    
ds cld 
mov
rorb
int
or
sbb
push
rclb
(bad)  
cmp
(bad)  {%k3}
test
inc
out
dec
stc    
or
jge
mov
add
push
aad
or
popa   
inc
(bad)  
icebp  
push
mov
(bad)  
inc
scas
iret   
shrl
cmp
sub
inc
iret   
cmpb
push
xchg
dec
std    
popa   
push
sbb
pop
adc
das    
push
fisttpll
lds
movsl
lcall
jns
(bad)  
popf   
cmp
in
pop
loop
adc
fucomi
pop
popa   
jmp
dec
xchg
repnz icebp 
popa   
jge
jae
stos
dec
push
lock in
pop
jo
fidivrl
cmp
fnstenv
pop
roll
push
add
push
xor
and
mov
mov
cmp
fcompl
imul
std    
rolb
dec
sub
mov
mov
ret
inc
push
or
int3   
scas
mov
fwait
js
in
addr16 clc 
movb
mov
in
jp
shrl
xchg
fidiv
sti    
sti    
mov
xchg
cmp
test
fdivs
test
jo
pop
pusha  
shlb
mov
sub
imul
repz jns
mov
dec
mov
outsb
add
sahf   
pop
in
movsb
out
jbe
(bad)  
into   
gs
outsb
das    
pop
fist
in
jecxz
rolb
mov
js
shl
and
jb
mov
push
xor
incl
std    
insl
test
lods
mov
stos
mov
test
sub
add
test
inc
sub
mov
and
sbb
daa    
push
enter
sbb
popa   
(bad)  
das    
pop
dec
or
(bad)  
insb
lods
lahf   
xchg
or
xchg
dec
mov
in
(bad)  
add
mov
out
(bad)  
clc    
int3   
test
testl
push
mov
popa   
pop
xor
sub
inc
pop
cmp
sbb
les
cltd   
popf   
and
mov
fnstenv
pushl
mov
or
rcr
(bad)
cmp
(bad)  
xor
push
push
test
(bad)  
or
loopne
push
dec
ljmp
adc
add
inc
scas
(bad)  
pop
push
or
pushf  
or
mov
dec
inc
inc
ds lcall
dec
sahf   
mov
xor
pop
and
(bad)  
mov
jns
ss adc
test
xchg
gs insb
add
add
dec
inc
dec
inc
scas
inc
pusha  
(bad)  
or
add
add
(bad)  
(bad)  
(bad)  
incl
add
add
add
add
add
add
jns
je
insl
cs inc
jb
ja
outsb
addr16 sub
push
gs jb
imul
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
xor
data16 aaa 
xor
fs xor
add
adc
gs insl
cs inc
jb
ja
outsb
addr16 cs inc
imul
add
popa   
je
pop
add
add
add
add
add
lsl
add
jno
add
add
or
or
add
or
add
add
add
dec
or
add
add
(bad)  
and
add
add
inc
dec
inc
add
mov
or
popa   
add
jo
pop
jae
add
ret    
add
push
ret    
add
outsl
test
add
cmp
push
push
test
lahf   
sbb
dec
test
xchg
mov
or
jnp
loop
nop
aaa    
shrl
jbe
popa   
outsl
into   
stos
outsl
popf   
repnz cmc 
xchg
jmp
push
add
aam
loopne
movsl
jb
push
jae
test
pop
jbe
jge
jbe
movsb
sub
into   
out
mov
das    
xor
call
lock std 
sti    
(bad)  
out
jecxz
or
jp
ljmp
jmp
adc
push
xchg
outsb
int
push
mov
je
and
mov
adc
cmp
lret   
jmp
or
sbb
lret
sarl
fidivrl
out
imul
arpl
jl
insl
repz es mov
and
cmp
in
roll
sbb
jae
push
int3   
out
sbbl
ljmp
pusha  
mov
xchg
sti    
cwtl   
pop
insb
mul
sbb
cli    
cmpl
inc
icebp  
fistl
popf   
inc
adc
std    
ljmp
je
mov
ret    
adc
inc
cmpsl
mov
aas    
xchg
ret    
pop
pop
pop
sub
cmpsb
test
imul
movsl
xchg
ds
jle
add
inc
cmovo
mov
(bad)  
jne
and
mov
cmp
ljmp
push
inc
imul
xchg
push
dec
push
fnstsw
jne
lret   
(bad)  
repz
imul
cli    
cmp
test
add
insb
pop
cwtl   
inc
jl
add
or
into   
jecxz
(bad)  
xor
ror
(bad)  
pop
neg
add
pusha  
mov
xor
aam
loopne
int
mov
insl
xchg
fbstp
mov
(bad)  
mov
loope
imul
jne
jmp
scas
add
jbe
sahf   
jl
bound
pop
inc
rcrl
ljmp
(bad)  
xchg
repz push
mov
cmp
repnz sub
mov
clc    
pop
mov
xor
nop
into   
inc
add
shr
loop
popf   
(bad)  
mov
ret    
push
cmp
or
jns
push
mov
adc
adc
(bad)  
js
enter
jbe
add
push
fidivrl
icebp  
push
repz and
mov
mov
sbb
mov
mov
mov
adc
gs push
mov
pushf  
pmaxsw
push
jns
and
pop
into   
or
mov
add
mov
inc
mov
jg
or
out
mov
push
push
sbb
push
jg
add
pop
mov
push
xor
push
das    
mov
popa   
lahf   
repnz sbb
jb
shl
pop
in
mov
fsubr
sbb
lock sub
popf   
(bad)  
repz mov
jge
pop
lcall
xchg
insl
mov
fdivr
stc    
lods
adc
sub
leavew 
icebp  
mov
mov
cmp
inc
mov
dec
push
sub
addr16
mov
cmp
(bad)
iret   
push
stos
xchg
or
(bad)  
jo
push
inc
mov
add
xlat
out
bound
cmp
jl
push
test
or
(bad)  {z}
js
jb
xchg
(bad)  
dec
inc
dec
outsb
sahf   
cs aas 
repz int3 
scas
push
pop
lods
cld    
cmp
inc
inc
out
fwait
imul
test
mov
push
add
cmc    
push
(bad)  
scas
fstpl
ret    
push
mov
jbe
or
andb
outsb
test
leave  
test
add
repnz cmp
jb
adc
cmc    
(bad)  
into   
fisttpl
mov
inc
ljmp
movsl
pop
inc
ret
and
xchg
push
out
stos
mov
out
loopne
mov
cmp
je
adc
(bad)  
xchg
mov
pusha  
mov
and
push
push
lahf   
(bad)  
push
cld    
insb
push
nop
adc
jo
sub
(bad)  {z}
ljmp
push
hlt    
lahf   
cmpsb
je
or
scas
int3   
xchg
mov
mov
and
fsubs
and
(bad)
xchg
pop
jb
jnp
sbb
out
arpl
mov
ss pop
mov
pop
sbb
jmp
pop
outsb
pushf  
into   
incl
push
popf   
test
fwait
loop
mov
das    
gs pop
enter
xor
or
jae
mov
inc
dec
mov
and
cmpsl
loop
dec
or
repnz cmpsb
or
mov
lret   
push
push
sti    
or
jno
(bad)  
es push
repz add
mov
outsb
jno
xchg
enter
mov
(bad)  
xchg
xchg
or
jle
cmp
repz push
lcall
(bad)  
jae
pusha  
fwait
jb
inc
xchg
xor
add
pop
mov
pop
nop
mov
inc
fs stos
movsl
icebp  
mov
movzwl
xlat
dec
pop
mov
xlat
inc
lret
push
mov
lods
fcmove
loop
mov
popw
(bad)  
fcomps
out
cmovne
jl
sub
jmp
xchg
xor
ret    
adcl
push
mov
inc
add
add
pop
dec
cmp
mov
mov
ja
dec
adcl
dec
das    
lods
mov
push
imul
inc
sub
jb
push
mov
cmc    
cmp
dec
stos
cmpsl
xchg
fisubrl
mov
iret   
enter
cmc    
sbb
les
int
xchg
or
adc
cmp
lcall
ret
sub
mov
sbb
out
jnp
lds
fwait
add
add
xlat
loope
mov
popf   
(bad)  
cmp
bnd js
dec
push
popa   
repz mov
je
adc
mov
cwtl   
(bad)  
movsb
push
jo
or
xchg
aas    
lahf   
ja
popa   
sub
mov
inc
addr16 pop
fdivrp
sbb
test
(bad)  
mov
push
dec
fidivr
jnp
mov
adc
pop
xchg
fwait
ds gs add
pop
scas
sbb
mov
ficomp
sbb
push
in
stos
pop
or
jg
mov
shl
lock
int
and
(bad)  
shlb
movsl
jl
je
arpl
mov
addr16 and
rcpps
jg
movsb
xor
inc
ficompl
std    
mov
(bad)  
jecxz
pop
mov
jne
out
mov
jle
pop
pusha  
ljmp
dec
cld    
add
aam
push
(bad)  
xor
fbld
xlat
ds pop
(bad)  
in
mov
xchg
pop
inc
lds
negl
mov
icebp  
xchg
(bad)  
movsb
and
xchg
scas
add
sbb
xlat
xchg
popf   
push
sbb
mov
inc
pop
pop
jno
imul
pop
outsb
mov
push
stc    
imul
mov
mov
out
push
mov
ss push
dec
ja
xchg
fcompl
inc
fbstp
jg
or
xor
lcall
push
mov
add
movb
dec
cltd   
cmpb
mov
xor
dec
mov
mov
test
xor
mov
pusha  
xor
fisttp
cmp
jle
pop
mov
and
std    
gs hlt 
push
leave  
in
div
jl
iret   
fcomip
jbe
push
gs inc
cmp
(bad)  
mov
mov
hlt    
insl
fs cmp
pop
(bad)  {z}
lds
lods
pop
hlt    
ret    
sub
bound
pop
fildll
xor
popf   
mov
mov
or
mov
(bad)  
xchg
(bad)  
cli    
sub
cmp
inc
pop
mov
iret   
xchg
xchg
xor
out
jecxz
imul
out
adc
notl
mov
add
pushf  
sti    
lret
or
xchg
(bad)  
mov
jb
pop
mov
imul
or
add
or
test
jae
int
push
or
sub
dec
fsubrs
xor
(bad)  
xchg
in
in
(bad)  
pop
jno
lahf   
pop
lea
push
lret   
pop
stos
xor
push
mov
in
loope
aaa    
out
cwtl   
sub
imul
push
pushw
adcl
xor
mov
stos
sub
imul
das    
xchg
cmpsl
addr16 and
popf   
(bad)  
test
pop
outsl
pop
adc
loope
std    
(bad)  
movswl
ja
fstps
inc
inc
mov
xor
fnstcw
add
mov
jbe
stos
mov
ret    
imul
rcl
stc    
sbb
dec
(bad)  
cmp
xchg
xlat
sub
push
stc    
sbb
cmp
inc
popf   
dec
jecxz
dec
cmp
push
sti    
dec
push
xchg
push
addr16 fcomi
into   
sbb
mov
or
jae
cli    
jns
add
sbb
adc
call
jmp
adc
mov
jecxz
push
decl
in
push
lods
dec
inc
pop
arpl
push
icebp  
call
cmc    
xchg
mov
cmp
mov
or
bound
dec
xor
jno
pop
mov
scas
loop
pop
je
rolb
mov
add
fstp
daa    
fadd
push
jae
jp
(bad)  
pop
popf   
fnstenv
mov
jnp
(bad)  
jl
and
xchg
insl
xchg
js
lds
mov
jle
je
sahf   
mov
mov
shrb
xchg
int3   
lcall
es cmp
mov
hlt    
das    
pop
and
push
or
jp
icebp  
pop
inc
xchg
ljmp
push
ss sbb
inc
cmp
popf   
xchg
pop
imul
stos
scas
xor
pop
vpunpcklwd
lcall
inc
push
stos
movsb
jno
in
outsl
movsb
adc
pop
push
movsb
jge
popf   
lods
dec
es or
insb
cmc    
incl
lock adc
pusha  
lahf   
push
repz push
out
jnp
xchg
movzbl
cmp
in
pop
pop
sub
rol
jecxz
fmull
sub
push
mov
inc
and
movl
ret    
sub
cmp
xlat
mov
rcll
jns
js
hlt    
xchg
push
outsb
or
and
loop
ret    
addr16 mov
or
push
xor
fisttp
mov
adc
fnstenv
loop
push
dec
mov
sub
aad
mov
loope
mov
sbb
pop
shrl
mov
(bad)  
xor
(bad)  
push
test
es jae
sbb
testb
out
das    
push
pop
cmpsl
push
push
inc
mov
aad
andl
ja
or
jmp
les
into   
icebp  
test
and
cwtl   
clc    
in
fwait
sbbl
xor
push
cmp
out
faddl
mov
inc
push
add
pop
gs or
mov
ja
sbb
repnz cmp
or
sub
add
cs mov
(bad)  
popf   
cmp
sahf   
xchg
fs jns
xchg
xchg
adc
jp
jle
cmp
push
aaa    
setae
push
adc
arpl
jbe
cmp
fsubrs
dec
scas
sub
outsb
and
repnz xor
dec
leave  
je
lcall
int3   
jle
cld    
cmp
jmp
lock xor
popa   
xchg
xchg
cmp
out
fimul
adc
xor
sub
roll
sub
inc
pop
sbb
xchg
gs pop
lret
orl
frstor
aad
inc
jmp
sbb
adc
xchg
dec
ror
adc
sub
pop
dec
scas
stos
mov
sub
push
pop
jmp
aad
mov
inc
adc
pop
adcl
xor
pop
adc
mov
(bad)  
jno
push
and
call
mov
loope
inc
push
inc
cmp
(bad)  
cld    
je
mov
xchg
add
in
lcall
fs mov
nop
fsub
cmp
out
popf   
jmp
or
cmp
mov
out
cli    
lea
in
cmpsl
popf   
cmc    
mov
lods
cmp
xchg
lret   
mov
fsubs
insb
(bad)  
(bad)  
repz or
out
popa   
push
mov
mov
and
nop
je
or
sbb
xchg
out
mov
jns
rolb
push
dec
outsl
cmp
cmp
inc
js
xor
add
outsb
mov
fnstcw
sbb
sub
call
dec
scas
popa   
ljmp
mov
pop
mov
nop
sbbl
mov
fxch
pop
outsb
inc
outsl
cwtl   
pop
neg
mov
push
or
inc
push
cld    
pop
push
or
sub
fisubl
mov
dec
iret   
psubb
stos
sub
addl
push
push
or
pop
mov
mov
(bad)  
xor
sarb
ja
fisubrl
lods
and
loop
sbb
lret   
movntq
les
sub
dec
and
add
fcomp
(bad)  
je
add
add
or
mov
jp
imul
ss test
mov
xchg
hlt    
es mov
xchg
test
clc    
sti    
das    
and
xchg
sbb
sti    
or
jae
push
enter
dec
aad
repz mov
xor
pop
cld    
sti    
inc
jg
pop
push
sbb
nop
fmull
fnop   
loopne
data16 xor
inc
xchg
dec
les
cmp
outsb
pop
leave  
out
lahf   
push
pop
push
jne
je
mov
lret   
lcall
push
push
ret
xor
xor
or
clc    
(bad)  
push
stos
imul
xor
int3   
js
dec
dec
ljmp
out
daa    
xor
jae
out
es jnp
pushf  
hlt    
test
lods
push
push
xchg
inc
or
lahf   
pop
sahf   
jle
scas
push
icebp  
fcomi
jl
imul
or
sbb
aad
aad
cmpsb
ss cwtl 
push
adc
sbb
xchg
add
and
mov
xor
sbb
dec
push
sub
nop
mov
lods
or
inc
xchg
not
test
pop
inc
mov
cmp
pop
pop
cmp
nop
inc
dec
adc
dec
int
(bad)  
xchg
pop
mov
rclb
cmp
mov
ja
mov
pop
push
inc
cmovo
inc
add
dec
imul
mov
and
addr16 and
(bad)  
(bad)  
cmp
sub
(bad)  
adc
inc
scas
add
call
(bad)  
aad
and
pop
inc
movsl
daa    
dec
mov
or
aaa    
mov
push
int3   
je
gs pushf 
test
testl
lret
pop
into   
sub
out
mov
movsl
enter
mov
(bad)  
and
xor
add
or
in
jno
push
setle
xor
jo
pop
test
sbb
roll
inc
sub
sbbl
and
cmp
fcompl
xor
adc
mov
bound
mov
sti    
rorl
jns
es xchg
in
nop
adc
inc
mov
lods
scas
sub
movsl
xchg
outsl
call
movsb
sbb
(bad)  
inc
mov
mov
mov
ja
out
lods
cltd   
test
jb
mov
sti    
add
xchg
aam
ds dec
scas
stc    
cld    
fwait
imul
clc    
(bad)  
fdiv
cmp
pop
nop
and
data16 cmp
xlat
sbb
imul
(bad)  
adcl
fisttpl
sti    
lods
dec
inc
sarb
jns
(bad)  
mov
adc
or
ja
loop
andl
dec
jbe
adc
iret   
movsb
ljmp
sarl
sub
shrl
jnp
dec
dec
aam
adc
xor
sbb
(bad)  
dec
lret   
dec
add
out
cmp
(bad)  
lcall
in
xor
push
enter
insl
(bad)  
push
xchg
ss push
scas
sub
sub
pop
xor
bound
pop
nop
andb
sub
mov
mov
mov
lahf   
pushl
lods
hlt    
fcoml
push
sub
sub
xchg
out
mov
and
add
es mov
cmp
adc
aas    
mov
(bad)  
or
cmp
mov
pop
clc    
xchg
sub
mov
xor
shr
nop
adc
mov
sbb
out
jle
idivb
mov
dec
jne
aas    
int
outsb
xchg
xor
jl
cmpsb
imul
sbb
xchg
or
jo
adc
or
mov
ljmp
inc
or
insl
and
out
add
xchg
(bad)  
aaa    
dec
inc
or
xor
popa   
psubb
out
mov
int3   
in
outsb
dec
loopne
aam
iret   
mov
and
pushf  
and
or
shrb
call
inc
out
clc    
rcrl
and
js
rcl
(bad)  
int3   
sbb
ss stc 
cmpl
int
sbb
sbb
cmp
ret    
jmp
call
lods
jle
icebp  
pop
add
pop
iret   
adc
sbb
shrl
mov
push
pop
dec
add
jbe
xchg
std    
cmpsl
push
div
or
(bad)  
cmp
into   
pushf  
adc
stos
scas
or
adc
push
push
cli    
outsb
sub
mov
mov
cmp
jecxz
sub
fidivr
push
inc
dec
pop
gs cld 
cltd   
xchg
jg
adc
dec
add
xchg
movsb
push
cmp
data16 int3 
inc
mov
pop
jb
dec
outsl
rorl
mov
xor
sbb
add
inc
xorl
jl
jg
push
cmp
rorl
in
adc
pop
leave  
and
js
jb
cmp
inc
arpl
mov
dec
lods
dec
xor
lcall
jno
(bad)  
adc
inc
and
arpl
xchg
outsb
std    
pop
add
outsl
(bad)  
sub
notl
add
cmp
pop
add
fisttpl
pop
arpl
mov
repz dec
sub
mov
cmp
shrb
cld    
jp
jle
lods
mov
mov
or
push
popa   
fisubr
(bad)  
scas
xchg
sbb
dec
jae
imul
xlat
popa   
lret   
inc
or
repz pop
aas    
sbb
mov
or
pop
pop
out
jp
scas
adc
aaa    
aaa    
sbb
arpl
adc
fstpt
mov
sbb
add
addr16 jae
cmc    
xor
xchg
mov
jl
sub
bound
in
push
stos
push
enter
mov
pop
and
int
xchg
mov
mov
push
dec
xorl
shrl
pop
and
(bad)  
jmp
sbbl
sbb
add
std    
inc
inc
loope
imul
negl
cmpxchg
jns
inc
sub
lea
pop
or
cmp
xchg
add
jno
(bad)  
jb
int3   
loope
orl
sbb
sub
add
mov
test
aam
xchg
jecxz
xor
pusha  
out
mov
ss cwtl 
adc
insl
js
outsl
push
insl
aam
loop
imull
mov
sbb
ret
in
fs sbb
jg
pop
xor
jmp
add
xchg
fcom
and
test
enter
(bad)  
je
dec
pop
xchg
mov
aaa    
adc
daa    
(bad)  
jp
lds
xorl
xchg
xchg
sbb
xor
inc
dec
leave  
outsb
sub
mov
lret   
or
lock test
sub
mov
adc
push
fistpl
fimul
pop
mov
push
cmp
out
(bad)  
js
jae
int
mov
mov
jmp
ljmp
sbb
sbb
je
test
sti    
xor
outsl
mov
aas    
int
dec
and
popa   
inc
dec
add
jnp
jecxz
jl
mov
push
pop
or
das    
or
or
dec
fnstcw
adc
(bad)  
xor
(bad)  
iret   
fucom
imul
sbb
xlat
lds
xor
enter
jge
imul
mov
pop
into   
repz das 
xchg
jns,pn
cmp
xor
push
xor
cmpsl
lahf   
inc
int
ss repnz scas
test
add
sub
rcll
push
imul
fs xchg
(bad)  
pop
es cltd 
dec
clc    
bound
loope
jl
int
movsl
adc
add
clc    
cmp
out
xor
inc
and
xchg
sub
dec
pop
inc
test
ret    
push
adc
loopne
std    
dec
mov
enter
cmp
mov
movsl
testl
stos
insl
dec
data16 negb
sti    
pusha  
dec
fist
int3   
aam
jle
add
cltd   
sbb
pop
sahf   
adc
mov
sti    
lcall
push
mov
mov
inc
pop
cmpsl
scas
jnp
mov
leave  
pop
inc
lahf   
cmp
cmp
push
or
insb
sbb
cmp
ja
mov
xor
mov
xor
push
xchg
fistpl
lcall
mov
stos
out
or
mov
repz out
dec
mov
das    
cwtl   
mov
cmp
es jb
pop
adc
fwait
repnz sub
insl
icebp  
pop
repz repz cmp
adc
frstor
(bad)  
imul
shr
mov
push
mov
jno
push
sti    
add
(bad)  
jb
dec
test
lods
lods
lds
jl
ficompl
test
out
hlt    
dec
jae
xor
mov
sti    
push
into   
test
int3   
fildll
cmpl
sbb
pop
dec
test
xchg
dec
sbb
dec
or
frstpm(287 only) 
aaa    
cmp
notl
fs cmp
sti    
pop
ret
fmull
ss loope
subl
xorb
adc
or
test
sti    
or
add
insb
icebp  
lahf   
mov
sahf   
nop
mov
xchg
inc
mov
scas
fmulp
pusha  
inc
cwtl   
add
popa   
xchg
adc
ds xor
mov
cmc    
enter
xor
ror
je
jbe
outsb
mov
jno
test
xor
fnstsw
sbb
and
sbb
test
cmpsl
data16 mov
neg
lcall
inc
dec
out
ret    
int
(bad)  
hlt    
mov
xchg
mov
scas
jl
sub
gs sbb
jno
jmp
push
dec
pop
(bad)  
mov
fnsave
mov
sahf   
stc    
xor
rclb
ja
rorb
cmp
leave  
cmpsl
jnp
mov
mov
mov
mov
dec
sub
mov
and
sub
sbb
mov
push
lret
add
mov
cmp
lods
push
or
jae
sub
jmp
cs fwait
xchg
fsubs
push
pop
mov
mov
inc
sub
xchg
jno
test
mov
(bad)  
repnz popf 
cli    
xchg
sub
vmread
mov
lahf   
sbb
scas
aaa    
add
mov
jmp
push
(bad)  
hlt    
lcall
movsl
add
mov
dec
test
push
out
adc
nop
cmpsb
(bad)  
fistp
nop
(bad)  
push
gs jae
add
push
call
loopne
loopne
bound
or
das    
fidivrl
jae
repz jne
push
cmp
lahf   
mov
sub
adc
xchg
jge
add
in
cmp
ficom
adc
cmpsb
adc
dec
inc
aam
push
insl
push
or
cmp
and
pop
imul
aam
rol
rorb
sbb
or
sarb
add
push
ds sbb
imul
jnp
sub
loopne
pop
lea
xchg
aaa    
hlt    
dec
pop
mov
repz xchg
in
test
xchg
dec
xchg
lcall
xchg
(bad)  
lock sub
sti    
in
daa    
sub
aas    
or
daa    
push
add
shr
dec
repnz push
dec
cli    
push
or
addr16
jmp
call
cmp
js
push
int3   
lret   
pop
mov
popa   
dec
(bad)  
lcall
xchg
clc    
in
mov
and
(bad)  
inc
dec
mov
leave  
xor
cmp
sbb
and
test
pushf  
jno
xor
rorl
add
add
(bad)  {z}
lret   
and
movsl
clc    
dec
or
inc
lods
mov
jge
mov
push
outsb
jle
dec
das    
sbb
sbb
aaa    
or
cmpsl
inc
sbb
push
push
scas
jge
out
(bad)  
dec
sub
mov
icebp  
into   
push
push
adc
xchg
xchg
daa    
outsl
enter
xchg
out
out
adc
(bad)  
mov
jmp
iret   
aad
or
dec
in
mov
cmpsb
sbb
mov
inc
fadds
mov
add
rorb
cmp
and
pop
or
sbb
enter
pop
leave  
cmpb
jbe
adc
stc    
pop
lock repz push
sahf   
test
les
scas
fstl
bound
sti    
enter
idiv
sub
or
and
and
popf   
sbb
ljmp
sub
(bad)  
imul
in
loopne
cmp
ljmp
cltd   
and
xchg
fsubs
sub
(bad)  
sub
jnp
dec
stos
(bad)  
jp
aaa    
add
test
(bad)  
pop
cs inc
sbb
jl
sub
push
add
test
aas    
jecxz
and
je
scas
out
sub
mov
and
pop
imul
and
leave  
mov
(bad)  
mov
sbb
jmp
pop
arpl
imul
mov
sub
cwtl   
or
pop
scas
bound
add
or
mov
and
js
jg
pop
out
fcomps
fstpl
ret
sub
xor
insl
(bad)
mov
fistpll
dec
cmc    
xor
outsl
jo
xchg
cmp
jns
out
xchg
jb
mov
(bad)  
idivb
inc
cltd   
es cli 
cmpsb
mov
mov
push
adc
int
push
xchg
pop
lcall
dec
mov
dec
dec
dec
stc    
or
lret
stc    
dec
(bad)  
pop
shrb
test
lods
sahf   
sti    
jb
shr
movntq
out
mov
lcall
xchg
dec
inc
lods
pushf  
add
lcall
xor
int3   
xchg
pop
imul
bound
push
pop
ljmp
xlat
sti    
int
pop
or
mov
lds
insl
pop
(bad)  
jbe
pusha  
sahf   
jno
scas
ficom
push
mov
movsb
inc
jbe
sbb
(bad)  
pushf  
out
cmp
xor
out
lret   
sub
lods
cmp
(bad)  
jae
nop
jmp
add
adcl
nop
push
inc
xchg
out
sub
loope
(bad)
xor
or
ss xchg
add
into   
add
repnz push
idivb
sbb
(bad)  
daa    
and
mov
cmc    
mov
mov
xchg
mov
cltd   
mov
xor
(bad)  
imul
cmp
fisub
jnp
(bad)  
inc
fsubs
push
lret   
push
xchg
jle
jnp
into   
add
jbe
scas
jnp
xchg
repz mov
insl
pop
imul
ss js
mov
sbb
(bad)  
pop
(bad)  
es push
xor
fisttpl
les
aas    
hlt    
das    
jp
adc
xor
pop
outsb
(bad)  
mov
inc
push
jecxz,pt
mov
(bad)  
pop
or
push
lds
gs scas
idivl
repz repz add
lock test
leave  
pushf  
pop
faddl
push
(bad)  
xor
test
add
pop
in
insl
in
mov
in
cltd   
imul
jge
cli    
sub
pop
insl
aad
mov
push
cltd   
pop
push
dec
or
mov
aaa    
das    
fnstcw
sub
mov
lods
into   
push
sub
loope
fcoms
pop
les
and
mov
sbb
int3   
mov
inc
loope
fstl
jp
(bad)  
dec
jecxz
rorl
out
leave  
pop
jne
pop
sub
pop
cmp
sti    
inc
cmp
push
mov
fdivs
dec
lcall
add
mov
inc
or
insb
push
imul
adc
jle
jae
fs stos
cmc    
sahf   
(bad)  
repz xchg
mov
xchg
mov
lcall
(bad)
(bad)  
pop
add
sbbb
sub
stc    
dec
mov
mov
mov
bound
les
cmc    
pop
test
sbb
add
jp
inc
shlb
jmp
insl
stc    
stos
dec
adc
mov
enter
sub
blcmsk
inc
sar
(bad)  
stos
iret   
insl
cltd   
adc
in
cs cmp
mov
sub
pushf  
adc
int
mov
pop
movsb
out
mov
push
imul
sub
inc
(bad)  
add
dec
aaa    
xor
xchg
and
adc
push
outsb
int
les
jmp
mov
push
decb
pop
mov
mov
arpl
add
mov
stos
inc
inc
mov
add
(bad)  
sbb
cwtl   
push
dec
add
cmp
mov
ret    
and
aas    
test
(bad)  
jb
(bad)  
adc
arpl
cld    
cmp
out
mov
mov
pop
subl
movsb
fisubl
mov
mov
adc
push
jmp
push
sbb
mov
je
es aad
pop
pop
pop
mov
push
dec
mov
push
jmp
mull
push
jle
mov
popa   
arpl
sub
out
push
arpl
xchg
out
pop
push
mov
outsl
mov
les
cmc    
xor
mov
sub
fildll
xchg
pop
fwait
or
fisubrl
pop
xchg
mov
and
das    
xchg
subl
dec
mov
int
inc
movsl
xchg
sbb
xchg
nop
in
daa    
lds
dec
mov
loopne
mov
cs add
rclb
and
lret   
or
cmp
jl
and
stos
pusha  
dec
cmpsl
cmp
movsl
inc
out
iret   
adc
fidivrl
sti    
jnp
mov
ja
push
mov
lret
jge
fcom
pop
nop
push
dec
(bad)  
cli    
imul
pinsrw
testl
dec
mov
call
mov
push
(bad)  
xor
fdivrl
mov
das    
in
pusha  
ret    
stos
and
scas
mov
sub
add
xchg
xchg
lcall
iret   
dec
inc
adc
repnz in
inc
mov
clc    
aam
lret
inc
loope
and
lock xor
in
ret    
cli    
push
jae
mov
ljmpw
js
pushf  
sbb
adc
pop
sub
adc
add
pop
sbb
or
movsb
push
mov
hlt    
mov
push
xor
repz popf 
fcmovbe
shr
mov
enter
xchg
push
cld    
lods
push
mov
gs out
inc
test
adc
fsubrl
push
dec
dec
pop
jno
mov
sub
in
sbbl
iret   
shll
repnz test
push
sub
or
das    
push
sbb
imul
cmp
into   
xchg
das    
bound
xor
jg
cmc    
andl
nop
ret
jno
dec
pop
or
sarb
mov
mov
mov
jmp
cmp
mov
xor
push
in
sub
push
pop
dec
loope
jo
movsl
or
jp
or
add
sub
je
out
cli    
scas
or
add
stos
call
icebp  
cmc    
bound
xchg
jmp
lahf   
or
cld    
dec
test
hlt    
shrl
jmp
sbb
addr16 xor
das    
addr16 ss nop
loopne
mov
out
mov
int3   
pop
push
xchg
and
adc
and
sub
jge
mov
movsl
mov
add
int
cmpsl
jnp
xchg
jns
jecxz
cmp
(bad)  
mov
sub
jno
cli    
pop
xor
lock mov
mov
jnp
nop
jae
xor
mov
and
popf   
and
mov
repnz and
jl
das    
push
mov
(bad)  
pop
mov
jmp
es dec
and
or
mov
mov
fidivl
ds mov
add
nop
fwait
test
das    
push
jle
add
std    
lea
xchg
(bad)  
rorl
xlat
pop
rcr
mov
sub
add
(bad)  
lods
mov
cmp
push
mov
dec
or
maskmovq
shrb
cli    
lcall
loope
jb
std    
jno
sti    
dec
xor
jo,pt
or
dec
xchg
mov
clc    
and
pop
push
in
add
xchg
test
(bad)  
mov
sbb
je
mov
pop
jo
es xchg
out
mov
pop
mov
cmp
inc
push
repz je
repnz int
je
sti    
aaa    
lods
push
faddl
int3   
loopne
ret
test
add
add
adc
mov
jno
inc
or
adc
nop
pusha  
das    
pop
jo
push
sbbl
add
scas
add
mov
dec
adc
sub
jbe
roll
and
mov
out
xor
pop
lret
or
dec
es out
jne
adc
mov
dec
add
xor
(bad)  
data16 je
dec
movsb
fs lret 
pop
jp
int3   
jge
lods
arpl
fidivr
cmpsb
dec
(bad)  
and
jle
testb
ret    
or
inc
pop
(bad)  
aad
xchg
xchg
jnp
mov
lahf   
lcall
popa   
xchg
dec
rorb
fadds
mov
lds
popa   
jmp
icebp  
and
xchg
lahf   
and
ret    
loope
insb
jno
(bad)  
(bad)  
add
dec
add
pop
sbb
and
or
subl
mov
inc
or
fnsave
xchg
int3   
lret
ret
sbb
ret    
and
push
push
or
lds
and
xchg
aaa    
shrl
aaa    
jno
mov
sbb
rcll
insb
lcall
fdivrs
ljmp
mov
out
xor
das    
in
adc
sbb
push
(bad)  
pop
jle
add
(bad)  
daa    
popa   
or
xor
outsl
mov
into   
add
mov
pop
rolb
pop
ror
(bad)  
dec
aad
mov
xchg
push
xorb
xchg
int
outsl
push
xor
and
out
out
pushf  
das    
dec
std    
(bad)  
push
mov
add
sbb
xor
loope
mov
jmp
pop
(bad)  
jge
fistp
xchg
or
in
add
cltd   
mov
or
inc
repnz cmp
xor
es xor
adc
arpl
mov
mov
jnp
xchg
insb
addr16 imul
fnop   
add
mov
in
xor
xchg
jg
test
outsb
lea
pop
and
push
js
dec
adc
mov
sbb
gs dec
adc
jae
add
xor
out
cmp
push
xchg
xchg
lds
sub
mov
std    
das    
mov
adc
pop
pop
loopne
daa    
add
cltd   
iret   
push
mov
cs mov
xchg
mov
movsl
add
sahf   
adcl
enter
push
mov
xchg
add
push
and
subl
mov
test
push
fadds
pop
cltd   
and
aaa    
mov
xor
insl
and
aaa    
icebp  
xchg
daa    
dec
stos
cltd   
xchg
insl
dec
mov
ja
shr
stos
cltd   
jg
jbe
sub
and
push
xchg
aas    
(bad)  {z}
hlt    
daa    
movsb
pop
les
push
(bad)  
insb
icebp  
ja
fadd
(bad)  
mov
jbe
pop
popa   
adc
jl
jl
cmp
adc
movsl
pop
and
lock cmp
xchg
(bad)  
dec
es adc
push
mov
mov
add
out
xor
mov
mov
js
and
loope
cmp
imull
dec
cli    
mov
xchg
adc
repz and
insl
jle
jmp
pop
inc
xchg
scas
xlat
mov
xchg
rcrl
rcrl
push
out
push
loopne
push
jge
dec
push
xchg
outsl
aaa    
pop
xchg
lea
add
sbb
inc
call
repz repnz pop
(bad)  
jb
inc
pop
lea
or
popa   
lds
push
sub
mov
dec
test
jns
inc
stc    
cltd   
ss nop
push
jb
addr16 ljmp
vpshuflw
pop
stos
divb
jbe
push
fsubrl
in
inc
scas
out
lret
stos
int
or
stos
jge
sahf   
mov
pop
cmpsl
loopne
push
call
mov
addr16 mov
lret   
sub
sbb
(bad)
(bad)  
fwait
jb
xchg
cmpsb
mov
int3   
sbb
sahf   
inc
in
adc
movsb
cld    
gs mov
adc
icebp  
test
test
loopne
ret    
imul
cmp
add
icebp  
(bad)  
pop
ficom
mov
xchg
sbb
lea
pusha  
pop
leave  
sub
stos
sub
pop
lods
fldt
lds
add
pop
cld    
aad
insl
movsl
inc
sub
add
sahf   
push
imulb
mov
inc
and
mov
(bad)  
xor
lahf   
(bad)  
data16 xlat
cmp
fisttpl
(bad)  
paddb
pop
out
bound
inc
inc
push
fs pop
xor
dec
xchg
sbb
pop
fucomi
mov
jo
repnz push
mov
fisub
or
test
into   
push
push
gs add
leave  
(bad)  
popa   
jle
sub
jp
sub
xchg
in
cmp
ljmp
xchg
in
shlb
into   
add
sub
imul
popa   
jg
jmp
test
xchg
add
add
(bad)  
jmp
mov
mov
inc
ret
mov
sti    
and
aas    
mov
aam
int3   
sbb
fs pusha 
dec
mov
(bad)  
sub
jp
(bad)  
mov
and
or
in
mov
fcomps
pop
mov
xlat
in
dec
push
popf   
dec
in
xlat
push
sbb
inc
xchg
xchg
negl
adcl
pusha  
into   
xchg
rcrb
adc
int
adc
and
repnz or
jnp
dec
(bad)  
movsb
cmpb
sbb
xchg
pop
shll
or
fstpl
(bad)  
jno
or
das    
scas
popf   
or
jne
and
cwtl   
loopne
daa    
out
stc    
(bad)  
stos
mov
(bad)  
notl
add
inc
push
xchg
cs call
pop
iret   
repz inc
ficompl
stc    
call
mov
jg
pop
shlb
jecxz
or
outsl
sbb
xchg
mov
push
push
cmpsl
mov
call
inc
sbb
rcll
push
sbb
pop
sub
xchg
mov
shrl
xor
jno
pop
(bad)  
adc
cmp
mov
fs jbe
rdtsc  
xor
gs sbb
xor
xchg
sbb
cmpsl
cmp
or
stos
sar
mov
in
data16 mov
dec
(bad)  
mov
lock jl
test
pop
pop
iret   
adc
sub
aaa    
jno
aas    
popa   
mov
ljmp
arpl
dec
add
sbb
mov
inc
push
adc
iret   
inc
out
xor
pop
enter
adc
pushf  
frstor
jge
mov
fisttp
dec
push
xchg
and
jno
xor
sbb
sbb
sbb
div
sbb
ljmp
cltd   
mov
lods
mov
jl
push
jno
add
lea
(bad)  
lcall
or
jbe
fisttpll
add
xchg
fidiv
call
arpl
loope
mov
jge
(bad)  
pop
mov
sub
mov
in
ret
jnp
inc
xor
dec
hlt    
mov
fadds
jnp
cmp
mov
jecxz
into   
inc
lods
xor
stos
(bad)  
mov
xor
mov
mov
cmc    
sub
mov
jle
fiadd
jbe
cmp
out
sbb
dec
divl
mov
or
push
packsswb
xor
push
test
add
cld    
(bad)  
aad
cmp
(bad)  
push
sahf   
cmc    
jnp
inc
mov
dec
fadd
sahf   
lods
jo
mov
out
gs xchg
into   
call
dec
imul
ss ljmp
out
mov
dec
loopne
push
aad
jne
insl
or
dec
cs mov
jb
(bad)
inc
(bad)  
pop
ss dec
mov
ljmp
sarl
jae
movsl
add
or
inc
mov
aas    
std    
test
lret
xor
fildl
jecxz
repnz lret
fcompl
test
push
mov
jae
jno
fisttpll
or
pop
cmp
hlt    
add
xor
cmp
cli    
and
imul
fidivr
cmp
push
fildll
jmp
repz add
push
push
adc
lcall
add
rcrb
jl
mov
or
xor
dec
loope
lods
or
cmpsb
jae
fs mov
mov
xchg
aaa    
cmp
push
mov
and
sbb
repnz cmp
js
mov
rorb
xchg
xor
test
sub
repz push
sbb
jne
fisttp
pusha  
dec
fbld
xchg
loope
or
pop
daa    
sub
ror
je
dec
in
(bad)  
push
adc
sub
loop
jge
pop
add
jge
xor
mov
nop
pop
fcomi
jae
cltd   
in
jno
sti    
inc
jne
pop
or
dec
stc    
call
mov
jle
mov
cli    
or
stos
xor
imul
pop
iret   
cmpsb
out
mov
jmp
jmp
add
inc
mov
hlt    
mov
sub
cmp
add
js
xor
xor
lret
fwait
mov
ljmp
out
test
xor
test
xor
lods
xor
(bad)  
jnp
imul
std    
pop
(bad)  
mov
icebp  
inc
test
out
mov
ja
mov
hlt    
lods
mov
push
xor
add
mov
adc
dec
jne
push
dec
adc
(bad)  
xor
(bad)  
cmpsl
cwtl   
aad
mov
cmpsb
jne
mov
mov
divl
inc
popf   
fmulp
jnp
mov
cmpl
sbb
mov
push
stc    
in
mov
mov
lahf   
lods
(bad)  
lods
pop
jne
aad
jne
adcl
or
sub
jno
inc
fwait
popf   
addb
pop
(bad)  
jmp
fmuls
sbb
clc    
jecxz
les
std    
mov
aaa    
mov
xchg
mov
jns
fwait
mov
jae
and
fcmovbe
pop
mov
out
or
lret
js
hlt    
or
je
out
pop
mov
cmp
into   
mov
insb
cld    
ffreep
push
add
add
dec
mov
cwtl   
mov
pop
cltd   
(bad)  
mov
fnstsw
add
sbb
sbb
add
sbb
fistpll
xor
(bad)  
(bad)  
sahf   
pusha  
int3   
(bad)  
or
mov
xlat
jl
fnstenv
fwait
test
enter
sub
push
cwtl   
mov
push
enter
frstor
mov
aam
mov
push
sub
mov
rolb
cmp
push
and
fwait
sbbb
in
lods
cmpsb
aaa    
add
loop
and
in
mov
movsb
sub
adc
(bad)  
insl
mov
add
push
sbb
mov
dec
mov
loop
push
leave  
mov
inc
outsb
mov
(bad)  
add
movsb
adc
iret   
jnp
divb
ljmp
aas    
mov
xchg
sbbb
ds dec
in
pop
push
lret
imul
mov
mov
sarl
pop
je
push
pushf  
add
aaa    
sub
xchg
xchg
lods
cltd   
pop
jmp
adc
je
bound
dec
add
rcl
push
rep stos
aam
xchg
add
(bad)  
hlt    
movsl
add
inc
mov
loop
daa    
mov
data16 into 
imul
mov
sahf   
mov
stos
(bad)  
cmc    
insb
xlat
cmp
loop
adc
mov
flds
mov
jno
push
mov
and
jle
fildll
and
test
mov
jae
sub
push
mov
sub
xchg
scas
xchg
(bad)  
mov
sub
cmc    
lock arpl
inc
xchg
xor
inc
(bad)  
in
pushf  
mov
das    
scas
je
fsubrl
pop
add
jle
mov
outsb
sbb
mov
into   
mov
fsubl
sar
rol
das    
cmp
in
loop
inc
fsubrs
out
pop
cli    
es jecxz
xchg
xor
test
pop
jl
cwtl   
nop
push
mov
das    
(bad)  
push
ss insb
test
fstl
and
push
mov
dec
leave  
dec
sub
js
and
pop
adc
mov
adc
xor
repnz mov
clc    
das    
out
stc    
jbe
fadds
pop
jb
movl
or
adc
stc    
mov
adc
push
iret   
(bad)  
into   
dec
bound
adc
sbb
insb
jbe
mov
sti    
pop
cmpsl
ds popf 
lods
push
xchg
das    
push
mov
test
inc
outsl
cmp
sub
ret    
inc
jnp
ja
mov
shrl
(bad)  
in
add
(bad)  
xor
pop
pop
rcrb
mov
pop
cmp
(bad)  
xlat
cmp
lcall
enter
andl
idivb
xchg
repnz push
mov
fwait
(bad)  
xor
call
lods
mov
inc
aam
stc    
test
daa    
mov
aam
mov
rorl
cmpxchg
in
sub
pop
pop
popf   
pop
(bad)  
call
lock xchg
adc
fldlg2 
aaa    
outsb
cmp
mov
ds pop
mov
jge
dec
repz push
bound
cltd   
sub
ret    
pusha  
adc
push
fwait
sahf   
vmovsd
xchg
(bad)  
aas    
fildl
test
in
push
pop
inc
add
subl
xchg
dec
pop
negb
xor
nop
adc
cmpsl
aas    
(bad)  
mov
sub
cs stc 
pop
mov
push
or
push
inc
mov
pop
scas
insb
pop
jmp
lds
mov
aaa    
sahf   
adc
fs lret 
pop
xchg
inc
subl
cmp
mov
insb
and
push
xchg
xor
and
js
ja
jno
ljmp
cmpsb
jno
lods
in
inc
movsb
xchg
add
dec
clc    
xlat
mov
leave  
jb
mov
test
(bad)  
rcl
dec
mov
sub
or
mov
(bad)  
cwtl   
mov
dec
pop
movsb
call
sub
scas
imul
(bad)  
fcmovnb
sarl
rep movsl
adc
call
fiaddl
in
int
sub
cltd   
cli    
or
adc
xorb
push
xor
out
add
ret
mov
inc
pop
jnp
hlt    
push
mov
(bad)  
aaa    
mov
pop
in
sub
add
jbe
inc
push
mov
shrb
adc
pop
popa   
dec
jns
mov
out
xor
cmc    
push
int3   
mov
mov
or
push
xchg
test
ret
data16 jno
popa   
push
fstps
je
xor
add
pop
jg
or
mov
pop
mov
ljmp
ror
iret   
dec
jg
int3   
mov
adc
loope
xchg
cmpsb
pop
or
cmpsl
mov
cmp
fnop   
stos
sbb
adc
dec
cmc    
push
push
arpl
(bad)  
clc    
scas
xchg
je
fcompl
xchg
test
xchg
(bad)  
aam
mov
rcll
mov
sti    
(bad)  
(bad)  
leave  
cmovae
inc
xor
(bad)  
cmc    
mov
test
insb
loopne
mov
test
daa    
sub
dec
bound
xchg
inc
mov
sub
mov
mov
enter
pop
jnp
adc
mov
test
pop
mov
in
mov
(bad)  
aaa    
adc
dec
push
or
xchg
(bad)  
movsb
add
lods
hlt    
and
aad
imull
int3   
or
mov
std    
dec
jbe
xor
or
sub
cmp
add
(bad)  
mov
ret
out
jle
dec
xor
sub
std    
scas
cmp
dec
insb
cmp
xchg
data16 jecxz
jp
sahf   
cmp
xchg
pushf  
lret   
fimul
movsb
inc
lcall
imul
dec
rorl
repnz push
xchg
xchg
jne
js
pop
mov
adc
push
cmp
or
scas
cmpsl
ja
xor
rcll
jl
mov
lret   
ja
sub
les
sarl
xchg
xchg
daa    
dec
xor
dec
out
mov
xor
or
cld    
or
iret   
fdivrl
cltd   
xor
aam
pop
add
mov
mov
inc
add
insl
jbe
imul
inc
dec
mov
jo
stos
sub
mov
fidiv
inc
xor
stos
je
sub
cmpsl
stc    
mov
clc    
test
test
mov
jl
dec
push
sbb
ds and
sbb
stos
lods
mov
or
aam
push
imul
jnp
aaa    
or
mov
mov
and
xchg
jns
aam
sub
in
pop
xchg
lahf   
(bad)  
or
jecxz
addl
std    
jno
js
ret    
or
jae
or
add
ss popf 
inc
mov
sbb
(bad)  
cmpsl
sti    
loop
ljmp
scas
aas    
pop
cmp
push
sbb
scas
cmp
nop
or
jno
push
test
add
pop
inc
xchg
push
loope
mov
inc
popf   
fildll
ret    
xchg
mov
inc
dec
aaa    
out
mov
xchg
xor
pop
and
mov
xchg
sbb
hlt    
hlt    
add
cltd   
jno
ret    
lahf   
outsb
pop
jbe
movsl
shrb
or
lcall
adc
push
jle
roll
add
jecxz
int3   
aam
pop
pop
mov
or
sbb
cmp
test
divl
cmpsl
cwtl   
add
jb
or
aad
pop
mov
xchg
jge
cltd   
aam
(bad)  
in
pusha  
mov
stos
(bad)  
repnz xchg
cli    
das    
sahf   
jl
sti    
push
mov
sarb
jmp
mov
sar
repnz in
cmc    
(bad)  
(bad)  
mov
icebp  
or
mov
xchg
inc
fistl
stos
bound
add
cld    
cmp
sbb
ret    
aaa    
(bad)  
mov
xchg
jnp
scas
fldt
leave  
xlat
mov
int3   
in
test
(bad)  
(bad)  
mov
stos
jbe
(bad)  
rcrl
mov
mov
mov
mov
cmpsl
je
lods
push
inc
sbb
jl
out
das    
pop
adc
mov
roll
int
adc
push
adc
daa    
sub
inc
jl
shlb
repnz rorl
clc    
mov
sahf   
or
mov
stos
adc
mov
pop
xor
test
cld    
fadds
iret   
(bad)  
lods
neg
pop
push
cmpsl
lods
lock push
aaa    
fdivrl
sbb
jle
sbb
mov
frstor
add
fild
nop
cli    
std    
outsl
ja
ja
hlt    
int3   
into   
xor
and
sar
mov
into   
add
add
or
jmp
dec
lods
push
sub
pop
outsl
pushl
daa    
dec
ljmp
into   
mov
cmp
push
xor
test
scas
das    
mov
sarb
imul
test
sbb
xlat
jae
mov
insb
mov
and
ficompl
sub
fisub
out
ficomp
mov
nop
sbb
cmpsl
lods
cmp
xchg
fistp
dec
jecxz
fbstp
or
notl
int3   
aam
imul
(bad)  {z}
std    
pop
or
out
dec
aas    
(bad)  
sbb
enter
in
mov
(bad)
lcall
jne
xchg
inc
fldenv
(bad)  
hlt    
mov
xor
add
lock push
fnstsw
(bad)  
jbe
push
push
add
jg
mov
js
mov
dec
push
cwtl   
lcall
sbb
cmp
sbb
(bad)  
push
pop
dec
pop
pop
xchg
aad
(bad)  
add
mov
push
xor
test
cld    
push
call
movsb
add
(bad)  
fnstenv
xchg
jmp
(bad)  
(bad)  
out
fistp
cmp
xchg
rclb
jne
dec
pop
jne
loope
jo
mov
callw
aaa    
inc
jge
imul
in
ljmp
fadds
in
(bad)  
jb
mov
inc
pop
stc    
cmpsl
push
inc
xor
push
xchg
mov
test
push
mov
shl
mov
js
fimul
ss aaa 
ds push
mov
add
insb
fmuls
pop
popa   
mov
inc
and
fsubl
ror
xchg
inc
test
enter
cltd   
in
in
or
dec
sbb
xchg
mov
add
push
mov
sbb
add
icebp  
xor
dec
fsubrl
or
rclb
xor
ds clc 
out
adc
loopne
sti    
out
fmuls
mov
fidivl
and
rcrl
push
in
jg
outsb
xor
(bad)  
jb
push
pop
pushf  
lods
rcr
adc
dec
(bad)  
jns
test
jb
sub
data16 jo
pop
jecxz
nop
mov
push
mov
or
fmuls
jo
mov
xor
sub
cmp
push
stos
insl
daa    
sub
dec
pop
dec
out
xor
out
xlat
dec
add
arpl
add
sub
icebp  
lods
or
stos
xchg
pusha  
xchg
shll
fxtract 
and
mov
daa    
jmp
dec
lret
jo
inc
mov
cmp
mov
sti    
(bad)  
fdivp
dec
mov
iret   
mov
adc
cmp
cmp
mov
pop
(bad)
shr
xchg
add
decl
(bad)  
jmp
cmp
and
jmp
aad
xchg
xchg
test
and
and
outsl
ds in
(bad)  
nop
shr
std    
inc
jno
sub
int
jg
mov
or
je
add
jae
cmp
pop
push
pop
xchg
ljmp
pop
cmpsb
mov
jl
xchg
daa    
mov
(bad)  
inc
or
push
sub
push
push
jle
std    
lahf   
xchg
add
mov
js
fwait
jb
rcrl
popf   
test
dec
pop
unpckhps
sbb
jno
outsb
outsl
add
jbe
sub
(bad)  
sti    
ret    
jle
or
lcall
inc
and
jno
lea
push
mov
inc
mov
imul
movsb
cmp
je
(bad)  
incb
loope
int
std    
into   
mov
bound
jge
inc
and
in
sbb
add
fdivrs
mov
cmc    
aam
arpl
(bad)  
je
and
sub
stos
movl
jno
jmp
fs in
rorl
bound
xor
lret   
adc
push
sub
pop
mov
jle
mov
xchg
lea
inc
jnp
pop
or
mov
mov
bound
sbb
stos
(bad)  
jno
mov
out
ljmp
cmpl
je
mov
xchg
or
subl
fildl
adc
mov
scas
or
(bad)  
movsl
or
adc
xchg
(bad)  
aaa    
inc
and
cltd   
and
mov
jbe
mov
sbb
loope
fucomip
mov
pop
cmpsl
dec
aas    
insl
sub
cmp
fdiv
jmp
iret   
in
(bad)  
pop
cwtl   
sub
(bad)  
pop
arpl
sarl
movsb
shlb
xchg
ss pop
mov
dec
call
push
jle
aad
repz push
adc
in
insb
(bad)  
loop
inc
jae
lds
iret   
and
negl
cmp
jno
inc
clc    
adc
fmuls
push
inc
add
inc
add
xchg
cwtl   
lcall
jg
repz and
repz
je
int3   
sbbb
rcrb
scas
inc
push
fisubr
inc
cld    
xchg
in
jmp
sub
lret   
dec
movl
repnz dec
jno
js
mov
inc
aad
das    
dec
xor
sarl
jl
xor
lock scas
loop
mov
scas
or
lds
or
(bad)  
ss in
add
popf   
in
addr16 inc
jle
lea
cmp
ss pop
lret   
cltd   
std    
add
sbb
dec
mov
mov
and
into   
dec
scas
popf   
xor
xchg
lcall
push
xor
pop
lcall
mov
add
imul
mov
and
aad
fldenv
cmp
mov
inc
and
or
inc
xorb
pushf  
scas
mov
das    
(bad)  
stos
push
movsb
ljmp
mov
dec
jno
enter
vmovlps
or
jne
fstps
or
popf   
jle
test
pushf  
mov
xchg
mov
mov
adc
jle
clc    
fucomip
jge
lock cmp
test
lock and
pop
sub
lret   
data16 hlt 
xchg
mov
jmp
movsl
cwtl   
je
or
fidivl
xchg
mulb
jge
or
mov
jb
lods
orb
imul
mov
data16 sti 
mov
add
pop
jecxz
(bad)  
cmp
push
ficomp
mov
nop
sti    
test
jge
in
gs mov
xlat
cltd   
pop
mov
enter
add
add
dec
inc
scas
inc
pusha  
(bad)  
or
add
add
(bad)  
(bad)  
(bad)  
incl
add
add
add
add
add
add
jns
je
insl
cs inc
jb
ja
outsb
addr16 sub
push
gs jb
imul
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
xor
data16 aaa 
xor
fs xor
add
adc
gs insl
cs inc
jb
ja
outsb
addr16 cs inc
imul
add
popa   
je
pop
add
add
add
add
add
lsl
add
jno
add
add
or
or
add
or
add
add
add
dec
or
add
add
(bad)  
and
add
add
inc
dec
inc
add
mov
or
popa   
add
jo
pop
jae
add
ret    
add
push
ret    
add
outsl
test
add
cmp
push
push
test
enter
pop
pop
xchg
shrb
loope
nop
mov
push
insb
and
(bad)  
roll
add
mov
jl
mov
(bad)  
mov
cmp
dec
cwtl   
popa   
cli    
cmp
jbe
test
fnstenv
call
es
sub
inc
add
jno
(bad)
jns
ljmp
ds int3 
out
cmc    
cmp
mov
aam
jp
(bad)  
jb
daa    
pop
add
mov
xlat
sbb
sbb
xchg
or
pop
imul
loopne
sbb
push
(bad)  
in
xor
incb
sub
(bad)  {z}
mul
inc
mov
xchg
pop
adc
rol
mov
rcr
(bad)  
enter
mov
lret
mov
dec
fisub
sbb
add
xor
inc
lahf   
mov
sub
int
xor
nop
cmp
dec
cmp
pop
pop
repz js
and
mov
and
and
into   
mov
flds
fdivp
addr16 jnp
xchg
roll
mov
call
lods
jle
imul
pop
cmp
push
add
jp
push
dec
sub
mov
movsb
das    
scas
add
jns
xchg
adc
push
push
pop
adc
stos
notb
push
aaa    
scas
mov
lods
stos
fwait
scas
jg
cmc    
in
push
mov
gs push
cmp
aas    
push
jg
dec
fiaddl
dec
sub
xchg
cmp
pop
push
add
sub
stos
pusha  
pop
stos
xorl
jbe
xchg
cltd   
aad
pop
fsts
and
pinsrw
push
sub
xchg
cwtl   
fisttpll
arpl
std    
rorb
cmpsl
jns
es mov
ret    
sub
mov
out
or
dec
jg
clc    
andl
pop
int3   
jmp
lods
dec
push
sbb
test
pushf  
and
mov
sbb
pop
nop
jp
outsl
lods
cld    
decb
sbb
testb
(bad)  
rcrl
add
into   
jp
add
fnstcw
and
ds mov
inc
js
cmc    
pushf  
enter
jne
cmc    
movsb
stos
pop
ss insl
pop
mov
and
stos
cli    
idivb
and
stos
imul
push
xor
push
pop
rcll
mov
cwtl   
leave  
rclb
cmp
test
adc
out
nop
fs lcall
leave  
xor
decb
imul
nop
adc
loopne
add
or
imul
(bad)  
repnz clc 
sbb
cld    
pop
sbb
test
xchg
out
lcall
repz inc
mov
push
scas
fidivrl
adc
dec
adc
daa    
aas    
fistpll
jmp
test
scas
and
xchg
mov
inc
sbb
outsl
dec
inc
leave  
dec
je
(bad)  
pushf  
mov
jae
xchg
push
sub
lods
divb
aaa    
es inc
test
jne
and
out
insl
(bad)  
jb
ficomp
cltd   
jbe
je
pop
enter
fidivl
scas
jnp
push
outsl
in
jecxz
je
xchg
pop
das    
lcall
xor
stc    
mov
call
and
(bad)  
mov
push
rcr
jg
mov
rorl
jle
dec
push
into   
mov
insl
fildl
jecxz
cmp
shrb
push
dec
(bad)  
jg
xchg
arpl
xor
mov
scas
decb
push
jne
imul
call
sub
xor
scas
(bad)  
pop
xchg
into   
outsl
sti    
push
repnz sbb
popf   
or
push
xchg
nop
or
mov
ds xchg
and
and
cwtl   
jns
inc
jnp
outsl
out
add
fsts
inc
cwtl   
pop
pushf  
dec
repz fstp
fisubr
movsl
test
push
in
sub
in
(bad)  
rolb
push
shr
and
cmp
(bad)
push
call
jo
push
xchg
lahf   
add
imul
sbb
xchg
push
es cltd 
lret   
(bad)  
or
sbb
das    
xor
sub
gs xchg
add
scas
fistl
xor
rcr
(bad)  
push
adc
stos
dec
push
add
or
push
std    
add
ss aas 
mov
cmp
cwtl   
repnz pop
jmp
(bad)
fldt
icebp  
xchg
lcall
pop
loop
mov
sbb
pop
mov
les
out
test
pop
mov
inc
cmpsl
arpl
push
insl
pop
adc
ffreep
xchg
nop
ds mov
xchg
mov
add
aam
ficom
fbstp
inc
in
jo
add
adc
jno
sub
loopne
int3   
push
xchg
pop
cmpsb
fisubrl
int
sub
nop
cli    
lock lea
dec
add
dec
add
outsl
cmp
inc
sbb
mov
mov
jae
mov
in
mov
sar
(bad)  
loope
push
pushf  
or
adc
fwait
int3   
sbb
cmpsl
sbb
push
lods
mov
sbb
ret
and
repz in
pusha  
add
pop
xchg
loopne
dec
mov
push
mov
dec
movsl
push
xlat
js
and
outsl
pop
and
subl
insb
leave  
add
in
xchg
daa    
inc
inc
pop
jmp
add
repz fs push
add
shll
insb
and
rep outsb
ss sub
mov
out
or
mov
push
subl
es cs jmp
xor
mov
cmc    
jle
bound
ffree
dec
fimull
and
and
insb
subl
mov
inc
push
and
bound
clc    
lods
sub
xor
imul
roll
pop
sti    
(bad)  
sub
fsubrs
movsb
lahf   
and
xchg
mov
mov
lret
icebp  
roll
sub
(bad)  
aam
fnstcw
stc    
into   
test
mov
loop
xchg
mov
jne
lock cwtl 
cld    
ret
cld    
cmpsb
lret
push
test
sub
push
(bad)  
jmp
xchg
mov
push
js
aad
negl
lea
dec
enter
ja
pop
(bad)  
mov
adc
stos
lds
jo
sbb
inc
push
(bad)  
int
sub
pushf  
inc
mov
add
and
jo
imul
mov
sub
adc
cmp
fcom
adc
inc
hlt    
cmpsl
stc    
cmp
fwait
mov
stos
jle
cltd   
xchg
xchg
arpl
bound
call
sub
push
mov
lret
pusha  
adc
mov
inc
pop
dec
xchg
mov
mov
adc
roll
testb
sti    
sub
and
scas
jge
and
lds
push
cwtl   
movsb
push
lods
fwait
das    
(bad)  
ss jl
repz out
xchg
sub
ret    
bound
ja
insb
lret   
push
and
mov
xchg
sbb
je
sbb
lret   
mov
xchg
insb
outsl
popl
out
dec
inc
icebp  
jmp
mov
jno
jge
sbb
xor
loop
lods
mov
mov
les
dec
push
push
mov
fistpll
fstpl
fcomip
out
adc
into   
fsts
mov
ret
or
(bad)  
out
dec
(bad)
push
in
mov
aas    
aaa    
fnstenv
stc    
(bad)  
inc
pop
enter
scas
stos
rolb
mov
arpl
lahf   
mov
cmpsl
test
pop
add
lds
inc
shrb
cmp
or
popa   
xor
pop
repz aad
adc
clc    
(bad)  
fwait
jle
pop
insl
cs sahf 
push
popaw  
out
jl
mov
test
sbb
mov
push
add
add
jmp
ud1    
sbb
add
sbb
sbb
xchg
test
insl
sub
mov
inc
dec
cmp
mov
(bad)  
in
int3   
(bad)  
repnz mov
lds
rclb
(bad)  
fisubrl
in
dec
es push
nop
int
or
imul
xchg
mov
popf   
in
pusha  
lds
test
test
or
cli    
jmp
lahf   
adc
popl
xchg
xor
sbb
fild
mov
or
in
fstp
xchg
arpl
imul
xlat
aaa    
outsb
in
jno
popf   
popf   
jns
insl
fisubl
jle
cld    
test
add
popf   
gs ja
mov
jno
sub
xor
stc    
enter
flds
pop
imul
sub
into   
enter
xchg
pusha  
sub
mov
out
cmc    
cmp
cmp
push
push
std    
add
stos
jae
dec
sarl
mov
ss cmc 
leave  
lret   
cmp
lret
and
dec
pop
jne
push
sahf   
gs ss lret 
add
inc
jecxz
popf   
dec
or
in
cltd   
shrl
nop
add
out
fdivrs
xchg
(bad)  
loopne
sub
popa   
jne
jle
fwait
pop
pop
mov
movsb
add
repnz lret
cmp
out
xchg
mov
xchg
mov
je
cmp
mov
or
int3   
(bad)  
lahf   
lea
arpl
fcmovnb
sahf   
rorl
jne
addl
imul
fdivrp
loopne
fsubp
adc
inc
inc
in
aaa    
pop
rcll
inc
sahf   
ret
fstps
sub
mov
out
adc
test
ss jnp
(bad)  
jb
adc
jecxz
paddq
lods
xchg
inc
loop
xchg
mull
out
lods
xchg
sbb
pop
mov
push
(bad)  
xchg
outsl
fadd
cmp
inc
mov
adc
enter
adc
fstps
sbb
xor
pop
mov
sbb
(bad)  
out
or
shr
outsb
pop
push
fisttpll
repnz
icebp  
popa   
and
mov
cmp
divl
xor
push
mov
scas
inc
mov
in
lcall
insb
sbb
lcall
les
ja
xchg
imul
lret   
mov
adc
pusha  
imul
fcompl
sbb
inc
rclb
and
cmpsb
jns
(bad)  
xorl
out
mov
lock or
aad
aaa    
adc
ret
and
aaa    
adc
mov
sti    
dec
xchg
jmp
push
mov
movsb
addr16 adc
enter
add
and
rep insb
sahf   
sub
dec
pop
pop
int3   
jle
cmp
sub
popa   
and
adc
sub
pop
(bad)  
push
(bad)  
fbld
dec
jge
pop
sarl
cmpsl
jg
(bad)
ret
add
mov
lods
or
divl
xchg
cmp
(bad)  
xor
jo
cmpl
arpl
sbb
inc
push
popf   
mov
push
dec
inc
out
jmp
add
xchg
mov
ss xchg
dec
cmovbe
movsl
pusha  
sti    
sbb
dec
inc
fnstcw
shrb
mov
dec
imul
mov
jl
es int
add
mov
xor
cmp
mov
mov
sub
clc    
in
aam
and
mov
fsubl
ja
aad
push
sub
jno
das    
mov
lds
pop
cli    
add
adc
mov
fld
in
add
or
mov
sub
icebp  
lock jno
addr16 sbb
incl
inc
sbb
sub
mov
sbb
xchg
(bad)  
sbb
pop
push
cltd   
aad
sbbl
stos
aam
arpl
mov
sbb
jbe
ret    
jo
pushl
ds inc
push
loope
(bad)  
add
push
sub
mov
xchg
aas    
add
lea
xchg
into   
loope
notl
push
pop
aaa    
popf   
daa    
push
pushf  
add
ljmp
out
cli    
fisub
lds
adc
adc
dec
and
add
rcll
jae
push
push
mov
cmp
ret    
dec
pop
sahf   
push
dec
push
mov
(bad)  
xor
jecxz
shrb
lret   
mov
imul
sbb
inc
aam
aaa    
pop
aad
push
mov
and
push
adc
pmulhuw
sbb
mov
les
push
(bad)  
dec
outsl
jge,pn
dec
xlat
addr16 lret
jl
cmp
test
mov
jno
int3   
imul
mov
push
arpl
sti    
xor
inc
test
push
int
xchg
cmp
(bad)  
iret   
fist
out
jmp
inc
mov
shr
sub
inc
je
and
dec
lods
cld    
rcll
add
mov
sbb
(bad)  
(bad)  
pushf  
xchg
dec
mov
push
sub
fisubrl
popa   
dec
sub
inc
mov
(bad)  
push
jle
out
(bad)  
cmp
push
decl
adc
in
sbb
test
sahf   
das    
jno
loopne
mov
in
sub
out
pop
and
lea
imul
xchg
cmp
sbb
mov
aad
arpl
hlt    
les
loope
sbb
stos
mov
xorl
fsubrl
push
arpl
aaa    
out
sub
inc
sahf   
mov
pop
mov
cmpl
add
lret
dec
outsl
xchg
mov
(bad)  
push
ljmp
clc    
(bad)  
hlt    
popf   
jae
cs dec
sar
xor
mov
cltd   
pop
(bad)  
dec
xor
inc
mov
aad
repnz ljmp
lret
fnop   
jg,pt
add
in
aas    
insb
and
inc
and
pop
sahf   
xchg
or
in
push
pop
ss test
sbb
mov
cmp
leave  
mov
enter
cs pop
and
insb
push
cwtl   
jae
cmpsb
into   
in
mov
inc
push
jnp
mov
lds
fwait
or
fdivl
imull
jns
cmp
stos
int
loop
les
jns
lods
gs mov
push
xor
cli    
sub
out
mov
fisubrl
outsb
jge
repnz xlat
or
xor
pop
in
adc
pop
mov
ljmp
imul
(bad)  
jnp
clc    
ljmp
inc
sbb
ljmp
pop
pop
add
add
repz dec
jl
jg
stos
adc
pop
repz cmpsl
aam
cmp
movsl
lock push
cmc    
daa    
push
xor
in
std    
test
(bad)  
fiadd
or
inc
call
jb
in
idiv
mov
sub
inc
push
iret   
in
cmp
adc
pop
jae
jle
loope
add
cmp
jmp
cs add
call
hlt    
movsl
fldt
mov
mov
lea
push
je
xchg
push
jb
aad
cwtl   
test
jae
stos
out
into   
adc
jb
push
into   
outsb
jg
mov
pop
inc
call
mov
xchg
mov
push
scas
pop
push
dec
xor
mov
inc
jo
xor
jle
dec
add
lods
fldcw
es inc
or
sbb
sub
sarl
jno
bound
outsl
(bad)  
push
sbb
arpl
mov
scas
mov
push
inc
imul
scas
stos
arpl
add
and
xchg
mov
cmc    
cmp
repz pop
push
mov
inc
adc
out
mov
mov
out
add
pop
test
and
lds
xchg
mov
ljmp
(bad)  
cs clc 
sbb
jge
test
test
push
add
ljmp
scas
mov
adc
in
sti    
aas    
scas
icebp  
out
push
sti    
mov
mov
push
leave  
and
mov
mov
popa   
push
xlat
mov
and
int3   
decl
mov
pop
cmpsb
int3   
cwtl   
mov
mov
inc
std    
popl
mov
cmp
rcrl
daa    
adc
je
pop
cmpsl
(bad)  
sbb
aad
pushl
adc
mov
push
xchg
cmp
mov
or
mov
inc
dec
cmpsb
aad
mov
fcmovne
xchg
in
push
xchg
out
cs push
mov
notl
inc
sbb
push
mov
out
pop
dec
mov
push
xchg
aaa    
jl
sub
mov
pop
roll
xor
pusha  
dec
mov
(bad)  
pop
sub
dec
xor
xchg
mov
pop
clc    
ficoml
stos
push
sahf   
int3   
jl
mov
(bad)  
lea
adcl
sub
sbb
icebp  
inc
add
imul
xchg
test
cmp
or
xchg
sbb
ds xchg
movsl
test
mov
addr16 clc 
mov
scas
dec
sarl
inc
jae
pop
inc
sbb
rorl
rcr
imul
in
mov
pop
jae
xor
aas    
arpl
pop
rclb
test
mulb
adc
push
into   
mov
mov
or
lea
push
call
mov
lods
mov
jnp
fs pop
aaa    
xor
push
inc
jle
xchg
mov
stc    
in
lea
xor
cmp
jbe
dec
pop
(bad)  
sti    
xor
xor
(bad)  
cld    
adc
stc    
xor
lret
inc
mov
pop
xor
xchg
cmp
dec
mov
aas    
cmp
jge
in
mov
pushf  
shrb
jno
(bad)  
jbe
sbb
sub
repnz adc
xchg
clc    
jno
pop
mov
add
push
out
adc
lret
lods
mov
ss push
enter
dec
pop
lcall
sub
sbb
adc
nop
mov
daa    
in
hlt    
cmc    
popa   
lahf   
xchg
jae
cmp
xorl
insl
mov
lock ret
sbb
jg
pop
sbb
mov
inc
jecxz
push
jns
fwait
cmp
push
aad
imul
inc
enter
sub
in
rcll
xorl
sbb
and
inc
cld    
or
(bad)  {z}
mov
std    
xchg
dec
aaa    
aad
dec
and
cwtl   
icebp  
push
sub
mov
iret   
cmpsb
sub
(bad)  
jne
stc    
mov
mov
push
jae
outsb
mov
cld    
xor
add
sbb
hlt    
mov
into   
push
in
hlt    
(bad)  
push
dec
sti    
ret
cmc    
inc
adc
ret    
lret   
push
dec
jae
jecxz
adc
adc
je
pop
rorb
mov
mov
mov
cltd   
sub
adc
cmpsb
xor
ficom
and
fldenv
jg
or
pop
xchg
mov
stos
fadd
adc
xor
push
vmwrite
push
push
sub
push
cmpsb
lcall
ds in
cmp
push
xchg
push
jb
jecxz
in
add
icebp  
push
fwait
loopne
(bad)  
clc    
and
arpl
sbb
mov
outsl
push
inc
inc
add
cmp
sbb
inc
mov
out
pusha  
pop
ffree
xchg
mov
or
(bad)  
hlt    
and
mov
mov
(bad)  
pop
pop
push
fsubrl
fwait
das    
and
cmp
push
ret    
or
out
(bad)  
dec
adc
add
sahf   
adc
add
test
lds
hlt    
out
mov
jl
pusha  
lods
outsb
call
jle
ljmp
xchg
add
scas
or
cltd   
(bad)  
cmp
sbb
push
shlb
insl
popf   
aaa    
add
insl
lods
or
adc
jg
loopne
push
out
cmp
jl
(bad)  
jb
cmpsl
sub
adc
or
test
inc
cmp
or
cmp
mov
lock loopne
add
int3   
jmp
sub
sub
aaa    
fcmovne
pushf  
jnp
mov
adc
inc
xchg
pop
cltd   
out
in
sarb
fdivr
xor
es xchg
cmp
mov
inc
int
or
or
or
xor
xchg
sahf   
or
inc
ljmp
xor
adc
inc
push
mov
jno
xchg
push
movsb
inc
adc
mov
rclb
in
cmp
or
fs leave 
fimul
out
mov
adc
out
cmpsb
or
xlat
sbb
lahf   
inc
ret    
xor
imul
jns
and
mov
lock es jo
xchg
mov
mov
mov
push
pop
stos
in
add
pop
fildl
out
sbb
cmpl
sub
lret   
in
fisubrl
mov
jnp
mov
cli    
mov
icebp  
mov
cmp
and
dec
and
inc
pop
test
aaa    
mov
sbb
or
sbb
pusha  
fsubp
and
out
mov
xchg
sub
dec
aas    
arpl
test
lret   
cmp
cmpsb
dec
lea
imul
pop
int
shrb
push
dec
stc    
pop
ss push
inc
inc
mov
inc
mov
and
push
je
mov
sub
push
and
and
nop
incl
inc
pop
arpl
xor
pop
sbb
fisub
pop
cmc    
push
(bad)  
into   
mov
add
mov
cmp
fisttp
mov
fnstcw
add
adc
pop
inc
lret   
or
fst
cmp
es jno
pop
je
push
clc    
leave  
mov
sbb
xchg
push
pusha  
jle
adc
xchg
sbb
push
lods
add
dec
mov
not
push
aaa    
inc
fsubp
loopne
push
or
out
rcrl
icebp  
jne
sbb
ss mov
dec
pop
and
sub
xchg
movsb
idivb
lret
cvttps2pi
jbe
test
inc
sub
mov
jns
(bad)  
mov
addr16 sti 
ret
cmp
cmp
inc
xchg
sbb
xchg
add
cmp
hlt    
pop
adc
clc    
fldenv
movsl
in
or
xchg
movsl
std    
(bad)  
das    
aad
sti    
mov
xchg
inc
cmc    
add
scas
mov
test
or
mov
adcb
inc
adc
movsl
lret   
sti    
mov
and
jno
cmp
test
cmc    
scas
sarb
enter
loopne
mov
inc
pop
fnsave
outsl
pushf  
das    
adc
(bad)  
xchg
ljmp
push
call
push
adc
lret
es in
imul
xchg
lret
fnstenv
test
mov
mov
inc
movb
lods
fwait
(bad)  
jae
sbb
xor
std    
pusha  
imul
movsl
cmc    
jbe
mov
jl
jg
je
jecxz
or
xchg
mov
mov
data16 cmp
mov
push
rclb
mov
xor
ljmp
jo
lods
test
je
clc    
sub
jmp
inc
mov
outsl
adc
das    
push
lcall
xchg
add
xor
push
sub
pop
xchg
and
fs or
clc    
scas
xlat
js
or
adc
jo
mov
lret   
inc
mov
(bad)  
jae
cmp
dec
push
mov
jg
cmc    
sub
arpl
js
mov
adc
mov
xchg
fldcw
incl
gs mov
bound
xchg
jg
es popf 
hlt    
adc
push
xor
jne
popa   
sub
jge
lock shlb
jecxz
sub
ljmp
push
and
aas    
sub
pop
jb
aam
hlt    
sbb
sub
push
in
aad
data16 movsb
imul
imul
jno
push
pop
call
loope
lock or
lods
pop
mov
in
mov
jp
pushf  
dec
movsl
push
jmp
ret
add
fistl
aam
push
push
sub
jbe
lcall
dec
popf   
(bad)  
cwtl   
cmp
push
push
mov
aas    
dec
stos
outsb
fiaddl
ret    
ja
inc
mov
popa   
test
or
testl
lahf   
push
mov
mov
jbe
and
sbb
bound
mov
int
(bad)  
popf   
sarb
ss daa 
hlt    
push
mov
lcall
sbb
or
inc
xchg
cmp
cmp
pop
push
fcom
outsl
dec
test
cmpsl
stc    
and
mov
jg
stos
inc
clc    
or
ret
arpl
jmp
xchg
insl
fwait
add
out
aaa    
in
lea
push
daa    
or
cld    
mov
pushf  
mov
push
cmp
mov
iret   
repnz inc
rorb
sbb
leave  
mov
ret    
stos
aad
scas
(bad)  
test
ret    
mov
jge
lock and
fwait
iret   
(bad)  
xorl
jp
out
push
ret
sbb
pop
adc
daa    
int
sub
ficompl
adc
mov
push
adc
fcom
mov
mov
mov
inc
rclb
iret   
cmp
push
rclb
outsl
mov
loope
fimull
fidivl
test
xchg
loop
push
das    
add
das    
(bad)  
cmp
mov
rorb
pop
shll
out
push
mov
gs fwait
insl
mov
arpl
lahf   
inc
test
test
mov
pusha  
fldcw
adc
outsl
cmp
in
lods
sbb
pop
ret
ljmp
loop
testb
imul
dec
jge
and
jl
test
ror
cmpb
es int
movsl
cmp
cli    
in
gs
je
pop
jl
iret   
iret   
(bad)  
movsb
pushf  
cs pop
mov
popf   
ret    
insb
sub
push
pop
xchg
push
pop
sti    
add
push
add
cs inc
xchg
push
ds
orl
ja
mov
mov
dec
sub
dec
push
cmc    
icebp  
mov
xor
lock fstp
iret   
xchg
and
or
adc
xor
mov
ret
mov
dec
(bad)
adc
jae
or
and
mov
sbb
add
out
(bad)  
loopne
out
out
mov
dec
or
in
aad
inc
inc
aad
pop
pop
mov
leavew 
jnp
jno
iret   
out
je
cltd   
mov
xor
mov
push
push
not
ss cwtl 
cmp
insb
add
push
ss
mov
lock in
or
shll
jg
push
sbb
ds push
ljmp
push
fidiv
movsb
(bad)  
xlat
lret   
lock iret 
dec
jno
add
out
dec
add
scas
pop
ss jns
xchg
test
dec
push
out
jnp
adc
fistpl
cld    
fs mov
data16 adc
scas
test
push
mov
imul
(bad)  
rolb
bound
fistpl
movsl
ret    
adc
xlat
aaa    
(bad)  
dec
inc
sarb
xchg
mov
ljmp
lcall
repz cltd 
pop
xor
repnz sub
(bad)  
movsb
mov
push
and
push
dec
add
and
fimull
out
mov
mov
mov
and
sub
xchg
pop
pop
mov
mov
stos
add
(bad)  
jbe
out
pop
inc
sahf   
sar
aad
rclb
dec
mov
adc
cs cmp
adc
push
test
jmp
push
(bad)  
je
cmp
sti    
call
jo
lea
push
pop
test
roll
sbb
pop
stos
adc
adc
xchg
mov
cmp
push
jbe
jbe
mov
and
repz sub
lret
lods
test
mov
xchg
jg
mov
mov
iret   
insl
aaa    
mov
inc
push
inc
inc
add
lcall
mov
repz addr16 lret 
out
sbb
mov
add
scas
xor
std    
inc
jl
xchg
loopne
cmp
mov
push
and
cmp
jae
jge
cmc    
add
pop
cwtl   
jg
mov
cmp
jne
loop
sub
loopne
std    
dec
jns
faddl
scas
and
scas
xor
lret
sbb
les
(bad)  
lds
sbb
loop
xor
popf   
into   
mov
enter
mov
(bad)  
adc
jle
cwtl   
das    
adc
stc    
addr16 mov
cmp
outsb
mov
fcomip
pushf  
sbb
push
cmp
mov
sarl
and
cltd   
xchg
test
(bad)  
jecxz
fnstcw
add
je
and
mov
shl
shl
loopne
xor
dec
add
in
mov
fwait
aas    
arpl
stos
sub
add
dec
pop
insl
lret   
mov
xchg
inc
sub
and
add
test
bound
fcoml
pop
pop
vshufps
mov
and
sub
xor
cli    
aam
mov
add
stc    
push
in
and
imul
aad
out
fist
jg
or
dec
jp
add
push
cld    
std    
lds
push
lea
sub
inc
outsb
jl
mov
rcpps
ss pop
out
loope
cli    
ret    
and
xor
loope
pushf  
insb
fimul
jne
lods
fwait
xchg
mov
fistl
pop
fmull
cmp
(bad)  
idivb
stos
mov
pop
idiv
movsl
scas
lret
inc
imul
inc
push
mov
jp
outsl
lods
push
mov
cmp
sbb
sbb
pushf  
dec
xchg
out
enter
mov
or
and
(bad)  
insb
dec
mov
mov
mov
inc
movsl
out
dec
arpl
nop
or
jno
pop
mov
fcmovu
mov
insl
and
mov
imul
sub
(bad)  
out
push
sbb
in
ss pop
adc
incl
arpl
jl
dec
icebp  
and
add
xchg
es loopne
mov
stc    
(bad)  
punpckldq
inc
enter
(bad)  
aas    
cmp
arpl
ja
pop
lcall
cmp
xor
cmp
(bad)  {z}
dec
cs aam
xor
shll
int3   
fidivrl
scas
push
xor
sub
mov
push
lds
lahf   
mov
fldenv
(bad)  
sub
push
cmpsb
popf   
push
push
jecxz
sbb
mov
test
or
sahf   
xor
push
pop
add
mov
test
cld    
into   
lock mov
das    
out
mov
repz
bnd jl
xor
cs lock push
mov
jmp
fs inc
adc
sbb
cmpsb
std    
pushf  
xor
jecxz
xor
adc
outsb
cwtl   
dec
addr16 fsub
sarl
sub
in
jmp
into   
into   
leave  
lcall
inc
mov
cmp
adc
loopne
iret   
nop
fisttp
or
pop
test
or
(bad)  
jns
cwtl   
push
idivl
mov
cmc    
dec
outsl
loope
ret
or
imull
jp
loopne
imul
pop
pop
jle
and
pop
adc
aam
mov
aaa    
mov
jl
fisubr
cmp
cmpsb
pusha  
divb
imul
xor
xor
leave  
xchg
(bad)  
sub
xchg
ret    
adc
lret   
or
(bad)  
cwtl   
add
push
mov
sub
ret    
icebp  
push
pop
or
xchg
mov
or
icebp  
sbb
add
dec
mov
or
out
push
pop
xchg
cltd   
(bad)  
sti    
cmpsl
xchg
cmc    
lret
in
sub
movsl
cmp
fcomps
jns
inc
(bad)
pop
(bad)  
stc    
insb
add
lcall
(bad)  
and
sbb
sub
inc
mov
stos
roll
ja
inc
scas
pop
shrl
aaa    
(bad)
jecxz
popa   
mov
add
adc
test
pop
sahf   
movsl
add
dec
jo
aaa    
fdivrl
dec
repnz sti 
scas
pusha  
repz and
lret   
pop
cmp
jns
sub
fdiv
out
inc
inc
cli    
stos
test
fwait
std    
sbb
repz divb
clc    
into   
jmp
jecxz
cmpsl
fidivrl
mov
aad
(bad)  
push
mov
and
xor
popf   
cmp
or
mov
int3   
rclb
inc
aad
sub
add
mov
popf   
iret   
xor
sbb
movl
daa    
mov
pop
pop
add
cld    
ljmp
leave  
(bad)  
data16 jbe
rorb
inc
sbb
mov
inc
outsl
orl
sub
push
mov
flds
repz add
push
and
push
and
adc
dec
jp
clc    
pxor
inc
dec
and
movsl
int3   
inc
insl
(bad)  
je
outsl
mov
pop
or
addl
loopne
push
je
sub
aaa    
movsb
xchg
into   
jb
mov
pop
sarl
mov
dec
add
jo
popa   
out
mov
xchg
es das 
jle
ljmp
push
mov
enter
scas
sub
mov
inc
in
(bad)  
cli    
in
test
jnp
outsl
push
inc
jne
adc
cli    
int3   
test
inc
xorl
mov
and
push
mov
inc
push
enter
pushf  
fwait
inc
jle
add
add
ja
and
add
add
in
sub
aaa    
repz repnz loop
aas    
test
xchg
shrl
ja
xor
inc
addr16
xor
sbb
xchg
ret    
stc    
xor
jne
xchg
and
(bad)  
xor
into   
pushf  
sub
mov
leave  
pushf  
in
sbb
(bad)  
loopne
(bad)  
scas
inc
add
jbe
push
fcmovnb
(bad)  
cmc    
stos
jl
dec
jge
cmp
ret    
xchg
xor
xchg
inc
add
cmc    
ret
pusha  
repnz push
out
cmp
cwtl   
inc
push
sbb
add
stc    
cmpsb
mov
leave  
aaa    
push
cmpsl
cmp
bound
xchg
sbb
mov
jo
imul
and
dec
adc
cmp
push
add
out
lods
and
mov
sbb
int
or
sub
stc    
je
push
aas    
scas
xchg
sbb
(bad)  
aas    
sub
rcrb
push
mov
xchg
aam
jmp
js
cmp
mov
cwtl   
jne
fildll
add
push
sbb
in
fisubr
adc
dec
loope
std    
mov
stos
int
hlt    
cmp
push
lds
movsb
in
jno
orl
sti    
push
out
add
cmpl
movsb
repnz mov
push
adc
call
jmp
xlat
pop
repz ja
mov
gs xchg
lock lahf 
lea
pop
push
cmp
lcall
jns
xor
lods
inc
ret
inc
aad
add
mov
cmovne
mov
mov
push
(bad)  
mov
cwtl   
mov
jmp
dec
test
mov
pusha  
mul
addb
mov
in
push
in
js
in
js
hlt    
dec
and
xchg
icebp  
movsl
popa   
mov
push
push
xchg
and
mov
pop
or
xchg
inc
repnz adc
out
(bad)  
stc    
xchg
out
popa   
inc
pop
shll
push
pop
lret
mov
sbb
cmp
(bad)  
(bad)  
cmpsb
pop
xlat
cmc    
mov
lds
add
shrb
push
jmp
out
je
dec
mov
sub
dec
fldl
inc
or
lea
cmp
inc
mov
pop
mov
inc
mov
xlat
or
sbb
in
push
sbbl
fdivs
push
cmpsl
lds
pop
inc
mov
ja
cltd   
jb
std    
aas    
cmp
mov
and
mov
das    
stc    
cmc    
cmp
daa    
inc
enter
fsubrl
and
mov
mov
sti    
inc
loope
ljmp
adc
test
pop
pop
addr16 mov
js
hlt    
jb
and
sub
shl
mov
dec
mov
loopne
dec
(bad)  
adc
and
cli    
adc
test
aad
dec
mov
test
and
xchg
stos
pop
sub
loope
(bad)  
es jl
and
(bad)  
push
push
sub
sub
sub
jg
pushf  
jmp
dec
ret    
xor
dec
movhps
inc
fisttpl
mov
lret
cmp
rcrb
inc
lret
jp
mov
fs ds add
lods
imul
cmp
lods
jne
jne
or
sub
dec
inc
testl
push
lcall
rclb
xchg
call
out
jmp
pop
sub
cmpl
jbe
fildll
sub
movsb
out
pop
popf   
dec
mull
pop
mov
scas
mov
subb
in
(bad)  
push
test
imul
aaa    
aaa    
adc
push
mov
lret   
inc
xor
mov
jnp
dec
adc
insl
mov
push
into   
je
sbb
test
(bad)  {%k5}{z}
rcll
sub
es jmp
sbb
mov
pop
adc
xchg
mov
lahf   
adc
mov
sub
push
or
dec
jbe
mov
mov
aas    
arpl
pop
xchg
aad
sti    
clc    
rolb
or
mov
sbb
push
test
shrl
nopl
es cld 
pushf  
lret   
inc
and
dec
imul
mov
cwtl   
lahf   
xchg
push
jl
pop
fwait
loopne
pop
pusha  
dec
xchg
xchg
add
xchg
inc
repz jnp
push
inc
mov
in
push
test
and
lds
loop
jmp
test
outsl
shl
pop
add
jne
mov
mul
and
lods
mov
push
xchg
mov
pop
mov
jp
sub
call
cmpsb
sub
imul
pop
loope
js
imul
xchg
out
or
adc
xor
cmp
popf   
sub
pushf  
sub
mov
fwait
pop
cmpsl
cmp
pop
adc
sub
imul
rolb
pop
adc
add
bound
stc    
xchg
in
mov
mov
adc
or
adc
dec
push
xor
bound
xchg
or
mov
shrb
push
adc
add
sbbl
add
ret    
stc    
xchg
sbb
hlt    
(bad)  
push
(bad)  
mull
xchg
lds
adc
cwtl   
js
xchg
pop
sub
fdivr
aas    
ror
pop
in
fild
jne
stos
fisttpl
jl
sbb
in
or
mov
xchg
mov
add
push
movsb
pop
pop
popf   
repnz outsb
mov
fsubp
cmpsl
add
out
aad
cmpsb
(bad)  
loope
or
add
xchg
imul
add
pop
fcmove
pop
negb
movsb
adc
mov
xlat
mov
ds test
(bad)  
inc
inc
push
push
scas
sahf   
aaa    
ficoml
ret    
cs pop
inc
gs js
fsubrp
(bad)  
in
mov
aad
cmp
lds
repnz xor
push
pop
test
cmp
cmc    
aam
cmp
ret
test
mov
nop
mov
scas
nop
test
test
push
cwtl   
sub
pop
and
sub
scas
or
push
fcoms
fimul
std    
dec
fcoms
xchg
(bad)  
fdivrl
jg
and
sbb
sub
test
cmp
or
stos
aaa    
clc    
push
std    
xchg
mov
js
rcl
daa    
pusha  
inc
mov
(bad)  
stc    
push
lret   
insb
and
dec
pop
pop
inc
fs sbb
sbb
xchg
movsb
sub
push
push
ljmp
scas
cmp
xor
test
sbb
mov
imul
mov
sbb
push
or
inc
xor
and
xor
jnp
jmp
push
add
nop
call
add
outsb
push
icebp  
dec
or
insb
add
adc
pop
pop
outsb
std    
test
scas
jb
push
push
adc
mov
addr16 cmc 
ret    
mov
cmc    
(bad)  
mov
lcall
shr
xchg
gs pop
pusha  
fnstenv
cmp
jle
sbb
mov
adc
dec
xor
xchg
or
(bad)
cmp
iret   
mov
rcl
js
cmovne
je
rcl
cmpsb
mov
mov
add
jmp
dec
(bad)  
pop
insl
xor
clc    
(bad)  
pop
icebp  
sub
mov
insb
add
decb
dec
fistpl
(bad)
int
sub
addr16 pushf 
adc
cmpsl
dec
dec
push
or
sbb
push
and
pop
lock insl
cmc    
insl
mov
or
sub
mov
fwait
jmp
inc
or
cmpsl
push
dec
ljmp
adc
inc
or
add
add
cs es cmp
mov
pop
inc
add
mov
xor
inc
push
xor
mov
lds
rorb
xor
jl
hlt    
pop
mov
xor
ljmp
loope
(bad)  
jmp
cmpsb
test
pop
sbb
repz js
mov
mov
mov
sub
pop
cwtl   
cmpsb
lret
arpl
test
addr16 jle
aas    
aas    
or
popa   
adc
jmp
xchg
dec
popa   
sub
lods
xchg
xor
xchg
cmpsb
testb
mov
sbb
movsb
adc
dec
jmp
adc
int3   
dec
adc
icebp  
fnsave
xchg
push
cmp
dec
movsl
xor
sbbl
and
nop
inc
xchg
xor
jbe
mov
push
mov
and
mov
icebp  
(bad)  
les
lock addl
nop
adc
setno
test
and
push
xchg
xor
insb
(bad)  
out
outsb
mov
mov
inc
adc
mov
mov
out
lock and
cmpsl
mov
xor
mov
in
pop
leave  
pop
mov
ret
lods
hlt    
sarb
mov
mov
mov
adc
push
int3   
stos
jmp
lret
xchg
rcll
cmp
rcll
je
addr16 or
jno
lea
cmpsw
adc
pusha  
mov
mov
mov
cmp
xlat
pushf  
jmp
sbb
outsl
inc
xor
sbb
inc
cmp
push
or
in
popf   
push
das    
es sbb
cmp
lods
sar
mov
mov
push
add
daa    
fldenv
mov
push
push
int3   
push
jne
add
cs push
cmpsl
popf   
fldcw
pop
adc
xchg
fbstp
js
and
test
fdivl
cmp
sbb
pop
aam
or
xlat
add
es push
movsb
xor
aad
push
scas
sub
jg
sbb
stc    
or
adc
sub
jle
mov
jno
pop
test
test
or
dec
(bad)  
or
fiadd
in
faddl
fnstsw
cwtl   
bound
scas
clc    
or
mov
stos
enter
push
jl
imul
push
gs dec
aas    
pop
es ja
std    
xor
sti    
mov
add
mov
pop
sbb
(bad)  
fcomps
lods
js
mov
cmpsl
push
cmp
add
mov
in
inc
into   
scas
cmp
pop
inc
out
cmp
js
stos
lds
jg
dec
mov
lock
or
sbb
or
mov
push
mov
pop
dec
lea
lcall
mov
or
cmp
sbb
inc
imul
push
hlt    
lahf   
bound
mov
xchg
int3   
mov
or
or
sahf   
mov
jo
xchg
mov
jl
xchg
fcmovb
push
pop
das    
push
or
xlat
out
mov
(bad)  
jmp
gs and
(bad)  
(bad)  
jo
xlat
daa    
repz cld 
pop
js
outsb
xchg
push
call
and
insb
pop
sahf   
leave  
jge
daa    
repnz pop
dec
dec
cmp
and
test
jo
sbb
xor
cli    
lds
outsl
mov
(bad)
xor
imul
rcr
popf   
mov
pop
add
or
push
dec
xchg
xor
or
adc
clc    
fiaddl
adc
cmc    
lds
(bad)  
pop
mov
add
test
mov
dec
mov
jl
lcall
and
fistp
aas    
adc
jg
mov
xor
jp
fwait
adc
lret   
inc
scas
stos
das    
orb
push
or
adcl
data16 mov
push
jnp
cmp
fwait
sub
notb
loopne
les
push
mov
inc
pop
adc
mov
pop
mov
and
outsb
xor
js
popa   
adc
insl
push
mov
std    
mov
cmp
sbb
mov
push
xchg
sub
mov
adc
bound
pusha  
insl
fisubr
xor
cs mov
adc
fnstenv
(bad)  
rcr
call
dec
adc
loopne
inc
test
xchg
call
pop
in
pop
aam
and
jbe
shlb
add
cmp
add
js
mov
sbb
adcl
sbb
cli    
push
sub
cmp
(bad)  
lahf   
fdivrl
inc
push
xor
add
test
in
repnz fcomps
into   
jl
mov
jle
in
scas
clc    
mov
pop
fdiv
pop
xor
movsb
inc
jno
xlat
rol
(bad)  
cmp
dec
jp
adc
cmc    
mov
cmp
adc
bound
mov
dec
cmpsl
inc
mov
or
bnd jg
and
(bad)  
ficoml
lea
inc
aas    
jnp
addr16 mov
xor
mov
fs leave 
ss in
movl
lock adc
push
test
jnp
xor
xor
push
sahf   
pop
fucomp
stos
loope
jno
sub
sub
cmpsl
lcall
imul
jno
adc
popf   
movb
jb
dec
add
fwait
sbb
int
xchg
ljmp
dec
pop
aam
mov
push
(bad)  
xchg
dec
(bad)  
pop
or
daa    
hlt    
jns
lods
mov
push
and
pop
sub
inc
mov
xchg
push
push
pop
or
jp
fildl
inc
mov
out
sahf   
xor
adc
outsb
lock inc
add
sub
jbe
not
xchg
xchg
imul
je
xchg
gs aad
push
push
fsubrp
sbb
pop
inc
(bad)  
loope
dec
imul
dec
push
adc
ret
ret
(bad)  
aaa    
inc
jb
jp
sbb
add
pop
mov
pop
push
xor
and
xchg
cmc    
adc
mov
mov
test
les
pop
bound
test
jno
and
ret
jle
pop
test
ret
mov
push
inc
ss cmc 
test
insb
lods
aaa    
jno
sub
out
or
stos
xchg
daa    
nop
dec
sti    
inc
cmp
sub
ret    
mov
mov
subl
shl
or
inc
sub
movsb
jnp
xorb
inc
addl
inc
cmp
dec
adc
nop
cltd   
clc    
test
in
mov
aaa    
pop
pop
movsb
popa   
das    
test
(bad)  
or
xchg
inc
andb
sbb
pop
jp
outsb
fidivr
pusha  
popa   
adc
or
or
daa    
aam
inc
push
repnz rcrl
lods
sub
pop
rclb
mov
inc
xchg
xor
xor
icebp  
xchg
frndint 
(bad)  
push
stc    
insb
rcrb
pop
lahf   
test
mov
sub
ss fs pop
pusha  
imul
clc    
xlat
insl
xchg
into   
lret   
adc
cmp
lods
adc
sbb
xchg
popa   
xor
xlat
jae
addr16 xchg
inc
andl
jmp
repz mov
inc
mov
xor
add
insb
sti    
jge
cmpsl
inc
js
into   
dec
testl
fwait
adc
xor
ljmp
outsl
pop
out
(bad)  
jnp
and
mov
push
adc
ret
loop
pusha  
xor
pop
or
xor
aam
clc    
jo
loop
fsubl
loopne
jecxz
or
ret    
mov
stc    
cmpsl
pop
lock inc
mov
add
out
inc
jmp
jp
lds
ret    
ss inc
inc
aam
push
mov
mov
stc    
jecxz
fs inc
pop
fist
xchg
mov
adc
(bad)
add
xchg
jb
cmc    
movsl
pop
cli    
repnz or
adc
es ss insl
lds
jo
inc
xchg
cmp
out
jo
cmp
loopne
mov
data16 out
adc
insl
push
mov
shl
push
mov
shl
add
test
aas    
out
sbb
fisttp
xchg
inc
cwtl   
jmp
push
xor
dec
pop
xchg
popa   
pusha  
fstps
jecxz
push
test
inc
rcl
out
stos
(bad)  
sbb
rcrb
xchg
fnstsw
sarl
(bad)  
out
cmp
adc
mov
aam
cmp
dec
dec
jne
mov
test
lret   
sbb
cltd   
xor
push
(bad)  
xchg
mov
cld    
test
add
pop
in
out
sub
xor
xlat
adc
repnz lods
lea
clc    
adc
divl
negb
imul
sub
dec
push
dec
loop
cli    
mov
scas
push
mov
in
xor
dec
xchg
shl
popl
pop
data16 stos
fmuls
scas
jmp
adc
push
ja
xor
jns
and
int
out
and
push
lods
iret   
jbe
out
(bad)  
inc
das    
pop
movsb
or
cmc    
insl
lds
jb
sbb
fcom
scas
movsb
arpl
jnp
bound
xchg
clc    
add
sub
imull
push
jo
mov
out
fiadd
sbb
jo
ja
fdivrs
icebp  
xor
push
cmp
push
lret
test
and
clc    
cmp
mov
jbe
pusha  
dec
outsb
or
and
xchg
pop
dec
pop
out
jb
mov
addr16 jmp
data16 fiaddl
lods
dec
jle
xchg
cmp
lock cmp
(bad)  
sbb
jg
arpl
xchg
cs pop
mov
mov
xchg
mov
sbb
fistl
xlat
push
aas    
lahf   
addr16 add
or
pop
xchg
sbb
pop
and
std    
jb
lcall
pop
mov
pop
test
mov
stos
fdivrl
mov
sub
je
add
loop
mov
lods
adc
loope
iret   
test
addl
mov
cmp
mov
in
xchg
mov
mov
push
add
and
rcll
adc
fnstenv
out
cld    
aaa    
mov
adc
inc
add
inc
aad
xchg
fcmovu
inc
jl
ja
pop
enter
movl
sub
mov
xorl
mov
or
outsl
aam
adc
movsb
mov
cld    
xchg
fistl
push
lock add
xor
pop
mov
or
fstpt
iret   
fadd
(bad)  
je
out
mov
cmpsl
jne
aas    
xchg
out
or
pusha  
lcall
mov
js
scas
popa   
cmp
icebp  
mov
cmp
ret    
jge
test
pusha  
or
add
xchg
inc
outsl
mov
xor
scas
dec
jo
mov
out
add
ficom
jecxz
push
dec
daa    
dec
lock and
sbb
mov
out
inc
negb
cld    
lock inc
xor
std    
cwtl   
inc
call
(bad)  
mov
pushf  
add
or
mov
lds
xchg
push
mov
or
(bad)  
(bad)  
movsl
add
hlt    
xchg
rclb
or
aam
bound
mov
test
pop
adc
out
pop
xor
aam
and
nop
ret    
pop
adc
repz jb
aam
fnstenv
por
jo
movsb
mov
js
mov
mov
in
push
divb
mov
and
sahf   
fildl
add
sub
dec
hlt    
stc    
xor
jg
inc
loopne
daa    
cli    
or
call
pusha  
and
ss ja
pop
bound
sahf   
jp
add
jae
cmp
movsl
pop
jae
cmp
add
mov
pop
(bad)  
inc
mov
bound
inc
in
ss dec
(bad)  
and
jp
test
setl
mov
jo
push
inc
lret
out
push
inc
test
(bad)  
or
fldt
lahf   
xor
lock mov
sbb
out
lahf   
das    
aaa    
pop
and
mov
fxch
pop
mov
mov
sbb
jge
pop
pop
jb
test
ret
push
mov
add
xchg
js
cmp
loope
mov
dec
xchg
repnz insb
inc
dec
popa   
(bad)  
jo
push
ljmp
mov
stc    
sub
sbb
cmp
cli    
push
out
jge
mov
mov
ss inc
(bad)  {%k5}{z}
fsubrs
frstor
jg
xchg
xor
mov
push
jbe
xchg
insl
inc
mov
and
jecxz
sbb
iret   
inc
jns
xchg
dec
gs adc
or
mov
push
stos
cmpl
sar
adc
push
cmp
imul
bound
sub
push
cmp
lds
ds clc 
test
inc
outsl
pop
cmc    
insb
mov
lret
mov
sbb
call
fisub
icebp  
lcall
out
mov
mov
shlb
jae
cld    
xchg
add
cmp
add
cmpsb
lahf   
sti    
jbe
jns
stc    
add
test
jne
xor
movsb
xchg
pop
outsb
aaa    
test
jge
sarl
jnp
js
add
cli    
fist
xchg
push
addb
ret
mov
ret
bound
ret    
mov
lods
sub
inc
mov
dec
(bad)  
mov
add
sub
flds
xor
cmpsb
jne
shrb
cmp
pop
mov
(bad)  
ljmp
sahf   
cmpsl
rclb
inc
jge
adc
loop
ds push
lcall
fsubr
push
cmp
les
inc
pusha  
inc
mov
pop
lock aaa 
mov
test
mov
mov
cltd   
inc
rcrb
add
inc
aaa    
jle
pop
xchg
lods
jmp
xchg
lret
xchg
and
fucomi
push
mov
cmp
lock xorl
stos
push
xor
sub
cmp
clc    
(bad)  
push
stos
push
mov
decb
stos
bound
or
mov
lods
fisttp
dec
(bad)  
ljmp
mov
and
out
enter
inc
hlt    
enter
mov
daa    
data16 jl
jle
mull
dec
shll
int3   
mov
cmp
mov
sbb
or
mov
mov
mov
or
mov
push
mov
(bad)  
sbb
mulb
cmp
add
cwtl   
add
inc
fchs   
stos
cmpsb
cmc    
in
xchg
push
mov
xor
imul
or
and
aas    
mov
sbb
stos
call
fbld
in
test
(bad)  
icebp  
popf   
outsl
fwait
xchg
pop
dec
ja
roll
or
sbb
lods
adc
mov
xchg
test
lods
cltd   
nop
int3   
or
xchg
mov
add
inc
or
mov
mov
clc    
inc
xor
roll
or
test
dec
mov
test
fwait
mov
cmp
fldt
popf   
jl
mov
cmpsb
mov
das    
sbbb
pusha  
dec
jo
jne
dec
adc
(bad)  
pop
xchg
add
leave  
push
sbb
mov
into   
and
insl
fsubrs
outsb
push
sahf   
jnp
in
rcl
adc
out
mov
xchg
or
divl
mov
inc
push
mov
lods
std    
cli    
push
jmp
dec
cmp
imul
dec
and
cli    
push
xor
arpl
jl
mov
cmp
(bad)  
jecxz
or
daa    
dec
pop
sahf   
sub
std    
fstl
add
add
stos
sbb
jmp
xchg
lea
mov
loopne
mov
out
data16 aaa 
jo
cwtl   
sub
(bad)  
nop
aas    
ss push
jbe
push
push
dec
insl
or
shll
xor
add
negl
pop
clc    
xor
xchg
decl
cmp
jb
nop
add
movsb
fidiv
sub
loopne
sub
push
pushf  
sbb
adc
cwtl   
pop
les
or
enter
sbb
mov
in
jg
pop
and
xchg
dec
cmpb
(bad)  
adc
lcall
mov
ss pushf 
xchg
lock xor
sub
sub
jmp
jbe
add
sahf   
out
sbb
out
mov
inc
ret
and
leave  
mov
(bad)  
pop
add
xor
es mov
adc
pop
subl
push
mov
xor
aam
dec
cwtl   
cwtl   
push
popa   
xor
icebp  
pop
sbbl
sbb
add
mov
frstor
pop
pop
jb
stc    
(bad)  
xlat
inc
jo
daa    
xor
iret   
jmp
jb
mov
add
sub
sbb
shll
push
fwait
(bad)  
mov
test
test
mov
mov
test
dec
test
jnp
sbb
hlt    
ja
fs
dec
adc
mov
sub
mov
mov
pop
lret   
mov
in
jno
(bad)  
fxch
in
mov
sbb
jl
pop
shrb
cmp
mov
cmpsb
sub
dec
and
jmp
dec
xor
xchg
and
or
aad
push
stos
dec
pop
sub
dec
ret
mov
into   
mov
adc
xchg
mov
in
inc
add
jle
sub
(bad)  
lahf   
dec
outsb
(bad)  
cltd   
dec
out
loopne
fcomip
or
movsl
push
ja
sti    
gs packuswb
dec
cmovno
dec
out
pop
aas    
dec
enter
sbb
nop
sbb
mov
out
pushf  
mov
mov
popf   
es lcall
dec
(bad)  
xor
push
pop
(bad)  
mov
stos
xor
mov
leave  
lods
in
enter
mov
push
inc
xorl
push
out
sbb
mov
inc
les
imul
aas    
mov
int3   
ljmp
xor
fstp
fcmovnb
clc    
fdivrl
inc
mov
jle
dec
sti    
mov
push
jae
test
mov
sub
push
add
add
dec
inc
dec
inc
scas
inc
pusha  
(bad)  
or
add
add
(bad)  
(bad)  
(bad)  
incl
add
add
add
add
add
add
jns
je
insl
cs inc
jb
ja
outsb
addr16 sub
push
gs jb
imul
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
xor
data16 aaa 
xor
fs xor
add
adc
gs insl
cs inc
jb
ja
outsb
addr16 cs inc
imul
add
popa   
je
pop
add
add
add
add
add
lsl
add
jno
add
add
or
or
add
or
add
add
add
dec
or
add
add
(bad)  
and
add
add
inc
dec
inc
add
mov
or
popa   
add
jo
pop
jae
add
ret    
add
push
ret    
add
outsl
test
add
cmp
push
push
test
imul
or
sub
das    
sub
ss sub
fstpl
rorl
out
push
sarb
(bad)  
decb
pushf  
arpl
jb
add
or
mov
sub
ljmp
leave  
insl
cmp
enter
or
lods
(bad)  
mov
xlat
mov
sub
mov
gs lret 
addr16 jne
and
(bad)  
out
push
add
mov
add
and
and
fisubl
(bad)  
xchg
push
mov
jp
call
insb
inc
mov
xchg
jo
sbb
push
sbb
inc
lret
pop
mov
jp
outsl
(bad)  
loope
xchg
enter
std    
cltd   
leave  
lahf   
addr16 dec
int
negb
lods
dec
fs mov
mov
fnstsw
aaa    
mov
mov
insb
pusha  
mov
mov
loop
or
stos
push
cltd   
flds
test
cmpsb
and
mov
lret
dec
pop
lods
cmpsb
out
jbe
cmp
xchg
out
(bad)  
mov
or
sbb
lret   
adc
cmc    
mov
lcall
imul
mov
out
test
sub
arpl
stos
cld    
insl
stos
aas    
xchg
les
push
sub
icebp  
out
ficom
pop
dec
aas    
adcb
out
xchg
or
rcrl
lods
dec
adc
rcl
sahf   
movsb
hlt    
sub
rclb
fnstenv
mov
dec
adc
aam
cmp
adc
in
push
and
mov
mov
incl
inc
add
dec
out
fwait
lcall
call
adc
sahf   
out
arpl
in
mov
sub
addr16 dec
mov
loopne
rolb
ror
lock sbb
cmp
xor
jecxz
arpl
aaa    
das    
mov
arpl
mov
xorl
mov
mov
pop
scas
pusha  
lcall
fbld
out
(bad)  
mov
adc
pop
in
outsl
insb
sub
roll
out
movsl
jp
dec
aam
addl
mov
sahf   
mov
inc
pop
and
mov
popf   
xchg
cwtl   
in
fucomip
outsl
or
and
arpl
or
pop
sbb
jno
jmp
sbb
sbb
fadd
test
jb
mov
sbb
add
in
jae
inc
and
fcoml
dec
mov
ret    
or
or
cmp
or
pushf  
xlat
pop
sub
dec
addb
add
fwait
icebp  
jno
aam
xlat
mov
dec
dec
(bad)  
xchg
fistp
lret   
mov
jecxz
insl
stc    
adc
outsl
outsl
xor
shlb
inc
mov
sbbl
xchg
stos
xchg
sbb
lahf   
lds
xchg
sahf   
das    
das    
dec
nop
lds
jmp
mov
dec
xchg
in
pop
jecxz
ja
lret
inc
(bad)  
mov
sbb
mov
in
mov
cmpps
adc
add
clc    
insl
xor
outsl
xchg
mov
aad
fistl
lods
ljmp
leave  
lret   
ret    
lcall
push
cld    
add
and
fnstenv
call
mov
cmp
sbb
dec
lcall
out
mov
sbb
icebp  
and
adc
and
cwtl   
sub
inc
aad
jle
ret    
jge
dec
lock adc
mov
mov
sub
popf   
loope
xor
insb
rol
and
mov
fbstp
rcrl
pop
pusha  
rcl
data16 loopne
jl
sbb
dec
cld    
or
pop
lret
ret
or
push
cld    
js
add
or
add
inc
roll
mov
aad
fnstcw
cmp
mov
inc
cs gs in
cmpb
mov
jl
or
jne
aas    
test
cmp
sbb
cmp
out
loopne
movsl
pop
push
or
addl
in
cmp
out
fs loopew
pop
mov
sbb
sbb
or
push
add
mov
icebp  
sti    
mov
mov
aaa    
pushf  
sti    
pop
gs lahf 
(bad)  
sub
fs lcall
jle
mov
scas
je
add
scas
or
je
fildl
mov
xor
fimull
fld
pop
(bad)  
jle
dec
js
imul
jno
ss push
jne
int
mov
push
imul
pop
inc
inc
mov
inc
inc
lcall
cmp
lock lock dec
je
dec
adc
or
in
cmc    
lret
sbb
sar
push
or
adc
andb
ds pop
inc
xchg
mov
inc
test
es
les
jne
sbb
pop
cmp
lea
cltd   
movsb
rolb
clc    
loopne
gs jb
xor
add
lcall
loope
cmp
inc
mov
test
and
inc
inc
adc
int
aad
cmp
movsl
sbb
flds
mov
insb
adc
lcall
jns
test
mov
mov
(bad)
testl
push
pusha  
in
pop
mov
cwtl   
(bad)  
cli    
or
sbb
sbb
mov
xlat
popf   
sbb
mov
mov
xchg
dec
scas
pop
mov
leave  
shlb
xchg
pop
push
fsubr
push
roll
jbe
out
and
inc
(bad)  {%k5}{z}
leave  
out
xor
lea
dec
mov
fwait
test
fisttpll
and
inc
bound
insb
jecxz
in
xchg
mov
mov
sub
out
(bad)  
hlt    
jmp
cmp
outsl
lods
xor
xor
(bad)  
mov
pop
outsl
adc
int3   
xor
imul
sahf   
cwtl   
or
ret
pop
gs mov
rolb
add
das    
bound
mov
mov
les
scas
mov
jmp
jno
sbb
out
or
jmp
mov
cmp
xor
adc
sub
cli    
icebp  
es std 
imul
bound
cmpsb
daa    
je
or
adc
lods
jno
and
aam
(bad)  
scas
nop
and
inc
or
fs adc
es into 
cltd   
push
inc
inc
dec
not
mull
pop
mov
xchg
out
jmp
cmpsb
add
sub
push
adc
dec
adc
test
and
arpl
rorb
xor
xchg
push
insb
push
sub
dec
movsb
cmpsl
and
xchg
test
popf   
je
insb
cmp
push
sahf   
inc
mov
call
cmpsb
fsubr
in
inc
or
cld    
or
push
jae
or
or
into   
jne
mov
push
dec
and
leave  
sbb
add
mov
jmp
xchg
inc
or
js
cmpl
mov
xor
imul
dec
outsb
inc
xchg
sarb
int
pop
inc
sub
std    
stos
push
(bad)  
in
pop
stc    
loopne
or
ret    
stc    
mov
or
mov
sarb
inc
es out
(bad)  
xor
loop
mov
push
inc
stos
insb
mov
sub
pop
outsb
and
and
outsb
xorl
jge
mov
lret
aas    
or
inc
add
les
js
outsb
mov
mov
std    
call
call
push
adc
orb
mov
cmpsb
mov
inc
pushf  
punpckhdq
call
inc
xlat
and
cltd   
adc
sub
cli    
insb
inc
lahf   
dec
and
movsb
(bad)  
popa   
push
sbb
or
inc
xor
mov
(bad)  
jo
push
hlt    
in
jb
das    
xchg
cs sub
scas
xor
pop
in
shr
xchg
cli    
or
and
movsb
mov
xchg
xchg
push
adc
into   
fistpl
mov
pop
cltd   
rcr
mov
add
sbb
jns
icebp  
mov
mov
ja
mov
push
(bad)  
cld    
fmull
xlat
xchg
xchg
jl
mov
or
push
or
mov
xchg
ret
loop
pop
daa    
sub
je
(bad)
mov
xor
(bad)  
(bad)  
rorb
call
stc    
push
fcmovnu
pop
mov
and
jnp
rcll
pop
mov
repz
mov
scas
and
adc
mov
adc
cmp
(bad)  
push
inc
(bad)  
icebp  
mulb
or
addr16 pop
adc
(bad)  
pop
stos
(bad)
pop
lods
in
fstl
mov
xor
mov
xor
leave  
gs add
jmp
imul
cmp
in
movsl
or
inc
(bad)  
(bad)  
out
daa    
popf   
push
int3   
push
push
aad
sub
ret
fwait
pop
cmp
lahf   
pusha  
add
popf   
(bad)  
jno
(bad)  
push
ret
mov
sbb
inc
fwait
mov
pop
mov
arpl
inc
push
pop
faddl
loop
(bad)  
loop
fwait
sahf   
mov
cmp
lods
addr16 aas 
mov
inc
ret
popf   
mov
lahf   
xor
int3   
insl
mov
stos
les
inc
je
cmp
ret
ror
jp
mov
mov
xchg
jecxz,pt
(bad)  
sub
scas
adc
xchg
and
std    
add
jae
adc
dec
push
inc
xor
fmull
imul
frstor
fisubrl
test
fstps
in
repz ficomp
hlt    
fistpl
clc    
test
fwait
leave  
sahf   
movsb
ret    
xor
ja
cltd   
jae
lea
push
fistpll
jnp
xchg
push
mov
addl
pop
mov
mov
insl
adc
xchg
out
pop
pop
push
dec
mov
test
sbb
add
test
mov
iret   
pop
sbb
test
inc
(bad)  
(bad)  
loop
dec
cmp
jbe
mov
and
movsb
mov
aam
xor
out
sahf   
fldenv
pop
push
cmpl
push
xchg
xor
jo
stos
xlat
mov
pop
faddl
popa   
(bad)  
mov
sub
idivb
fs insl
bound
inc
mov
pop
pushw
das    
adc
jno
incl
outsb
xor
insl
int
and
test
dec
push
aaa    
sub
cmp
shlb
fcmovu
in
dec
call
push
fldlg2 
std    
(bad)  {%k5}{z}
fildl
flds
xchg
mov
adc
imul
xchg
cmp
aaa    
imul
mov
(bad)  
sub
dec
mov
ret
sub
add
jecxz
xor
scas
adc
inc
pop
out
push
lea
xchg
jne
test
pop
add
stc    
ss adc
xchg
cmp
jo
inc
inc
pop
xchg
and
cwtl   
lahf   
mov
out
in
adc
data16 insb
jp
and
add
mov
pusha  
(bad)  
ds mov
pop
rorb
xor
out
inc
sbb
hlt    
push
and
fisubr
mov
popa   
out
in
dec
mov
incb
repz mov
dec
shlb
push
loopne
fcomip
inc
xor
es xor
adc
dec
movb
adc
scas
mov
xor
nopl
(bad)  
(bad)  
push
add
mov
inc
fcoms
iret   
out
aad
loope
cli    
loopne
sub
cmc    
push
push
mov
gs test
bound
mov
aas    
nop
xor
pop
push
fstp
loope
js
sub
es inc
dec
repz adc
(bad)  
push
lahf   
sub
jl
sub
sub
push
push
scas
mov
fwait
les
push
pop
inc
sub
xchg
xor
je
stos
xorb
push
mov
movsl
in
cwtl   
negb
(bad)  
mov
mov
dec
mov
jg
or
mov
jmp
pop
lahf   
fbld
or
ret
push
rcl
imul
pusha  
fstps
dec
add
add
sub
adc
sbb
decw
pop
(bad)  
jo
xchg
ret
and
mov
push
or
mov
push
lods
pusha  
push
pop
sub
mov
test
sti    
sbb
insb
push
xorb
bsf
pusha  
push
inc
insl
pop
dec
or
sbb
(bad)  
dec
scas
outsl
cmp
test
adc
scas
popf   
test
or
fwait
sub
stc    
int
or
repz sub
lret
scas
fistp
loopne
pushf  
sbb
mov
xchg
ss
js
test
popa   
flds
xor
imulb
push
sub
cmp
push
cmp
lcall
mov
sub
or
cmp
mov
sbb
add
sbb
add
mov
pop
or
lds
rorb
cmp
imul
mov
ja
cmp
imul
lds
adc
add
cmc    
lea
fmul
sahf   
inc
addb
in
lods
ficoml
sbb
dec
(bad)  
push
cmpsl
mov
inc
sbb
push
and
ljmp
mov
mov
test
jnp
xor
es pop
stos
cmp
jle
or
xor
pushl
stos
inc
mov
add
xchg
cmp
cmp
or
dec
iret   
and
out
inc
mov
sub
inc
add
pop
mov
outsl
shlb
lahf   
inc
sahf   
sub
jae
out
sub
mov
scas
mov
pop
ret
mov
dec
mov
push
dec
fidivrl
ja
lods
bound
add
stos
mov
int
jecxz
pop
movsb
scas
icebp  
mov
sarl
fnstcw
leave  
in
cmp
xchg
call
pop
push
popa   
sbb
test
(bad)  
xchg
adc
hlt    
(bad)  
sar
ret    
rorl
mov
push
lods
in
mov
or
inc
repnz lcall
(bad)  
mov
out
or
adc
add
aad
jnp
mov
div
(bad)  
fldt
fwait
mov
int3   
aaa    
xlat
push
cmp
pop
outsb
jns
inc
aas    
lcall
inc
cld    
pop
cs in
jb
rcr
(bad)
fistpll
fcmove
clc    
add
cmp
xor
mov
aaa    
loopne
cmpl
repz xchg
jb
lods
sbbb
xor
loop
pop
mov
add
outsl
jle
lahf   
or
test
or
out
popf   
in
xchg
mov
imul
xchg
adc
pop
pop
sub
jo
jne
sub
adcl
scas
lock pushf 
fnstenv
sub
in
push
mov
mov
xor
pop
mov
fiaddl
stos
mov
push
(bad)  
jnp
rorl
sbbl
(bad)  
pushf  
test
repz rorb
popf   
enter
stc    
and
stc    
pop
xor
mov
leave  
fadds
pop
xor
out
roll
out
push
push
fildl
in
out
imul
cltd   
loope
popa   
push
(bad)  
xor
push
add
xchg
outsb
insl
ret
shll
xchg
xchg
mov
sub
jb
test
fld
repz jmp
sbb
enter
mov
jnp
mov
sbb
xchg
and
shl
enter
mov
in
push
jne
sti    
movb
je
jns
add
mov
push
rclb
test
fs fxam 
inc
jae
mov
(bad)  
mov
mov
push
sbb
push
inc
adc
and
or
or
call
add
pop
ljmp
xor
mov
imul
dec
mov
inc
ret
xchg
jns
push
and
inc
arpl
mov
inc
enter
addr16 dec
stos
pop
adc
mov
pop
movsb
jbe
je
jae
and
push
inc
insb
(bad)  
push
jl
gs sbb
mov
sahf   
fsubrs
sbb
(bad)  
ss jne
xor
pop
pop
or
and
pop
mov
inc
jmp
aam
jb
sbb
mov
aad
lahf   
imul
cli    
iret   
adc
rorb
pushf  
cwtl   
inc
pop
pop
dec
shr
inc
sahf   
xchg
in
std    
and
and
xor
xchg
mov
lahf   
aam
mov
push
jg
push
adc
in
adc
xchg
pop
stos
cmp
cmpsl
test
scas
jmp
mov
xor
out
xor
movsb
pusha  
mov
shlb
in
(bad)  {%k5}{z}
lret
jl
std    
(bad)  
mov
or
shrb
push
hlt    
hlt    
sbb
ret
fistp
xchg
sub
cmp
shll
xor
out
or
or
repz lahf 
mov
sahf   
mov
and
fs cmp
xor
pop
repz sbb
add
test
scas
(bad)  
or
loopne
adc
(bad)  {%k5}{z}
not
ret
mov
cwtl   
rclb
mov
cwtl   
add
push
sti    
add
scas
mov
adc
adcl
xor
outsl
mov
(bad)  
inc
rcll
and
jb
jp
mov
idivb
(bad)  
loopne
mov
movsl
jp
shlb
mov
nop
dec
mov
loop
int3   
xchg
adc
dec
sub
mov
in
dec
jb
or
iret   
lods
jnp
imul
push
dec
mov
ror
sub
jb
mov
hlt    
xchg
cmpsl
sbb
and
pop
xor
fidivr
xchg
add
push
add
sarb
sarb
or
sub
adc
pmulhuw
repnz
int
mov
movsb
pop
(bad)  
lahf   
sub
mov
popf   
push
cmp
cltd   
dec
insb
mov
stc    
scas
push
lahf   
xor
(bad)  
xor
push
outsl
dec
and
arpl
repnz push
sub
addr16 js
cmp
mov
mov
fist
fbld
jmp
icebp  
jbe
and
out
cmc    
push
leave  
jns
repz xor
sub
ret    
inc
dec
insl
sbb
aas    
stc    
mov
push
lods
pusha  
pop
ja
outsl
es jae
xchg
(bad)  
fwait
loope,pn
mov
sub
int
lods
push
fwait
or
add
les
arpl
lods
xchg
inc
jp
and
mov
xchg
dec
verw
cmp
mov
pop
pusha  
jmp
es std 
inc
or
repz or
out
mov
(bad)  
enter
jnp
(bad)  
jno
xor
pop
cmc    
scas
out
push
fsubrl
mov
inc
(bad)  
hlt    
push
xor
movsb
mov
add
mov
jle
hlt    
adc
out
ffree
and
jg
gs loopne
adc
ret    
ror
and
cmp
pop
fdivl
jno
pop
push
mov
jnp
in
ret
push
pushf  
fstl
rolb
leave  
cmpsl
(bad)  
in
and
ja
mov
xchg
pop
or
stos
fisub
jle
test
mov
sbb
das    
outsb
icebp  
sbb
jo
fistpl
inc
dec
scas
stos
iret   
lcall
jecxz
pop
jbe
xchg
push
pop
jae
cltd   
mov
in
test
lods
mov
fwait
sbb
push
fs lcall
fcoml
xor
and
pop
xor
pop
outsl
mov
pop
dec
xlat
sub
in
cld    
add
out
lock
xor
xchg
mov
lock sub
add
aas    
sbb
cmp
das    
icebp  
dec
and
mov
mov
push
ret
jg
pop
jp
test
clc    
incl
sahf   
jo
cmp
dec
mov
sahf   
xor
sbb
jp
and
shr
std    
scas
sbb
insl
(bad)  
sub
add
push
pushf  
dec
pop
loop
push
mov
psllq
ja
es addr16 xchg
pop
adc
sub
mov
jnp
adcl
inc
ret    
incb
add
sbb
enter
pop
xchg
stos
mov
xchg
mov
loopne
pop
icebp  
pop
inc
clc    
push
push
pop
push
dec
and
ffreep
pop
lea
(bad)  
jbe
xchg
cld    
ljmp
fildl
daa    
addr16 xchg
xchg
dec
pop
mov
jo
shlb
xchg
sbb
dec
ja
add
mov
test
sbb
in
and
sahf   
mov
imul
cltd   
xchg
sbb
test
into   
or
leave  
lea
mov
cmp
inc
xor
mov
cmp
and
cmpsb
inc
test
cmp
sub
push
mov
inc
jle
dec
lea
xor
xchg
lret   
mov
rclb
sbb
sbb
(bad)  
leave  
xorl
fwait
sub
out
jb
mov
jbe
leave  
xchg
mov
add
or
shrb
mov
cmp
sahf   
add
cmc    
test
mov
mov
popfw  
and
mov
stos
test
mov
(bad)  
mov
std    
or
cld    
(bad)  
int
xchg
clc    
mov
leave  
lds
cmp
push
mov
andl
or
pop
sub
mov
mov
adc
jp
outsl
(bad)  
pop
js
jo
mov
pop
jnp
sbb
jb
cmp
sbb
mov
in
dec
xor
sti    
sti    
inc
aad
jg
xchg
pop
iret   
mov
(bad)  
lcall
dec
sub
inc
ds xchg
sbb
xchg
sbb
push
pop
xchg
fimul
xchg
jp
add
sub
or
bound
cld    
sbb
(bad)  
aad
fdivp
push
(bad)  
mov
rcll
movsb
out
or
pop
in
pop
or
dec
pusha  
cwtl   
in
or
mov
xchg
arpl
(bad)  
in
dec
inc
data16 lods
push
jmp
bound
push
dec
ficoml
clc    
out
xor
pop
ret
scas
ja
lcall
cmp
pop
mov
fs or
(bad)  
push
add
and
(bad)  
jle
xor
cmp
mov
sarb
xor
and
add
mov
push
das    
sbb
mov
icebp  
mov
push
lret   
rcr
inc
adc
and
inc
push
cmp
mov
jbe
pushf  
xchg
mov
dec
lret   
cmpsb
mov
pop
out
inc
aam
xchg
fdivrs
sbb
movsl
inc
fdivp
sbb
clc    
inc
mov
aas    
daa    
movl
push
test
lahf   
xlat
adc
call
jp
fistp
sub
jae
mov
sbb
add
fidiv
dec
mov
sub
aad
fcoms
mov
jl
xchg
insb
xchg
inc
cmpsl
jecxz
(bad)  
mov
xchg
push
cmp
push
clc    
mov
add
fwait
xchg
pushf  
negb
push
sahf   
gs inc
sub
fsubp
mov
jecxz
enter
das    
jne
imul
pop
mov
fldl
push
mov
popa   
push
inc
mov
cli    
shll
aam
mov
popf   
mov
stos
aam
ds mov
test
add
repnz add
and
cmp
and
leave  
sbb
adc
in
xor
nop
in
pop
repz mov
pop
enter
add
or
add
out
shlb
in
inc
jns
push
cs dec
adc
test
jno
(bad)  
(bad)  
xor
stc    
cmp
in
or
sub
(bad)  
int
test
mov
sub
testb
popl
fwait
scas
inc
mov
adc
sbb
insl
loop
dec
add
push
imul
dec
pusha  
dec
mov
inc
xor
adc
scas
sbb
je
mov
jbe
fistpl
mov
and
xchg
loop
jnp
sbb
fs cmp
pop
dec
aaa    
dec
test
jle
dec
add
(bad)  
pushf  
add
rcl
data16 sbb
(bad)  
fsubrl
xlat
fcmovb
movsl
mov
scas
repnz repz mov
in
push
push
insl
add
ret
push
cwtl   
adc
jecxz
lods
call
mov
loop
pusha  
mov
inc
insb
and
cmp
push
aam
test
and
js
adc
lods
push
ja
lcall
push
sub
cwtl   
mov
fsub
stos
pushf  
adc
mov
cli    
insb
dec
pop
cmp
sub
dec
mov
sub
shll
pop
jns
cmp
jle
imul
xor
cmp
cmp
mov
inc
lock jecxz
xchg
and
push
js
fnsave
add
lea
dec
add
sub
push
pop
ds
cmpsb
fstl
mov
ds aaa 
adc
xorb
sarl
lods
mov
jmp
icebp  
das    
xchg
sub
test
aad
stos
xchg
test
add
pop
xor
ret    
pop
fcmovnbe
jl
xchg
andl
(bad)  
fldcw
add
add
xchg
sbb
xchg
fdivs
xlat
mov
test
mov
daa    
jne
fcmovu
jg
scas
lds
dec
fisttpll
pop
inc
mov
add
lods
sahf   
flds
icebp  
jl
shrb
fild
lret   
push
inc
mov
loopne
shr
and
mov
into   
lahf   
sub
and
insl
test
inc
ja
inc
push
imul
pop
popa   
adc
lahf   
int
jg
cmp
(bad)  
sub
and
test
repnz add
rol
loop
aam
ret
call
mov
repz xor
inc
xor
mov
sub
scas
or
fdivr
lret
push
add
mov
adc
add
adc
rcrl
sbb
inc
and
jno
js
(bad)  
xor
dec
cmpsb
jb
pop
sub
mov
pop
or
(bad)  
mov
inc
cmp
nop
popa   
xor
loop
or
mov
jae
rclb
sub
lea
imul
inc
jo
cmp
stos
mov
in
sahf   
push
push
mov
lea
subl
xor
movsb
es cli 
scas
sbb
adc
insl
fsubrs
aaa    
add
std    
dec
inc
push
ds and
orb
mov
dec
fwait
(bad)  
daa    
adc
jg
sub
adcl
(bad)  
mov
out
in
mov
mov
push
mov
push
mov
ja
movsl
jge
cmp
lods
shrb
jne
out
dec
pushf  
pop
mov
fcmovu
popf   
mov
jl
inc
pop
add
mov
aaa    
mov
xchg
jecxz
inc
fwait
mov
icebp  
roll
repz fcmovb
ret
pop
and
cmp
das    
aaa    
cmp
sbb
adc
or
aad
sbb
dec
rorb
adcl
xchg
mov
xlat
in
push
lods
inc
dec
rol
push
and
out
test
test
add
cltd   
sbb
ds pop
xchg
(bad)  
popf   
fldl
adc
jle
push
int
cltd   
ret    
(bad)  
xchg
adcl
pop
cld    
pop
xor
jno
aaa    
cmp
xor
xor
sub
push
out
repnz xchg
jns
addl
dec
pop
or
hlt    
(bad)  
into   
lods
xor
mov
cmpsl
popa   
mov
js
imul
mov
in
pop
lcall
jg
les
jbe
fcomi
test
mov
(bad)  
xlat
and
add
(bad)  
fmuls
pusha  
push
cltd   
fdivrp
data16 sbb
sbb
adc
ljmp
ss xor
add
(bad)  
fnstenv
jbe
push
not
mov
arpl
xchg
sti    
xor
inc
push
inc
ss mov
inc
inc
push
and
and
push
xchg
sbbl
shll
sub
push
dec
(bad)  
and
inc
and
enter
or
jg
movsb
or
xor
pop
addr16 cmp
xor
or
mov
sbb
sbb
cmp
add
outsb
mov
test
inc
insl
and
adc
int3   
cmpsl
adc
xchg
or
addr16 sar
mov
fisubrl
scas
mov
(bad)  
pusha  
mov
cmp
mov
xchg
(bad)  
aad
test
cli    
aaa    
or
ficompl
pop
jl
loop
sub
mov
xor
push
arpl
push
mov
ja
mov
popf   
jl
jb
mov
adc
xor
dec
jns
test
push
mov
add
push
and
js
sbb
sub
jo
jl
(bad)  
in
push
xchg
stos
jl
leave  
fiaddl
inc
subl
xchg
lds
xor
clc    
dec
sbb
arpl
das    
insb
out
sbb
jl
xor
aam
shrb
stos
or
pop
jnp
mov
data16 sbb
scas
jecxz
push
hlt    
or
sbb
popf   
notb
jg
cmp
mov
push
jmp
dec
cmp
das    
imul
sub
fidivl
dec
ret
fst
into   
mov
push
or
repnz in
xchg
mov
cwtl   
push
divb
scas
repnz out
fwait
xor
mov
insl
xchg
sarb
lods
pop
pop
push
icebp  
aaa    
les
add
movsl
sub
std    
xor
fstpt
data16 sbb
add
xchg
push
scas
xchg
mov
cli    
lods
pop
(bad)  
(bad)  
cmp
and
rcrb
icebp  
int3   
ljmp
divb
outsb
or
mov
mov
inc
jg
aad
nop
(bad)  
push
int
pushf  
inc
pop
xchg
hlt    
es push
int
es cs cltd 
stos
out
adc
cmp
or
jne
out
mov
in
cmp
js
dec
and
(bad)  
jne
jno
mov
out
jb
lcall
cwtl   
pop
dec
mov
add
into   
fistpl
jecxz
in
cs
lcall
daa    
test
cmp
das    
sbb
nop
adc
mov
(bad)  
out
push
adc
add
ret    
shrb
pop
stos
stos
xchg
inc
ss dec
(bad)  
addr16 repz test
(bad)  
add
xor
ljmp
flds
cltd   
cmc    
incb
fistl
cmp
push
sbb
push
int
movsb
movsb
cmp
push
jmp
cmp
sub
(bad)  
leave  
dec
sti    
dec
leave  
cmp
notl
dec
push
(bad)  
int3   
jbe
std    
lods
inc
mov
lret
dec
add
in
sub
or
scas
xor
cmp
inc
or
je
jecxz
pop
dec
and
ret
or
lcall
mov
xchg
addr16 in
pop
jl
push
mov
negb
rolb
in
dec
clc    
jl
andb
cltd   
dec
test
or
add
jp
push
rolb
pop
aas    
aam
jle
popa   
mov
pop
push
adc
jnp
imul
ljmp
bound
pop
jo
lock push
xor
cld    
push
dec
xor
mov
mov
add
push
je
mov
pop
pop
int3   
(bad)  
dec
jns
dec
sub
push
pop
fs mov
push
cmpsl
push
mov
dec
xchg
shrl
push
sub
fildll
mov
cwtl   
lds
aam
push
xchg
lahf   
ret    
mov
mov
mov
loopne
out
fsubrl
push
lahf   
mov
push
xor
lods
jp
inc
jge,pt
movsb
xchg
dec
imul
and
gs ss es jle
cmp
ljmp
push
push
nop
addb
es push
imul
sbb
push
(bad)
fadds
xlat
mov
cli    
lock into 
jle
mov
sbb
shlb
(bad)  
fisub
jne
fildl
mov
pop
cmc    
ljmp
gs repz push
out
cmp
out
sbb
push
ret    
test
movl
in
xchg
lock clc 
fs inc
inc
clc    
jmp
das    
imull
or
dec
lock cmpsl
call
rclb
cs ds
mov
(bad)  
pop
sub
cmp
mov
sub
dec
xor
movsb
xchg
mov
add
lods
or
iret   
bt
cmp
or
add
push
stos
pop
sarb
(bad)  
repnz pop
dec
sarb
xchg
ret    
rcll
mov
int3   
xor
dec
pop
sti    
in
inc
insb
es out
push
xor
inc
in
vmptrld
daa    
xlat
and
out
xchg
jl
jecxz
loopne
(bad)
popf   
out
and
dec
pop
inc
cmpsl
add
sar
into   
pop
add
sti    
mov
sahf   
movsb
pushf  
and
xor
mov
sub
sbb
xchg
lds
or
inc
jns
loope
and
int3   
sub
movsb
mov
imul
dec
sub
sbb
lods
xor
repz mov
dec
ret    
cmp
es cmp
insl
aaa    
pop
dec
pop
in
add
push
ret    
xor
(bad)  
fwait
lahf   
inc
rcll
mov
nop
inc
and
mov
xor
mov
dec
jecxz
jle
mov
fs aad
cmp
xor
es push
push
popa   
add
nop
aad
add
pop
or
or
and
aas    
es insl
in
pushf  
inc
push
je
sub
mov
cmp
adc
xor
push
int
rcr
popf   
int
js
lret
pop
xor
in
inc
lock aam
pop
mov
ja
xor
push
int3   
iret   
xchg
inc
inc
rolb
insl
xor
lods
xor
add
or
mov
or
ds cmpsb
scas
pop
icebp  
sbbl
mov
scas
mov
ljmp
add
fmuls
mov
inc
add
adc
dec
aad
push
lock and
out
mov
push
mov
and
icebp  
mov
cs sar
dec
pop
jb
push
fxch
test
out
sbb
fcmovu
in
out
mov
clc    
sub
jg
les
in
push
or
ja
adc
mov
dec
inc
cli    
rcrl
int3   
ljmp
flds
mov
pop
imul
or
in
cmp
or
push
inc
enter
les
push
sub
push
hlt    
lods
adc
lahf   
dec
add
dec
sbb
stos
js
daa    
xchg
insl
adc
ja
sub
inc
mov
insl
movsl
(bad)  
popa   
pop
out
fwait
sbb
out
mov
sub
shl
not
jnp
mov
jns
or
sub
add
sbb
or
ja
jmp
aam
lods
lea
idivb
pop
adc
cmpsb
bound
(bad)  {%k5}{z}
lret
mov
pop
xor
sbb
inc
insb
jae
loope
clc    
cmp
or
ja
dec
popl
mov
arpl
mov
test
sti    
add
(bad)  
div
rcll
stos
stos
nop
sub
fsubrl
rclb
xorl
pop
adc
add
xchg
je
push
cmp
xchg
lods
outsb
xor
out
jmp
xor
cmp
flds
fdivrs
mov
movsb
lods
je
cli    
mov
cmpsl
dec
pop
(bad)  
idivl
sub
xchg
mov
outsl
jno
jns
xor
shll
lock jno
and
and
or
cs dec
lock xchg
xlat
mov
add
sbb
jmp
in
push
int3   
fbstp
sub
lcall
andl
scas
dec
dec
mov
outsb
loopne
sub
lret   
jecxz
push
imul
lods
stos
push
xor
int3   
repz call
inc
xchg
push
jecxz
arpl
xchg
cmp
loop
rolb
sbb
jp
mov
push
add
xor
rorl
std    
shrb
ja
loope
mov
xchg
inc
push
mov
mov
test
push
stos
cmpsl
stc    
cld    
mov
add
mov
mov
orb
fs hlt 
ficompl
push
in
push
push
aas    
push
and
inc
andl
xor
popa   
pop
out
cmpsl
out
jp
inc
xor
xchg
dec
ds
repnz int
fdivrl
cmp
iret   
and
hlt    
push
xor
pop
les
jno
jmp
imul
rorb
pop
ss and
(bad)  
fild
mov
xlat
inc
jp
pop
sbb
dec
inc
cmpsl
and
xor
sar
or
jnp
dec
and
insl
add
call
pop
test
push
jnp
fisttpl
sub
cmp
xchg
inc
cmp
daa    
(bad)  
std    
in
sub
mov
fcomp
stos
in
popl
mov
dec
xchg
xor
jp
and
sbb
int
(bad)  
shrl
mov
in
lahf   
lods
cli    
cli    
inc
hlt    
xchg
add
(bad)  
sbb
adc
test
sub
mov
(bad)  
mov
jno
lods
lock insb
pop
(bad)  
jae
negl
sub
cmc    
mov
(bad)  
jb
in
jp
in
push
daa    
ffreep
adc
aam
out
hlt    
outsb
add
inc
in
int3   
pusha  
lods
push
daa    
mov
int3   
mov
jae
mov
loop
mov
stc    
movsl
mov
mov
xor
arpl
fidivr
mov
jle
bound
cltd   
pop
daa    
mov
out
xlat
push
out
xchg
adc
mov
movsl
cld    
imul
int3   
adc
mov
inc
scas
(bad)  
loop
jg
cmpsb
mov
jp
jne
in
ljmp
add
inc
sbb
cmpsb
icebp  
(bad)  
in
je
mov
loope
sub
test
push
pop
push
stc    
imul
insl
lods
loop
push
aam
cmp
adc
mull
repz sbb
fcoms
inc
add
jno
xor
xchg
idivl
dec
ja
ss and
das    
and
add
inc
insb
into   
fcomp
leave  
rcl
add
cmpsb
jge
repnz inc
pusha  
fadds
xchg
lret
movsl
jmp
adc
push
sub
stos
popf   
mov
xchg
pop
push
leave  
ss mov
dec
and
cli    
cmp
push
lock mov
push
icebp  
sub
xchg
pop
xchg
cltd   
or
int3   
pop
add
jb
sbb
xchg
loop
lcall
cmp
loopne
jne
ds
mov
lea
cmc    
iret   
inc
pusha  
lock mov
jge
sbb
lea
les
add
js
int3   
daa    
push
fs jne
push
ljmp
roll
(bad)  
xor
dec
iret   
aaa    
or
shll
(bad)  
lret   
xor
pop
and
(bad)  
iret   
mov
stos
jae
aas    
sub
add
xor
cmpl
jne
dec
mov
mov
js
or
(bad)  
inc
hlt    
les
lcall
pop
cwtl   
mov
in
fisttpll
mov
shrl
int
cmp
xchg
mov
adc
sti    
mov
rclb
ss jmp
adc
sahf   
xlat
inc
shrl
jl
dec
xor
adc
subl
stos
dec
(bad)  
jae
add
adc
push
or
mov
mov
aam
icebp  
push
cmpsb
negl
imulb
dec
jmp
dec
push
mov
push
push
les
out
or
dec
pop
xchg
cmpsl
sbb
xor
inc
fadds
(bad)  
bound
(bad)  
cli    
lea
or
stc    
jae
dec
and
ljmp
popa   
fbstp
or
lcall
imulb
(bad)  {%k5}{z}
adc
jl
out
cli    
jl
cmpsb
xchg
push
insb
mov
popa   
fnsave
cmp
and
sbb
lcall
jnp
xchg
iret   
add
mov
or
movsb
push
lds
mov
jle
aad
jle
cmp
xchg
or
bnd jge
mov
mov
dec
add
adc
lods
push
vmread
stos
out
int
cmp
stos
cmpsl
repz add
sub
adc
jg
shrl
jmp
or
cmp
fimull
rcrl
sbb
jbe
sbb
(bad)  
stos
imul
xchg
xchg
adc
dec
ret
cli    
daa    
ljmp
stc    
xor
dec
dec
mov
adc
jp
lahf   
push
fiaddl
mov
lret   
popf   
adc
mov
jp
xchg
push
shrl
push
cmp
ret    
dec
dec
jp
iret   
out
or
les
xchg
addr16 popa 
fildl
and
scas
popf   
push
pop
xchg
push
mov
and
stc    
and
push
lret   
mov
add
outsl
xlat
(bad)  
sub
and
dec
cmp
or
mov
mov
jbe
xor
sbb
mov
and
sbb
(bad)  
ljmp
je
or
(bad)  
pushf  
aam
dec
std    
out
pop
aam
xchg
add
ljmp
out
mov
inc
mov
js
rorb
je
cwtl   
cli    
push
jecxz
(bad)  
adc
inc
sbb
movsl
(bad)  
mov
push
andl
mov
in
aam
mov
sarl
sub
or
outsb
pop
push
js
mov
js
into   
dec
loope
and
mov
into   
arpl
cmp
xchg
cmp
or
mov
mov
je
sub
mov
sbb
add
inc
lahf   
pop
and
push
cmp
lret
dec
push
stc    
stos
jmp
ret
mov
push
dec
or
jle
pop
jl
enter
in
and
popa   
dec
mov
gs mov
or
(bad)  
add
push
lds
lahf   
xor
mov
pusha  
dec
test
lods
mov
dec
sbb
dec
lret
xor
add
push
fadds
jnp
dec
cli    
inc
mov
jecxz
jecxz
adc
les
add
addr16 push
shlb
mov
out
and
jae
cmc    
sbb
outsl
dec
xor
cli    
push
push
mov
movsl
mov
xor
mov
cmp
jae
push
sbb
push
(bad)  
xchg
cmp
jle
mov
mov
mov
mov
call
sahf   
inc
stos
test
int3   
adc
pop
cmpsb
add
ret
mov
int3   
test
adc
loopne
mov
andl
fcompl
inc
out
cmp
ror
out
push
xor
xchg
adc
int3   
lret   
mov
mov
data16 jae
insb
imul
cmp
add
incb
jmp
fst
shlb
cmpsb
and
xchg
and
int
sbb
jge
movsb
dec
int
jp
jge
js
sub
mov
lahf   
ljmp
les
addr16 push
mull
adc
adc
scas
xor
mov
outsb
push
jle
ret
jno
lea
xlat
mov
dec
cmp
fisubl
cwtl   
sub
scas
loope
das    
add
add
aas    
and
sahf   
bound
and
pushf  
fsubp
pop
hlt    
mov
into   
hlt    
jge
jg
mov
mov
repnz lea
inc
sbb
(bad)  {%k5}{z}
fcompl
rcrb
sbb
sbb
aaa    
les
(bad)  
cwtl   
pop
(bad)  
mov
mov
mov
leave  
push
dec
ret
loopne
fisttp
jle
fbld
push
pop
movsb
adc
adc
mov
inc
adc
insl
imul
(bad)  
bnd jno
femms  
push
movsl
andl
lods
test
icebp  
push
cmpsb
jle
inc
cmpsb
xchg
lahf   
lcall
mov
out
popa   
outsl
fwait
cltd   
enter
call
mov
push
mov
jge
dec
lock sub
and
sarl
outsb
fdivrs
(bad)  
std    
sbb
jge
sbb
sub
mulb
add
push
pop
gs aas 
or
dec
std    
movsb
sub
aad
cwtl   
add
mov
in
mov
cmpsb
dec
lock ret 
inc
sub
cmp
loopne
push
jns
mov
and
xchg
cmp
cmp
fistp
dec
xchg
or
rorb
fisubrl
add
pop
inc
and
jmp
dec
cmpb
(bad)  
ret    
pop
movsl
add
push
sub
jp
or
loope
inc
js
enter
mov
cld    
jbe
(bad)  
inc
mov
sub
imul
adcb
and
call
mov
sti    
or
cmp
xor
inc
jl
xor
negl
sbb
call
adc
vcvtss2sd
dec
inc
sub
add
icebp  
jp
and
push
xchg
sti    
cld    
pop
or
add
shrb
mov
(bad)  
imul
push
add
jge
dec
test
stos
cmp
repz hlt 
call
(bad)  
rcll
dec
and
andb
out
mov
fdivrs
dec
pop
sub
(bad)
mov
daa    
fwait
out
add
push
inc
xchg
or
cmp
in
inc
(bad)  
mov
xor
rcrb
pop
mov
xor
sbb
mov
cld    
sti    
shll
out
pop
lods
aaa    
daa    
and
aad
xor
ss sub
jb
mov
add
sub
cmpsl
cmp
test
add
(bad)
pop
(bad)  
adcl
lret
xor
movsb
mov
adc
inc
mov
dec
cmp
ror
pop
inc
jl
js
pop
testb
sbb
(bad)  
hlt    
xor
lret   
xor
arpl
mov
imul
mov
ds xchg
imul
xor
push
inc
das    
shr
and
xchg
push
mov
and
sbb
jae
mov
mov
cmpsl
adc
cmp
mov
xchg
sub
cmp
mov
(bad)  
push
and
push
push
int
or
xchg
jle
das    
adc
int
adc
fdivs
push
lea
pop
cli    
and
jmp
sbb
test
sub
cmp
jl
imul
int3   
pop
shlb
fs insl
je
dec
movsl
(bad)  
out
cmp
gs sbb
in
in
push
adc
lahf   
adc
bound
out
out
test
int3   
ret
test
out
insb
push
roll
out
sub
push
cmp
aas    
lds
jl
sbb
and
cmp
loopne
xchg
sbb
mov
(bad)  
sarl
xchg
mov
lahf   
jle
rcrl
lahf   
hlt    
jnp
push
xor
xor
je
sbb
repz dec
xor
insb
pop
mov
fs in
aam
inc
xor
mov
mov
inc
cmp
push
imul
in
test
mov
push
jns
repz add
adc
pop
les
jmp
pop
je
and
dec
(bad)  
loop
adc
add
scas
dec
or
cli    
mov
(bad)
test
int3   
mov
cmpsb
out
lret   
inc
stos
push
scas
or
dec
sub
repnz popf 
push
sbb
hlt    
int
lret   
lret   
adc
dec
ficom
sbb
out
outsb
or
mov
punpckhwd
lods
mov
mov
xchg
hlt    
jmp
vpunpckhbw
mov
(bad)  
leave  
mov
dec
adc
ret    
or
sarb
adc
scas
scas
xorl
ss daa 
loopne
xchg
rdtsc  
add
pop
popf   
cmc    
jnp
lods
(bad)  
dec
aaa    
mov
jb
and
jb
or
pop
jmp
mov
pop
out
lock mov
loopne
pop
xchg
adc
fdivrl
mov
dec
inc
pop
jne
ret    
add
lods
xor
cs xchg
(bad)  
fisttp
cmpsl
les
jnp
add
and
gs sahf 
mov
call
pusha  
jno
enter
icebp  
in
loop
sbb
pusha  
es push
or
shrl
mov
mov
test
sbb
std    
sub
mov
cmp
lcall
push
cmpsb
gs jae
inc
fcoms
jb
push
fldl
leave  
or
pop
dec
in
mov
aad
fcomps
sahf   
movsl
jnp
ret
(bad)  
lock pushf 
clc    
adc
and
shlb
mov
xchg
mov
add
add
lds
push
pop
es
jle
ret
pushf  
push
or
sahf   
iret   
or
ss loope
xor
jb
arpl
mov
andb
xchg
sahf   
dec
mov
add
add
xchg
dec
sahf   
push
inc
enter
loope
sbb
sbb
add
fisttpl
loope
imul
iret   
jge
mov
mov
push
dec
stos
repz
pop
addr16 jge
subl
out
fmul
sbb
fdivrs
xchg
or
xchg
dec
jb
loopne
outsb
out
arpl
ljmp
add
mov
adc
add
loopne
mov
mov
rolb
iret   
sbb
sbb
sbb
xor
lods
lds
adc
xor
push
jp
sahf   
push
dec
fs lea
mov
mov
inc
sahf   
dec
add
jp
addr16 xchg
push
popa   
adc
sbb
or
(bad)  
push
or
arpl
mov
xor
pop
xor
aas    
mov
add
ss stc 
imul
mov
inc
xchg
push
pop
mov
pushf  
aas    
pop
int3   
pop
push
ficomp
daa    
push
xor
inc
mov
and
aam
es nop
push
je
(bad)  
hlt    
push
jbe
fxch
jne
(bad)  
xchg
and
or
and
add
cs cmp
dec
push
inc
ss
and
dec
fs xor
cmp
lret   
push
in
(bad)  
clc    
dec
rorl
sub
hlt    
lret
lret
inc
cmpsl
int
int3   
fistpl
insl
popl
mov
ret
lods
movsb
cmp
(bad)  
hlt    
lea
pop
mov
nop
lahf   
je
(bad)  
jl
dec
fisttpl
stos
mov
dec
jg
test
mov
pop
cmc    
stos
das    
les
call
adc
push
mov
daa    
or
repnz add
jnp
and
jo
in
je
test
xchg
popl
ja
daa    
call
stos
mov
jbe
push
test
lahf   
addr16
cmp
or
pop
cmovo
sarb
stc    
push
pusha  
jg
loopne
pop
mov
outsb
jbe
movsl
cmp
fsubr
arpl
(bad)  
mov
and
xchg
xchg
push
sbb
gs lock cwtl 
mov
cmp
test
pop
lret
sbb
stos
pop
add
fnstcw
insb
xchg
into   
or
adc
repnz adc
pop
dec
lahf   
adc
fidivr
aam
popf   
mov
ret    
mov
ja
adcl
adc
jmp
pop
lods
dec
gs jmp
sbb
ds xchg
lret
jnp
mov
mov
or
adc
lcall
mov
add
and
push
mov
xchg
cmp
jo
loop
sbb
jge
ljmp
aam
mov
push
sbb
push
and
xchg
pusha  
aaa    
cld    
sub
into   
es dec
add
dec
cmpsb
or
cmp
jg
jmp
les
daa    
outsb
mov
paddusb
mov
outsl
xchg
xchg
jno
xchg
inc
in
lret   
xor
clc    
xchg
or
out
in
cld    
pop
xchg
or
mov
pop
pop
jb
mov
aam
bound
lea
jne
sub
mov
sbb
xchg
sub
xchg
sbb
pop
xchg
testb
test
sbb
in
mov
jmp
mov
mov
je
leave  
jl
das    
stos
inc
jne
mov
test
xchg
sub
loopne
or
mov
mov
pop
inc
into   
add
dec
pop
mov
outsb
js
pop
mov
arpl
cld    
and
and
imul
dec
push
jmp
or
mov
(bad)  
daa    
gs fwait
sub
xor
jnp
data16 fdivl
jg
xchg
repz push
addr16 frstpm(287 only) 
ret    
mov
mov
push
cmp
aad
setp
dec
(bad)  
scas
xchg
shrl
xor
pushf  
pop
stc    
addr16 mov
mov
out
sub
fistp
cmpsb
in
test
addr16 xor
mov
mov
mov
push
pop
inc
aam
sub
and
sti    
inc
push
jge
jnp
push
divl
or
or
mov
adc
daa    
dec
or
add
jns
sub
mov
mov
dec
cmpl
mov
and
xchg
out
jp
lea
cmpsb
cmp
call
add
inc
cltd   
add
xchg
je,pn
sbb
out
ret
fcoms
fnstcw
repz inc
(bad)  
mov
and
jne
(bad)  
sbb
xor
nop
cli    
loopne,pn
push
push
into   
js
outsb
jle
push
sahf   
dec
jl
or
orl
adc
sbb
es je
jecxz
clc    
(bad)  
dec
dec
and
lods
add
out
call
repz aad
or
cmp
mov
and
testl
movsb
dec
out
rorl
rorb
es in
sbb
aaa    
les
fisubrl
cmp
(bad)  
mov
mov
add
sbb
jl
pop
lock mov
sub
pop
pop
cmc    
jmp
mov
(bad)  
mov
fs adc
lret   
jae
xor
lahf   
nop
les
fnsave
aam
or
mov
mov
mov
hlt    
or
(bad)  
pcmpgtb
in
push
rclb
cmp
iret   
mov
hlt    
fldl
adc
popf   
dec
add
lods
xor
jbe
push
daa    
scas
pop
and
xchg
xor
jle
outsl
and
cltd   
stos
cmpsb
add
sbb
int3   
mov
loope
dec
xor
ss xchg
add
ror
jg
and
xor
sub
frstor
in
mov
jbe
sbb
insl
add
repz add
out
notb
sbb
rcl
sti    
xor
and
insb
(bad)  
and
lods
add
xor
xor
mov
pop
push
aas    
outsl
jecxz
sub
mov
mov
mov
jge
ficompl
stos
sbb
jp
rol
outsb
adc
repz addr16 mov
jp
addr16 jmp
add
pop
arpl
mov
and
mov
adc
into   
(bad)  
(bad)  
gs ret
es hlt 
inc
(bad)  
cmc    
pop
test
cltd   
and
mov
jecxz
or
xchg
push
inc
mov
and
cmp
add
js
ljmp
add
or
mov
xor
lods
mov
or
adc
xor
dec
jl
cmc    
mov
or
lea
cmpsb
sbb
mov
out
dec
xchg
aad
or
jmp
cli    
loop
call
and
divb
or
lcall
mov
ljmp
fimull
data16 xlat
cmp
cmp
mov
add
jb
add
aaa    
aam
cmp
aam
fsubrl
xchg
sti    
xor
idivb
repz
xor
xchg
aas    
dec
ds mov
pushf  
mov
dec
jmp
std    
stos
aaa    
mov
jcxz
arpl
dec
fistl
in
icebp  
orl
sub
add
outsl
or
jp
fist
leave  
mov
movsl
jle
mov
add
inc
and
call
dec
in
push
ret
jmp
jmp
xor
repnz cltd 
adc
and
stos
add
(bad)  
cld    
and
iret   
mov
daa    
push
add
aad
incl
lds
pushf  
lds
(bad)  
jae
jl
(bad)  
cmp
jnp
inc
pop
add
ja
jb
mov
jns
les
pop
ret    
dec
cltd   
ss cmc 
adc
cmp
and
sub
push
xor
fpatan 
stc    
add
and
out
std    
mov
bound
stos
and
mov
jae
ret    
(bad)  
in
inc
mov
enter
inc
push
pop
fildll
aad
xchg
cwtl   
or
xchg
xchg
mov
adc
testl
xchg
int
into   
cmp
mov
mov
(bad)  
stos
xor
mov
sub
icebp  
pop
adc
xchg
fldl2e 
leave  
test
scas
rol
outsl
es jg
mov
inc
adc
xchg
int
mov
aas    
call
(bad)
mov
xchg
jl
in
xchg
jne
xchg
dec
pmaddwd
aas    
pusha  
jl
mov
popf   
adc
dec
xor
xor
adc
clc    
push
call
sbb
pop
push
cmpsl
add
jnp
and
daa    
outsl
cmp
movsb
cmp
(bad)  
pushf  
lods
or
jae
fldcw
dec
shrl
mov
inc
fstpt
std    
movsl
cmpsl
into   
jp
lret
nop
out
(bad)  
int3   
pushf  
ficom
and
cld    
(bad)  {%k5}{z}
fisubrl
cld    
sub
rol
sbb
rcrb
mov
ja
or
mov
inc
pop
pop
or
bound
cld    
or
movsb
outsl
ror
mov
test
(bad)  
pusha  
and
aad
push
sbb
nop
fdivs
cmpsb
xor
fsqrt  
and
or
add
add
dec
inc
scas
inc
pusha  
(bad)  
or
add
add
(bad)  
(bad)  
(bad)  
incl
add
add
add
add
add
add
jns
je
insl
cs inc
jb
ja
outsb
addr16 sub
push
gs jb
imul
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
xor
data16 aaa 
xor
fs xor
add
adc
gs insl
cs inc
jb
ja
outsb
addr16 cs inc
imul
add
popa   
je
pop
add
add
add
add
add
lsl
add
push
or
add
mov
inc
or
add
or
add
add
add
dec
or
add
add
(bad)  
and
add
add
inc
dec
inc
add
mov
or
popa   
add
jo
pop
jae
add
ret    
add
push
ret    
add
outsl
test
add
or
dec
inc
inc
push
push
and
jge
add
pop
data16 jbe
cmp
mov
daa    
test
jmp
out
push
je
daa    
test
sbb
xchg
push
pop
sbb
xchg
xchg
jo
mov
aas    
clc    
jle
adc
test
add
cmpsb
or
das    
rclb
jge
inc
push
ss stos
mov
cmpsb
and
and
add
lods
xor
xor
popf   
test
pop
mov
xor
nop
add
mov
js
mov
inc
icebp  
test
fwait
jg
jl
pushf  
jmp
test
pop
dec
fldenv
fldenv
notb
ret    
lock mov
push
pop
dec
pop
imul
push
aad
in
cmp
jno
arpl
shld
add
jnp
xchg
or
pop
mov
sbb
loopne
rcrb
and
mov
(bad)  
dec
test
iret   
mov
or
pop
xchg
fstl
mov
mov
addr16 lret 
stos
inc
mov
ja
jnp
or
fstps
pop
cmpsb
pop
data16 cld 
xchg
aas    
push
fidivrl
cli    
repz fldl
and
xchg
outsb
repnz ljmp
xchg
xor
jno
dec
lcall
stc    
fisubrl
rclb
imul
sbb
sub
lea
sub
lcall
pusha  
les
pop
insl
sub
sahf   
fild
daa    
movsb
or
cltd   
inc
mov
lret   
inc
or
ss push
pop
xchg
ret
jb
out
(bad)
mov
jae
lret   
mov
popa   
adc
stos
pop
jns
arpl
clc    
aam
stos
inc
push
mov
push
ljmp
out
xor
ret    
push
push
mov
out
sbb
xchg
lret   
(bad)  
imul
jecxz
andb
inc
dec
push
jg
sub
in
cmpsl
cmp
xor
in
jmp
imul
movsl
arpl
cmc    
scas
push
sbb
push
(bad)  
mov
pop
mov
mov
mov
add
pop
(bad)  
and
shll
nop
adc
adc
add
sti    
loope
dec
ficompl
xor
std    
pop
out
movsl
and
pop
mov
xchg
sbb
out
aas    
mov
push
(bad)  
mov
lret   
loopne
inc
add
cmpsl
dec
aas    
es cli 
mov
fwait
lods
ja
(bad)  
lock and
xor
add
mov
lds
and
in
daa    
ret    
enter
mov
adc
call
fcomi
add
xchg
or
rol
cmp
std    
xor
in
sbb
ljmp
aas    
cs dec
mov
(bad)  
pop
and
cli    
inc
es and
movsb
sub
loop
and
xchg
mov
adc
mov
push
icebp  
roll
mov
ljmp
cs test
sti    
jp
dec
nop
sbb
lods
cmpsb
movlps
pop
inc
push
xor
lock fisttpll
lods
sub
bound
push
ja
mov
cmp
sbb
loope
and
xor
in
and
pop
fildl
fmuls
mov
fs loop
mov
jo
or
cmp
ds stos
fwait
data16 hlt 
shrl
movsb
fadds
fnstcw
repz push
pushf  
pop
imul
push
in
cwtl   
out
pop
inc
jne
pop
or
xor
aad
pop
mov
adc
inc
mov
and
(bad)  
pop
sub
int
insb
lea
mov
mov
jle
nop
cli    
ja
and
cmp
dec
clc    
aaa    
loope
xlat
pop
sbb
adcl
fwait
popa   
lahf   
scas
push
xlat
pop
mov
repz mov
inc
rolb
test
or
ja
mov
and
out
inc
loop
sahf   
arpl
mov
incb
test
jne
xchg
subb
daa    
adc
pop
xchg
enter
mov
lcall
and
(bad)  
ljmp
and
push
fstl
(bad)  
dec
dec
fisttpl
cmp
sub
xlat
jg
mov
fwait
out
sbb
mulb
in
aam
cmp
aad
mov
xchg
adc
fwait
xor
insb
leave  
sub
jae
daa    
into   
loop
pop
in
push
lds
es mov
xor
inc
dec
sbb
pop
rcl
in
push
hlt    
rorb
in
jecxz
jb
adc
jl
jmp
(bad)  
cmp
fistp
inc
call
dec
popf   
in
test
(bad)  
lods
in
in
jg
mov
insb
pop
push
cld    
in
mov
lds
icebp  
push
ja
and
jp
out
sbb
push
mov
mov
popf   
(bad)  
xchg
jp
push
ret    
dec
cmp
(bad)  
cltd   
in
and
adc
out
loopne
and
scas
add
or
dec
jl
repz pop
add
sub
jo
jecxz
fidiv
inc
sub
cmp
adc
adc
cmp
jmp
shll
adc
insb
sub
mov
mov
cmpsl
leave  
mov
cmpl
dec
jb
arpl
rorl
xor
jo
xchg
jne
jmp
hlt    
mov
push
scas
aam
(bad)  
sub
std    
mov
movsb
jb
jecxz
out
je
pop
js
and
fnsave
call
test
xchg
xor
es push
rorl
loope
adc
inc
pop
dec
stos
jl
sub
jle
imul
jns
popa   
in
cltd   
xchg
cmc    
mov
jp
xchg
mov
adc
fisubl
jb
jg
mov
and
lea
mov
cli    
or
mov
mov
iret   
cmc    
ret
cmp
sbb
or
test
incl
pop
adc
jne
mov
inc
or
repz leave 
sbb
stos
jl
and
mov
cmp
push
cs in
aas    
xchg
fisubl
mov
nop
in
insb
mov
jnp
es daa 
pop
popf   
dec
das    
test
pop
push
pop
sub
inc
xor
hlt    
es iret 
cmp
mov
sbb
jg
scas
jl
push
shrd
xchg
pop
hlt    
mov
outsl
fstl
mov
push
sbb
les
inc
ret
les
jp
test
pop
(bad)  
aas    
lock add
loope
jl
push
lds
sub
popa   
mov
xchg
sar
outsl
imul
or
inc
dec
movsl
pusha  
pop
lock sub
out
and
scas
scas
or
sbb
idivl
pop
data16 or
repnz in
jbe
notb
stos
mov
leave  
fwait
jnp
jno
in
lcall
test
ret    
and
sti    
push
cmpsl
je
jb
xor
mov
fdivrl
xor
xor
loop
jg
jb
arpl
cmpsb
je
adc
aad
inc
sub
outsb
mov
popf   
and
or
push
sahf   
imul
add
pop
mov
daa    
lret
mov
jge
in
in
ret    
cmc    
insl
xor
mov
inc
insl
xor
cs dec
int3   
mov
and
push
sub
out
sti    
dec
in
in
lds
stc    
adc
xor
pop
mov
jp
or
add
push
mov
adc
xor
repnz and
cmp
pusha  
mov
cmp
xor
stos
fiaddl
in
icebp  
sahf   
jl
adc
mov
daa    
aas    
fldl2t 
jne
lahf   
lret
pop
imul
xchg
lds
(bad)  
xlat
test
or
mov
ret    
ret    
jno
fwait
jg
ss pop
repnz fwait
dec
push
ss or
push
cmp
addr16 mov
lret
cli    
(bad)  
xor
cmp
sub
pushf  
fsubp
add
idiv
ljmp
arpl
xorl
adc
test
mov
fdivs
jnp
xchg
mov
jne
push
insb
or
mov
int3   
loopne
leave  
adc
push
jns
fsubrl
icebp  
xor
jecxz
int3   
jo
fstps
push
inc
int3   
popf   
sbb
test
ja
cmp
mov
sarb
push
xorps
inc
push
iret   
cltd   
pop
mov
xchg
aas    
and
ret    
in
repnz add
xchg
cmp
mov
test
insl
cmpsl
or
xor
add
add
add
adc
and
add
add
dec
inc
scas
inc
pusha  
(bad)  
or
add
add
(bad)  
(bad)  
(bad)  
incl
add
add
add
add
add
add
jns
je
insl
cs inc
jb
ja
outsb
addr16 sub
push
gs jb
imul
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
xor
data16 aaa 
xor
fs xor
add
adc
gs insl
cs inc
jb
ja
outsb
addr16 cs inc
imul
add
popa   
je
pop
add
add
add
add
add
lsl
add
jno
add
add
or
or
add
or
add
add
add
dec
or
add
add
(bad)  
and
add
add
inc
dec
inc
add
mov
or
popa   
add
jo
pop
jae
add
ret    
add
push
ret    
add
outsl
test
add
cmp
push
push
test
int3   
dec
add
mov
scas
jmp
loop
xor
jecxz
push
xchg
lods
lret
lcall
jle
mov
and
mov
mov
movsb
leave  
out
scas
cmpsb
cmc    
mov
dec
pop
insl
scas
jmp
xchg
adc
mov
add
imul
xor
inc
sbb
add
pop
inc
xchg
add
rcll
mov
cmpsl
pop
cmpsb
leave  
negb
lcall
mov
mov
xor
imul
mov
in
xchg
aad
adc
inc
das    
xor
hlt    
xchg
mov
stos
imul
rcrl
xchg
lods
jbe
std    
inc
mov
std    
scas
cmp
mov
dec
push
jb
stc    
rclb
psllq
add
sub
mov
jge
mov
cli    
in
js
cmc    
xchg
dec
sbb
sete
jge
out
ljmp
sub
mov
mov
push
icebp  
push
sbb
cs lcall
mov
adcl
(bad)  
push
cltd   
sub
iret   
xchg
sub
sub
aad
cmp
cs or
mov
dec
fldcw
ja
mov
or
mov
enter
push
data16
sub
mov
mov
je
adc
push
lock loop
lods
sub
lahf   
ret
add
xchg
arpl
dec
cmp
movl
add
cmpsb
loope
icebp  
mov
lcall
stc    
fs cmp
sub
pusha  
or
sub
jmp
add
out
xor
pop
sbb
xchg
in
fldt
cmp
ja
stc    
and
adc
repnz nop
dec
sub
test
je
cmpsl
mov
dec
sub
adc
jl
scas
pop
insl
xor
mov
sub
mov
icebp  
repz cmp
mov
loopne
or
xchg
xchg
decb
mov
cmp
push
inc
(bad)  
pusha  
imulb
jnp
jle
testl
hlt    
mov
cmp
repz pop
popf   
pop
jmp
aad
push
rol
push
inc
fcoml
les
pop
jnp
xchg
outsl
or
ds inc
divl
and
sbb
dec
mov
and
dec
cli    
mov
aad
dec
shrl
mov
mov
imul
stc    
inc
xor
ds inc
lahf   
in
cs mov
popa   
stos
adcb
int
lar
xchg
pop
repnz and
hlt    
xchg
inc
xor
mov
dec
outsb
xchg
inc
int3   
mov
movl
adc
std    
sbb
sbb
sti    
cli    
rorl
inc
les
and
sub
push
int3   
(bad)  
je
and
js
xchg
and
sbb
sub
mov
mov
lock mov
adc
jmp
flds
decl
icebp  
popf   
mov
ret
push
mul
outsb
dec
sub
cmp
stc    
nop
setno
cli    
jae
daa    
jle
mov
fs mov
movsl
dec
shll
xchg
or
add
push
sub
insl
aaa    
jecxz
dec
and
and
scas
mov
pop
push
ss icebp 
cmp
imul
ret    
(bad)  
movsb
pop
jmpw
adc
pop
push
xchg
mov
orl
mov
sub
(bad)  {%k5}{z}
(bad)  
lea
popa   
fidivrl
test
gs iret 
aas    
arpl
pop
dec
dec
mov
inc
cli    
mov
dec
mov
outsb
push
(bad)  
dec
test
jne
adc
pop
fsubrs
push
jb
scas
sti    
jno
out
jmp
jecxz
or
adc
ficom
dec
cmpsl
push
aas    
les
or
fwait
push
jp
xchg
push
ds xchg
push
and
loope
scas
xchg
bound
push
(bad)  
pop
cmp
mov
mov
in
pushf  
jbe
cmp
sbb
adc
pop
iret   
sub
movl
sub
fildll
mov
sbb
ljmp
add
movsb
lret
imul
or
cmpsb
enter
push
mov
cmp
sbb
cmpsb
cmp
mov
mov
in
pop
ret
mov
adc
push
and
loope
mov
and
mov
mov
cltd   
xor
mov
or
fimul
push
or
test
fcomps
test
(bad)  
push
fwait
dec
cmpsb
fscale 
push
inc
push
push
sub
push
inc
inc
es in
mov
cmpsl
mov
and
inc
inc
cs sub
out
in
clc    
or
rcrl
xchg
ret    
(bad)
adc
ret    
lret   
add
sub
outsb
sub
lods
inc
and
fidivl
idivl
icebp  
imul
inc
lock aad
lods
outsl
add
imull
in
push
or
inc
addr16 jg
shll
insl
out
nop
popa   
cmp
gs cmc 
and
rcrb
hlt    
ss push
jp
aad
jae
ds or
jmp
sbb
imul
xor
pop
jp
test
outsl
xor
mov
rcr
inc
stos
mov
adc
jnp
mov
cli    
int3   
test
pop
jecxz
in
inc
lret
ret
mov
mov
scas
sub
or
cmc    
mov
out
sbb
xchg
adc
iret   
mov
test
shlb
jg
sti    
pop
add
scas
punpcklbw
xchg
call
(bad)  
ds inc
xchg
sub
dec
xchg
das    
inc
and
sub
mov
inc
pusha  
add
dec
cmp
fwait
pop
ret    
inc
jecxz
fisubrl
jp
fs push
sub
(bad)  
mov
mov
adc
cld    
std    
cs xor
dec
je
fs scas
adc
adc
cmp
das    
mov
leave  
mov
mov
adcl
mov
jae
jge
pop
data16
repz xchg
lret
insl
int3   
mov
mov
inc
(bad)
and
scas
inc
gs jle
mov
popf   
ja
bound
jno
adc
leave  
rcll
aam
cmp
cmpsl
pop
sarb
cmp
xchg
jno
add
mov
in
pusha  
ljmp
arpl
rclb
or
movsb
pop
push
aam
into   
cmp
movsb
sahf   
test
pop
jl
rolb
inc
roll
lds
push
sbb
daa    
nop
fstpt
lret
inc
and
dec
xchg
pop
sbb
lret   
xor
cmpsb
(bad)  
pop
int3   
gs sub
ljmp
fisttpl
dec
xchg
sbb
xor
jge
sbb
pop
mov
mov
iret   
daa    
fsubs
(bad)  
push
add
scas
dec
lahf   
mov
dec
negl
xlat
and
inc
adc
jbe
mov
and
cli    
movsl
dec
out
push
fwait
push
and
insl
das    
or
cmp
pop
pop
and
mov
pop
into   
jne
stos
dec
xor
push
add
in
(bad)  
movsb
sbb
add
ficompl
sti    
sub
dec
ljmp
mov
pop
rclb
mov
dec
fistl
lock repnz data16 fstpl
psubusw
mov
cwtl   
outsb
sar
mov
and
xchg
addr16 pop
lds
rcrl
mov
test
dec
sbb
pusha  
(bad)  
add
bound
dec
orl
insl
jb
fwait
aad
ljmp
dec
sarl
and
in
(bad)  
ret    
cltd   
aaa    
rcll
or
jmp
aaa    
lahf   
out
mov
les
nop
lds
rcll
fstpt
fsubrs
xor
enter
fcom
pop
repnz xor
pushf  
mov
fldenv
mov
push
mov
xchg
pusha  
mov
pushf  
in
aam
iret   
xor
and
add
add
inc
movsb
jno
outsb
pop
sbb
rcr
out
icebp  
mulb
sub
sbb
mov
mov
lret   
mov
mov
xor
loopw
movsl
sub
or
dec
(bad)  
jno
jo
pop
and
out
mov
aam
push
loope,pt
fcoml
pop
xchg
lock jns
push
imul
mov
cmp
fcomps
push
xchg
ljmp
inc
es add
push
(bad)  
pushl
add
cmp
pop
ss
xor
push
ret    
dec
sbb
jo
pop
xchg
test
mov
in
out
lds
int3   
push
mov
cmp
mov
inc
add
push
arpl
pop
mov
fwait
(bad)  
sub
pop
in
daa    
outsl
mov
add
in
adc
sti    
or
pop
loopne
jmp
(bad)  
sbb
mov
enter
lret   
lods
repnz xchg
xorl
fistl
test
mov
es loopne
cmp
or
push
loop
mov
inc
sahf   
pushf  
(bad)  
pop
(bad)  
inc
jno
and
vhsubpd
pop
push
sub
out
push
movb
ret    
sub
icebp  
mov
push
out
cli    
sbb
insl
arpl
insb
enter
and
fmuls
jge
pop
aam
gs
cld    
add
repz bound
push
mov
push
pop
mov
ds xchg
xchg
adc
inc
hlt    
(bad)  
or
push
adc
in
mov
movsb
or
xor
push
das    
leave  
mov
addr16 cmp
bound
cmp
lret
mov
mov
int3   
dec
lret   
pop
in
lret
push
call
pushf  
cmp
addl
cmp
movsl
mov
mov
inc
pop
adc
(bad)  {%k5}{z}
(bad)  
ljmp
xor
std    
and
inc
fld
int
int3   
ret
in
add
pop
rcl
adc
ficomp
jno
fsubrl
fisubl
mov
mov
add
cmpsl
fsubrl
mov
out
sbb
shlb
popa   
imulb
adc
jecxz
insl
xor
aas    
mov
or
cmp
imul
int
in
pop
push
mov
adc
pop
(bad)  
fidivr
mov
adc
das    
call
mov
cmp
in
inc
pop
inc
dec
aad
notl
clc    
pushf  
adc
add
mov
call
mov
add
add
jnp
push
ret    
divb
and
shr
push
mov
xor
cld    
das    
popl
decb
pop
je
hlt    
loope
mov
std    
fsubrl
push
or
ret    
cmp
jno
(bad)  
(bad)  {%k5}{z}
(bad)  
sbbl
loopne
stos
js
mov
jle
(bad)
dec
(bad)  
lods
pushf  
aam
loop
dec
push
aaa    
mov
inc
pop
mov
fisubrl
fldl
jge
ja
test
mov
stos
fcomps
xchg
ds mul
movsl
(bad)  
jo
push
sbb
sbbb
pop
cmpsb
je
repnz pop
ret
mov
xchg
test
or
xor
repz mov
sbb
dec
daa    
sbb
movsb
inc
add
in
pusha  
push
call
add
lret   
(bad)  
mov
xchg
push
std    
sub
(bad)  
(bad)  
(bad)  
mov
push
(bad)  
sub
stos
dec
out
leave  
pop
popfw  
inc
call
scas
pop
add
jl
lret
sbb
jnp
pop
xor
push
xchg
jmp
lret   
cmp
fisttpl
test
xchg
dec
mov
mov
cmc    
or
mov
in
jle
add
cld    
bnd jge
lds
bound
sti    
and
lods
xchg
out
sti    
and
(bad)  
mov
rorb
push
ljmp
in
adc
into   
mov
pop
inc
and
(bad)  
cmpsl
(bad)  
xor
cwtl   
pop
and
aas    
sub
icebp  
out
pusha  
test
call
push
push
mov
mov
ltr
fmulp
push
(bad)  
imull
inc
push
and
ret
push
cmpsl
cli    
fcomps
ret    
mov
adc
les
adc
dec
push
or
xchg
adc
(bad)  
sti    
sbb
ja
sahf   
sbb
dec
xor
jne
push
pop
ds cltd 
popf   
addl
daa    
and
movb
cs pop
in
(bad)
lds
push
sub
(bad)  
jne
andps
inc
into   
pop
push
xchg
(bad)  
and
inc
xchg
xlat
ljmp
push
lods
movsl
std    
in
cmpw
push
mov
pusha  
add
add
int
jecxz
xchg
push
out
movsl
pop
out
clc    
fisubl
xor
jl
sub
sti    
cmpb
int3   
(bad)  
xchg
fisttpl
popa   
in
sub
push
(bad)  
repz pop
sbb
adc
mov
cld    
push
add
popf   
push
inc
jns
push
pop
cmpsb
mov
xchg
test
stc    
popf   
arpl
push
call
insb
sub
add
stc    
cmc    
aas    
xchg
imul
pop
xlat
int3   
mov
inc
push
aaa    
push
loope
call
and
test
and
and
mov
inc
cmp
jno
and
fisttp
pop
pop
mov
and
lea
in
psubd
sub
mov
or
mov
iret   
ret
pop
mov
cltd   
xlat
jnp
xor
aad
mov
add
push
push
inc
rolb
lret
adc
dec
cwtl   
sub
sahf   
ja
cltd   
inc
and
lret
imul
imul
rep stos
mov
loop
fnstcw
inc
jae
lret
ret
mov
push
jno
(bad)  
fidivr
mov
dec
into   
cmp
fistpll
int
mov
pop
aad
fsubp
mov
sbb
scas
stc    
xorb
fadd
mov
neg
in
xchg
loop
adc
dec
mov
stos
out
in
pop
pop
stc    
(bad)  
dec
(bad)  
scas
cmp
int3   
push
and
ja
test
mov
(bad)  
mov
nop
add
pushf  
push
mov
jmp
mov
(bad)
lods
mov
add
in
imul
shrb
ficom
sbb
testl
cmpl
pop
jmp
cld    
jle
push
pop
(bad)  
incl
mov
or
jg
lods
call
clc    
in
adc
dec
loope
addb
sbb
mov
fucomp
sub
(bad)  
lahf   
aad
xchg
inc
(bad)  
dec
(bad)  
and
roll
add
and
loop
sbb
sub
mov
xor
pop
pop
in
push
(bad)  
sub
and
in
lock push
push
adc
aaa    
jg
jbe
jns
popa   
push
popa   
add
push
repz
pop
je
lods
lret   
iret   
bnd jge
jne
(bad)  
ja
loop
das    
jae
mov
faddp
inc
aas    
push
adc
mov
(bad)  
jno
and
or
sub
jmp
test
adc
test
xchg
out
sbb
mov
popf   
cwtl   
jmp
xor
sub
adc
pop
dec
mov
popa   
adc
(bad)  
outsl
cld    
inc
aam
or
and
insl
push
add
insl
imul
mov
and
popa   
mov
cwtl   
and
cmp
sbb
adc
pop
sub
pushf  
popf   
inc
dec
jae
jl
enter
imul
mov
je
subl
sbb
jl
adc
inc
mov
mov
inc
mov
pop
mov
fldl
fwait
mov
das    
mov
in
fwait
xor
add
mov
cmp
rclb
xor
pusha  
cmp
dec
mov
cs mov
enter
mov
push
mov
dec
push
scas
lea
fucomip
fimull
adc
xchg
sub
push
and
xor
jbe
push
sbb
movsb
xor
dec
sbb
(bad)  
leave  
popf   
test
out
mov
add
test
lahf   
jp
ss xchg
add
push
push
sub
movsl
mov
movsb
aad
sbb
xor
push
(bad)  
mov
mov
test
sti    
mov
(bad)  
lock xlat
cmp
cmpsl
fstl
jae
mov
xchg
lahf   
sub
jnp
outsl
loope
daa    
push
lock fldl
push
lret
fcomps
push
pop
mov
cmp
mov
push
leave  
lock les
in
(bad)  
outsb
lea
mov
orl
notl
outsb
out
adc
insl
mov
jmp
cmp
movsb
ficom
arpl
mov
adc
xchg
out
xchg
mov
outsb
mov
mov
ficom
and
pop
fisubl
adcl
inc
ss cld 
popf   
sub
cs push
cmc    
fmul
adc
inc
dec
pusha  
jmp
dec
lahf   
movl
jp
cmp
adc
insl
mov
ffreep
data16 arpl
or
add
xchg
aaa    
imul
pop
mov
js
sub
icebp  
lret   
dec
fldt
out
int
and
pop
(bad)  
mov
push
(bad)  
jo
add
insb
xchg
mov
mov
push
mov
push
mov
test
mov
in
(bad)  
adc
dec
and
xor
lods
outsl
and
xor
jae
in
lret   
(bad)  
mov
mov
inc
imul
out
pop
js
cld    
mov
test
popa   
dec
sahf   
jb
icebp  
rcrb
subl
xor
scas
cmpxchg
push
das    
xchg
pop
out
cli    
addb
mov
add
jbe
inc
mov
pop
cmp
addr16 pop
imul
dec
cmp
data16 mov
jns
mov
xor
daa    
xor
stos
aaa    
(bad)  
push
call
cmp
add
dec
mov
sub
js
cmp
jp
adc
iret   
dec
push
and
jge
push
pop
jg
sbb
cmpl
add
xchg
into   
in
dec
mov
pop
mov
lret
mov
or
add
push
mov
adc
mov
mov
cmp
xchg
lods
imul
mov
sub
push
cmpsb
cwtl   
movsb
(bad)  
mov
insb
mov
pop
sub
jnp
pop
mov
and
xor
mov
ret
out
fs out
xor
add
fidiv
ret
bound
aas    
aad
in
sub
mov
fmuls
mov
fs
xchg
ljmp
cmpsl
loop
inc
sub
mov
xor
add
cwtl   
sub
pop
fstpl
nop
adc
mov
xchg
cmp
pop
ss das 
or
stc    
test
mov
sub
pop
ds inc
in
lcall
push
movsb
cmp
add
sub
inc
repnz sbb
mov
loop
lea
adc
mulb
mov
sub
adc
pop
inc
mov
sub
jno
icebp  
stc    
cmc    
pushf  
aaa    
dec
mov
mov
push
pop
jecxz
cld    
xor
ljmp
lods
inc
fsubs
jg
cli    
cmp
clc    
and
lahf   
push
adc
pop
mov
stc    
aam
cmp
mov
rcll
scas
aam
xor
dec
xchg
loopne
ljmp
sub
int
push
jae
jae
and
xchg
sub
pop
mov
mov
fstpt
jnp
and
ficom
aaa    
adc
das    
scas
sahf   
bound
rol
dec
sarl
and
cld    
ret    
jne
iret   
add
cmc    
jge
div
jns
pop
xlat
mov
mov
ljmp
clc    
out
(bad)  
dec
insl
(bad)  
jg
and
call
xchg
in
int3   
adc
sbb
movsb
adc
sbb
ja
mov
adc
pushl
sub
sub
xchg
or
es push
mov
roll
aas    
gs push
dec
dec
inc
xchg
out
jp
cmp
inc
sti    
insb
in
roll
(bad)  
inc
jge
rorl
cmp
or
ljmp
repnz insl
stc    
add
test
mov
mov
push
pop
lret   
sbb
cmp
mov
sbb
(bad)  
mov
bnd jno
inc
mov
push
add
mov
das    
pop
data16
iret   
jmp
pop
mov
(bad)  
in
int3   
mov
mov
xchg
adc
inc
lock lods
xor
ret    
xor
xchg
xchg
imul
pop
cmp
dec
push
xchg
mov
pop
add
inc
jl
jae
jmp
mov
dec
cwtl   
push
icebp  
xchg
xor
and
cmpsb
ss stos
fadd
xchg
push
or
mov
out
xor
rorl
pop
stc    
lcall
fwait
lock add
imul
gs out
dec
jmp
push
hlt    
add
mov
daa    
dec
cmpsb
sbb
cmp
mov
cmc    
ret
adc
dec
cmpsl
movsl
fadd
and
fdivrl
insb
dec
xchg
or
fsubl
cmp
pop
js
lret
pop
inc
(bad)  
or
mov
imul
cmp
sub
cltd   
dec
cmp
mov
into   
movl
xor
ljmp
les
jb
jb
lret   
sub
add
test
push
(bad)  
scas
enter
out
mov
push
leave  
cmp
test
mov
mov
es add
je
xor
push
adc
xor
xor
jb
(bad)  
push
mov
adc
mov
mov
enter
leave  
pop
mov
dec
ljmp
add
or
and
aad
fidivl
mov
int
xchg
mov
and
adc
inc
popf   
fidivrl
jo
clc    
mov
jle
cmpsl
push
int3   
cmp
mov
std    
jecxz
rcll
decb
sahf   
outsl
xor
or
nop
cmpsb
push
adc
sbb
std    
pusha  
sub
xchg
out
imul
mov
in
in
int3   
mov
xchg
mov
imul
adc
mov
mov
fcomip
xchg
jnp
pop
orl
outsb
jle
cld    
xchg
str
pmulhw
xor
lcall
mov
xchg
push
out
popa   
xchg
jle
rcrb
loope
mov
repnz push
and
imul
sub
cmp
cld    
out
push
icebp  
(bad)  
or
das    
repnz mov
mov
(bad)
(bad)  
dec
mov
sub
idivb
xor
mov
out
test
mov
jp
dec
adc
jle
lahf   
ljmp
jmp
add
and
cwtl   
push
insb
loope
scas
jle
mov
inc
not
pop
inc
mov
push
in
push
dec
fwait
mov
dec
mov
insl
lods
cmp
mov
jmp
stos
pop
adc
scas
stc    
add
and
nop
loope
nop
(bad)  
inc
shrb
mov
cmpsl
bound
jae
outsb
sbb
xlat
add
enter
cmc    
xchg
mov
mov
push
hlt    
aam
add
jno
cmc    
mov
or
loop
(bad)  
addr16 test
jb
data16 aaa 
mov
cld    
jl
mov
int3   
jns,pt
mov
lahf   
push
or
ds xor
cmp
inc
xorl
into   
adc
out
call
cmp
sarb
lret
loopne
push
mov
push
not
dec
stc    
mov
stos
in
sbb
pop
jp
std    
loop
mov
orl
mov
sti    
mov
pop
xor
pop
push
inc
(bad)  
out
jp
scas
repnz in
xchg
fcompl
mov
repnz fnsetpm(287 only) 
loopne
jb
repz
mov
inc
pop
fldcw
movsl
aas    
adc
and
sbb
mov
call
inc
mulb
xor
icebp  
jle
lods
and
mov
jmp
imul
sahf   
ss cld 
mov
pop
inc
les
(bad)  
mov
xchg
pop
add
jge
push
fs mov
sub
or
cmc    
lahf   
and
(bad)  
adc
into   
and
mov
std    
xor
hlt    
out
push
repnz popf 
cmpsb
stos
sub
add
andb
jbe
mov
sahf   
aad
out
lret   
ret    
(bad)  
in
xor
and
fisub
dec
arpl
dec
cli    
cmpsl
lea
sti    
lea
jo
mov
jmp
adc
(bad)  
jnp
inc
shlb
test
inc
adcb
imul
aad
fimull
push
jge
dec
int
mov
iret   
jbe
(bad)  
mov
sarl
jbe
mov
(bad)  
push
adc
movsb
mov
in
mov
in
(bad)  
icebp  
xchg
sub
aaa    
mov
jg
cwtl   
add
and
sub
inc
add
enter
jns
fcompl
popf   
adcl
daa    
jbe
pop
loope
inc
jmp
xor
stc    
sub
sub
adc
xchg
jae
pop
and
test
and
cmp
stos
test
popf   
ret    
pop
cmp
xchg
push
jmp
xor
jns
stos
cmpsl
add
adc
adc
outsb
mov
jl
mov
push
repz addr16 sub
xchg
dec
test
test
jbe
jno
dec
pop
cltd   
int3   
add
xchg
cmp
(bad)  
or
sub
adc
outsl
pushf  
cld    
cmp
rcrb
stos
loopne
jp
ljmp
psadbw
subl
imul
sahf   
fild
and
dec
pushf  
cmp
cltd   
or
adc
mov
ljmp
repz pop
pop
and
jmp
xchg
(bad)  
addr16 xor
cmp
xchg
(bad)  
repnz xchg
cmpl
jl
pop
incl
jle
or
mov
std    
jbe
cld    
cmp
lods
mov
in
clc    
sbb
insb
das    
das    
sbb
pop
jnp
mov
inc
or
inc
int
or
std    
inc
push
mov
and
inc
lea
cwtl   
loopne
sbb
popa   
sbb
sub
push
cmp
test
rorl
dec
or
(bad)  
mov
sub
loopne
and
mov
inc
test
push
push
data16 fisttp
add
inc
xchg
fistp
add
adc
repnz lahf 
test
pop
xchg
pop
cs out
xchg
(bad)  
xor
cmp
sub
mov
aam
sbb
inc
push
adc
jmp
aaa    
dec
lret   
dec
pop
mov
push
imul
pop
and
repnz bound
cmpsb
lcall
and
cli    
sub
jle
loopne
sbb
adc
cs sbb
pop
push
enter
mov
jae
pop
pop
add
rolb
sti    
(bad)  
cmp
clc    
aam
xor
add
cmpsl
mov
not
mov
popa   
push
mov
push
adc
fwait
mov
out
fisubl
rolb
(bad)
push
scas
push
mov
(bad)  
repnz xchg
addr16 pop
mov
imul
fwait
(bad)  
pop
fidivrl
sub
xlat
pushf  
pop
adc
pop
pop
adc
push
xchg
rorb
ret
or
mov
in
mov
jle
test
push
imul
lahf   
orl
pop
pop
adc
push
sbb
sbb
adc
cs int
mov
mov
jp
je
shlb
inc
mov
inc
pop
jno
lahf   
data16 and
mov
push
out
mov
into   
mov
jo
scas
pop
ljmp
lods
call
or
pop
add
push
fstpt
outsl
ljmp
inc
mov
loopne
mov
push
add
enter
popa   
mov
(bad)  
mov
cmpsb
cs push
pop
mov
clc    
clc    
in
aas    
cmp
lcall
lcall
test
push
mov
push
mov
xchg
in
or
ds aas 
sbb
mov
adc
fstpt
sbbb
ret
sub
lret   
mov
imul
scas
jb
adc
or
mov
bound
or
daa    
jge
cld    
pop
jns
lret   
mov
add
sub
jle
jle
cs xchg
les
jae
cwtl   
or
pop
mov
and
repz mov
dec
mov
add
mov
lea
mov
xchg
mov
mov
loopne
mov
jne
insb
roll
cs inc
arpl
data16 loopne
add
fstp
xor
popf   
or
mov
mov
outsl
mov
je
jp
push
mov
test
cwtl   
aad
(bad)  
aas    
fidiv
pop
mov
inc
jb
lcall
pop
inc
mov
loop
and
pop
fimull
cmp
jmp
(bad)  
lods
in
sahf   
cmpl
hlt    
repz or
xlat
cmp
pop
imul
adc
mov
xchg
push
mov
leave  
dec
das    
sbb
mov
dec
sub
dec
popa   
cmp
fs iret 
in
aam
mov
fcoml
fucomp
cmp
adc
mov
push
lds
mov
pop
fs leave 
xchg
mov
mov
scas
rorb
repnz pusha 
sbb
in
fdivrl
push
add
icebp  
insb
test
mov
ljmp
push
fwait
(bad)  
cmp
ret
mov
and
mov
add
mov
lods
lret   
shrb
mov
test
mov
stc    
arpl
(bad)  
xchg
fstpl
inc
aaa    
ret
cmp
(bad)  {%k5}{z}
(bad)  
push
xor
and
push
mov
xchg
sbb
pop
xchg
mov
and
adc
movsl
add
loope
xchg
scas
dec
clc    
mov
push
pop
movd
imul
jne
add
std    
mov
push
dec
adc
out
jne
fcmovnu
daa    
mov
nop
stos
adc
lret
dec
pop
pushf  
clc    
dec
inc
outsl
fimul
sbb
mov
push
jmp
js
aas    
in
daa    
adc
xchg
push
dec
pop
jne
out
inc
movsb
xor
(bad)  
lock sti 
sbb
rcll
sbb
add
mov
ss cld 
jl
lcall
not
mov
pop
iret   
(bad)  
repz fsubrl
inc
cmpsb
dec
rolb
fmul
xchg
dec
xor
std    
dec
loopne
push
pop
or
mov
int
jo
(bad)  
in
in
in
jecxz
cmp
and
out
mov
fucomip
mov
pop
into   
mov
je
xchg
xor
cld    
push
pop
gs mov
divb
and
dec
inc
xlat
stc    
mov
mov
imulb
xor
cmp
fild
fidiv
aas    
adc
(bad)  
fnop   
lcall
enter
pop
ret    
dec
loopne
pop
mov
adc
movsb
in
mov
pusha  
adc
sti    
xlat
int
jmp
ljmp
outsl
out
test
lret
sub
aaa    
(bad)
hlt    
push
fldcw
loop
(bad)  
sahf   
and
stos
cmp
mov
fmull
mov
mov
mov
into   
enter
xor
adc
push
cmp
mov
dec
rcrb
mov
loope
cmp
add
inc
scas
sub
ss out
jo
(bad)  
bound
out
xchg
mov
gs popa 
xchg
gs xchg
jl
or
imul
push
insb
add
mov
mov
fnop   
jmp
cli    
fcoms
repz bound
les
inc
cwtl   
popa   
aas    
pop
cvttps2pi
rep insl
cmpsb
stc    
out
sbb
adc
aaa    
cmp
adc
loopne
lret
or
loopne
flds
jno
ja
leave  
cmpsb
dec
cmp
int3   
mov
(bad)  
push
aam
outsl
jge
xorl
mov
jae
cmp
xchg
push
push
or
mov
loop
jbe
roll
repz mov
adc
jne
sub
nop
xor
out
mov
add
xor
mov
push
sub
mov
adc
pop
push
notl
pop
stos
lods
jae
sbb
es rol
out
cmp
jl
mov
or
call
aaa    
inc
inc
jecxz
inc
loope
ljmp
(bad)  
mov
sbb
(bad)
pop
fwait
pop
insb
(bad)  
sbb
(bad)  
imul
inc
mov
pop
js
insl
push
cmc    
test
mov
cltd   
loopne
orl
cltd   
pop
lods
ds xchg
fnstcw
fcomps
adc
and
icebp  
add
push
dec
popf   
aam
ret
dec
adc
sbb
mov
enter
icebp  
cwtl   
sbb
hlt    
push
jnp
movb
mov
out
jl
push
decb
mov
repnz orb
push
imul
cmpsb
cmc    
push
popa   
push
outsl
and
ret    
push
popa   
into   
fisttpl
(bad)  
cmp
sbb
xor
clc    
in
mov
test
lds
push
(bad)  
jg
adc
subl
ror
je
jne
pop
inc
je
sbb
fisubl
pop
aad
(bad)  
out
test
icebp  
cmp
push
pop
lock jmp
and
(bad)  
movsb
xor
inc
outsl
imul
negl
xchg
or
iret   
popa   
add
es inc
cmpsl
xorb
add
(bad)  
scas
pop
push
cmc    
test
repnz ds pop
test
rcrl
stos
lock cld 
and
into   
cmp
cs stos
add
ror
lcall
cmp
inc
xchg
push
push
aas    
push
ds pop
sbb
mov
or
in
dec
sub
sbb
test
sub
xor
push
push
mov
jae,pn
cli    
xor
mov
cs or
ficomp
and
imul
mov
aam
xor
sbb
add
std    
cs sub
int
mov
mov
scas
fwait
cmp
inc
dec
nop
cwtl   
xor
les
sub
xor
mov
(bad)  
and
sub
movsl
push
cli    
idiv
stc    
cmc    
pop
mov
fwait
dec
jns
(bad)  
xor
xchg
push
fs es push
(bad)  
rorl
cmp
cmp
icebp  
pop
shll
aad
mov
cmc    
leave  
leave  
in
in
or
cmp
mov
xchg
flds
fdivrs
jae
rorb
outsb
pop
cld    
jge
xchg
push
inc
xchg
push
mov
(bad)  
cmc    
inc
xchg
ss jl
dec
push
mul
out
pop
scas
cmp
call
mov
shrb
mov
cld    
xchg
add
(bad)
loopne
jns
xchg
daa    
fildll
push
int
ljmp
ja
popf   
cmp
or
push
clc    
inc
sarb
call
test
loop
out
adc
into   
sahf   
or
pop
and
mov
nop
pop
mov
sbb
push
pop
push
cltd   
and
mov
mov
add
or
xor
orl
xchg
std    
push
rclb
out
cs lcall
push
pop
sub
faddp
adc
sarl
cmp
or
cs or
je
cmp
jp
push
stc    
loope
ljmp
mov
cmpsb
sub
inc
nop
fsubrl
push
aam
fiaddl
das    
cli    
inc
inc
push
jae
xor
inc
jne
addr16 mov
xor
daa    
jge
cmc    
xchg
subl
imul
out
sub
aad
aam
dec
add
lret
orl
xchg
adc
pop
inc
sti    
fmul
push
and
pop
mov
shl
push
addr16 pop
icebp  
mov
dec
mov
push
(bad)  
cmp
or
rolb
(bad)  
mov
out
inc
mov
xor
inc
jl
push
in
push
lret
xchg
add
push
inc
sahf   
sub
inc
add
je
js
adc
dec
mov
out
rcrl
leave  
mov
and
sbb
jmp
ja
icebp  
fwait
jle
aaa    
dec
pop
or
mov
sub
lock paddw
addr16 data16 sti 
out
in
mov
sub
jmp
addl
push
dec
inc
insb
jecxz
adc
(bad)  
push
push
es add
scas
fucompp 
call
dec
dec
sub
xor
cmpsl
punpcklwd
dec
aas    
xchg
adc
fbld
imul
cmp
fdecstp 
jle
lods
popl
stos
jp
push
fstpt
bound
mov
das    
(bad)  
(bad)  
icebp  
(bad)  
jo
or
mov
pop
sti    
ficompl
je
fimul
mov
(bad)  
pop
push
sbb
shrl
out
clc    
notl
gs mov
fisttpl
dec
cs push
scas
xchg
xchg
les
xchg
fyl2x  
and
mov
mov
push
pop
mov
enter
jmp
jp
fucomip
xorl
adc
cmpsb
imul
jnp
push
xor
or
mov
pop
cmp
lock push
cmpsl
jno
cmp
adc
fildl
ljmp
iret   
fwait
mov
cmp
scas
or
in
and
inc
and
(bad)  
pop
mov
xchg
sub
aas    
ja
dec
movsb
pop
inc
cmp
push
rcrl
lods
sti    
daa    
stos
scas
hlt    
gs aad
cli    
xchg
xor
add
adc
dec
jl
add
sbbb
jae
dec
imul
icebp  
or
movsb
es xor
int3   
ja
push
insb
bound
sbb
pop
push
ror
mov
cmp
in
push
dec
repnz xor
je
cwtl   
orb
nop
xlat
add
test
adc
aaa    
hlt    
jp
and
xchg
inc
sarl
fwait
jns
jge
fbstp
jle
and
addb
xor
into   
pop
outsl
(bad)  
out
xlat
pop
and
adc
lods
mov
repz inc
sub
fnstsw
aam
xchg
mov
(bad)  
jmp
enter
les
and
pusha  
ds adc
or
fistpl
lds
add
repz gs mov
pushf  
xchg
cmp
mov
mov
adc
in
mov
cmp
cmp
adc
popf   
into   
and
dec
lods
inc
shll
jmp
xor
xchg
cmp
addr16 into 
aaa    
mov
loope
mov
pop
cmp
lods
pop
aam
stos
ret
add
and
pushf  
ret    
push
push
jmp
sbb
in
into   
push
jge
mov
lret   
rcll
sub
int3   
aam
inc
lds
mov
dec
je
call
xorl
call
leave  
in
and
jne
into   
xor
and
jno
inc
loope
ja
jbe
push
mov
dec
adc
movsb
(bad)  {%k5}{z}
fucomi
cmp
jg
movsl
push
out
ss pop
dec
push
popf   
dec
jne
and
lahf   
adc
mov
fiadd
in
imul
cmp
adc
(bad)  
push
pop
(bad)  
sub
cmpl
inc
popf   
subl
dec
jae
sahf   
test
pushf  
leave  
roll
cmp
sbb
test
push
mov
and
and
test
mov
movsb
mov
dec
flds
fmul
lods
jo
mov
loope
sub
push
test
out
in
sub
pop
ret    
pushf  
xchg
jne
sub
leave  
dec
stos
imul
(bad)  
xor
jno
xor
pusha  
call
sbb
cmp
pushf  
divl
(bad)  
int3   
popa   
inc
mov
ss inc
and
loopne
das    
inc
test
xchg
int3   
mov
sbb
xor
jns
jno
rorb
add
fistpl
add
cmp
clc    
jnp
jns
lods
insb
jno
(bad)  
jecxz
stos
xor
mov
xchg
call
(bad)  
jmp
mov
nop
out
imull
mov
jae
les
fnstenv
adc
int
rcrl
push
stos
adc
add
stos
ret    
inc
aam
pmaxsw
test
test
dec
push
pop
and
mov
pusha  
dec
pop
mov
(bad)  {%k5}{z}
(bad)
rcrb
call
pop
mov
addr16 xchg
cli    
cmp
(bad)  
mov
icebp  
out
enter
je
jns
insl
stc    
pop
out
hlt    
pop
int3   
cld    
(bad)  
adc
sarl
mov
and
enter
mov
xor
inc
mov
add
pusha  
test
adc
fistpll
mov
rcl
sub
test
push
inc
ret
add
inc
xchg
fsubrl
pusha  
pop
sub
xchg
jno
push
adc
cmpsb
lea
sbb
jnp
rorb
cmc    
push
jle
ljmp
mov
add
pushf  
pushf  
xor
mov
mov
aam
ret    
insb
pop
add
cmc    
push
mov
mov
mov
out
(bad)  
lcall
and
cwtl   
(bad)  
repz cltd 
sbb
sbb
or
inc
std    
loope
lds
in
ret    
fcompl
out
and
scas
xchg
leave  
sub
pop
dec
addl
outsl
bound
ret
jge
enter
out
adc
pop
dec
mov
inc
fs mov
aas    
test
mov
fs fwait
sub
lret   
dec
fucomp
push
jae
add
jo
insb
cwtl   
fbstp
repnz scas
or
nop
xlat
sub
mov
mov
ret    
repz cld 
mov
lcall
sbb
outsl
clc    
into   
or
xorl
lret   
pop
iret   
ret
push
fimull
imul
xchg
add
ds xchg
clc    
jns
xor
hlt    
fisubrl
pop
sbb
mov
sbb
adcl
leave  
neg
push
test
inc
or
hlt    
sarb
cs add
dec
outsb
jl
sbb
aam
and
jno
add
dec
je
mov
out
xor
mov
mov
hlt    
push
jbe
push
inc
or
mov
stos
fiaddl
outsb
dec
fldt
lcall
lahf   
xor
imul
and
xor
ljmp
imul
dec
add
cmpsb
fdivs
fldcw
mov
rcl
fsts
sbb
add
cmpsl
sub
xchg
inc
mov
pop
sub
rcrl
in
mov
test
or
xor
stos
and
sbb
cmp
aas    
pop
adc
fdivrs
ljmp
popa   
sub
jp
or
idiv
mov
jge
les
xor
out
cmp
push
nop
ja
cmpsl
mov
cld    
pop
jns
sti    
aam
xor
and
ljmp
int3   
cmc    
and
pop
add
aam
outsb
fs nop
lahf   
inc
push
aaa    
cltd   
cmp
cmpsl
iret   
mov
push
clc    
or
sub
add
into   
xchg
sbb
daa    
test
popa   
bound
arpl
lods
sbb
cld    
xor
movsl
mov
mov
add
or
cmp
das    
mov
add
ss
jne
(bad)  
dec
cmpsl
cli    
pop
dec
imul
xchg
test
std    
in
ljmp
(bad)  
mov
push
cltd   
jle
shr
xor
ss pop
jg
cmpsb
fild
mov
jns
push
fwait
inc
stos
outsb
pop
lret
xor
mov
xor
push
mov
xor
mov
fs push
movsl
nop
jo
mov
fwait
popa   
mov
aam
out
(bad)  
sub
out
dec
xor
ja
lock lea
(bad)  
adc
cwtl   
in
outsl
mov
stos
ds add
xchg
mov
pop
pushf  
scas
orl
cmpsl
das    
pop
outsb
push
(bad)  
imul
inc
out
or
or
xchg
shr
jno
sbbb
paddw
dec
add
xlat
and
or
stc    
cli    
int3   
sbb
(bad)  
stc    
mov
add
mov
nop
mov
xchg
jnp
std    
pop
cmp
jge
leave  
xor
negb
cmp
mov
imul
push
rorb
xchg
ljmp
push
xor
dec
push
aad
icebp  
or
push
iret   
ret
xchg
jno
sub
add
nop
mov
js
pop
sahf   
sti    
mov
addl
(bad)  
jbe
or
fldcw
dec
fidiv
add
repz xchg
movsb
iret   
or
(bad)  
mov
xchg
cmpsl
cmp
ja
sub
int
mov
cmp
dec
push
daa    
lret   
and
rcrl
clc    
lea
sbb
push
pop
xor
pop
in
cmp
das    
sbb
mov
sub
cs lcall
push
inc
push
repz test
imul
cmp
jbe
(bad)  
mov
pop
int3   
adc
or
xchg
sbb
push
test
adc
fmull
push
jle
mov
in
cwtl   
popf   
mov
adc
adc
fcoml
loope
jmp
scas
inc
mov
(bad)  {%k5}{z}
(bad)  
push
dec
mov
lods
lret
inc
cmp
loopne
daa    
ret    
mov
adc
cmp
adc
pop
pop
pop
mov
es inc
mov
dec
xor
xor
xor
ja
adc
cltd   
sub
mov
mov
pop
popa   
inc
ljmp
push
fstl
jmp
xchg
int3   
leave  
pop
int
xlat
push
lods
pop
je
xchg
mov
xor
imul
xor
mov
cmpsb
arpl
mov
lods
cltd   
repnz dec
add
aas    
insb
push
jb
xchg
aaa    
mov
hlt    
or
mov
xor
js
xchg
out
sahf   
mov
mov
out
mov
fs dec
jecxz
push
call
mov
push
outsb
jbe
mov
jno
pop
pop
dec
mov
mov
mov
cmp
xchg
daa    
jmp
jbe
jmp
pop
xchg
sbb
pop
out
(bad)  
hlt    
cmp
scas
adc
movsl
xor
and
dec
inc
mov
add
xor
call
add
fsubr
ss lcall
data16
and
xchg
sbb
mov
fidivl
sbb
notl
nop
idiv
std    
sbb
and
les
pusha  
pop
sub
jecxz
lea
aas    
mov
test
test
pop
cmp
lcall
addr16 ja
cwtl   
leave  
jmp
stos
lea
test
or
jb
sbb
insb
(bad)  
jo
dec
pop
adc
pop
mov
dec
pop
call
icebp  
xor
inc
sub
add
dec
mov
push
ret    
xchg
inc
cltd   
xor
jno
mov
or
cmp
out
or
sbb
lret   
(bad)  
jp
enter
mov
mov
xchg
in
sub
jg
repnz push
add
mov
inc
stos
arpl
dec
data16
sub
sub
icebp  
sbb
sbb
std    
(bad)  
lret
je
(bad)  
aaa    
fstpl
or
or
mov
movsb
inc
rep insb
daa    
pop
jecxz
jnp
movsb
or
push
mov
cmp
xchg
inc
cli    
bound
push
add
inc
mov
push
out
pop
rcr
mov
cmpsl
outsl
mov
gs push
fldl
pushf  
es xchg
nop
cmpl
add
push
pop
add
repz inc
dec
xor
xor
jle
jg
mov
scas
stos
xchg
jg
scas
inc
xchg
jl
xchg
test
test
adc
fwait
lock sub
out
sarl
cs mov
hlt    
stos
xchg
pop
inc
lods
imul
mov
mov
xlat
jl
cmp
sbb
dec
outsl
cmpsl
fildl
pop
cmp
add
rorl
test
adc
add
or
sbb
popl
loop
pop
xchg
inc
fwait
into   
pop
add
pop
ss jno
xchg
push
jmp
test
sbb
imul
and
aaa    
push
dec
adc
mov
adc
ret
push
pop
faddp
dec
into   
(bad)  
or
in
pmaddwd
outsb
adc
xlat
int3   
aaa    
add
mov
push
arpl
xchg
in
mov
push
sub
mov
add
rorl
mov
xchg
ficoml
and
or
movl
in
adc
les
cltd   
xor
add
pop
and
gs pop
add
aad
cmpsb
jno
push
mov
sub
inc
lret
mov
pop
in
ss hlt 
or
lock mov
jmp
xor
xchg
dec
inc
push
sahf   
int
in
jmp
movsl
add
jmp
xchg
cwtl   
(bad)  
mov
push
ja
faddl
sbb
cs ljmp
or
es in
pop
ret    
out
mul
sbb
outsl
cmp
pop
or
ljmp
repnz inc
movsb
xor
shr
jnp
lods
jge
in
xchg
mov
xlat
mov
cmp
adc
(bad)  
mov
loopne
sahf   
ss fistl
sbb
cmp
icebp  
push
jl
sbb
(bad)  
mov
cs clc 
ds xchg
int3   
stos
xor
cmp
push
sub
mov
ss daa 
push
add
loope
mov
insl
pop
jle
or
lods
add
lds
fmull
xor
js
dec
(bad)  
dec
adc
or
mov
xor
mov
mov
inc
mov
sti    
pop
imul
ret    
inc
xchg
nop
jbe
in
mov
cs push
inc
js
es jp
roll
add
in
push
sbb
(bad)  
adc
lcall
jnp
out
pop
iret   
std    
mov
(bad)  
lock js
(bad)  
cld    
mov
or
fisubr
insb
and
leave  
mov
test
jecxz
movsl
mov
cld    
push
outsl
stc    
sub
jp
cmp
push
les
mov
(bad)  
in
pop
ret    
int3   
(bad)  
and
adc
ds adc
lock int
jnp
adc
pop
jno
in
sarl
xchg
andl
(bad)  
idivb
or
dec
push
sub
fidivl
repz jmp
adc
push
adc
pop
push
into   
add
sti    
in
test
jbe
test
lret
xchg
test
and
daa    
mov
pop
mov
sbb
mov
cwtl   
inc
je
out
sbb
adc
xchg
stos
ds xchg
rclb
sub
out
dec
fnsave
cmp
jmp
sbb
in
ss popf 
test
lds
pop
and
add
fmuls
js
jl
mov
inc
jae
lahf   
dec
out
daa    
cmpsb
scas
inc
xchg
ss push
ljmp
in
add
xchg
scas
cmpsb
pushf  
aad
sbb
xlat
lret   
movsb
pop
and
jnp
pop
out
shrb
mov
pop
adc
xchg
aad
and
rcrb
movl
test
push
sti    
into   
js
mov
cmp
add
adc
mov
ja
mov
jecxz
addr16 and
mov
mov
dec
cmpb
xchg
add
cwtl   
addr16 hlt 
ljmp
in
ficom
xchg
ljmp
outsl
inc
fs cld 
(bad)  
cmp
jecxz
out
insb
sub
adc
and
test
int
push
cmp
repnz nop
test
push
aaa    
sub
push
jge
or
mov
aas    
sub
add
sbb
xor
pop
adc
jae
dec
popa   
or
sub
mov
push
xor
mov
xorl
ror
movsb
(bad)  
arpl
hlt    
dec
cltd   
cmp
sbb
insb
mov
xchg
pop
add
rorl
fwait
dec
(bad)  
lock shrb
pop
pop
push
dec
cld    
aaa    
dec
push
xlat
xchg
movsb
mov
int
push
xchg
push
icebp  
push
dec
sti    
add
xor
xor
mov
inc
loop
fisttp
call
roll
out
rolb
jecxz
lods
dec
jl
cmp
cmc    
jp
dec
scas
add
mov
loop
push
inc
xchg
xor
pop
loope
lcall
emms   
push
cmp
cmp
outsb
jae
or
xorl
cmp
xor
pop
and
int3   
idivb
test
adc
mov
and
or
sbb
xchg
ds cld 
cmp
adc
jmp
mov
sub
mov
and
jmp
inc
mov
pop
(bad)  
or
xchg
push
xchg
push
pop
pop
push
out
push
fildl
and
push
dec
xchg
jo
push
sub
fcoml
insb
push
sub
ret
test
xchg
js
out
movsb
push
ret    
adc
(bad)  {%k5}{z}
(bad)  
jb
lahf   
test
int
push
fistpl
mov
hlt    
dec
mov
cmc    
cmp
bound
mov
fmul
xor
cmp
dec
enter
fidivl
hlt    
jmp
insb
pop
sbb
mov
cmc    
jae
test
pop
mov
loopne
xor
hlt    
(bad)  
out
add
mov
jns
jecxz
mov
pop
xchg
or
mov
add
jne
mov
pop
ret    
fstps
pop
jle
mov
pop
xchg
fiaddl
add
jo
mov
loopne
jo
fucomip
out
(bad)  
mulb
sub
mov
ret
ss inc
mov
mov
fistpll
in
inc
pop
cmp
rcrl
das    
jnp
mov
call
xchg
push
notl
pushf  
stc    
shrb
jg
add
cmp
adc
dec
sbb
mov
das    
pop
in
fsubs
and
mov
mov
jecxz
fistpll
dec
dec
test
jecxz
nop
add
mov
das    
inc
adc
xchg
push
sbb
mov
jne
mov
in
mov
outsl
fld
dec
sbb
cmp
stos
mov
xchg
pop
fucomp
cmc    
xor
xor
cmp
cwtl   
das    
pop
xor
std    
lret
in
repz hlt 
inc
(bad)  
movsb
add
and
mov
and
js
mov
(bad)  
out
jae
inc
bound
test
adc
sub
push
adc
and
inc
fldenv
lock aaa 
mov
jne
inc
es in
data16 std 
mov
pop
popa   
mov
xor
or
cmp
cli    
hlt    
push
lods
adc
pop
in
in
mulb
popa   
jp
dec
outsb
xor
push
and
cltd   
shrl
jp
cmp
sub
pop
int3   
fiaddl
inc
sbb
and
sbb
cwtl   
arpl
xor
pop
xchg
lea
jg
push
scas
popa   
lret   
jp
aas    
fisttp
pop
cmp
movsb
nop
sahf   
ljmp
test
cmp
jnp
or
lahf   
inc
aaa    
js
sarb
push
mov
es inc
and
sbb
scas
mov
vpsadbw
nop
mov
dec
test
xchg
aad
lahf   
and
rcll
jnp
and
iret   
inc
jge
mov
adc
test
cmp
dec
aas    
test
xorl
iret   
aaa    
(bad)  
mov
loopne
fwait
mov
push
sub
outsb
sub
cmp
cmp
xor
pop
ja
adc
xlat
pop
int
xchg
sbb
xor
in
push
into   
mov
mov
pop
inc
xor
sbb
enter
xchg
pop
data16 out
push
outsl
mov
lods
inc
js
(bad)  
sbbb
mov
xchg
ret    
pusha  
mov
aaa    
lahf   
mov
push
call
jl
sub
add
pop
xchg
xchg
xchg
dec
daa    
sbb
nop
imul
out
mov
sbb
cld    
in
adc
sbb
xchg
add
dec
and
stos
sbb
push
movsb
stos
aad
data16 mov
pop
insl
loopne
lret
cmp
add
mov
sbbb
push
movsb
or
cmpsl
push
pop
adc
imul
cmp
and
mov
xor
mov
mov
cmp
jge
mov
stos
in
cmpsb
cmp
adc
xorb
mov
(bad)  
sub
pop
loop
subl
sahf   
popa   
xor
jle
daa    
movsb
add
mov
xor
cmc    
or
imul
shl
pusha  
enter
lock jae
sub
sub
pop
sti    
jmp
pop
cmc    
pop
fsubrs
repz
bound
xchg
add
call
es sbb
and
(bad)  
lock lret
mov
push
aad
add
push
add
sbbl
icebp  
test
mov
inc
in
mov
lahf   
xor
xor
int
shl
mov
loopne
pop
sti    
push
jmp
test
ror
mov
sbb
push
jae
into   
clc    
push
pop
push
push
dec
mov
ret    
test
repnz into 
mov
adc
stos
enter
fcmovnbe
push
add
pushf  
pop
mov
xchg
push
loope
push
arpl
fnstcw
inc
shll
mov
imul
fiaddl
pop
xchg
mov
mov
movl
imul
addl
fxch
push
xor
bound
repnz fcoml
enter
mov
shrb
lret
mov
cmp
lds
popa   
sbb
cmpb
mov
add
add
dec
inc
scas
inc
pusha  
(bad)  
or
add
add
(bad)  
(bad)  
(bad)  
incl
add
add
add
add
add
add
jns
je
insl
cs inc
jb
ja
outsb
addr16 sub
push
gs jb
imul
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
xor
data16 aaa 
xor
fs xor
add
adc
gs insl
cs inc
jb
ja
outsb
addr16 cs inc
imul
add
popa   
je
pop
add
add
add
add
add
lsl
add
jno
add
add
or
or
add
or
add
add
add
dec
or
add
add
(bad)  
and
add
add
inc
dec
inc
add
mov
or
popa   
add
jo
pop
jae
add
ret    
add
push
ret    
add
outsl
test
add
cmp
push
push
test
sbb
and
aaa    
(bad)  
repz
and
lods
stos
adc
sbb
loopne
movsb
movsl
sbb
sbb
jbe
mov
xchg
jne
(bad)  
push
jne
mov
push
pop
mov
xor
(bad)  
f2xm1  
mov
ss out
stos
xor
rol
mov
out
add
jo
push
pop
test
mov
add
sahf   
sbbb
int3   
sbb
stc    
in
mov
xchg
jns
stos
push
insb
sarl
or
nop
fs inc
andl
andl
cmp
xchg
pop
dec
add
jae
(bad)  
xor
loopne
jns
adc
sub
and
cmc    
mov
pop
dec
dec
outsb
cmp
(bad)  
jo
mov
dec
pop
pushl
pop
jp
or
ret
ja
fisubl
pop
aaa    
lea
scas
lock cli 
dec
add
jno
fildl
jecxz
dec
xchg
es int3 
dec
popf   
inc
cmp
jne
popf   
dec
jecxz
(bad)  
jl
std    
sub
test
jg
fsubl
rcrl
out
xorl
outsl
dec
dec
xchg
and
or
mov
adc
test
loop
sti    
or
lea
mov
lcall
fstl
jmp
adc
xor
iret   
bound
or
in
sub
sub
xchg
mov
dec
jne
cmc    
repz and
(bad)  
inc
divb
pushf  
and
out
mov
popf   
pop
push
add
test
push
sub
cmpsl
(bad)  
jmp
inc
fidivr
push
add
pusha  
loopne
jbe
(bad)  
popa   
mov
hlt    
in
test
pop
or
push
push
test
push
dec
mov
ds insl
and
lock mov
clc    
int
pusha  
inc
movsl
lahf   
adc
add
lahf   
cmp
mov
out
lock addr16 xor
jo
jno
dec
xchg
test
gs push
insl
mov
idiv
bound
mov
mull
fsubrl
icebp  
cmp
push
mov
inc
sbb
es aas 
data16 fisttp
inc
(bad)  
sub
mov
push
fbstp
add
xchg
and
mov
out
jmp
(bad)  
jb
dec
xchg
dec
mov
enter
aad
jmp
test
bound
and
idivb
pop
out
je
add
xor
lret   
mov
jo
(bad)  
mov
in
inc
rorl
cltd   
popa   
or
push
pop
(bad)  
mov
sbb
outsl
popa   
in
inc
ljmp
ss sbb
or
or
aaa    
test
mov
mov
jecxz
test
aam
les
jnp
movsl
cltd   
test
cmp
fwait
adc
mov
sbb
xor
stos
push
es lock push
mov
mov
popf   
repz xchg
add
mov
addr16 leave 
mov
and
roll
repz sub
cmp
xchg
xchg
or
xor
cmp
xchg
jne
mov
mov
aas    
notb
mov
addr16 popf 
outsl
xor
out
dec
adc
dec
pop
jnp
sub
lds
mov
or
cli    
stos
cltd   
push
ss scas
add
dec
inc
fwait
in
sub
lcall
add
or
dec
call
dec
push
sub
rorb
out
push
jmp
inc
iret   
repnz cmp
pop
iret   
pop
imul
push
xchg
sbb
pop
sub
xor
cmp
sub
out
cmp
ss out
cli    
xor
hlt    
pop
outsb
dec
dec
stos
lods
push
aas    
and
pop
stos
stos
shlb
add
sub
das    
pusha  
push
mov
jmp
xchg
jnp
jecxz
pop
pop
fild
and
sbb
pop
faddl
xchg
pop
sti    
insb
sbb
addr16 mov
js
mov
push
mov
test
push
mov
mov
ljmp
mov
jae
jbe
mov
rcll
and
into   
lods
movsb
clc    
add
aaa    
clc    
mov
nop
iret   
movsb
arpl
adc
nop
mov
hlt    
inc
outsl
std    
jg
rclb
popa   
cli    
inc
imul
mov
daa    
push
xchg
iret   
pop
cld    
jge
fcmovnbe
jb
scas
lods
mov
ljmp
jmp
and
int
fdivrs
xchg
sub
pop
jmp
jmp
cmp
jno
mov
(bad)  
cmp
(bad)  
out
jp
push
(bad)  
dec
push
nop
sbb
add
mov
jg
ds mov
xchg
push
(bad)  
and
inc
cld    
push
cld    
inc
loopne
sarb
cmpsb
jnp
imul
jnp
or
addl
fidiv
xlat
cli    
jmp
push
js
andb
adc
jne
cmpsl
jmp
mov
xchg
les
cmp
adcb
lock mov
in
fmuls
test
xor
gs in
(bad)  
pop
sbb
push
jnp
mov
loop
or
cmp
sub
sbb
inc
sbb
push
jo
(bad)  
cmp
jnp
imul
push
sub
ds dec
(bad)  
cld    
pop
clc    
(bad)  
xchg
ret
dec
adc
mov
and
sub
jae
adc
gs pop
clc    
push
mov
in
adc
or
fs je
gs dec
repnz adcl
out
sbb
inc
fdivs
dec
xchg
(bad)  
sub
xchg
std    
jb
shr
test
cltd   
mov
dec
sbb
jb
outsl
sti    
movsb
popa   
add
inc
imul
(bad)  
push
ret    
push
sub
jg
pop
out
mov
gs jns
jmp
test
icebp  
xchg
lds
dec
loopne
cmp
inc
add
add
inc
bound
mov
jmp
int3   
pop
mov
and
(bad)  
popf   
cli    
dec
out
mov
std    
jnp
mov
mov
dec
inc
aaa    
std    
scas
cmc    
aam
stc    
lcall
cmpsl
sub
mov
ret    
mov
rolb
inc
rol
push
xor
stc    
inc
out
mov
fild
std    
xor
pop
mov
stc    
xchg
lods
inc
movsb
fdivs
idiv
sub
int
xlat
dec
ret
push
clc    
jle
popf   
sarb
nop
(bad)  
stos
push
push
jae
movsl
neg
ljmp
jle
mov
and
push
dec
xor
jp
mov
inc
xchg
scas
xor
lods
popf   
push
mov
pop
sub
or
imul
xorl
call
call
xor
xor
fwait
movsb
(bad)  
test
mov
rorb
out
sbb
es adc
or
pop
int3   
and
adc
pop
or
xor
xchg
in
mov
iret   
xchg
sbb
ret    
stos
xor
push
xchg
(bad)  
push
dec
loopne
test
add
lds
dec
cld    
sub
dec
xchg
ror
mov
test
js
mov
fsubr
push
xor
jns
xchg
xchg
push
fdivs
xor
mov
push
loopne
and
mov
mov
ret
sti    
fucomp
lret   
mov
or
lret
mov
out
loopne
fcomps
(bad)  
out
or
lahf   
mov
les
test
dec
sbb
jle
movsb
adc
add
mov
fmul
test
lcall
ljmp
lret   
jg
xchg
into   
push
jnp
cmc    
in
lods
adc
push
mov
add
xchg
mov
xchg
rcrl
or
push
(bad)  
adc
xor
aad
mov
ret    
or
mov
in
add
sti    
pop
into   
mov
dec
xchg
sti    
lret   
push
add
je
dec
xchg
test
cli    
aaa    
loop
cmp
or
inc
loop
aaa    
or
rcrl
mov
cmp
add
test
jl
addr16 icebp 
xchg
je
in
cmp
dec
das    
leave  
mov
das    
and
and
(bad)  
jmp
mov
(bad)  {%k5}{z}
in
mov
int3   
rcrl
dec
and
(bad)  
in
xchg
test
js
push
xor
push
addl
movsb
test
mov
sub
std    
daa    
in
fcoml
pop
ret
dec
push
rol
fisubl
jmp
bound
cmp
sbb
lds
push
(bad)  
jne
flds
mov
add
jge
and
out
xchg
sub
lock mov
mov
sbb
cwtl   
out
xchg
pop
clc    
loope
subb
(bad)  
loop
loop
sub
add
sub
cmpsb
push
mov
cltd   
aad
int3   
jl
xchg
or
and
(bad)  
call
popa   
scas
ljmp
aaa    
aad
jle
xchg
jmp
pusha  
scas
pop
ret
mov
pop
add
lea
popf   
imul
mov
test
jecxz
(bad)  
icebp  
inc
push
push
jae
mov
sbb
fbld
aad
adc
movsb
arpl
imul
std    
pop
jns
xchg
jle
mov
xlat
mov
addr16 jbe
cld    
(bad)  
ret
loop
jno
or
mov
loope
pushf  
test
and
xchg
xor
insl
jle
sub
mov
jo,pn
xchg
mov
pop
gs insb
or
mov
stos
bound
js
sahf   
sbb
mov
or
ret    
insb
sub
lcall
pop
popa   
push
gs xor
in
push
stos
lock
sahf   
or
fstpl
lods
pop
xchg
(bad)  
fnstsw
int3   
jb
jp
sub
mov
xchg
or
adc
inc
daa    
xor
imulb
stos
cli    
push
shrl
mov
push
jge
sbb
repz inc
add
ret
sbb
pop
xchg
pop
dec
out
lret
and
ja
popa   
mov
jbe
sti    
pop
sub
mov
popa   
mov
add
pop
push
xchg
mov
mov
ljmp
mov
add
decl
adc
pop
sub
popl
int
fmul
adc
mov
jns
dec
pushf  
popf   
xchg
xor
mov
ds addr16 test
adc
(bad)  
popf   
hlt    
or
adc
inc
orl
shr
add
lahf   
movsb
cmpsl
sahf   
mov
in
jae
icebp  
fwait
(bad)  
sbb
cmpl
scas
mov
lds
inc
aaa    
shlb
cmp
push
or
or
lods
cs
inc
js
jbe
ds es add
dec
aad
jg
xor
mov
add
inc
mov
dec
mov
sarl
cmpsl
or
jmp
popa   
push
xchg
xor
add
sbb
js
mov
les
jg
push
ljmp
push
mov
adc
pop
scas
addl
mov
cwtl   
ficompl
add
mov
jne
pop
test
mov
inc
adc
sbb
fstl
sahf   
lea
test
mov
add
mov
gs or
sbb
fadds
lds
sbb
xor
popf   
mov
in
fldenv
inc
or
inc
in
jp
lret
dec
flds
mov
lret
ss je
jge
xor
subl
and
sbb
mov
add
in
lds
jne
lret
cmp
iret   
int3   
cs lahf 
imul
cmp
sahf   
sbb
iret   
nop
dec
lret
add
add
lock lods
add
ja
stos
mov
pop
pop
sbb
jns
lock cmp
imul
(bad)  
xor
in
add
ljmp
mov
jnp
lods
mov
sbb
pop
int3   
pop
add
movsb
xchg
pop
js
and
ret
cmp
test
lcall
mov
mov
ret
add
loop
rcll
jbe
sahf   
das    
sbb
mov
pop
and
sub
sbb
mov
rolb
pushf  
sbb
out
pop
int3   
xchg
std    
jmp
hlt    
cs cli 
cmp
pushf  
faddl
xchg
mov
jae
add
(bad)  
jnp
cld    
lahf   
lea
leave  
pop
aam
clc    
inc
imul
mov
into   
jle
bound
repnz adc
pusha  
jmp
and
lret
push
dec
mov
mov
test
pop
inc
ret
sub
inc
fs aaa 
inc
push
cld    
and
xor
loope
(bad)  
fwait
aaa    
out
lret
ret
insl
in
dec
and
mov
fidivl
ss daa 
pop
(bad)  
fnstenv
mov
jl
pop
push
and
ljmp
xchg
arpl
mov
scas
push
push
mov
mov
test
insl
pop
mov
dec
shrl
mov
mov
and
inc
outsb
mov
push
addl
inc
sbb
icebp  
dec
loop
mov
add
inc
xchg
pop
jge
cmp
mov
xor
bound
rcrl
xchg
inc
or
popa   
stos
xlat
insb
loope
mov
cmp
inc
push
loope
hlt    
mov
movsb
in
pop
pop
jle
loope
adc
cltd   
fldt
mov
notl
cmpsb
mov
repnz clc 
mov
fistl
cmp
pushf  
jb
xor
sub
call
xor
adc
and
jbe
inc
and
jmp
out
jle
lahf   
xor
call
mov
movsb
test
imul
pop
mov
daa    
cmp
and
pop
xchg
imul
jge
jns
(bad)  
lds
sub
loope
xor
and
mov
push
cltd   
jb
lret   
(bad)  
rolb
xor
aaa    
inc
insb
in
arpl
fsts
out
xchg
mov
pop
push
sti    
sub
push
out
pusha  
xor
test
lods
imul
jnp
lret
push
xchg
ficompl
test
outsb
jge
sub
xor
jl
cmp
(bad)  
xor
fnstenv
cmp
jns
cmp
bound
xor
sbb
hlt    
mov
or
xor
mov
out
inc
xchg
movsl
mov
lret   
push
pop
sub
add
mov
mov
rcll
leave  
push
popa   
jmp
pop
mov
cmp
icebp  
fcoml
test
inc
int
enter
in
es aas 
xor
leave  
cmp
scas
dec
jmp
xor
loop
add
ss inc
dec
cmp
or
(bad)  
iret   
sub
mov
test
sbb
jbe
mov
in
cmpl
shrl
and
adc
mov
shl
sub
test
imul
dec
inc
inc
sub
or
out
jo
call
inc
add
jp
out
(bad)  
jnp
mov
ret
mov
xor
xchg
ss inc
fcoms
jge
mulb
hlt    
mov
fadds
das    
sub
insb
jae
jl
test
lock lds
arpl
frstor
jne
and
insb
aaa    
sbb
and
mov
repnz movsb
stos
repz jecxz
xchg
mov
or
xlat
ss clc 
data16 cli 
(bad)  
ss
aam
movsb
inc
je
add
jns
mov
mov
jl
xchg
cltd   
add
aad
or
cli    
xor
mov
sbb
js
(bad)  
rorb
lods
jbe
into   
fnstenv
push
fdivp
lock rcll
mov
mov
das    
inc
mov
aaa    
imul
test
jg
mov
mov
jl
xor
fdivr
sahf   
xor
mov
push
jecxz
pop
mov
xchg
xchg
mov
(bad)  
rep movsb
mov
mov
push
ret    
mov
jns
mov
data16 sbb
jne
sbb
hlt    
xchg
das    
in
adc
and
inc
lret   
add
and
mov
cwtl   
ficoml
data16 cmp
push
std    
loope
hlt    
dec
movsl
or
in
jp
push
stos
loope
mov
jg
mov
fcoms
inc
cltd   
mov
mov
add
movsb
icebp  
cmp
daa    
jecxz
in
push
jb
jmp
adc
test
cmp
mov
xor
jnp
scas
and
out
jl
jb
mov
out
or
xchg
or
repnz outsb
xor
es out
sub
(bad)  
cld    
or
cmc    
push
bnd jmp
and
call
dec
or
pop
mov
pusha  
leave  
stos
or
push
es test
jno
cmp
push
xchg
push
popf   
sub
xchg
movsl
cmpsl
xchg
pop
add
inc
mov
(bad)  
hlt    
xor
push
stos
jg
out
jnp
or
pop
push
sbb
lahf   
out
cmp
fdivs
fnop   
(bad)
data16 cmpsb
pop
xor
outsb
lods
jg
mov
dec
sbb
lds
and
addr16 aam
mov
fs adc
std    
(bad)
cld    
xor
add
out
ss xchg
mov
cs mov
(bad)  
xor
mov
pop
mov
roll
ss push
jle
push
sti    
sahf   
rolb
jnp
(bad)  
xor
(bad)  
pop
test
jne
xor
lret   
rcrb
and
jns
jne
cmpsl
adc
imul
cmp
sbb
dec
es pop
xchg
push
rclb
frstor
pop
jge
mov
push
dec
rcl
roll
shrb
in
xchg
lds
push
cs out
xchg
jecxz
xor
scas
cmp
test
jle
push
movsb
mov
sub
in
add
cmp
cmpsb
adcl
lock dec
mov
add
stos
jo
test
ds ds push
cmpsl
dec
popf   
addb
xor
lock data16 mov
xchg
add
bound
mov
xchg
push
popa   
mov
jecxz
sub
xchg
mov
(bad)  
ljmp
hlt    
sbbl
push
jnp
jle
cmp
int
cwtl   
and
mov
roll
lods
and
rorl
insl
pop
bound
push
icebp  
push
add
int3   
ficom
inc
add
popf   
mov
mov
shll
dec
xchg
pop
pushf  
xchg
decl
out
mov
ret    
leave  
and
dec
ss and
cmp
cmpsb
hlt    
mov
fcmovnb
jo
mov
jp
adc
xchg
jo
pop
clc    
dec
adc
je
cmp
and
ds push
aam
rcrl
das    
enter
pop
or
push
pop
(bad)  
mov
jbe
sti    
inc
or
iret   
in
(bad)  
data16
(bad)  
cli    
push
add
xlat
jne
sub
add
pop
lds
out
inc
adc
test
in
xchg
pop
and
jge
sub
ljmp
cli    
sbb
xor
adc
insl
inc
cmp
push
sbb
sbb
cs in
dec
push
mov
push
mov
mov
xchg
clc    
fs scas
and
fs and
stos
xchg
ss repnz repz pop
sbb
es into 
andb
xor
inc
rol
add
fnstenv
and
dec
xchg
ja
lds
(bad)  
and
jo
sub
sbb
insl
cli    
les
xchg
dec
in
cmp
cpuid  
mov
ret    
push
icebp  
in
mov
push
cmpsb
mov
pop
inc
cmp
adc
xlat
pop
and
call
jnp
call
leave  
pop
push
dec
in
in
sub
ja
(bad)  
je
mov
jnp
add
jge
in
(bad)  {%k5}{z}
jmp
sub
sahf   
out
cmp
adc
inc
mov
div
xor
adc
and
add
sbb
pushw
push
repz aaa 
(bad)  
pop
insb
inc
sahf   
js
push
jbe
lods
jbe
push
sti    
mov
lahf   
lcall
lea
or
xchg
add
je
cmp
aad
in
call
aas    
add
cmp
dec
jge
rorl
(bad)  
dec
mov
pop
xchg
aad
(bad)  
scas
mov
xchg
cmp
ret    
popa   
inc
sub
insl
jo
mov
sub
inc
into   
add
pop
adc
iret   
mov
xchg
dec
jno
xor
mov
xchg
mov
sbb
(bad)  {%k5}{z}
into   
(bad)  
fnstsw
rorb
movsb
inc
jns
lock icebp 
mov
fwait
jp
popa   
cmp
mov
(bad)  
fs loop
addr16 ret
arpl
jne
pop
daa    
out
or
cltd   
mov
cltd   
push
xchg
int
add
dec
dec
mov
(bad)  
push
js
mov
pop
(bad)  
imul
cmp
data16 cld 
enter
idivl
xor
call
stc    
push
and
and
push
in
scas
daa    
xchg
mov
xor
dec
sub
inc
push
scas
es cmp
(bad)  
push
mov
fdivrs
xor
mov
stos
je
mov
test
jnp
mov
lret   
clc    
add
and
sbb
add
fcoml
mov
xor
inc
sbb
ljmp
jns
subl
jne
arpl
gs mov
les
mov
dec
add
mov
dec
clc    
push
and
movsb
xchg
xor
adc
pop
xor
outsl
loop
pop
int3   
idivb
or
scas
xchg
aad
or
and
data16 fdivrl
cli    
lret   
(bad)  
xor
mov
and
jge
adc
mov
fnstcw
jl
(bad)  
mov
(bad)  
adc
cmp
aam
pop
and
daa    
cmp
fcomip
xor
pop
mov
rolb
dec
cmpsl
cli    
pop
xchg
jno
mov
movsl
pop
fldl
imul
jns
rcll
notb
dec
test
fdivrl
or
fist
lcall
divb
inc
lret   
mov
(bad)  
jl
out
or
push
nop
jnp
adc
sbb
outsl
add
xor
sub
call
adc
sbb
jmp
das    
dec
mov
out
jg
inc
cmp
(bad)  
mov
hlt    
cmc    
aas    
call
test
jl
int
sub
pop
sub
jns
cwtl   
rcl
mov
jae
and
sub
lcall
push
and
inc
leave  
ss xchg
dec
rcll
mov
mov
sbb
xchg
mov
mov
lea
add
mov
test
das    
adc
cmp
lcall
test
and
(bad)  
adc
fdivrl
inc
adc
lods
dec
in
pop
sbb
xchg
inc
lret   
pop
push
dec
insl
mov
and
cld    
sbbb
mov
leave  
xchg
xor
xchg
lahf   
or
out
sbb
daa    
add
sbb
incb
adc
inc
mov
and
dec
lcall
xchg
repz das 
int
xchg
fadd
jne
std    
data16 jp
jb
cmp
push
xlat
(bad)  
mov
cmp
test
dec
xchg
mov
insl
in
ds sbb
leave  
mov
sub
push
ss cltd 
stos
push
pop
(bad)  
push
jecxz
mov
std    
pusha  
dec
sub
outsb
pop
push
xor
lcall
imul
js
push
das    
push
divb
imul
mov
lea
cmp
push
pop
rcr
bts
imul
cmp
insl
adc
fildll
mov
xor
pop
xor
fmull
jns
(bad)  
jae
jmp
imul
or
mov
enter
aaa    
das    
std    
inc
mov
jnp
sbb
stc    
or
ret
xchg
lret
mov
out
adc
mov
rcll
(bad)  
sub
movsb
into   
out
repz jge
cmpsl
xor
pop
lock clc 
and
adcl
in
sub
xchg
scas
xchg
data16 xor
sahf   
test
ret
push
ret
fldenv
loope
cmc    
fsubl
mov
movzwl
sub
les
cmc    
test
add
ficoml
ds scas
test
call
sub
jg
mov
dec
sub
inc
jmp
pop
loopne
or
dec
sahf   
push
push
pop
iret   
test
mov
pop
inc
push
fisttp
cs stc 
dec
pop
clc    
mov
lcall
xchg
out
sti    
sbb
or
cmpsl
xchg
xchg
push
xchg
(bad)  
add
xor
jb
rorb
mov
xchg
outsl
adc
gs
adcl
rolb
scas
mov
hlt    
les
test
stc    
xchg
jns
jno
and
cmp
xchg
inc
js
sbb
hlt    
nop
and
mov
mov
sahf   
aas    
in
sub
push
aas    
xchg
lea
fsubs
xlat
(bad)  
shll
cld    
imul
leave  
sub
lods
mov
das    
add
outsl
enter
sub
jmp
fldenv
adc
cltd   
stos
(bad)  
cld    
inc
loopne
sub
idivl
js
push
cs sbb
xchg
ret    
mov
arpl
add
cmp
enter
leave  
imul
movsb
jp
mov
in
shr
dec
das    
dec
call
movsb
inc
add
xchg
cltd   
mov
adc
pushf  
fsincos 
test
mov
sub
add
or
mov
sub
push
das    
divl
inc
aaa    
mov
sahf   
pushf  
mov
shrb
(bad)  
push
(bad)  
in
cmp
push
or
sbb
out
dec
(bad)  
xchg
pop
xchg
mov
sub
mov
pop
bound
mov
dec
lds
mov
inc
mov
fsub
lcall
test
sbb
cmp
leave  
in
jmp
and
fiaddl
sbb
test
mov
mov
cmp
sbb
in
in
nop
insb
inc
(bad)  
hlt    
(bad)  
and
out
insl
sub
lods
push
xchg
movsl
add
scas
popa   
movsb
cmpsl
adc
pop
add
repnz clc 
loop
jnp
(bad)  
dec
lcall
in
inc
movsl
popa   
jge
fisubl
std    
push
push
inc
ret    
jb
xchg
mov
scas
data16 sub
test
sti    
or
(bad)  
push
add
push
lret   
add
rcrl
aad
fisub
adc
dec
lret   
mov
mov
add
mov
xchg
push
imul
inc
dec
fcompl
in
or
mov
inc
loop
loope
(bad)  
pop
gs scas
cs inc
sub
fldt
nop
movl
mov
push
mov
(bad)  
sbb
sub
pop
cli    
mov
mov
push
sbbb
push
sbb
test
stc    
ret
aaa    
mov
sbb
imul
les
lods
mov
out
pop
(bad)  {%k5}{z}
in
add
lcall
mov
jno
add
jb
push
icebp  
adc
insl
cmp
and
fmull
test
cmpsl
dec
sti    
add
cwtl   
or
(bad)  
dec
inc
jae
ret    
clc    
mov
movsl
cmc    
sub
outsl
lahf   
cmp
cld    
test
out
mov
mov
sub
fiadd
inc
mov
icebp  
(bad)  {%k5}{z}
out
cmp
inc
mov
jle
or
stos
aas    
adc
lahf   
out
insb
aam
mov
xchg
test
inc
cmp
xchg
je
scas
inc
sbb
nop
sbb
daa    
push
cmp
sbb
xchg
jge
sbb
subl
xchg
dec
sti    
push
rol
add
incl
mov
xchg
xchg
inc
xlat
sub
movsb
mov
popa   
xchg
bound
cmp
repz add
mov
loopne
jle
test
sbb
stos
lods
inc
test
mov
addr16 js
lds
xchg
cmc    
imul
xchg
rorb
jnp
outsl
add
pusha  
in
pop
std    
aaa    
fst
movsb
test
xchg
pop
out
mov
inc
pushf  
mov
out
mov
xor
xchg
add
mov
adc
out
mov
outsb
cmp
jbe
andl
adc
lret
clc    
out
sub
sbb
sbb
(bad)  
and
mov
rol
pop
pop
insl
xchg
fs xchg
clc    
bound
mov
mov
movsl
jg
push
clc    
in
mov
inc
inc
fsubl
gs inc
add
xchg
xor
jmp
aas    
push
dec
add
mov
movsb
ds cld 
in
cmp
pop
cltd   
push
lds
push
test
push
dec
mov
mov
cld    
jbe
sbb
jg
in
mov
dec
xchg
fstps
cld    
sbb
cmp
pop
xorb
xor
push
mov
stos
add
icebp  
dec
cmpsl
mov
iret   
aam
mov
cmpsl
sub
jb
movl
xchg
xlat
in
push
mov
cld    
fidivrl
pop
sbb
call
test
push
adc
(bad)  
ffreep
in
mov
(bad)  
and
add
or
es aam
std    
inc
movsb
in
adc
ljmp
cmc    
or
mov
cmp
cs inc
bound
rolb
aad
push
cmc    
in
or
dec
add
cmp
imul
(bad)  
jbe
sbb
ret
sahf   
xchg
cmp
mov
mov
scas
test
push
cwtl   
imul
stos
loop
and
xchg
sbb
in
jle
cmp
stos
inc
insb
lahf   
xchg
mov
xchg
stos
push
cmpsl
call
sub
enter
push
xlat
aad
inc
add
xchg
mov
fmul
imul
pop
and
aam
call
loopne
push
movsb
int3   
push
and
stos
inc
mov
(bad)  
popf   
in
sub
mov
leave  
xchg
mov
jb
xor
cmc    
mov
repnz push
and
out
fucomip
lea
and
rcl
notb
lret
xor
xchg
xchg
mov
push
popf   
in
cmp
sub
add
popf   
xchg
add
jle
lcall
mov
jecxz
mov
out
repz cwtl 
addr16 je
push
das    
fisubrl
in
add
aad
lea
push
xchg
jnp
mov
cmp
jo
out
cli    
jnp
mov
fcmovnbe
mov
pop
push
inc
pop
cs pop
xor
and
ret
out
pop
xor
lds
push
xor
or
or
push
add
outsb
and
shlb
push
test
xchg
adc
add
imul
push
add
imul
push
lret
(bad)  
shr
xchg
add
dec
jo
jae
repnz xor
test
cmpsb
cmp
aad
or
pusha  
out
das    
shll
movsl
cmp
push
inc
sbb
pop
push
imul
fs add
xchg
fdiv
mov
cmp
arpl
mov
pop
pop
dec
imul
dec
dec
int
jbe
into   
dec
aas    
mov
pusha  
xlat
pop
jmp
enter
sbb
bound
mov
les
pop
and
jbe
inc
das    
movsl
jne
int
fcomps
clc    
pop
iret   
loopne
call
adc
testb
jae
jnp
mov
daa    
mov
xor
pop
sbb
pop
out
jp
rcll
xlat
dec
je
test
cmc    
sub
frstor
add
mov
divl
ficom
(bad)  
lcall
adc
hlt    
xchg
aad
pop
pop
push
ds cli 
popa   
pop
jle
sub
push
mov
push
mov
pop
cmp
inc
add
xchg
ficom
and
jno
mov
jge
(bad)  
sub
lret   
movsb
movq
mov
fbstp
daa    
jb
stc    
in
das    
dec
inc
out
sti    
jae
mov
(bad)  
pop
pop
cs data16 scas
pusha  
adc
mov
addr16 push
adc
(bad)  
xchg
pop
sti    
pop
sahf   
pop
xchg
(bad)  
dec
scas
mov
aad
in
sub
int3   
mov
fdivr
xor
mov
repnz dec
pop
into   
inc
aaa    
inc
cmp
xchg
inc
and
mov
dec
test
add
dec
cmp
enter
mov
xchg
or
enter
(bad)  
mov
pop
jge
rolb
scas
inc
(bad)  
pop
mov
mov
sbb
and
fs mov
mov
dec
xchg
dec
sub
and
sbb
pop
dec
divl
mov
or
data16 jp
(bad)  
aaa    
add
xchg
sub
sahf   
jae
push
sahf   
in
pop
lahf   
pop
xor
icebp  
(bad)  
mov
outsl
addr16 jno
es sub
adc
pusha  
mov
sahf   
push
sub
jbe
enter
sti    
xor
stos
leave  
push
inc
push
push
iret   
lahf   
clc    
mov
sub
mov
lods
aam
adc
cwtl   
(bad)  
mov
mov
push
pop
pop
cwtl   
or
cmp
and
or
(bad)  
pop
adc
arpl
popa   
pop
add
inc
repnz mov
imul
lock jg
icebp  
icebp  
mov
jne
add
fisttpl
mov
cli    
xchg
das    
pop
cmp
pop
xchg
es
inc
or
stos
pop
jle
idivl
cmp
sbb
dec
les
sub
fnsave
or
dec
xor
test
outsl
dec
int
ret    
xor
ja
lds
iret   
mov
inc
enter
test
jp
in
test
lds
mov
int
cs inc
icebp  
in
xchg
lret
adc
lahf   
sub
xchg
jg
shl
test
imul
aaa    
and
push
mov
sub
mov
push
mov
jmp
hlt    
in
mov
pop
es hlt 
jmp
movsl
jbe
cmpsb
pop
stos
dec
cmp
inc
inc
in
or
(bad)  {%k5}{z}
out
movsl
popa   
mov
push
dec
stos
dec
lods
icebp  
mov
test
lret
in
pop
dec
push
int3   
outsl
fistpl
pop
stc    
repz setp
pusha  
and
xor
jne
push
adc
int
add
or
xchg
sbb
adc
pop
adc
mov
in
ljmp
fidiv
push
stc    
xchg
fnstcw
into   
xchg
test
insl
scas
lcall
add
int
rolb
mov
in
cld    
xor
icebp  
sbb
mov
push
xchg
iret   
lahf   
mov
cwtl   
jb
sub
pushf  
xor
pusha  
push
pop
add
fisub
pop
push
push
out
fmuls
adc
stc    
pushf  
inc
incb
popf   
add
loop
lock pop
cltd   
jae
or
rorl
mov
add
test
push
out
(bad)
pop
cs xchg
call
mov
or
je
push
decl
sti    
dec
pop
ja
arpl
pop
pop
(bad)  
loop
int
adc
cli    
cmp
(bad)  
mov
adc
push
popf   
andl
clc    
(bad)  
pop
loop
ret
ja
inc
sub
adc
sub
leave  
jecxz
scas
mov
mov
push
cmp
je
sub
mov
xchg
lret
les
mov
add
aad
(bad)  
sub
dec
add
mov
cmpl
aad
push
es push
shlb
scas
fimull
pop
stos
scas
movb
jnp
add
xchg
cmp
pop
push
test
insb
addl
pop
aam
lods
jmp
(bad)  
mov
and
jge
jg
inc
rorl
cltd   
mov
shll
or
(bad)  
cmp
fdivs
mov
js
lret   
decb
cmp
cmp
xor
push
pushf  
jno
dec
sub
fmuls
cmpsb
pop
imul
imul
cli    
loopne
fs xchg
xchg
mov
xor
imul
and
mov
or
aad
dec
mov
mov
test
imul
les
adc
jmp
mov
sbb
aad
sub
xchg
mov
sarb
loope
jp
push
loopne
pop
stc    
imul
lahf   
mov
dec
pop
out
sahf   
nop
(bad)  
lahf   
aaa    
xchg
and
mov
mov
cmpsl
lods
push
jle
inc
adc
lods
stos
add
rorb
dec
xor
lret   
(bad)  
jp
cli    
push
jno
dec
and
test
js
and
bound
in
mov
inc
adc
jg
int
repz xchg
push
sub
gs in
xchg
mov
rolb
call
jp
lea
adc
cmp
hlt    
sti    
scas
adc
shrb
sub
sbb
mov
mov
add
fwait
push
push
sub
cmp
cmp
rclb
add
sub
sbb
ss inc
push
lret
jno
rcrb
mov
popa   
xchg
fistp
jnp
sbb
dec
or
jne
ret
jbe
and
inc
imul
mov
xchg
ret
jecxz
add
mov
inc
imul
(bad)  
dec
je
fdivr
pop
mov
cmpsl
enter
mov
cmpsl
stos
or
aas    
loope
add
jp
xchg
test
cmp
cmp
push
dec
daa    
out
adcl
add
dec
xchg
xor
pop
std    
inc
push
sbb
fidiv
or
imul
movsl
out
lret   
xor
ficompl
jg
divb
and
lahf   
test
int
lret
push
xor
add
insl
je
cli    
sub
ret
mov
daa    
andl
movsl
and
call
(bad)  
into   
test
mov
dec
sbb
cmpsl
jg
sub
push
sub
cld    
enter
cmp
mov
nop
xor
out
fldenv
and
pop
sbb
and
aaa    
add
(bad)  
push
and
sub
xchg
pop
cmpl
jg
cmp
sbb
mov
ljmp
mov
(bad)  
mov
sub
mov
imul
cmc    
jecxz
cmp
cmpsb
or
in
mov
inc
std    
ja
inc
mov
or
addr16 jae
mov
push
inc
outsb
mov
sbb
in
jbe
andl
mov
xor
rclb
leave  
inc
adc
and
imul
test
cmpsb
test
imul
push
push
clc    
add
rol
das    
fiaddl
lock in
test
cmp
iret   
(bad)  
pop
nop
stos
xchg
mov
scas
mov
cmc    
int
daa    
sbb
inc
int
aam
add
pop
xor
mov
xor
jnp
and
mov
mov
dec
std    
xchg
jne
mov
leave  
jne
ljmp
outsb
cmp
cmp
push
adc
xchg
mov
jmp
pop
sub
leave  
imul
stc    
mov
int
jecxz
inc
push
lea
adc
mov
iret   
sbb
movsb
dec
add
or
cld    
inc
or
stos
mov
mov
push
mov
add
daa    
mov
xchg
fidivrl
int3   
test
xor
push
in
xchg
scas
ja
mov
es pushf 
icebp  
popa   
pop
jne
pushf  
dec
xchg
add
scas
mov
rolb
inc
popa   
jnp
jmp
xchg
mov
xor
scas
fnstsw
repnz les
push
cltd   
imul
(bad)  
pop
mov
ljmp
out
cld    
lret
shrb
lods
dec
xchg
movsl
push
sub
cmp
sbb
mov
es sbb
push
fs test
(bad)  
data16 jnp
in
rolb
adc
mov
jne
jl
inc
fsubrs
into   
(bad)  
xor
rolb
ret    
stos
outsb
iret   
jae
jmp
adc
inc
mov
cmp
sub
test
aad
or
(bad)  
pop
jo
in
(bad)  
sub
aam
mov
cmp
sub
push
stos
test
sub
daa    
loopne
fdivrs
adc
mov
or
pop
(bad)  
in
(bad)  {%k5}{z}
std    
cmp
shlb
int3   
or
adc
icebp  
pop
test
mov
pop
xlat
imul
jnp
into   
in
push
pop
cltd   
in
mov
cmpsl
out
cmp
add
mov
lcall
(bad)  
jae
popf   
or
in
shll
and
cld    
aas    
xchg
jge
ss sub
inc
popf   
push
sahf   
cmp
or
sub
daa    
mov
adc
inc
push
pop
(bad)  
fcomps
cmp
jo
vmovdqa
dec
test
jle
push
aas    
jge
jno
enter
add
add
out
inc
dec
fwait
or
dec
out
xchg
stos
add
fnsave
cmpsb
jmp
leave  
lcall
bnd jp
aaa    
fcompl
adc
or
pop
adc
jbe
sub
cmpsl
jp
push
and
hlt    
jg
dec
loop
inc
pop
and
and
xor
loope
(bad)  
stos
lret
push
sbb
or
push
push
pushl
lret
mov
repz mov
gs jmp
adc
stos
(bad)  
inc
push
clc    
add
movsbl
(bad)  
push
test
les
pusha  
(bad)  
movsl
adc
shrb
cli    
mov
push
add
mov
xor
xchg
pop
mov
cmp
push
pop
imul
inc
push
lcall
add
ret    
cli    
js
adcl
cmp
or
test
enter
inc
(bad)  
inc
jmp
into   
sbb
sub
lods
or
fisttpl
js
and
lret   
sub
jecxz
or
jle
add
inc
mov
imul
mov
sub
xchg
cmp
mov
add
pusha  
mov
stc    
cmp
inc
mov
leave  
cmpsb
das    
out
inc
orl
adcl
aad
das    
cmp
jmp
fildl
xor
sub
mov
bnd ret
scas
ljmp
stos
adc
inc
hlt    
push
pop
or
sub
(bad)  
mov
movsb
or
cld    
lret   
insb
(bad)  
dec
inc
(bad)  
add
dec
dec
push
lret
lea
lcall
dec
cmc    
dec
or
push
aas    
push
adc
(bad)  
aam
xor
xchg
cmp
dec
leave  
push
or
gs pop
mov
jb
fdecstp 
popf   
test
addl
xchg
and
or
cmp
sbb
add
test
mov
xor
and
jl
int
cld    
test
fwait
mov
in
mov
test
cmp
pusha  
mov
sub
lret
push
push
das    
das    
(bad)  {%k5}{z}
sti    
cld    
fldenv
dec
cmp
pushf  
das    
mov
cmpsb
cmc    
xchg
cmp
mov
lret   
xchg
pusha  
or
jg
fnstcw
inc
lret
lea
ljmp
adc
sub
mov
in
les
mov
lock lock mov
arpl
insb
push
push
mov
pusha  
insb
lods
xor
push
dec
pop
jbe
mov
sti    
cmpsb
add
cmpsb
jecxz
jecxz
push
jg
(bad)  
lret
xchg
jmp
xchg
(bad)  
test
pop
sbbb
sti    
mov
xor
repz add
push
stc    
insb
sbb
out
insb
mov
xchg
or
or
inc
clc    
mov
and
movsl
sub
pop
inc
sbb
mov
mov
or
inc
repnz push
mov
call
and
aas    
and
xchg
mov
mov
jae
xchg
(bad)  
iret   
pop
fiadd
sar
sbb
add
and
rcr
mov
xchg
pop
xchg
jmp
dec
pusha  
ljmp
xor
aas    
int3   
shlb
pop
pop
xor
jle
addr16 out
hlt    
xchg
insb
cwtl   
pop
outsb
and
and
ja
and
pop
push
rolb
lods
ds pop
xchg
jbe
xlat
push
inc
xchg
das    
rcrb
(bad)  
xlat
test
imul
adc
push
in
sbb
sbb
(bad)  
js
inc
xor
(bad)  
cli    
and
or
call
adc
xor
xor
push
jp
push
mov
xchg
dec
push
sub
popa   
xor
pop
adc
out
or
or
mov
push
and
push
mov
(bad)  
sub
ds sub
hlt    
add
cmpsb
or
cmp
add
push
xor
stos
or
dec
(bad)  
jne
stc    
ja
fwait
adc
hlt    
lahf   
out
cwtl   
addl
pop
imul
inc
in
dec
stos
xchg
movsb
fs hlt 
push
loopne
out
adc
jnp
mov
xchg
mov
xchg
pop
cmp
out
mov
popa   
pop
jns
mov
add
xor
push
jmp
or
xor
pop
xor
pop
fimul
fadds
cmpsb
add
pop
out
mov
sbb
or
and
call
or
and
lock addl
xorl
sbb
cltd   
xor
les
imull
xchg
out
push
ja
cli    
aam
sahf   
fs hlt 
adc
repnz mov
mov
je
ds dec
adc
pop
hlt    
adc
xchg
pop
sbb
stc    
pop
jg
mov
fwait
sbb
sub
mov
arpl
push
adc
test
lret   
pop
add
insb
ret
sarb
(bad)  
int3   
sub
adc
mov
jne
fwait
decb
es
stos
inc
fsubs
loope
jnp
xchg
in
cld    
pop
rorb
cmpsl
add
jnp
sub
or
xchg
mov
mov
inc
imul
repnz and
jle
sbb
rcr
mov
cmp
cmpsl
add
shrl
jne
hlt    
je
mov
push
daa    
dec
pusha  
popf   
or
mov
pusha  
lret
pop
jmp
(bad)  
pop
jnp
dec
jne
js
jmp
out
sbb
int
mov
sbb
push
sbb
data16 in
mov
mov
repz or
aad
lret   
js
ficom
jb
gs ret 
sub
mov
pop
aam
lock mov
pop
dec
fsubrs
out
call
repz inc
hlt    
sub
in
jno
lret
add
push
mov
cs sti 
cmp
inc
pop
dec
(bad)  
mov
dec
mov
add
xor
bound
adc
out
dec
mov
push
adc
and
std    
out
xor
xlat
xchg
push
jp
invd   
jmp
fstl
mov
and
lret   
dec
or
movsl
notb
cltd   
dec
dec
cmp
(bad)  
jbe
cmp
dec
clc    
outsl
mov
jge
cltd   
int
imul
sbb
jecxz
push
(bad)  
fsubrl
jae
mov
fsubrl
cmp
xchg
mov
jmp
fbstp
inc
clc    
push
sub
xor
push
into   
int3   
movsb
shrb
xchg
dec
sbb
and
pop
and
mov
pop
idiv
dec
sbb
dec
xor
mov
cmp
dec
mov
addr16 dec
jl
mov
xchg
into   
lods
std    
push
hlt    
or
pop
xlat
xchg
scas
xor
jno
stc    
out
outsl
push
movsb
push
imul
jne
stos
(bad)  
test
add
inc
test
push
cmpsb
xchg
jg
push
outsl
int
enter
push
mov
popa   
sbb
bndldx
scas
pop
imul
xchg
add
out
arpl
dec
push
xor
pop
imulb
lea
cmpsl
xchg
dec
adc
or
or
test
stos
bound
ret
cwtl   
roll
mov
jo
add
dec
ret    
xchg
dec
loope
je
out
(bad)  
or
mov
xor
inc
xor
inc
add
xchg
sub
mov
sub
xorl
lods
pop
and
sbb
fcmovnbe
sub
insl
mov
(bad)  
jnp
push
js
mov
adc
daa    
pop
aad
mov
pop
ja
cmpb
jb
add
xor
fwait
xchg
jb
ret
or
jecxz
cmc    
fwait
dec
push
out
xor
sbb
jp
dec
cli    
imul
jle
add
dec
nop
rcl
cld    
jns
daa    
pop
pop
jg
scas
in
pop
push
scas
popf   
aaa    
imul
add
push
clc    
lahf   
enter
(bad)  
mov
sub
(bad)  
pop
cmp
popf   
int3   
rcll
jae
jo
cmp
out
add
pop
xchg
xchg
sub
in
iret   
ljmp
fbld
fldt
movsb
enter
arpl
jecxz
(bad)  
pop
mov
sbb
mov
mov
movsb
and
stos
jmp
imul
push
les
sar
int
adc
adc
lods
jo
cmp
jb
and
mov
loope
cmp
ret
jns
mov
inc
data16 adc
mov
sbb
movsl
xor
stos
inc
into   
or
movsl
mov
ret
xor
push
inc
outsb
(bad)
jl
aas    
xor
(bad)
mov
mov
cltd   
les
push
shll
ljmp
xchg
xor
pusha  
in
aaa    
add
inc
pop
enter
cmpsb
mov
loop
lea
mov
dec
stc    
adc
sbb
push
pop
mov
popa   
pop
lahf   
fcoms
push
pop
mov
test
adc
push
aam
lock int
fsubs
cmp
test
out
call
inc
adc
outsl
mov
(bad)  
mov
jmp
sbbl
out
or
rcrl
mov
js
mov
jb
lea
sti    
bnd ret
xchg
bswap
enter
dec
or
das    
movsl
jl
pop
lods
push
(bad)  
mov
dec
jg
pop
pop
sbb
add
xchg
jne
mov
xchg
test
jo
add
xorl
sub
and
sbb
pop
mov
xor
hlt    
jle
pop
addr16 mov
vunpcklpd
and
xchg
adcl
and
inc
or
pop
enter
adc
xchg
orl
cld    
lds
sub
ss lahf 
(bad)  
adc
sub
cmpsl
fisttpl
(bad)  
dec
fs lahf 
fsubl
jae
adc
mov
push
or
popa   
stc    
lcall
pop
jne
dec
pop
sarl
cmp
test
cld    
mov
cmc    
mov
popa   
cmc    
fiadd
(bad)  
fsub
mov
movsb
pop
jl
pop
jno
push
lret   
push
or
mov
das    
repz push
adc
movsb
mov
nop
jae
mov
jno
cmp
mov
popa   
cld    
dec
push
sbb
lods
sti    
lods
or
jle
call
pop
vshufpd
mov
xchg
adc
insb
cmp
fstpl
xchg
mov
cli    
dec
sti    
xor
cmc    
sub
jb
mov
insb
dec
push
push
pop
add
add
xor
jnp
int
test
and
sub
call
sub
(bad)  
arpl
jle
aad
cmpsb
mov
pop
jno
cmp
and
fs push
cmc    
mov
cmpsb
std    
or
outsl
add
xchg
cmp
icebp  
xor
xchg
ret
sbb
mov
xchg
push
call
mov
mov
ficompl
mov
jmp
sbb
jbe
mov
xchg
pop
ss pop
sbb
inc
loopne
sti    
or
or
push
leave  
mov
or
ret
ss ljmp
push
cmp
out
or
subb
icebp  
xor
mov
imul
jne
sbb
leave  
or
in
adc
pop
vcvttpd2uqq
iret   
inc
arpl
enter
(bad)  
xor
xor
xor
enter
lds
orb
or
dec
dec
adc
int3   
cltd   
xchg
dec
pop
les
arpl
(bad)  
aad
subb
ret    
push
fiaddl
movsb
sbb
data16 mov
inc
repnz stc 
dec
push
shll
fisub
pushf  
xlat
xor
pop
mov
(bad)  
pop
outsb
shrl
adc
loopne
lahf   
clc    
pop
mov
stos
daa    
int
jecxz
sbb
mov
mov
or
push
movsl
mov
or
iret   
pop
xchg
mov
push
push
rolb
inc
xchg
enter
xor
ja
iret   
cmp
sub
rorb
adc
movl
scas
adc
and
lahf   
inc
inc
repnz sbb
or
nop
arpl
call
push
xchg
mov
adc
ret
mov
lea
dec
in
mov
cmp
stos
push
cmp
mov
or
clc    
push
decb
xor
ficom
xchg
scas
jmp
outsb
xacquire xchg
push
int
rorb
jns
loope
loope
push
mov
test
cmp
pusha  
xor
add
out
jmp
out
test
loope
scas
jmp
stc    
mov
lods
sbb
cmp
jne
xlat
cmp
iret   
cmpsb
sti    
pop
xorl
push
cltd   
sbb
sbb
pop
in
andl
pop
insl
jns
sbb
jno
nop
popa   
fucom
shrb
mov
mov
adc
out
inc
or
in
push
lret
les
adc
rcrl
xchg
mov
jle
mov
and
jg
jg
xchg
push
hlt    
lcall
jp
xchg
add
pop
mov
mov
xor
int3   
(bad)  
mov
add
mov
mov
adc
adc
stos
dec
fmulp
sahf   
cld    
(bad)  
mov
jns
adc
out
iret   
pop
or
jo
xchg
loopne
(bad)  
jecxz
mov
push
aas    
inc
shll
test
or
fcmovb
sub
xchg
mov
pop
je
(bad)  
std    
sbb
(bad)  
and
loop
popf   
int3   
sbb
sbb
mov
add
xchg
rolb
(bad)  
and
xchg
xor
mov
imul
ljmp
ljmp
dec
cmp
cmp
mov
jns
pop
cmp
inc
out
push
mov
cltd   
xor
push
lret   
lahf   
repz inc
jo
repz clc 
aad
dec
jo
adc
dec
loope
xchg
icebp  
jmp
add
pop
sbb
int
and
pop
jb
sbb
and
les
jp
pop
paddsb
test
jnp
js
clc    
jg
sbb
loop
icebp  
mov
loope
in
imul
jae
add
(bad)  
aad
dec
cli    
pop
adc
sbb
lret
jg
nop
xchg
mov
(bad)  
mov
jg
sbb
cmp
xor
sub
xchg
cmp
mov
push
scas
lods
lock add
test
cmp
loopne
cmc    
xchg
pop
inc
shll
imul
movsb
mov
out
adc
fbld
jge
cmp
(bad)  
xor
fninit 
dec
rol
push
arpl
jg
sbb
push
push
sarb
jo
cmp
rorl
aaa    
mov
(bad)  
inc
dec
out
(bad)  
adc
iret   
add
adc
andl
sub
cltd   
inc
pop
jbe
shrb
(bad)  
mov
(bad)  
mov
(bad)  
sti    
mov
adc
mov
mulb
movsl
lcall
dec
jp
jl
clc    
enter
inc
sbb
sub
or
mov
ret    
lods
or
xchg
adc
mov
scas
test
and
sub
xor
pushf  
dec
cmp
push
xor
add
enter
das    
les
ljmp
xor
mov
hlt    
setb
les
add
(bad)  
call
adc
mov
or
push
addr16 inc
gs aas 
pop
push
js
int
add
push
out
enter
lahf   
cmp
aas    
loop
in
or
test
imul
mov
jb
fdivrs
inc
mov
js
cmp
sub
mov
xchg
imul
cmp
dec
jmp
ljmp
pop
xor
push
xlat
push
imul
aad
xchg
push
or
push
add
sub
mov
(bad)  
fs pushf 
pop
cmpsl
stos
ret
cli    
repnz jecxz
jns
(bad)  
and
cltd   
xor
(bad)  
lds
sbb
test
mov
cmp
les
jmp
inc
dec
push
mov
data16 or
cmp
and
mov
out
sbb
sub
sbb
inc
aad
cmpsl
or
add
ror
pop
mov
and
add
xor
xchg
jae
fs jb
mov
cmp
push
in
enter
add
js
clc    
sahf   
mov
and
dec
jne
enter
and
enter
repnz xchg
popf   
push
sub
fs daa 
popa   
into   
push
les
lea
adc
jnp
pop
jecxz
daa    
mov
xchg
and
rorb
out
loopne
cwtl   
xor
fyl2xp1 
mov
dec
sub
mov
ljmp
icebp  
xor
mov
lahf   
sarl
mov
sbb
ds cli 
or
fisttp
ret
in
pop
outsl
sub
inc
cs push
dec
jb
inc
cs sub
out
fadds
xchg
xlat
loopew
push
leave  
iret   
fldpi  
das    
minps
jg
sti    
pop
in
iret   
sbb
adc
leave  
lods
mov
les
loope
sub
adc
lock adc
sub
sbb
stos
imul
lods
je
sub
(bad)  
xchg
inc
pop
push
xor
popf   
adc
jp
jecxz
add
popl
bound
xchg
ret
clc    
push
add
arpl
and
dec
mov
data16 test
inc
mov
pop
mov
(bad)  
xchg
inc
adc
or
(bad)  
pop
orl
push
inc
repnz mov
xor
into   
cmp
negl
sbb
out
incl
ljmp
out
aaa    
repz add
sbb
adc
leave  
rcpps
mov
or
sti    
std    
mov
sbb
mov
mov
push
mov
les
sub
add
add
dec
inc
dec
inc
scas
inc
pusha  
(bad)  
or
add
add
(bad)  
(bad)  
(bad)  
incl
add
add
add
add
add
add
jns
je
insl
cs inc
jb
ja
outsb
addr16 sub
push
gs jb
imul
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
xor
data16 aaa 
xor
fs xor
add
adc
gs insl
cs inc
jb
ja
outsb
addr16 cs inc
imul
add
popa   
je
pop
add
add
add
add
add
lsl
add
jno
add
add
or
or
add
or
add
add
add
dec
or
add
add
(bad)  
and
add
add
inc
dec
inc
add
mov
or
popa   
add
jo
pop
jae
add
ret    
add
push
ret    
add
outsl
test
add
cmp
push
push
test
push
mov
inc
mov
mov
arpl
push
jl
addb
daa    
inc
jns
decb
int3   
scas
add
sarl
cmp
aaa    
push
ret    
xchg
cmp
xor
(bad)  
out
xchg
push
push
cmc    
leave  
xchg
lock or
pop
push
push
pop
and
lret   
int
push
cmp
clc    
cmp
insl
add
jae
push
jl
mov
call
dec
push
mov
pop
js
(bad)  
mov
in
test
jge
mov
sub
stos
roll
pop
sub
movsb
adc
add
sbb
insb
std    
and
in
gs inc
pop
loop
movsl
mov
push
cmp
add
(bad)  
ret    
roll
push
lods
adc
enter
xchg
fs jns
xchg
inc
movsl
and
add
test
(bad)
push
sub
scas
dec
fistpll
into   
(bad)  
sbb
inc
loope
popf   
imul
repnz mov
and
jp
loopne
nop
or
jmp
mov
xchg
jge
and
outsl
clc    
ds repz aaa 
aad
loope
scas
push
(bad)  
sub
or
mov
sbb
mov
loop
lock and
mov
inc
shll
pop
xor
xor
xor
jge
pop
dec
or
in
adc
(bad)  
hlt    
outsb
add
sub
pop
clc    
lods
cmpsb
or
add
xor
cwtl   
inc
mov
enter
outsl
mov
cmp
mov
nop
jle
(bad)  
jmp
dec
fcompl
outsb
adc
mov
leave  
dec
mov
mov
xchg
les
mov
testl
mov
arpl
pop
inc
pusha  
pop
cmp
idiv
adc
sbbb
scas
or
jecxz
mov
sarl
outsl
and
das    
cli    
std    
stos
push
push
jo
lea
std    
xor
rorl
mov
pop
or
jg
lock
push
fxsave
mov
sub
(bad)  
in
int3   
(bad)  
mov
pop
add
sub
loop
jmp
cmp
faddp
pop
push
mov
inc
hlt    
cmpsb
fs lret 
fild
inc
dec
jns
jns
sbb
mov
shrb
lcall
mov
xchg
aas    
push
lds
xchg
sub
(bad)  
fnop   
sbb
insb
add
pop
movsl
lldt
(bad)  
push
sti    
dec
cli    
jb
sti    
je
mov
aas    
pop
jge
(bad)  
jo
mov
add
fnstcw
shlb
lock jno
lret
push
int3   
or
sub
jmp
mov
ret
or
out
xchg
cmp
xor
iret   
xchg
dec
mov
cwtl   
add
sti    
cmp
int3   
push
mov
xor
add
outsl
aas    
cmc    
data16 jne
push
aam
(bad)  
adc
adc
cmpsl
das    
inc
cs std 
add
pop
pop
notb
(bad)  
stos
imul
mov
iret   
xor
adc
xchg
sbb
inc
pop
ss daa 
mov
dec
lock pop
jle
mov
add
jnp
adc
in
(bad)  
push
lods
sub
push
push
mov
cmovp
stc    
lret   
xor
add
pop
pmulhw
(bad)  
sub
dec
out
rcl
aam
shll
push
mov
push
addr16 cwtl 
ja
jno
dec
je
pusha  
mov
jb
aam
sub
mov
push
daa    
mov
clc    
idivb
test
je
sti    
sbb
cli    
dec
add
dec
ja
inc
xor
dec
sar
ja
sbb
popa   
cmpsl
fistp
enter
ja
daa    
or
cmp
ljmp
das    
inc
xchg
xor
jl
and
xchg
loop
dec
mov
(bad)  
push
imul
sahf   
bound
jecxz
inc
(bad)  
fs jle
fsubl
loopne
jmp
leave  
std    
int
pop
sti    
insb
push
push
mov
cltd   
insb
aas    
and
insb
popa   
mov
cltd   
sub
push
scas
cmpsb
and
sbb
dec
outsl
punpcklwd
loope
jb
add
lahf   
jecxz
push
or
in
lahf   
popa   
test
(bad)  
xor
cmp
cld    
fidivrl
pop
xchg
out
repnz lahf 
dec
inc
or
addr16
(bad)  
jmp
in
jmp
sahf   
repnz xchg
out
aad
mov
jg
pop
je
loop
sbb
sub
add
fadd
xorl
jb
and
sub
mov
inc
scas
cmp
add
sub
xor
or
fiadd
cmp
push
cmpsb
push
jb
and
xchg
xchg
or
mov
pop
lea
pusha  
push
aas    
sub
sbb
jp
sahf   
test
xchg
insb
mov
inc
lret   
lea
dec
or
jns
fdivrl
xor
jb
sbb
fisttp
push
add
and
mov
xchg
jl
hlt    
sbb
xchg
scas
out
repnz imul
int
movsb
fwait
cld    
in
shlb
gs jnp
adc
sarb
lock fdiv
clc    
jge
mov
ja
mov
cmovge
pop
inc
push
and
test
mov
inc
inc
test
out
push
fild
test
arpl
xchg
sub
xor
je
inc
mov
inc
and
jo
fidivr
mov
insl
sahf   
(bad)  
or
dec
mov
mov
or
daa    
sbb
and
movsb
sahf   
int3   
daa    
sbb
test
cmpsl
cmp
xor
sbb
inc
mov
inc
push
fcomi
(bad)  
pop
jnp
pop
in
adc
sti    
and
fs int3 
push
xor
gs pusha 
icebp  
or
(bad)  
mov
fldt
jne
dec
sahf   
cmp
mov
fdivl
int
std    
xor
loope
pop
out
sbb
movsw
mov
jno
clc    
cmp
xchg
jno
(bad)  
rorl
stc    
js
or
xor
xor
ja
mov
repnz mov
cmpsb
xchg
sub
fmuls
insb
cmp
sbb
in
ja
pop
movsl
jmp
xor
dec
cmp
ret
lret
ffreep
or
inc
movsb
imul
test
repnz sbb
lahf   
je
ds cmc 
pop
mov
into   
lret   
(bad)  
mov
mov
mov
pop
pushf  
test
movsb
int
nop
push
dec
sarb
or
cld    
inc
mov
cmp
xchg
and
mov
xchg
or
jns
repz shll
and
add
or
sub
jg
je
cmc    
pop
outsl
mov
in
inc
fmull
dec
xchg
inc
push
into   
mov
push
addl
idivb
loop
dec
pusha  
lods
jp
je
xchg
negb
jge
cltd   
jecxz
sbb
sub
dec
and
dec
or
dec
mov
lea
mov
xor
adc
das    
fnop   
or
arpl
(bad)  
jns
popa   
pop
jmp
in
xor
push
pop
call
fs cmc 
popf   
dec
in
in
adc
mov
pop
ss popf 
leave  
mov
in
jge
sbb
xor
daa    
mov
(bad)  
sti    
inc
jge
popf   
push
shrl
sbb
fild
pop
sti    
jp
dec
jo
enter
(bad)  
cmp
cmc    
aam
add
mov
daa    
cmc    
or
cmp
aas    
gs ds in
cli    
mov
ss adc
bound
(bad)  
pop
into   
popa   
lret
imul
mov
lcall
and
pop
xor
jnp
sbb
popa   
mov
aam
fcoml
inc
insl
adc
int
gs jno
(bad)  
aaa    
loop
lcall
pusha  
inc
dec
int
and
inc
mov
sbb
xchg
mov
or
pop
(bad)  
pop
fimul
xor
dec
lock fnsave
test
jmp
bnd call
jmp
fcompl
lds
mov
orb
xchg
movsb
mov
xchg
push
jnp
dec
add
mov
dec
push
out
and
aas    
push
loop
das    
adc
inc
rorl
stos
stc    
fs pop
fldcw
mov
push
add
movsb
add
add
ljmp
frstor
shrb
xor
lods
out
mov
sbb
(bad)  
pop
lods
rcrb
punpcklbw
lahf   
call
ror
fld
xchg
lods
and
sbbl
cli    
(bad)  
icebp  
gs hlt 
inc
outsl
mov
push
(bad)  
mov
(bad)  
(bad)  
pop
jno
xor
hlt    
mov
movsl
adc
lret   
jne
stos
out
mov
das    
inc
xchg
(bad)  
xor
add
addr16 cwtl 
test
mov
sbb
add
dec
pop
stos
popf   
scas
jle
jecxz
ds clc 
insb
push
xchg
cmp
test
xor
pop
push
fnstsw
mov
xorb
add
mov
or
scas
addb
pop
lret
jge
push
negl
popf   
test
out
dec
cltd   
pop
mov
sahf   
sub
mov
adc
mov
xor
imul
pop
xchg
stos
mov
test
addb
sbb
pusha  
pop
add
mov
fisubrl
or
push
rclb
add
test
lods
je
push
pop
lods
push
(bad)  
(bad)
dec
(bad)  
jno
adc
fs
setnp
ret    
mov
push
int3   
lret   
cmp
gs out
(bad)  
addr16 out
sub
jo
xor
cwtl   
fldenv
bnd jae
test
cmpl
jp
sbb
jmp
or
(bad)  
sub
hlt    
outsl
in
push
leave  
pop
add
mov
sbb
mov
movntq
out
adc
mov
scas
pop
mov
(bad)
add
(bad)  
imul
stos
sbb
inc
(bad)  
ja
fdivl
mov
dec
sahf   
scas
movsl
add
mov
pop
int3   
inc
cmp
xor
mov
pop
data16 or
cmp
add
add
cmp
aaa    
jnp
inc
std    
popa   
lods
cmp
sbb
icebp  
call
lea
adc
mov
push
and
dec
mov
clc    
imul
hlt    
popf   
push
xor
sarb
mov
jb
loope
sub
adc
xchg
ret    
dec
ja
movlps
cmpsl
sbb
xchg
push
addr16
arpl
jp
jno
xor
popf   
enter
insl
pop
je
mov
iret   
cmpsb
mov
mov
mov
mov
and
jecxz
lea
add
dec
loope
aam
ror
xchg
and
das    
aaa    
sub
sub
cmp
jecxz
and
push
fdivs
test
inc
dec
mov
jo
arpl
pop
int3   
test
out
xchg
push
imul
jle
gs scas
or
jg
out
push
jo
rcrl
testl
aas    
test
lcall
mov
and
push
mov
dec
push
les
cmp
cmpb
inc
push
mov
add
or
and
add
dec
dec
dec
cmpsb
push
cli    
scas
cmp
adc
push
sub
pop
pop
andb
in
fldcw
(bad)  
dec
inc
pop
scas
cmp
test
add
push
loope
mov
mov
xor
push
fnstcw
cmp
lahf   
cs int
dec
xor
stos
nop
imul
dec
lods
cltd   
movsb
cmp
ror
cmpsl
mov
out
(bad)  
mov
pop
(bad)  
cmc    
mov
push
and
cmp
dec
cwtl   
in
dec
mov
dec
pop
mov
xchg
std    
(bad)  
jbe
dec
jb
neg
cmp
push
ds mov
mov
movsl
into   
stos
adc
test
mov
jmp
out
or
cld    
mov
test
jg
sbb
in
enter
bound
inc
jmp
movsb
adc
jmp
mov
shlb
jl
scas
mov
mov
insb
cmpsb
popa   
inc
push
in
in
daa    
xchg
mov
test
jmp
pop
sbb
xchg
xor
aad
xor
xchg
lods
imul
add
sbb
push
fildl
inc
(bad)  
inc
inc
adc
fcomip
fldenv
jle
ss pop
gs inc
pop
(bad)  
push
popf   
jg
sbb
dec
call
cmpsl
aas    
mov
sub
fldt
lds
(bad)  
mov
pop
push
shrb
sbb
insb
je
add
pop
ss aad
add
cli    
inc
xchg
imul
cmp
scas
and
testb
decl
movsl
rcrl
les
xchg
daa    
addb
pusha  
rol
incb
leave  
push
adc
push
adc
aas    
push
sbb
push
add
and
ljmp
sbb
xchg
add
and
sub
xchg
xchg
stos
movsb
mov
add
mov
es insb
flds
(bad)  
std    
jnp
mov
movsl
decl
sub
push
rcrl
js
push
sub
nop
insb
xchg
inc
push
nop/reserved
inc
(bad)  
or
inc
stc    
jle
push
add
sbb
int
push
(bad)  
repnz lock mov
lret
inc
xchg
ljmp
rcll
xchg
push
sbb
insl
sbbl
call
sub
pop
pop
aaa    
push
popa   
les
dec
loopne
sub
cltd   
sahf   
fcoml
jne
xlat
aas    
popa   
mov
call
xchg
or
scas
adc
sub
pop
mov
dec
jle
fs
(bad)  
pop
pop
push
adc
add
mov
cmp
cmpsl
hlt    
push
les
push
push
push
mov
sub
and
mov
inc
jle
into   
or
sub
(bad)  
lret
fcoml
xchg
cld    
mov
roll
data16 lock rclb
cmp
mov
cmpsb
std    
mov
dec
out
aam
fmuls
(bad)  
jmp
cmp
jbe
jnp
cs add
cmp
lods
mov
sub
stos
stc    
repz xor
mov
xor
nop
sub
fs cli 
xchg
xchg
fnstsw
testb
sbb
iret   
cmp
loope
leave  
aam
ss shr
mov
and
and
add
mov
enter
xor
pop
(bad)  
int
jge
outsl
enter
jle
int3   
xor
test
push
hlt    
xor
add
jnp
sub
mov
push
loopne
mov
xchg
lahf   
mov
push
jecxz
cmp
outsl
jbe
sahf   
mov
mov
mov
icebp  
dec
xor
sbb
int3   
or
(bad)  
fbstp
xor
sub
push
andl
push
dec
push
adc
daa    
subl
stos
sbb
xor
ljmp
mov
push
stos
add
rcl
adc
inc
mov
mov
cld    
pop
or
cld    
mov
mov
dec
sbb
mov
and
fisub
scas
jge
out
leave  
pushf  
add
leave  
cwtl   
mov
and
and
jecxz
test
mov
jb
sahf   
imul
add
mov
add
imul
outsl
and
sub
jge
out
add
(bad)  
lret
pusha  
fcoms
sub
mov
js
fs rcl
jmp
adc
cmc    
dec
arpl
mov
and
mov
daa    
call
mov
mov
adc
lea
xor
or
cmp
dec
repz push
add
jo
movsb
mov
jbe
jne
sub
cmp
(bad)
add
xor
jmp
dec
cmpsb
hlt    
pop
stc    
sbb
mov
xor
and
jbe
cmpsl
or
add
sub
xor
xor
arpl
mov
in
cmp
or
pop
sub
jmp
movsl
sbb
ja
js
mov
mov
sbb
pop
add
(bad)  
maskmovq
xchg
addr16 sti 
mov
js
mov
in
xor
shrl
jo
cmp
or
mov
xchg
inc
(bad)  
cmpsl
(bad)  
push
add
or
test
aam
aam
inc
inc
es inc
cmc    
scas
adc
xchg
icebp  
in
je
inc
iret   
repz jns
jecxz
movsb
and
cltd   
jl
sbb
rcll
mov
fsubrl
mov
daa    
mov
cmpl
cmp
les
lds
adc
in
push
dec
mov
sub
rclb
push
adc
fcoms
inc
hlt    
mov
inc
dec
stos
mov
xchg
faddl
cmc    
es ljmp
sbb
fidiv
lods
or
mov
inc
mov
imul
(bad)  
mov
lahf   
xchg
xor
mov
test
dec
fucom
rol
pop
mov
mov
sub
lcall
dec
das    
(bad)  
rclb
in
cld    
cmpl
sbb
dec
mov
mov
daa    
adc
jg
sbbl
jg
pop
mov
rcrb
mov
sub
mov
jecxz
(bad)  
fs
mov
inc
cmp
in
das    
mov
xchg
lds
pop
and
out
loope
sahf   
mov
sbb
inc
gs inc
jne
mov
push
dec
push
cmp
push
outsb
(bad)  
mov
push
(bad)  {%k6}{z}
lock xor
mov
adc
add
lret   
add
dec
xchg
cld    
loope
add
dec
dec
fsts
xor
dec
int
dec
mov
stos
sub
pop
int
mov
jecxz
test
icebp  
js
jecxz
push
fstps
push
inc
pop
xor
jno
pxor
cltd   
ds out
adc
imul
add
jns
sbb
inc
jb
mov
jmp
xchg
pop
ljmp
aam
insl
int
mov
(bad)  
inc
insl
mov
fs stos
out
test
mov
mov
push
fstpt
jns
ret    
outsb
dec
dec
movsl
test
fldt
mov
or
inc
mov
rorb
cmc    
sub
mov
jb
(bad)  
xor
adcb
mov
ret    
mov
mov
add
add
add
fcoml
cmpsl
into   
(bad)  
mov
xor
stos
(bad)  
imulb
xchg
pusha  
mov
xchg
lret
cmpsb
push
jmp
inc
jle
(bad)  
mov
cmp
xchg
xchg
sub
jo
std    
xor
outsl
loop
icebp  
popf   
xchg
push
inc
inc
addr16 jo
push
jecxz
into   
mull
repnz cmp
mov
and
inc
jae
es mov
cmp
inc
in
out
cmp
inc
pop
leave  
nop
mov
ss
fcmovb
ficoml
push
sub
xchg
sahf   
cwtl   
pop
pop
bound
inc
xchg
push
xor
inc
or
test
lds
sbb
jb
scas
dec
fldenv
push
cmpsb
jbe
mov
ret
lods
push
xor
xor
(bad)  
jne
pop
hlt    
insl
cs mov
(bad)  
leave  
pop
sbbb
inc
pop
adc
(bad)  
jns
dec
mov
lock loop
les
out
aas    
scas
imul
(bad)  
fiaddl
movsb
fdivrl
repz adc
inc
adc
push
mov
loope
enter
adc
repnz cli 
aad
jnp
jns
inc
test
test
sbb
mov
test
sbb
insl
clc    
dec
jp
sbb
xlat
std    
lds
cmp
sbb
(bad)  {%k6}{z}
shrb
out
scas
rcrl
int
sub
inc
jns
push
mov
jecxz
sub
mov
fist
mov
mov
inc
fninit 
mov
mov
mov
and
insb
sub
arpl
add
sbb
xlat
out
lret   
jae
(bad)
mov
pop
jo
sub
jmp
sbb
pop
xchg
push
repnz loope,pn
dec
xchg
pop
lret   
sub
bnd jmp
enter
push
pop
fnsave
ret    
and
cmp
addr16 lret 
and
gs sbb
ret
movsl
int
mov
adc
lahf   
add
push
xor
dec
mov
cld    
(bad)  
(bad)  
orl
sub
shl
push
mov
jo
je
dec
std    
arpl
sbbb
mov
js
inc
add
ror
das    
mov
imul
xlat
cli    
test
aad
or
dec
adc
cmpsb
cli    
call
push
icebp  
cmpl
jmp
movsb
cmp
and
xor
mov
jae
out
hlt    
push
adc
xor
push
jno
push
fiaddl
pop
aad
pop
test
add
add
lret   
in
cmpsb
pop
mov
into   
iret   
ret    
jae
sbb
movsl
mov
push
pop
(bad)  
xor
repnz pop
add
fnop   
and
push
test
pcmpeqw
mov
and
and
fcmovu
popa   
mov
adc
cmp
addr16 jge,pt
hlt    
push
(bad)  
in
pop
lea
cld    
fdivl
loop
or
movsb
pop
mov
inc
xchg
push
push
xchg
pop
jno
jp
and
push
loop
js
lods
ror
xor
fnsave
mov
insl
sbb
cltd   
and
in
scas
xorl
add
and
loope
outsb
movsb
je
jnp
cmp
icebp  
mov
inc
stos
ret
call
aas    
hlt    
andl
mov
lock xchg
add
xor
int
cmpsb
mov
cmc    
subl
sbb
sub
jno
inc
gs mov
scas
out
out
(bad)  
repnz mov
je
or
cmp
(bad)  
mov
dec
mov
adcb
add
jns
pop
int
leave  
inc
add
inc
fstpl
cmpsl
loop
fcoms
xor
or
or
cmpl
mov
call
dec
sbb
xchg
dec
js
cwtl   
push
inc
adc
ror
popa   
imul
push
enter
push
mov
hlt    
mov
lcall
jge
and
sub
icebp  
adc
iret   
mov
pushf  
cld    
adc
clc    
movsb
mov
icebp  
push
es fisubr
xchg
cmp
int
loopne
enter
fs pop
(bad)  
xor
add
or
cmc    
call
pop
push
jnp
mov
mov
scas
xchg
daa    
rcll
jno
jb
incb
dec
dec
js
mov
jno
inc
out
repnz push
stos
xchg
sbb
dec
mov
mov
jnp
adc
pop
pushf  
jae
dec
cld    
mov
push
jae
mov
lods
jbe
shrl
mov
fdiv
mov
jmp
cmp
inc
xchg
sub
bnd jae
insb
sarb
data16 fsub
stc    
push
pop
out
sbb
cmpsb
mov
out
cld    
dec
pop
and
push
cmc    
testl
xchg
jno
sbb
aam
dec
sub
les
adc
pop
cmp
out
push
or
popa   
jbe
cmp
in
mov
dec
in
movsb
jo
jae
xor
je
mov
cmp
push
ret
pop
ss xchg
sti    
push
push
call
ret
mov
ret
(bad)  
nopl
pop
sub
loop
jl
je
pop
fstpl
xor
add
cs lahf 
clc    
mov
mov
inc
and
and
fisttpl
test
es
jne
xchg
hlt    
out
cmpsb
(bad)  
repnz mov
jge
insb
dec
ret    
pop
cmp
mov
push
or
(bad)  
(bad)  
aaa    
repnz addr16 cld 
cmc    
mov
adc
mov
push
sub
(bad)  
xchg
inc
cmp
add
movsb
jp
jne
imul
xor
push
pop
pusha  
push
scas
or
lahf   
sub
fs xchg
jns
loope
mov
ret    
movsb
jg
arpl
loope
into   
movsl
icebp  
loop
add
and
mov
fsubs
(bad)  
jno
es dec
jle
push
xchg
loopne
mov
cltd   
dec
dec
lods
js
insl
(bad)
test
adc
outsl
ret    
ljmp
lods
imul
fiadd
popa   
fsubr
dec
mov
cmpsb
mov
ljmp
mov
ficom
fnstsw
das    
xor
pop
sahf   
iret   
mov
int
xchg
jle
mov
out
(bad)  
lods
ficoml
adc
push
mov
and
enter
mov
xchg
mov
cs push
daa    
dec
imul
clc    
in
repz xlat
mov
mov
xchg
sub
ljmp
loop
mov
adc
in
cmp
iret   
insl
(bad)  
(bad)  
jns
add
push
mov
aad
mov
mov
data16 das 
push
pop
lret   
ffreep
test
es jg
pop
dec
inc
or
popf   
out
jns
daa    
xor
icebp  
(bad)  
ficomp
repnz sub
movsl
outsb
das    
fcomps
lock loopne
in
int3   
call
or
sub
sbb
test
cmp
mov
add
out
insl
outsb
sub
popf   
enter
(bad)  
(bad)
mov
je
cmp
in
rclb
xchg
pop
stos
sbb
xor
out
pusha  
pop
int3   
xchg
xchg
mov
push
jbe
wbinvd 
pop
aas    
stos
inc
fldcw
mov
(bad)  {%k6}{z}
fimul
mov
outsb
inc
and
cmc    
xor
xchg
dec
hlt    
mov
mov
or
rclb
inc
xchg
bound
sub
in
push
xchg
ds in
insb
bound
add
(bad)  
in
leave  
and
test
test
iret   
lahf   
sbb
or
mov
inc
int3   
xor
xchg
mov
jo
(bad)  
push
insb
mov
sub
pop
pop
test
std    
push
(bad)  
adc
es aaa 
xor
movsb
xor
cmp
sub
pop
mov
fbstp
out
sbb
jmp
cmp
imul
and
inc
pushf  
mov
jmp
inc
and
add
sbb
cmc    
cmp
fstl
ja
ja
sbb
ljmp
imull
aas    
stc    
jbe
(bad)  
das    
(bad)  
ljmp
popa   
je
xchg
lahf   
pusha  
outsb
mov
int3   
imul
jno
pop
xchg
gs
movaps
jl
adc
loopne
aad
ret    
ret
add
scas
push
nop
mov
cmp
cwtl   
dec
xchg
dec
cmp
in
push
sarl
inc
(bad)  
xchg
mov
mov
sahf   
jns
shlb
repnz cmp
fcomps
xchg
mov
jne
scas
jo
cli    
or
vunpckhps
lds
and
and
(bad)  
or
bound
hlt    
lahf   
adc
inc
jae
ljmp
fildll
dec
mov
mov
pop
pop
sti    
and
push
mov
pop
pop
hlt    
push
sub
inc
call
push
pop
xchg
aad
and
in
aas    
push
push
mulb
mul
push
sbb
sbb
xor
aad
sar
or
push
pop
out
aaa    
cmc    
loopne
icebp  
inc
pop
xor
movsl
fisub
or
(bad)  
gs sub
xchg
or
insb
ljmp
push
mov
stos
into   
or
adc
mov
ficom
jbe
cwtl   
shl
in
mov
add
das    
push
cmp
sti    
out
(bad)  
stos
push
int3   
and
inc
xchg
lods
or
cmpsb
pop
insl
fdivrs
mov
test
fld
fistl
fildll
inc
das    
in
loopne
cmp
decl
add
pop
ficompl
lret
pushf  
sub
in
adc
in
jnp
sub
outsl
out
out
jp
daa    
sbb
scas
divl
and
mov
loope
adc
push
add
js
pop
lods
into   
cli    
mov
(bad)  
jg
mov
mov
add
cmp
mov
sub
leave  
cmp
dec
lahf   
les
add
pop
jne
stc    
xor
cmc    
pop
loopne
aam
movsb
mov
push
fdivl
imull
(bad)  
hlt    
mov
lds
in
andl
rcr
test
mov
mov
loopne
lds
and
sub
cmp
in
pop
out
mov
push
pop
out
xchg
pop
(bad)  
imul
insb
insb
dec
lods
ljmp
test
imulb
ja
xchg
sub
xor
xor
int
repz xor
(bad)  
fisubr
sbb
cs cltd 
or
(bad)  
sbb
mov
jl
sub
daa    
inc
xchg
jnp
jae
out
test
fwait
ds out
insb
movsl
pop
cmpsb
add
cmp
xor
in
sub
lock xchg
in
push
xchg
outsb
loopne
scas
outsl
or
mov
arpl
mov
movsb
cmp
jno
pop
jbe
fistpll
jecxz
(bad)  
xchg
incb
adc
(bad)  
push
idiv
push
pop
cmp
repz out
and
or
adc
jle
push
mov
movsl
xchg
jns
aas    
mov
mov
ljmp
push
xor
mov
std    
pushf  
pusha  
xor
add
imul
scas
lds
lds
push
ja
lcall
adc
into   
in
jbe
int3   
or
lret   
bound
popf   
mov
jecxz
nop
mov
cltd   
cmp
jno
stos
mov
push
movsb
(bad)  
and
sub
and
cmp
jecxz
push
or
sahf   
incl
andb
test
repz and
push
xchg
lcall
dec
enter
out
loope
dec
mov
loop
ret
xor
push
stc    
inc
(bad)  
and
adc
data16 je
xchg
repnz test
add
xchg
mov
fdivs
sahf   
sub
dec
cs dec
idiv
pop
jns
movsl
mov
inc
lock out
movsl
dec
fwait
dec
mov
nop
cs and
mov
test
shrb
mov
scas
push
aad
push
or
push
imul
fwait
ja
mov
push
fwait
std    
add
sbb
mov
popa   
and
mov
mov
push
inc
lcall
pop
push
fs pop
jne
andl
outsl
icebp  
cmp
out
js
fsubp
repz mov
push
iret   
je
dec
sub
pop
xchg
dec
cmp
xchg
fwait
les
sub
cs inc
lahf   
pop
mov
js
jnp
test
cli    
xchg
scas
pop
push
push
sub
cmp
mov
mov
sbb
pop
push
add
out
mov
cmpsb
mov
mov
out
rcr
xchg
in
idivb
aam
adc
sti    
imul
and
pop
nop
in
pop
xor
stc    
jno
(bad)  
scas
test
movsl
sbb
and
jle
lods
stc    
push
add
test
je
jbe
psubsb
dec
arpl
gs lret
ljmp
dec
jmp
sub
loopne
sbb
fisub
push
adc
push
push
mov
(bad)  
(bad)  
pop
sub
leave  
insl
cli    
cmp
add
in
dec
in
jmp
aas    
and
lret
cmp
mov
cmpsb
pop
aas    
ds dec
rcrl
out
inc
pop
loop
and
dec
stos
and
(bad)  
jno
mov
push
pop
dec
movsl
test
cmp
loope
(bad)  
fmuls
jno
lods
xchg
rorl
and
sub
fdiv
inc
imul
sbb
and
and
cltd   
mov
pop
inc
dec
jae
jnp
inc
icebp  
imul
outsl
stos
mov
cmp
push
(bad)  
or
sahf   
push
ret    
inc
pushf  
mov
pop
xchg
push
xchg
inc
inc
lock cmp
pop
add
add
les
int
bnd ja
in
pop
js
lcall
jle
adc
mov
outsb
xchg
jne
cmpsb
add
jbe
cwtl   
(bad)  
xlat
sahf   
lods
nop
or
dec
mov
lahf   
jo
addr16 jno
lret
push
inc
(bad)  
cld    
lods
loop
xchg
dec
fdivr
iret   
push
sbb
ficomp
je
sub
adc
mov
xor
mov
addr16 dec
jmp
jecxz
fmul
lret
pushf  
ja
inc
das    
push
jbe
out
mov
jnp
pop
cmp
push
out
mov
adc
sbb
cmpsb
mov
or
jmp
(bad)  
fsubp
fisttpl
lea
iret   
cmp
mov
jne
in
dec
xchg
pop
dec
js
xchg
insl
imul
xchg
lahf   
mov
push
movd
insb
jo
mov
adc
into   
sarl
outsl
aad
sbb
inc
push
jle
push
loop
rcll
stc    
dec
lock mov
and
enter
shrl
mov
add
xor
cmp
sub
shr
xchg
scas
dec
lods
ss
jbe
cmp
insl
xchg
test
mov
pushf  
popa   
pushl
push
mov
aam
xor
fwait
jg
jmp
or
pop
js
jbe
xor
cli    
call
xlat
cli    
push
push
(bad)  {%k6}{z}
stc    
add
mov
adc
(bad)  
dec
push
hlt    
sub
mov
inc
and
mov
or
in
dec
insl
paddb
jae
cmpsb
repnz hlt 
ja
push
xchg
sbb
dec
or
inc
in
xor
pop
mov
jnp
adc
mov
test
xchg
(bad)  
std    
and
jecxz
lret
push
lods
stc    
pop
pop
mov
or
mov
enter
xlat
imul
add
cli    
fwait
cld    
loop
mov
cld    
jae,pt
loope
and
dec
lea
push
add
scas
push
(bad)  
adc
sub
adc
lahf   
lret   
push
xor
or
xchg
inc
xchg
xchg
out
push
sbb
arpl
add
push
fcom
and
mov
or
sahf   
dec
sub
adc
add
mov
imulb
lock mov
sbb
mov
or
inc
les
mov
lds
aad
out
pop
ds ljmp
stos
in
pop
and
loope
add
xchg
lret   
fistpll
scas
pushw
pop
cld    
inc
jecxz
iret   
mov
in
inc
lods
sarl
fwait
or
mov
inc
movsb
mov
nop
test
mov
popa   
lret   
lcall
(bad)  
mov
or
divb
jno
adc
xchg
mov
repnz inc
ss repnz pop
push
pusha  
sbb
cmpsb
push
sbb
arpl
jbe
cmp
sub
fcompl
pushf  
dec
stos
cld    
mov
push
test
push
jecxz
mov
gs jmp
mov
adc
sti    
mov
lret
lods
daa    
adc
jb
cmp
sbb
push
std    
and
push
push
inc
dec
enter
pop
pop
jmp
adc
add
sbb
sar
mov
mov
jle
sbb
addr16 push
popl
outsl
cmp
(bad)  
mov
data16 fidivl
(bad)  
lods
dec
xchg
jecxz
imul
xor
ss fadd
and
aas    
or
push
test
std    
push
inc
mov
insl
popa   
movsl
fmuls
lahf   
xor
fstpt
adc
adc
mov
jge
adc
push
sub
fwait
push
and
movsl
mov
sub
mov
or
dec
jp
scas
out
push
mov
dec
push
cs icebp 
jecxz
aam
rcrl
mov
clc    
das    
ljmp
and
int
in
cs push
das    
stos
sbb
ss pop
dec
and
test
fldt
mov
xor
iret   
lahf   
jecxz
xchg
sti    
sub
sub
test
(bad)  
fs std 
cmp
idivb
or
aaa    
xchg
(bad)  
ror
in
xchg
loopne
jo
push
ret    
push
add
cmpsl
cmp
fild
(bad)  
jo
push
cwtl   
repnz or
loop
pop
(bad)  {%k6}{z}
fbstp
mov
repnz mov
add
push
add
mov
jmp
je
ret
std    
push
pushf  
loope
pusha  
jl
and
dec
les
jo
pusha  
(bad)  
lods
out
pushl
adc
jmp
fld
jnp
dec
rcrl
mov
test
(bad)  
(bad)  {%k6}{z}
aad
nop
imul
scas
in
mov
push
push
cmp
(bad)  
pop
mov
jge
xchg
mov
aam
clc    
lea
fimull
and
mov
scas
add
xchg
sub
xchg
out
mov
repnz pop
sub
(bad)  {%k6}{z}
fisttpl
xor
test
mov
sbb
test
mov
inc
inc
jns
sub
ja
arpl
test
(bad)  
mov
push
jg
cmp
xchg
aam
push
aaa    
cmp
cli    
sbb
push
fidivr
sub
adc
mov
js
cmp
mov
imul
test
xor
icebp  
jb
pop
scas
xchg
or
enter
or
add
or
sub
add
gs add
xchg
clc    
jns
cli    
push
inc
(bad)  
jp
stos
inc
xchg
sbb
sub
nop
scas
xchg
sub
fdiv
mov
add
out
test
je
loope
fdivrs
push
nop
push
repz sub
popf   
sbb
rolb
loope
inc
stos
fstpl
sbb
repz push
push
jne
sub
mov
jae
insl
loop
xchg
arpl
les
(bad)  
or
arpl
add
xor
test
aad
jne
(bad)  {%k6}{z}
div
and
ja
fimull
loope
or
lret   
stc    
dec
js
jg
jmp
call
negl
cmpsl
or
stos
lcall
shr
das    
jnp
inc
cmp
mov
dec
mov
lret   
pop
das    
jno
and
movsl
imul
in
test
std    
shl
dec
mov
sub
(bad)  
in
lcall
lahf   
jmp
mov
in
xchg
sub
add
cmc    
call
jl
xchg
repz movsbl
sbbl
mov
fnstenv
dec
mov
add
lret
nop
inc
dec
in
or
pop
pusha  
idiv
outsb
test
mov
xor
xchg
clc    
repnz pop
lcall
and
xchg
mov
inc
inc
cmp
out
fwait
mov
sbb
jl
fcoms
(bad)  
(bad)  
pop
dec
scas
cmp
test
add
cmpsb
pop
adc
rorb
das    
cmpsb
data16 sub
out
out
xor
or
movsb
rep outsl
xor
mov
adc
rcll
pushf  
repz cmp
iret   
pop
xchg
sahf   
mov
lods
shrb
sub
jns
add
hlt    
daa    
cmc    
es pop
pop
leave  
mov
push
cltd   
add
aad
(bad)  
lret   
push
push
insl
daa    
mov
dec
fbstp
shrl
popf   
dec
loop
xchg
or
adc
insl
mov
lahf   
dec
lret   
fucomp
cmp
or
pop
and
repz ljmp
push
sahf   
out
inc
call
lret
stos
pushf  
adc
push
popa   
mov
cmp
and
fmuls
sti    
jns
stos
jae
sbb
add
mov
xchg
adc
(bad)
jo
das    
pusha  
aam
arpl
pop
out
mov
insl
insl
(bad)  
outsl
mov
dec
pop
int3   
(bad)  {%k6}{z}
and
dec
mov
scas
mov
test
push
dec
cmpsl
mov
pusha  
sti    
insl
mov
dec
test
insl
lock out
mov
pop
lea
gs mov
stc    
mov
jecxz
mov
fildll
sbb
out
dec
mov
das    
dec
sub
cmp
pusha  
lds
es mov
aad
push
jl
mov
or
mov
dec
xor
mov
push
std    
add
inc
jmp
xchg
inc
xchg
sub
add
cmp
jp
jns
inc
movsb
mov
cmp
sub
mov
or
and
add
pop
push
(bad)  
adc
iret   
lea
dec
popf   
cmp
xchg
fadds
pop
cmc    
jns
sub
jbe
movsb
(bad)  
popa   
cmpsb
ja
out
xchg
sbb
xor
stc    
decb
xor
add
inc
dec
ja
jmp
andl
out
outsl
addr16 push
call
jg
cmc    
pop
(bad)  
mov
in
repz mov
and
push
dec
les
nop
sub
xor
sbb
faddl
roll
pop
lahf   
mov
imul
cmp
test
push
cmpsl
imul
push
cmp
push
xchg
jge
std    
pushl
or
(bad)  
int3   
cltd   
mov
cmp
stos
pop
daa    
(bad)
add
inc
xor
xchg
sbb
orl
leave  
or
mov
scas
inc
or
dec
sbb
cmc    
mov
sub
xchg
(bad)  
sarb
dec
dec
stos
mov
jns
(bad)  
in
push
add
insl
ds or
les
jp
mov
xor
cmpsl
ja
or
push
mov
fsubrl
lods
divb
adc
imul
push
aaa    
out
xchg
sbb
gs push
aam
ret
inc
lahf   
push
outsl
xchg
inc
mov
add
xor
mov
xlat
jne
jmp
cmp
xchg
cmp
mov
addr16 in
xchg
pusha  
push
in
and
xchg
popf   
xlat
jge
xor
jbe
shr
mov
stc    
and
push
push
fidivl
add
daa    
sub
inc
(bad)  
push
sub
imul
lods
fistp
scas
repnz movsb
add
xlat
jg
movsb
mov
add
out
inc
(bad)  
sub
dec
(bad)  
fcomp
scas
jo
or
push
outsb
lock add
aam
push
jbe
incl
bound
mov
add
test
aas    
mov
mov
or
push
gs mov
lock sub
mov
add
les
std    
push
push
dec
scas
movsb
and
ret
stos
dec
out
push
fldenv
sbb
xchg
mov
inc
mov
(bad)  
xlat
sahf   
es push
int
jae
pshufw
jecxz
cli    
pop
dec
scas
mov
outsl
add
sub
mov
sbb
mov
mov
inc
les
lods
mov
mov
xlat
jl
popf   
dec
dec
pushf  
add
jg
int
cmc    
xchg
push
mull
nop
aam
movsb
dec
mov
add
fstpt
add
insb
inc
aad
cld    
fwait
push
sub
aad
xchg
add
xchg
fwait
repz adc
loope
mov
cld    
ss inc
fdecstp 
mov
inc
and
(bad)  
cmp
test
cltd   
push
push
jbe
mov
lock fwait
mov
jae
and
inc
mov
cmpsb
rolb
ret
fsubl
fs push
clc    
insb
jnp
loopne
fistpl
inc
mov
add
pop
mov
xchg
dec
dec
insl
in
and
(bad)  
sub
sub
fbstp
pop
into   
inc
je
das    
inc
decb
loop
jne
out
pop
(bad)  
loop
mov
pop
sub
xor
inc
out
xlat
int
dec
cmp
lods
sbb
add
int
ret    
mov
add
sarl
cld    
xor
mov
hlt    
cmp
sbb
dec
outsb
aaa    
push
xchg
or
stc    
in
and
fstpt
(bad)  
fadds
test
lds
pop
andl
or
call
mov
and
mov
push
lea
or
fwait
inc
fimul
dec
lea
xor
test
imul
fisttpll
leave  
ret    
arpl
stos
outsb
or
mov
stc    
xor
sub
add
cmc    
psubd
mov
jb
mov
insb
lods
push
lds
pushf  
in
and
mov
stos
xchg
(bad)  
in
xor
aaa    
lret   
xchg
jbe
nop
jg
pop
cltd   
mov
jge
(bad)  
aam
sbb
(bad)  
jae
sub
xchg
mov
insl
std    
sbb
cmpsb
notl
cs aas 
mov
(bad)  
das    
sub
jge
sbb
inc
xor
mov
repnz sbbl
jecxz
sub
mov
or
lcall
mov
push
clc    
pop
scas
fstpl
sbb
cmp
mov
insl
mov
pop
es fsubp
dec
cli    
mov
iret   
stos
cwtl   
sub
das    
imul
call
jge
out
in
incb
mov
push
mov
inc
xor
loop
sbb
(bad)  
mov
in
ds mov
xor
(bad)  
fildl
xchg
icebp  
scas
(bad)  
jns,pn
inc
faddl
cmp
out
(bad)  
fsubr
sarl
xor
iret   
xchg
mov
aam
mov
or
push
and
mov
dec
add
mov
xor
ret    
lods
cmp
cmpsb
insl
adc
sub
push
jo
sub
cmpsb
dec
loop
xor
stc    
shl
das    
popf   
lcall
xchg
sbb
ds push
mov
xlat
les
aaa    
push
stos
cld    
int
je
lds
stos
out
mov
push
pop
jne
push
sar
pushf  
cmp
push
ss sbb
ds aas 
jle
(bad)  
cmp
insb
xchg
aam
scas
xor
and
dec
lret   
or
into   
push
lcall
or
mov
std    
pop
adc
leave  
and
cmp
scas
insb
jbe
jmp
cmc    
push
mov
movsl
sub
inc
jnp
(bad)  {%k6}{z}
mov
cmpsb
jmp
aaa    
lds
(bad)  
lea
pop
test
and
fnstenv
and
outsb
sub
daa    
paddsb
push
loopne
hlt    
mov
adc
adc
add
sbb
adc
mov
pop
push
adc
pushf  
push
adc
push
adc
sti    
je
clc    
(bad)  
iret   
mov
scas
in
out
sti    
sbb
mov
cmp
imul
call
ds push
outsb
sbb
or
xor
test
pop
imulb
clc    
aad
rorl
jge
xor
in
rclb
mov
es mov
mov
inc
push
jg
add
ds mov
daa    
(bad)  
in
inc
gs
xor
js
popa   
cmp
cmp
sub
addr16 fs mov
data16 and
leave  
pop
bound
sbb
in
and
jbe
inc
push
lds
aad
imul
dec
push
stos
std    
hlt    
(bad)  
push
loopne
lods
loope
or
vdivsd
pop
inc
pop
xchg
dec
add
jge
mov
push
xor
mov
dec
cmp
push
push
sub
es jp
push
and
mov
pop
add
icebp  
shrl
jae
pop
pop
cmp
out
aaa    
(bad)  
mov
fisttp
das    
out
test
mov
and
xor
loop
dec
pop
sub
ljmp
cwtl   
mov
insb
sbb
addl
pop
jb
aam
adc
lret   
xor
xchg
(bad)  
dec
(bad)  
push
jb
sbb
outsb
pop
mov
out
scas
jl
push
in
hlt    
sbb
fadd
pop
fisubr
jle
lds
cwtl   
cmpl
imul
test
pop
cltd   
add
out
test
mov
je
pop
fwait
pop
xchg
into   
xor
repnz cmp
or
clc    
mov
mov
jle
movhps
sub
(bad)  
popf   
mov
jae
push
mov
cltd   
push
(bad)  
fmul
and
pop
incl
clc    
push
cld    
mov
inc
push
xchg
push
dec
aam
mov
push
mov
xchg
lea
push
cmp
jmp
push
add
ficom
test
loopne
clc    
pushf  
push
mov
scas
cld    
or
(bad)  
push
pop
enter
mov
mov
leave  
rorb
add
sbb
jne
dec
jns
pop
inc
mov
inc
mov
lods
push
cmp
stc    
(bad)  
testb
into   
outsl
xchg
mov
fimull
xlat
sahf   
pop
add
lea
add
jae
nop
jl
or
clc    
aad
xor
pusha  
in
aam
enter
pushf  
js
or
push
sub
cmp
loope
jl
(bad)  
movsl
stos
sub
inc
(bad)  
(bad)  
dec
cmpsl
call
pop
fwait
sbb
scas
cmpl
push
lods
stos
daa    
sbb
push
sti    
or
push
ljmp
and
ljmp
aad
pop
xor
cmp
or
xchg
insl
or
mov
fwait
stc    
(bad)  
sbb
mov
sub
and
sub
mov
pop
sub
push
add
lcall
and
call
xchg
pop
les
lret
xor
sub
jecxz
dec
sbb
(bad)  
sbb
popf   
into   
and
sub
mov
mov
add
(bad)  
sarl
bound
mov
(bad)  
aad
test
icebp  
sbb
aam
out
cmpsb
setbe
push
cwtl   
xor
xchg
insb
mov
test
test
ljmp
into   
and
jne
icebp  
sbb
std    
jns
xchg
dec
(bad)  
pop
push
xor
nop
jae
and
pop
jmp
lds
cltd   
nop
jle
xor
push
mov
jg,pt
mov
(bad)  
bound
subl
add
dec
test
xchg
sbb
xchg
mov
aad
enter
mov
push
cwtl   
adc
push
pop
sbb
add
imul
pop
into   
sti    
jns
xchg
pop
rolb
ds push
jns
push
jns
mov
lret
outsb
adc
int
pop
xchg
bound
popf   
ljmp
add
(bad)  
push
shrb
ret    
(bad)  
testl
cmp
sub
es stc 
pop
movsl
push
out
test
sbb
xchg
inc
xor
lea
lods
(bad)
xor
xchg
lahf   
xor
mov
push
push
jbe
jo
sub
subl
fwait
and
call
or
jge
mov
mov
test
je
data16 das 
jl
lock mov
mov
test
mov
jg
out
sub
stos
sbb
jle
lcall
or
inc
lods
or
inc
xor
aas    
shr
pop
scas
mov
das    
adc
clc    
test
xchg
loopne
add
inc
fwait
shlb
sbb
sti    
negb
fcoml
sub
out
stc    
daa    
push
dec
fdiv
aaa    
and
cmp
jg
(bad)  
xor
sbb
inc
and
movsb
adc
sub
out
cmp
inc
lahf   
aas    
xlat
js
or
xchg
sub
cmp
jno
loope
pushf  
rcrb
test
les
(bad)  
lret   
call
lahf   
sub
and
and
and
inc
add
mov
mov
mov
dec
dec
clc    
fnsave
push
scas
sbb
mov
sbb
sbb
mov
inc
lret
fisubl
jne
inc
loop
and
dec
jle
scas
mov
loope
ljmp
mov
cmp
sti    
xlat
jge
iret   
pop
inc
mov
(bad)  
push
or
aad
js
pop
sbb
sub
imul
fmuls
jns
inc
dec
movsb
out
xor
dec
ret
cmp
xchg
adc
add
mov
inc
popf   
push
pop
lds
jns
jmp
xor
enter
mov
outsb
pop
dec
cmpsl
add
jns
out
jo
push
aam
push
lret
into   
dec
or
ja
and
pop
dec
(bad)  
and
xor
mov
xchg
mov
out
in
xchg
daa    
sbb
je
add
xchg
shll
jnp
test
aad
dec
or
repnz push
std    
mov
jmp
inc
ret    
mov
inc
mov
inc
cltd   
pop
or
add
mov
mov
push
add
adc
sbb
les
ds and
cmp
cmp
push
cmpsl
jo
insb
fs or
test
out
inc
xchg
xchg
xchg
jl
mov
cmpsl
and
stc    
jno
cmp
pop
or
mov
cmc    
leave  
std    
add
push
cmp
push
(bad)  
fldcw
jmp
or
rclb
in
push
pop
or
pushaw 
mov
std    
lods
int
orl
xchg
rcrl
loopne
lcall
lock sbb
imul
cmp
mov
mov
pop
rcll
cmp
adc
icebp  
xchg
adc
push
sub
outsl
push
push
sub
fist
push
shlb
out
push
lret   
iret   
in
lcall
mov
lret   
or
(bad)  
mov
dec
adc
mov
jl
std    
pushf  
in
js
sbb
sub
xchg
dec
lcall
add
fs cmp
cmp
mov
mov
jns
cmp
sbb
sarb
testb
adc
sub
lea
(bad)  
dec
decb
xchg
fdivl
push
pop
lret   
push
cli    
push
(bad)  
mov
xchg
hlt    
enter
fisttp
add
lea
jo
sub
push
fistpll
outsb
insb
mov
xchg
push
add
hlt    
pushf  
adc
mov
nop
outsl
jns
mov
shrl
icebp  
sub
jne
xor
push
imul
jb
push
add
sar
iret   
jle
jnp
cmp
(bad)  
mov
jnp
ret
cmp
andps
sub
and
out
or
out
push
loope
fs ds
icebp  
es jmp
std    
pop
pushl
rolb
adc
js
mov
or
pop
dec
cmp
aad
or
push
rolb
je
cmp
lods
add
push
out
sub
or
jno
(bad)  
fnop   
(bad)  
mov
jae
pop
inc
pop
inc
fs cld 
xor
roll
(bad)  
sub
push
cmp
enter
and
jl
push
(bad)  
lahf   
jecxz
je
test
add
lods
or
pop
popf   
shrd
cmp
sub
jnp
jns
cmp
test
hlt    
int3   
out
mov
pop
dec
mov
bound
mov
movsl
pop
testb
insb
xor
cmpsl
xor
je
ja
cmc    
leave  
notb
and
mov
int3   
lock fdivrs
sbb
hlt    
add
into   
(bad)  
xor
and
mov
add
pop
mov
xchg
inc
inc
cmpsb
or
sti    
sti    
xor
cmp
pushf  
enter
cmp
jp
hlt    
ret    
leave  
lods
cwtl   
imul
rcrb
sbb
inc
outsl
inc
push
insb
jb
iret   
push
mov
or
adc
rclb
jnp
or
adc
xchg
xchg
sti    
(bad)  
cmpsw
or
xor
loope
mov
mov
loop
or
jl
mov
repnz in
mov
mov
sub
std    
inc
aaa    
pop
cmpsb
mov
(bad)  
out
dec
nop
mov
pop
adc
jnp
sub
add
hlt    
push
stc    
push
gs push
fisubrl
add
fs cli 
adc
dec
pop
adc
dec
dec
leave  
xchg
adc
xchg
xchg
mov
das    
sub
cmp
adc
into   
je
(bad)  
sahf   
es jg
dec
out
inc
fcomp
jge
repz xor
loopne
les
in
ret
add
push
sbb
pop
insb
loopne
mov
movsl
loope
or
pop
xchg
aas    
in
jge
imul
ret
jg
test
adc
lret
xchg
adc
sub
and
insb
je
call
jnp
insb
sbb
popl
inc
mov
mov
js
pop
in
jb
xor
ljmp
fisttpl
adc
test
fdiv
dec
mov
mov
xor
pushf  
lock inc
push
adc
mov
sahf   
or
out
shlb
int
pushf  
cld    
sbbl
dec
inc
mov
test
scas
daa    
addr16 sub
inc
fbstp
push
rclb
out
add
pop
inc
jnp
push
cmpsl
mov
ss cs dec
sbb
fldcw
xor
adc
pop
(bad)  
adc
ret    
fnstcw
cmp
int
xchg
mov
cmovle
xchg
dec
cmovne
lds
leave  
outsb
test
gs or
not
lods
or
cmp
into   
dec
loopne
mov
test
popa   
scas
adc
(bad)  
xchg
add
cmpsb
jb
inc
pop
cltd   
mov
js
add
cmp
cwtl   
push
(bad)  
out
fisubr
icebp  
imul
outsl
pop
lock ret
pop
not
cmp
and
or
mov
pop
push
push
cmp
cmpsb
leave  
cmp
pop
subl
mov
out
mov
xchg
sbb
mov
jo
int3   
ljmp
dec
out
es stc 
jbe
jno
sbb
movsb
in
popf   
jbe
out
ja
mov
jge
push
rsqrtps
mov
loope
or
mov
mov
xchg
cmp
(bad)  
jae
loopne
dec
add
push
or
loopne
test
xor
adc
pop
rcrl
inc
dec
in
dec
dec
xchg
xchg
sub
cmp
in
loopne
fstp
jge
js
dec
or
xor
in
fsubrp
mov
xchg
repz cwtl 
in
jb
or
dec
inc
dec
inc
scas
inc
pusha  
(bad)  
or
add
add
(bad)  
(bad)  
(bad)  
incl
add
add
add
add
add
add
jns
je
insl
cs inc
jb
ja
outsb
addr16 sub
push
gs jb
imul
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
xor
data16 aaa 
xor
fs xor
add
adc
gs insl
cs inc
jb
ja
outsb
addr16 cs inc
imul
add
popa   
je
pop
add
add
add
add
add
lsl
add
jno
add
add
or
or
add
or
add
add
add
dec
or
add
add
(bad)  
and
add
add
inc
dec
inc
add
mov
or
popa   
add
jo
pop
jae
add
ret    
add
push
ret    
add
outsl
test
add
cmp
push
push
test
sub
xorb
popf   
inc
mov
adc
inc
push
in
sub
push
cld    
lods
pop
fstpt
fs repnz xchg
cmp
aam
push
xor
push
stos
cmpsl
fcomp
and
mov
dec
pop
push
rcrb
mov
inc
js
jg
pop
stc    
push
or
shrb
in
adc
test
xchg
js
mov
fucomip
insl
jl
cmp
mov
cs xchg
dec
into   
pop
jnp
xchg
jb
inc
loopne
xchg
loopne
into   
mov
and
xchg
xchg
fdivl
aad
push
inc
out
mov
ret    
lds
imul
xchg
dec
pop
xchg
js
divl
and
test
fdivr
mov
mov
rcrb
inc
dec
cmpsl
insl
loop
mov
xchg
add
cmp
xor
outsb
loope
arpl
rclb
cmp
enter
mov
movsl
js
scas
dec
lods
insb
cmp
iret   
jle
and
cmp
aaa    
and
mov
sbb
dec
sbb
adc
int3   
bound
and
orl
jo
cmc    
test
xor
insl
dec
leave  
or
(bad)  
jp
xchg
cmp
jo
pop
cmp
dec
(bad)  
mov
sbb
pop
jp
pop
sahf   
leave  
sub
mov
and
jb
jo
dec
xchg
pop
test
mov
mov
mov
cmp
lods
inc
mov
movsb
cltd   
add
jecxz
mov
push
shll
or
roll
js
js
or
push
mov
sti    
cli    
add
and
test
loop
mov
push
(bad)  
sbb
stos
push
dec
push
fdivrl
std    
xchg
sahf   
inc
cmpsl
js
cwtl   
push
out
sbb
movsb
mov
and
cmp
ret    
bound
sbb
sub
xchg
cltd   
fmull
in
loop
push
adc
movsb
cmp
and
push
(bad)  
call
bound
sub
and
and
aam
fiadd
xchg
fdiv
dec
fs xor
mov
jb
pop
sti    
ror
or
out
lock test
test
xchg
fistl
int
sub
inc
push
cmp
sub
cli    
mov
out
sbb
out
mov
push
sub
xchg
fs add
adc
cmc    
push
mov
repnz pusha 
mov
xchg
jmp
fidivrl
enter
jge
ret
dec
outsb
sbb
popf   
imul
imul
dec
(bad)  
pop
orl
sbb
xor
ret
inc
dec
and
into   
jecxz
sbb
or
mov
fdivs
cmp
jmp
mov
imul
inc
push
jp
sbb
mov
lds
loopne
or
xchg
aas    
xchg
int
mov
int
js
or
mov
xor
cmp
out
shll
repz negb
(bad)  
mov
dec
bsf
aam
pusha  
repz mov
fnsave
push
pop
cmp
or
aas    
loope
stc    
sub
push
repnz xchg
xor
dec
ja
xor
jmp
out
(bad)  
add
(bad)  
jnp
out
xor
adc
sbb
xchg
push
(bad)  
mov
testb
(bad)  {%k6}{z}
adc
inc
dec
inc
rcr
inc
icebp  
aas    
les
pop
lahf   
repnz add
mov
aaa    
jmp
data16 sti 
mov
(bad)  
adc
and
push
sub
gs fucomip
add
add
jae
pushl
inc
add
push
stc    
(bad)  
loop
lcall
(bad)  
out
mov
andl
loop
mov
insb
mov
ljmp
push
mov
bound
inc
adc
sbb
xchg
mov
mov
insl
pop
int
add
add
bswap
out
push
and
(bad)  
fcompl
and
adc
fstpl
pusha  
jne
adc
pop
lret
andb
pop
and
int3   
xor
repz dec
mov
mov
push
cmpsl
lds
pop
pop
rcl
dec
xor
jmp
divl
xchg
push
dec
mov
lods
cli    
xor
push
xchg
mov
pop
and
sarb
(bad)  
push
jo
dec
test
jb
lcall
lds
sbb
stos
aaa    
xor
or
inc
call
xchg
lahf   
fyl2x  
mov
cmpl
add
leave  
or
adc
mov
or
sbb
iret   
adc
outsb
adc
sub
scas
push
and
xchg
mov
xchg
mov
add
sub
mov
imul
ss and
pushf  
xor
stos
hlt    
ret
in
ss dec
pop
xor
and
mov
into   
loope
dec
int3   
(bad)  
(bad)  
add
xchg
ret
test
lahf   
out
xor
stos
dec
dec
mov
xchg
sbb
jg
(bad)  
add
insl
(bad)  
pop
adc
js
daa    
pop
pop
jb
inc
js
xchg
push
rep movsb
mov
jmp
mov
ret
cmp
sti    
inc
movsb
jne
pmaddwd
mov
sub
iret   
dec
mov
or
lcallw
push
or
inc
xchg
xchg
cli    
outsl
dec
jg
movsl
jbe
je
mov
lea
int
rcr
shll
jbe
pushf  
or
lret   
xor
movsl
stos
lock pop
jecxz
mov
push
adc
cmpxchg
push
outsl
movsb
loopne
aam
pop
test
adc
mov
cmp
(bad)  
cmp
(bad)  
ret    
jl
ja
js
(bad)  
xchg
rolb
in
stc    
xor
arpl
xchg
lcall
cltd   
mov
cwtl   
into   
and
add
out
push
aas    
jl
pop
pcmpeqb
leave  
shrl
mov
pop
jne
mov
pop
dec
pop
pop
lods
dec
push
or
inc
incb
jnp
addl
enter
cmp
push
jb
xchg
sub
test
dec
(bad)  
cmp
pop
or
mov
gs mov
bound
push
jmp
pop
and
or
scas
shlb
test
dec
data16
xchg
adc
aaa    
ficoml
lds
xchg
sub
pop
movsl
lods
das    
mov
inc
mov
inc
pop
out
lcall
inc
inc
lea
insl
(bad)  
mov
pop
sahf   
in
out
jae
add
sub
je
scas
xchg
pop
clc    
outsl
lret   
fadds
fildll
push
in
adc
push
mov
pusha  
xor
add
add
and
pop
push
add
mov
sbb
cltd   
mov
or
inc
movsl
and
fmulp
setl
fwait
(bad)  
mov
test
lea
cmpsb
out
(bad)  
bound
jae
fisubrl
std    
add
and
fs or
or
and
pop
or
movsb
jg
ljmp
jge
popf   
jge
addr16 mov
mov
lret
(bad)  
gs xchg
movb
shll
mov
or
scas
mov
arpl
scas
xchg
ret    
xchg
adc
fidivl
or
dec
gs insl
leave  
lods
pop
inc
jge
popa   
mov
xchg
mov
fwait
pusha  
arpl
add
jne
test
shl
or
adc
mov
jnp
je
pop
in
mov
xor
rolb
jns
mov
andl
pushf  
(bad)  
or
pop
lds
xor
clc    
xchg
mov
lea
xchg
mov
pop
inc
push
fwait
or
dec
out
jb
and
stc    
js
les
out
or
into   
fimull
adc
or
in
in
test
inc
sbb
adc
pop
hlt    
pop
xchg
mov
xchg
scas
std    
dec
(bad)  
negb
pop
adc
inc
mov
xchg
jb
popl
pop
fwait
rcrb
xor
xor
and
mov
mov
dec
sahf   
pushf  
loopne
push
or
inc
push
mov
sbb
dec
mov
(bad)  
cmc    
ja
andb
js
mov
sar
in
fistp
inc
test
inc
into   
xchg
pop
jns
scas
cmp
pusha  
and
cmp
inc
xchg
sahf   
mov
sbb
lock aad
stc    
xor
mov
pop
cmp
mov
(bad)  
out
shl
inc
fs xor
fimull
pop
(bad)  
cmc    
or
adc
imul
inc
push
out
lods
std    
loop
test
inc
sbb
sub
push
into   
and
aad
cmp
cmp
rolb
sub
adc
outsl
loope
xchg
(bad)  
out
mov
test
dec
std    
dec
mov
pop
bound
xor
out
mov
xor
jbe
fdiv
xor
loope
lock mov
imul
adc
inc
mov
add
mov
rcrl
jo
insb
pop
mov
fcmovnbe
xor
mov
adc
pop
stos
fldt
xlat
cmp
mov
mov
bndstx
sub
cli    
add
pop
test
dec
cli    
jg
push
xchg
pop
aas    
orb
or
and
push
ljmp
sbb
repnz or
lock scas
adc
mov
out
call
sub
mov
cwtl   
(bad)  
mov
lds
test
fnsave
cmp
mov
cmc    
aaa    
js
and
dec
lock and
sbb
push
xchg
or
xchg
jae
stos
outsb
in
fnstsw
sbb
pop
inc
imul
in
mov
inc
add
clc    
pushf  
pop
bound
xchg
(bad)  
push
add
or
out
xchg
add
neg
(bad)  
lahf   
pop
dec
xor
xlat
pop
mov
loope
rcr
cmpsb
dec
adc
data16 jno
jbe
shr
cmp
sbb
incb
cs
xchg
aaa    
lcall
(bad)  
xchg
(bad)  
xor
jmp
mov
or
int3   
sbb
inc
bound
div
push
jmp
adc
nop
pop
repnz outsb
xchg
fisubr
push
iret   
test
dec
(bad)  
or
jnp
xor
or
(bad)  
loop
push
push
pop
inc
rorb
cmp
pop
iret   
jg
dec
mov
mov
cmpsl
mov
and
adc
cmpsl
movsb
xor
pop
inc
call
pop
enter
add
pushf  
xchg
sub
sub
repnz fs xor
(bad)  
add
pop
mov
push
int
xchg
jecxz
dec
jp
xor
out
shrl
cmp
in
and
outsb
sub
insb
aad
jne
out
leave  
sub
mov
test
out
out
dec
adc
mov
pop
cs and
jno
and
scas
pop
inc
sbb
imul
andl
mov
mov
cmpsb
lods
lcall
add
mov
sub
jg,pt
mov
dec
sbb
inc
fs mov
add
ror
adc
xchg
fdiv
sahf   
inc
and
mov
sub
in
inc
insb
es inc
push
popf   
aad
int3   
and
mov
or
test
jg
(bad)  
xor
out
jecxz
mov
mov
and
jnp
sahf   
and
sub
cltd   
loopne
mov
pop
push
jecxz
xchg
push
mov
imul
jecxz
cwtl   
push
push
add
sbb
nop
nop
into   
jmp
sarb
fstps
push
jle
in
out
dec
mov
test
add
pop
adc
(bad)  
dec
or
add
sub
in
mov
push
sub
xchg
popa   
jl
cld    
xchg
jge
popa   
fstpl
lcall
lret
cmp
addr16
xchg
pop
xchg
(bad)  
enter
add
(bad)  
mov
pop
(bad)  
std    
mov
xchg
lret   
popa   
int
xchg
or
sbb
jnp
in
and
aad
pusha  
je
and
xor
sti    
mov
xor
mov
mov
fidivr
js
test
ljmp
mov
ss add
arpl
inc
gs mov
add
push
bound
mov
mov
push
push
push
loope
es insb
add
xor
test
pushf  
test
rcll
sarl
sub
xchg
rolb
enter
(bad)  
jbe
sub
test
mov
cltd   
cmp
movb
jb
dec
xor
or
mov
sbb
adc
xchg
mov
push
or
or
mov
and
jle
mov
jecxz
jmp
mov
insl
daa    
sbb
sbb
jb
jo
mov
pop
ljmp
divb
pop
mov
jo
mov
inc
and
arpl
(bad)  
out
pop
push
std    
xchg
scas
jno
notb
orl
dec
(bad)  
out
jg
pop
xchg
loope
add
in
mov
inc
jne
cmc    
pop
sti    
xor
outsl
push
cmp
xlat
pop
pop
and
out
jg
sbb
gs ds ljmp
dec
sbb
sti    
or
sbb
pop
loop
aaa    
out
(bad)  
aaa    
sub
push
(bad)  
sub
push
inc
inc
shrl
out
pop
imul
lret   
lret
fisub
push
roll
jne
cmp
data16 mov
lock cli 
cld    
cld    
push
lcall
loopne
ss icebp 
pop
arpl
and
and
push
test
fiadd
jmp
sti    
sbb
xor
mov
bound
(bad)  
pop
(bad)  
xchg
adc
or
leave  
iret   
out
imul
mov
push
es mov
out
pop
outsb
jno
inc
jp
or
inc
jl
dec
aam
push
sbb
dec
cmp
repz jb
gs mov
ja
shrl
sbb
iret   
stos
xchg
dec
call
jmp
movsl
pop
jae
pop
sbb
jno
mov
xchg
push
stc    
sbb
cmp
ja
insb
je
out
jae
sub
pop
into   
fwait
out
mov
pop
lock cmpsl
sub
fucomp
jns
add
dec
sti    
adc
lahf   
and
sub
jno
sbb
notb
push
loope
(bad)  
jle
loopne
mov
mov
mov
inc
push
dec
dec
incl
sbb
mov
aad
add
ret
sarl
inc
mov
std    
pop
out
fs int3 
pop
gs or
mov
and
cmc    
fcomi
leave  
cli    
int3   
cmc    
jb
arpl
fcmove
sbb
pop
(bad)  
pop
dec
cmp
rdtsc  
adc
ror
pop
rorl
(bad)  {%k6}{z}
cld    
mov
pushf  
add
mov
adc
and
push
dec
repnz lret 
mov
push
or
bound
xor
push
dec
mov
inc
xor
ljmp
leave  
or
(bad)  
in
mov
clc    
push
mov
cld    
imul
insl
(bad)  
inc
int
dec
sarb
sar
mov
xchg
add
sbb
jnp
push
lods
push
dec
nop
aaa    
dec
inc
pop
adc
nop
xor
push
int
int3   
test
jne
fadds
jecxz
cmp
in
and
xor
dec
clc    
outsb
fidivr
adc
rcll
ja
call
dec
(bad)  
dec
ficomp
cmp
cmp
jle
mov
sbb
adc
xchg
dec
jl
jbe
decb
in
xchg
mov
dec
mov
in
inc
in
xor
jecxz
imul
rorb
out
in
les
adc
and
inc
sub
or
cmp
aaa    
(bad)  
subb
push
push
repz loop
pop
dec
out
mov
in
rorl
push
les
inc
xor
fmuls
and
dec
xor
loope
xchg
clc    
and
add
repz add
or
push
add
test
mov
pusha  
mov
je
popa   
(bad)  
and
push
arpl
repz shr
out
mov
dec
pushf  
mov
pop
testb
jb
in
dec
xchg
ret
(bad)  
push
or
fidiv
aaa    
test
mov
mov
loopne
and
stos
or
icebp  
push
pop
inc
repz cmp
(bad)  
aas    
ds inc
ds pop
scas
mov
data16 stc 
out
idivb
inc
scas
mov
add
pop
xchg
lahf   
mov
mov
movsb
mov
insb
and
sarl
xor
xchg
mov
aaa    
sarl
inc
sti    
lock icebp 
push
mov
mov
and
push
cmp
cmpsl
loope
out
sbb
sahf   
pop
xchg
xchg
shr
mov
das    
out
repnz pop
cwtl   
or
js
mov
xchg
(bad)  
lret
jle
(bad)  
fdivs
(bad)  
loop
jbe
lcall
sbb
jno
arpl
or
xchg
or
jns
ss shr
dec
xchg
in
jnp
sub
rcll
push
(bad)  
aam
push
xorl
mov
mov
in
mov
cmc    
mov
repz add
das    
in
nop
inc
mov
xchg
rclb
push
rclb
loop
xor
int3   
xchg
inc
les
add
cltd   
sbb
rolb
std    
cmp
stc    
dec
ds cltd 
cmp
out
pop
repz push
in
aad
fldt
fcom
jns
(bad)  
cli    
xlat
mov
movsl
pop
xlat
jno
dec
xchg
outsb
mov
inc
xor
mov
loop
in
pop
jp
ds adc
lock rolb
push
testb
push
lret   
mov
adc
push
fild
jecxz
test
stos
adc
lods
mov
push
mov
mulb
cmp
call
xchg
xchg
push
lea
xchg
bnd lock js
jbe
loopne
cmp
pusha  
dec
test
jge
cs insl
pop
sbbl
dec
sarb
mov
je
(bad)  
pop
jns
mov
lea
mov
icebp  
out
jp
mov
inc
pop
rcll
gs jno
adc
or
xor
inc
mov
shrl
cmp
mov
xor
(bad)  
lock gs and
pop
pushf  
fiaddl
fwait
pcmpgtw
(bad)  
loop
xchg
cmp
inc
dec
cltd   
outsl
dec
in
or
xchg
mov
inc
scas
inc
push
mov
xor
inc
das    
xchg
ds or
adc
mov
rcr
jp
xchg
loop
ret
fcmovnu
push
sub
or
cmp
sbb
pusha  
das    
dec
je
xchg
(bad)  
or
test
mov
push
dec
lock sbb
add
add
divl
jbe
(bad)  
cmp
inc
lret
add
pop
add
mov
out
mov
sbb
and
mov
jl
sub
enter
lret
xchg
sub
loop
cmpl
pop
pop
(bad)  
sbb
jge
cmp
dec
es loope
(bad)  
loopne
inc
sub
das    
aad
inc
pop
dec
(bad)  
into   
mov
pop
pop
xchg
or
cmp
pop
inc
push
cmp
jmp
sub
addr16 lret 
or
aad
cltd   
xchg
xchg
jg
lahf   
lret
insl
orl
inc
sub
push
jo
divl
pop
mov
dec
jns
fsubrs
push
lret   
mov
jmp
inc
mov
mov
push
js
xchg
and
inc
aaa    
es stc 
add
sbb
sahf   
pop
add
rorb
or
push
hlt    
and
mov
adc
or
outsb
call
jns
and
dec
aam
pop
icebp  
into   
push
adc
out
xor
out
div
inc
fmuls
(bad)
fldenv
gs enter
add
daa    
aas    
dec
jnp
lcall
jo
stos
mov
mov
dec
enter
fwait
loopne
test
xchg
subb
sub
jmp
adc
mov
lcall
js
scas
js
sbb
mov
mov
push
and
pop
pop
sbb
dec
push
cld    
jo
(bad)  
clc    
or
leave  
shl
jb
push
out
inc
pop
jbe
mov
push
in
jecxz
mov
sti    
jns
hlt    
int
bound
or
dec
xchg
mov
pop
dec
xor
dec
push
push
push
adc
push
lea
pushf  
or
pop
ret
dec
pop
cmp
add
lret   
je
fldenv
loope
icebp  
fnstsw
xchg
pop
and
cs repz pop
in
test
inc
imul
ret
sbb
loopne
mov
add
rorb
mov
inc
pop
adc
pop
shlb
add
ljmp
inc
cli    
outsl
ret
mov
xor
pop
stos
pop
aas    
add
lcall
mov
or
push
fcoml
cs sub
push
aam
loope
dec
push
push
jle
xor
xorl
fldenv
jo
push
dec
sbb
std    
jmp
(bad)  
mov
lret   
fiadd
push
enter
daa    
cmp
andl
sahf   
add
jle
test
js
(bad)  
mov
ja
popl
xchg
outsl
push
inc
jae
mov
popf   
mov
aaa    
test
mov
rorw
leave  
push
insl
lahf   
pop
or
cmp
adc
adc
jmp
rolb
mov
inc
mov
and
cmp
mov
scas
(bad)  
xchg
std    
push
mov
adc
test
mov
jo
loop
jg
adc
dec
mov
mov
outsl
(bad)  
mov
sub
pop
push
push
loopne
push
repnz ljmp
gs pusha 
cmc    
push
lds
cmp
cmp
fwait
mov
sahf   
stos
pushf  
push
insb
leave  
ljmp
inc
mov
fcomps
and
push
and
xchg
movsl
fdivrl
inc
mov
pop
push
cs test
dec
mov
sti    
(bad)  
popf   
cld    
movsl
and
jl
ret
mov
or
jecxz
cmp
jp,pn
ds
mov
clc    
sbb
aam
pop
iret   
mov
xchg
xchg
leave  
sub
sahf   
mov
mov
and
jno
pusha  
ljmp
aas    
rorb
adc
test
popa   
out
cmp
lahf   
aad
ret
(bad)  
mov
pop
stc    
scas
xor
or
inc
inc
dec
and
dec
ss xchg
push
xchg
sub
movsl
mulb
jmp
jb
out
insl
sbbb
and
fdivl
popf   
jg
jns
nop
inc
inc
mov
cmp
gs mov
add
mov
jnp
popa   
aaa    
mov
cwtl   
add
sbb
mov
dec
push
or
pop
jbe
into   
push
mov
cmp
sbb
and
mov
or
pop
jnp
jge
in
pop
mov
aas    
adcl
push
jl
cmp
mov
movsb
jno
cmp
or
push
jb
lock frndint 
ljmp
sbb
(bad)  
pop
daa    
jge
jp
mov
dec
push
sub
lock lret 
add
enter
push
cmp
into   
loopne
mov
jno
loope
fsts
and
sub
sub
outsb
xchg
call
(bad)  
cmp
pop
xchg
insb
jae
rcrl
mov
sub
pop
mov
movsl
and
scas
and
sbb
adc
add
leave  
xor
fsqrt  
ja
or
stc    
sub
push
lods
std    
rcll
jns
into   
dec
ja
adc
in
and
(bad)  
je
movsb
arpl
aam
(bad)  
add
xor
mov
push
jb
pop
adc
sub
es pop
ret    
dec
adc
xor
xlat
mov
ret
inc
push
loope
jg
dec
inc
jbe
clc    
cmp
pop
and
insb
cs mov
adc
and
xor
(bad)  
in
add
cmp
add
rcll
adc
stos
(bad)  
lahf   
sbb
push
push
pop
pop
jp
xor
mov
fwait
pop
inc
xadd
(bad)  
xlat
int3   
cmp
daa    
pop
sub
leave  
mov
outsl
rcrb
dec
lods
repz stc 
ljmp
dec
push
xchg
leave  
xchg
insl
pop
add
and
mov
icebp  
outsb
pop
out
loope
pop
mov
in
fidiv
pop
loope
out
test
imul
jl
jae
movsl
jnp
adc
movsl
cs xor
xchg
je
mov
cmp
popf   
cli    
int3   
xchg
in
lret
adc
xchg
cmpsl
dec
(bad)  
dec
sub
xor
mov
push
bound
inc
or
adc
xorb
sub
sahf   
mov
push
jg
inc
pop
cmp
inc
mov
mov
inc
add
xchg
fwait
dec
cmp
mov
xchg
sbb
mov
stc    
(bad)  
adc
or
or
dec
and
sbbb
movl
cmpsb
adc
aaa    
mov
addl
or
push
pop
dec
cmp
stos
mov
ljmp
jno
(bad)  
imull
in
sbb
inc
jne
mov
std    
push
or
or
(bad)  
mov
cltd   
cmp
pop
outsb
and
lahf   
arpl
(bad)  
mov
or
test
cmp
and
fwait
sti    
call
rorb
gs out
mov
xchg
ljmp
xor
mov
fsubr
lret   
mov
lret   
fdivr
icebp  
pop
cltd   
(bad)
outsl
or
and
xlat
stos
int
adc
in
push
xor
mov
fdivrp
xchg
call
dec
je
push
jne
test
test
pop
icebp  
mov
sub
lcall
(bad)  
fbstp
loope
gs addr16 ja
les
test
icebp  
push
ret
ret
jle
pop
fsubs
lret   
dec
cs xchg
fisubr
mov
shrb
stc    
aas    
add
pushf  
dec
sarb
sbb
in
mov
iret   
cwtl   
cmc    
push
cmpsb
push
js
fnop   
and
int3   
jp
jmp
inc
jmp
test
(bad)  
sub
loopne
jle
insb
jmp
push
out
sub
push
enter
popf   
fdivs
dec
out
pop
pusha  
cmp
jo
daa    
push
imul
mov
stc    
shr
shlb
xchg
pop
paddsb
cmp
push
sub
mov
movsb
lea
and
daa    
daa    
fnstenv
cmp
cwtl   
add
les
sbb
lds
fiaddl
cmpsb
insb
sub
ret    
push
jle
sbb
mov
cmp
leave  
sub
mov
std    
pop
lods
lcall
fimul
xorb
xor
sbb
dec
out
cld    
in
jns
cltd   
insb
pop
repz add
mov
iret   
scas
loopne
int
pusha  
mov
nop
iret   
jecxz
lods
aas    
int
sbb
shr
ljmp
xchg
in
pop
mov
lods
or
pushf  
ss push
out
mov
inc
sub
cmc    
pop
mov
sahf   
xchg
dec
bound
xchg
out
sahf   
pop
xchg
sub
rcl
loopne
movsl
ret    
adc
cmc    
loope
mov
out
adc
mov
inc
jmp
dec
xlat
mov
in
push
or
rol
(bad)  
ljmp
add
lret   
pop
add
notb
inc
(bad)  
insl
in
add
out
jge
jb
lods
(bad)  
xor
mov
sbb
xchg
push
adc
add
inc
sub
sbb
repnz xorl
jecxz
int
insb
pop
mov
add
mov
(bad)  
jbe
dec
push
cmp
out
jg
jmp
xchg
fcmovnb
dec
in
loopne
test
(bad)  
(bad)  
or
lret   
jp
jge
leave  
and
(bad)  
ss insb
push
xor
ktestw
push
inc
cli    
aaa    
jmp
push
out
fisubrl
enter
or
fstpt
cmp
and
loope
adc
(bad)  
adc
inc
cli    
dec
neg
rcll
test
test
into   
or
lods
add
mov
test
fmulp
push
push
pminub
scas
fnstsw
cmpsl
adc
outsb
mov
mov
push
aad
stc    
mov
cwtl   
loope
mov
aam
xor
pop
push
or
loopne
jge
xchg
insb
dec
mov
test
fcmovne
outsb
call
adc
xor
pop
mov
jbe
pop
and
push
outsb
jns
in
xchg
rolb
xlat
cmc    
addr16 sbb
mov
aaa    
mov
jnp
mov
fwait
mov
sbb
jmp
pop
sub
popf   
js
inc
mov
hlt    
dec
bound
js
inc
sub
arpl
in
lods
insl
sub
(bad)  
divl
inc
mov
call
jo
icebp  
sbb
nop
ror
add
mov
pushf  
or
int3   
cs test
or
mov
adc
out
pop
pop
jbe
fsubl
repz das 
and
mov
mov
jne
adc
add
test
or
mov
arpl
(bad)  
xchg
lcall
or
repz mov
shlb
and
cltd   
push
into   
push
lret   
sbb
jno
pop
ret
mov
bound
movsb
push
cmp
mov
clc    
(bad)  {%k6}{z}
jmp
jp
scas
sub
out
inc
push
jae
movsb
call
or
out
iret   
jo
sbb
push
mov
movsl
cmpsb
ss and
mov
sbb
not
sbb
jnp
repz test
ja
xor
cmp
icebp  
dec
cmp
mov
add
dec
aaa    
cltd   
lock imull
divl
mov
cmp
sub
adc
jle
cmpl
xchg
jnp
pop
imul
mov
push
mov
cli    
roll
and
add
or
(bad)  
cwtl   
scas
movsl
xchg
fcomp
test
xor
pop
lods
pushf  
andb
std    
nop
out
push
(bad)  
repz and
add
push
lret   
add
xor
into   
and
add
push
xchg
mov
jg
sub
inc
sarl
pop
or
dec
sub
sub
xchg
iret   
adc
mov
xchg
adc
std    
insb
daa    
roll
out
push
fisttpll
sub
jge
call
bound
daa    
push
lock fs js
aaa    
jae
pop
dec
cmp
mov
push
popf   
insl
lods
scas
in
mov
out
ret    
xorl
or
aad
push
push
mov
jmp
mov
popf   
inc
adc
aaa    
xor
and
pushf  
mov
xor
push
movsb
ljmp
das    
pop
add
mov
outsl
inc
push
dec
xlat
test
rclb
pcmpeqb
mov
clc    
cmc    
xchg
nop
xchg
adc
fmull
stos
sti    
mov
lret
sbb
push
mov
fiaddl
imul
stos
rclb
xor
inc
mov
mov
movsb
xchg
(bad)  
jle
and
test
test
leave  
push
aad
cmc    
ljmp
push
adc
push
push
cmc    
cmp
or
(bad)  
add
nop
mov
sbbb
inc
icebp  
scas
clc    
outsb
inc
outsb
ja
jmp
and
xchg
test
repz push
loopne
insb
dec
and
loope
mov
dec
aaa    
jecxz
sub
js
mov
and
or
mov
test
mov
mov
push
jno
movsb
xor
(bad)  
out
push
stos
adc
sbb
out
mov
stos
int
dec
pop
aas    
xor
dec
and
push
data16 jg
jle
(bad)  
ss sti 
mov
dec
nop
rcr
imul
fsub
mov
xor
add
xchg
insb
in
dec
test
stos
and
int3   
fs lret 
cmpsl
rolb
cltd   
mov
dec
or
je
and
cmp
addr16 mov
xlat
fwait
rcrl
clc    
pop
add
pop
jbe
movsl
or
push
add
jae
adc
int3   
stos
or
mov
call
decb
pushf  
adc
push
(bad)  
rcrb
sbb
add
mov
push
push
shr
and
pop
shl
fist
aam
outsb
lret
lea
sub
es xchg
lods
fdivl
jns
das    
(bad)  
jne
hlt    
jbe
or
cmp
adc
scas
gs xchg
pop
push
iret   
fstpl
movsb
jle
mov
je
daa    
add
xor
icebp  
xor
mov
xorb
and
dec
dec
movsl
adc
scas
pop
lds
xchg
sub
mov
mov
mov
loopne
lret   
lods
insb
pop
out
push
imul
clc    
leave  
mov
imul
lea
orl
dec
gs pushf 
das    
insl
and
mov
jnp
lea
fs rcl
in
adcl
ds lahf 
xchg
jmp
xchg
jae
repz data16 cmp
inc
sub
mov
jns
aaa    
imul
loope
test
jecxz
mov
rcrb
mov
rolb
sbb
jge
lods
mov
insb
dec
lods
xor
test
repnz mov
popa   
cld    
add
sti    
pop
mov
test
mov
mov
mov
mov
loopne
clc    
and
jg
inc
icebp  
mov
jb
sub
xor
rcrb
add
or
inc
sbbl
fdivs
jnp
jbe
pop
mov
xor
or
jmp
loop
pop
and
dec
and
sub
xchg
cs fs sti 
pop
jns
mov
out
jge
push
test
add
push
pop
mov
push
xchg
incl
cmp
es sub
mov
sub
roll
push
push
xor
mov
pop
add
stc    
dec
push
push
int
insl
outsl
adc
out
jmp
sub
loopne
and
lea
jbe
push
adc
loopne
test
pop
add
frstor
sub
add
out
push
imul
outsb
lods
cs pop
xor
daa    
pop
pop
cmp
aaa    
xor
mov
pop
add
(bad)  
or
and
loopne
sarl
add
and
mov
(bad)  
lahf   
mov
lock rol
in
or
sti    
push
xor
stc    
fisttp
xchg
mov
add
cmc    
setle
and
inc
xchg
mov
fildll
inc
cmp
das    
push
xchg
(bad)  
sbb
adc
imul
sti    
aas    
inc
ret
xor
mov
or
mov
movsl
mov
test
mov
pop
outsb
ljmp
push
add
(bad)  
test
xchg
(bad)  
xlat
inc
push
or
(bad)  
mov
sbb
mov
popf   
(bad)  
mov
add
iret   
loope
clc    
loope
lods
repnz pusha 
ss jg
sbb
mov
mov
icebp  
mov
mov
sbb
nop
(bad)  
mov
ja
jl
mov
insb
jle
dec
cli    
mov
xchg
push
cwtl   
jg
xchg
push
push
gs repz mov
popf   
xchg
(bad)  
mov
aam
pop
and
fadds
jno
push
out
or
sti    
sub
dec
lret   
outsb
mov
adc
jae
xchg
daa    
pop
inc
jg
(bad)  
add
sbb
std    
stc    
cld    
add
push
xorb
pop
in
xchg
ficoml
or
mov
(bad)  
jnp
call
push
push
pop
loope
xor
popa   
fnstenv
xchg
lcall
xor
in
jnp
inc
ljmp
iret   
xor
adc
mov
and
xor
xchg
shl
pushf  
push
cmpsb
call
inc
(bad)  
outsl
sahf   
fidivr
sbb
(bad)  
xor
mov
or
pop
clc    
add
jl
imul
jno
jp
ljmp
cmp
xchg
inc
cmp
fstps
jecxz
ffreep
pop
xchg
ret    
and
sahf   
mov
mov
pop
and
icebp  
ret    
pop
jne
out
scas
cmp
loopne
dec
push
xor
js
pop
add
repnz loop
dec
fsubs
sub
out
xor
lcall
adc
sahf   
mov
sub
cs push
cmp
sub
cmp
jecxz
sbb
test
js
sti    
leave  
add
cli    
stc    
jmp
mov
pushf  
addr16 aas 
dec
bound
hlt    
out
ljmp
pop
sbb
ja
sbb
jmp
jae
sbb
push
push
sbb
in
test
adc
sub
fadds
push
fldcw
out
jne
addr16 sbb
mov
cs aaa 
mov
clc    
inc
mov
mov
push
lods
jecxz
mov
mov
daa    
sbb
mov
movsb
push
hlt    
adc
(bad)  
jne
cmp
mov
negb
imul
(bad)  
xor
sbb
and
mov
and
popf   
pop
mov
add
mov
test
pop
popf   
sub
fwait
test
mov
adc
shlb
cmpsl
jl
push
pushw
and
leave  
out
sarb
and
int3   
xlat
mov
(bad)  
jns
jp
in
jmp
ljmp
es mov
rcll
mov
adc
lods
sbb
dec
pop
pushf  
xchg
push
je
rcll
and
stc    
xor
inc
mov
leave  
loopne
cmp
cld    
(bad)  
lods
jnp
pop
add
xor
outsb
out
pop
dec
mov
nopl
outsl
mov
xor
inc
mov
fwait
lret
mov
ret
out
andl
mov
ret    
mov
jno
les
shrb
fcoms
jns
stos
cs mov
cmp
jne
shrl
insb
icebp  
mov
nop
in
adc
lods
fcmovnb
mov
adc
mov
cmp
(bad)  
lods
mov
jle
inc
fbstp
mov
sbb
insb
imul
cmp
inc
xchg
xor
sub
imul
outsl
sbb
mov
movsb
sbb
add
lahf   
cmp
loopne
pop
lcallw
and
add
arpl
mov
sbb
(bad)  
cs push
inc
sbb
xchg
cmp
push
sahf   
cmc    
and
mov
(bad)  
mov
(bad)  
xor
fs loope
sti    
adc
jne
sbb
loopne
shrb
out
je
rcr
dec
pop
or
outsb
lods
add
sbb
pop
test
and
pop
into   
lret   
push
mov
jne
test
push
(bad)  
clc    
out
lods
jae
fnop   
sbb
push
stos
loope
ds mov
ja
sub
jbe
adc
int
add
jbe
cltd   
jle
clc    
sub
enter
popa   
add
xor
fadd
inc
mov
adc
xchg
cmpsl
mov
lea
in
sbb
jle
and
ss dec
mov
jecxz
sub
(bad)  
lock xor
sbb
cli    
sti    
xor
(bad)  
fstp
in
mov
fistpll
fwait
pop
cmpsl
adc
stos
movsl
fdivrp
arpl
jns
test
sbb
cwtl   
sti    
or
cli    
push
adc
jp
mov
stos
xlat
imul
lock
or
xor
out
push
(bad)  
(bad)  
fisttpll
mov
scas
gs sbb
lea
xchg
sub
mov
out
push
cmpsb
hlt    
jno
rorb
mulb
pop
lods
sub
loop
jmp
(bad)  
in
icebp  
sbbl
cmp
mov
(bad)  
flds
addr16 push
xor
mov
pop
lods
insb
ljmp
iret   
movsb
and
add
sub
cmpsl
lret   
or
jp
rorb
leave  
mov
(bad)  
cmp
dec
incl
dec
imul
cmc    
in
out
jmp
stos
adc
mov
xchg
mov
sub
jns
(bad)  
insl
lock jg
rcll
xor
aad
jns
inc
sbb
cmp
jge
popa   
pop
sbb
cwtl   
pop
push
(bad)  
jmp
jp
adc
dec
add
js
mov
xchg
fist
(bad)  
or
jle
cmp
loope
cmp
mov
movsl
insb
adc
pop
fsts
jnp
xor
addr16 cmp
ret    
(bad)  
(bad)  
adc
(bad)  
jmp
mov
adc
(bad)  
push
fmull
cmp
pop
pop
cwtl   
in
movsb
cltd   
xchg
lods
or
cmpsb
mov
cmpsl
and
stos
sbb
lret   
push
scas
mov
jbe
add
repnz loope
fisttpll
mov
into   
pop
xor
idivl
loopne
xchg
in
in
rorl
push
add
xchg
and
and
loopne
inc
add
dec
dec
fldl
mov
push
and
popl
fcoms
mov
or
jnp
adc
adc
out
in
cmc    
pop
cwtl   
lock pop
fsubr
pop
ss sub
flds
adc
mulb
out
clc    
mov
roll
jns
test
test
pop
dec
sbb
jno
fs jns
mov
push
push
sub
add
test
ja
and
and
sub
pop
xchg
fdivs
iret   
fildl
jno
icebp  
aad
rorl
push
lahf   
movsb
jmp
imul
fldl
inc
leave  
push
mov
add
bound
jle
mov
popa   
xchg
sub
mov
mov
dec
lock out
dec
outsb
jne
jne
flds
sub
arpl
cli    
pop
mov
decb
dec
mov
mov
pushf  
pop
pop
jne
test
into   
divb
cmp
adc
cmpsb
sub
push
xchg
lock test
add
push
pop
out
mov
dec
sbb
daa    
mov
mov
lcall
mov
adc
jp
jno
aam
in
add
dec
rclb
or
xchg
jg
popf   
pop
mov
adc
test
mov
cmovp
or
daa    
data16 int
adc
mov
leave  
add
fisubl
dec
cltd   
add
call
(bad)  
xor
addr16 mov
jno
daa    
bnd jb
mov
popf   
dec
test
and
pop
test
popf   
sbb
jle
pop
cld    
pop
add
loop
jge
fs push
cmpsb
mov
mov
fcompl
add
mov
mov
cltd   
fldcw
sbb
dec
out
repz test
fidivr
neg
sub
mov
(bad)  
clc    
xchg
pop
imul
xor
lahf   
dec
xchg
jle
or
adc
cmp
fld
sbb
test
imul
mov
loope
data16 mov
loop
test
aas    
jbe
jb
imul
mov
mov
lds
push
inc
push
test
mov
xchg
xor
pop
jo
push
mov
scas
add
ljmp
int3   
mov
pop
push
int3   
mov
sub
in
bound
jl
and
js
les
rclb
mov
mov
xor
jo
mov
rorb
fisttp
out
fsub
cmp
sbbb
sbb
push
xchg
daa    
das    
push
pop
lods
js
mov
push
cwtl   
(bad)  
adc
jae
dec
fld
adc
enter
pop
stc    
add
inc
mov
mov
cmp
stos
sub
dec
imul
repnz jecxz
sbbl
inc
pop
dec
lods
jo
push
xor
fimul
adcl
pop
and
int
mov
adc
sub
and
sub
outsl
adc
and
dec
cltd   
scas
les
xlat
mov
sbb
rolb
pop
mov
pop
(bad)  
jp
cs ljmp
test
call
outsw
dec
leave  
in
hlt    
or
mov
fwait
pop
jb
int3   
(bad)  
jmp
pop
test
sti    
push
test
movsb
sub
mov
jmp
call
out
std    
call
and
adc
ret
cmp
rcr
int3   
add
jnp
scas
fwait
add
xor
daa    
pop
mov
cmp
leave  
mov
ljmp
adc
fist
imul
mov
dec
inc
mov
lret
lock leave 
push
jne
mov
and
jne
aaa    
lods
mov
pop
sti    
inc
jae
fsub
or
mov
pushf  
imul
stos
mov
ds dec
mov
mov
xchg
into   
xchg
mov
(bad)  
add
lahf   
inc
insl
sub
rorl
pop
mov
mov
and
cmc    
add
sbb
cmp
fsubl
imul
pushf  
clc    
int
mov
andl
xor
aaa    
roll
enter
dec
pop
movsl
xchg
in
fldcw
mov
hlt    
and
ljmp
popw
push
lahf   
cli    
mov
push
(bad)  
add
xchg
lods
test
xchg
loop
fdivrs
fwait
or
test
dec
push
add
popa   
in
test
mov
bswap
mov
mov
mov
or
movq
add
loop
adc
imul
fist
cmc    
(bad)  {%k6}{z}
hlt    
pop
in
aam
or
mov
bnd call
dec
test
stc    
(bad)  
loopne
pop
or
cmp
mov
mov
test
lea
push
or
mov
mov
cmpsl
and
mov
in
sbb
or
jg
cli    
in
insb
cltd   
cmp
cmpsl
and
jecxz
roll
scas
pusha  
lcall
cmp
jb
js
push
or
mov
xor
sbb
in
(bad)  
jmp
scas
leave  
mov
push
add
mov
mov
stc    
nop
inc
outsl
sbb
pop
pusha  
mov
jp
push
jnp
xchg
vpminsw
repz repnz
dec
out
jl
jnp
(bad)  
push
pop
test
(bad)  
adc
(bad)  
xor
sub
jecxz
xlat
xor
lock mov
lods
movsl
cmp
pop
stc    
fisubr
ljmp
push
loope
push
(bad)  
dec
fucomp
sub
cwtl   
rclb
repnz fmull
cmc    
pop
push
inc
mov
pop
jbe
jge
dec
sbb
mov
mov
in
data16 sahf 
pop
js
cmp
sbb
leave  
sbb
adc
adc
pop
(bad)  
inc
sub
cs or
adc
xchg
mov
fidivr
(bad)  
mov
pop
lcall
add
push
out
aad
imul
and
mov
iret   
cmp
fucomi
call
jb
mov
cs clc 
sub
xchg
ficompl
ret
xchg
iret   
mov
gs js
sub
mov
push
int
jnp
mov
push
(bad)  
daa    
out
adc
insb
inc
mov
mov
and
aam
(bad)  
int
cld    
fisubl
and
and
cltd   
fstl
adc
call
sbb
add
rorl
sub
mov
xchg
cmpsb
sbb
and
xchg
xchg
fimul
sub
movsb
cwtl   
sub
xchg
add
push
out
xor
xlat
and
mov
or
insl
pop
outsb
inc
les
aaa    
in
inc
push
jns
inc
(bad)  
fistpl
add
or
bnd ret
and
movsb
iret   
jne
movsl
(bad)  
(bad)  
sbb
aas    
xchg
xchg
xchg
xorl
jle
and
adc
pushf  
xchg
pop
and
or
test
rcl
(bad)  
call
mov
add
push
and
pop
jno
idivl
sbb
mov
daa    
loop
fcomip
jb
mov
lods
bnd je
ret
add
out
sub
sbb
push
stos
pushf  
push
add
test
pop
dec
lea
loope
out
pop
and
push
cli    
lods
aas    
cmp
sbb
cld    
scas
fs
(bad)  
je
xchg
jge
mov
fucom
xor
inc
nop
imul
lods
test
push
movsb
daa    
sbb
push
sub
jns
mov
xor
ja
sbb
cs mov
ljmp
arpl
pop
xchg
cmpsl
scas
ret    
(bad)  
(bad)  
jo
ja
popf   
push
repz push
sbb
out
jl
shl
cmpsb
add
sub
and
inc
mov
(bad)  
jbe
rcll
and
adc
push
mov
xor
mov
arpl
xchg
push
jne
pop
leave  
dec
sbb
rep stos
jne
jmp
add
dec
sbb
xchg
(bad)  
add
ljmp
imul
jge
gs cmp
leave  
fnstsw
or
add
xchg
or
ljmp
mov
pop
xchg
jb
pop
nop
nop
cmp
sub
(bad)  
push
imul
rorb
mov
hlt    
imulb
add
adc
shr
mov
adc
std    
mov
mov
add
inc
add
mov
fdivrl
jmp
xchg
push
(bad)  
shr
jae
imul
mov
enter
and
cld    
or
push
xchg
scas
push
and
jle
hlt    
or
jp
sub
je
scas
mov
inc
sbb
aam
lods
je
in
sbb
mov
jno
add
pushf  
pop
icebp  
cmp
lret   
ljmp
daa    
mov
std    
cmpsl
sbb
enter
mov
hlt    
in
pop
and
loope
push
fucomi
aaa    
adc
jge
rol
cmp
mov
into   
mov
mov
cmp
xchg
(bad)  
pop
lock out
popl
jnp
in
fmul
sub
loope
repnz dec
xchg
aas    
xor
jecxz
sahf   
lock jp
or
xchg
mov
mov
mov
sbb
in
sub
je
jp
rorb
imul
(bad)  
decb
jmp
lds
inc
repnz mov
push
lock mov
fiaddl
mov
jecxz
jmp
sbb
test
bound
mov
sbb
xchg
and
into   
in
mov
enter
ficom
ret    
mov
insl
in
dec
add
hlt    
mov
dec
(bad)  
mov
push
insb
movsb
jo
ficoml
or
xchg
popa   
xor
enter
sahf   
daa    
mov
mov
push
cmpsl
stc    
aas    
test
cmp
mov
or
pop
inc
jnp
dec
mov
push
xchg
test
cmc    
pushf  
sahf   
jb,pt
sub
mov
loopne
push
xchg
insb
cmpsl
loopne
and
imul
dec
sub
out
aam
dec
push
aas    
sarb
stc    
jmp
lea
lods
mov
cld    
xchg
fnstenv
jne
mov
imul
push
sbbl
mov
mov
stos
(bad)  
sbb
negb
data16 mov
lods
jb
dec
pop
dec
push
mov
loope
dec
push
adc
cmp
adc
jle
add
xchg
push
in
iret   
mov
cmp
aaa    
lea
sbb
ror
cmp
cmpsl
sbb
jge
mov
adc
pop
cli    
dec
dec
rcr
outsl
cmp
push
mov
aad
mov
jno
testb
mov
js
popa   
insl
push
dec
jno
pop
mov
cs pushf 
pop
cmp
in
flds
in
dec
stos
jb
xlat
aam
outsl
cmp
xlat
fwait
mov
fisubl
ret
cli    
xor
pop
mov
cmp
pop
sbb
jg
add
stc    
cs ret 
jo
repz pop
jae
movsb
je
(bad)  
push
js
mov
stos
fwait
dec
add
popf   
int3   
stos
pop
add
sbb
jge
daa    
sub
inc
repnz pop
jnp
int
fisttpll
or
or
xor
dec
add
inc
adc
notl
lcall
fdivs
mov
sub
adc
sub
outsl
cli    
lret   
xor
jbe
add
sub
push
or
(bad)  
xor
sbb
dec
xor
sbb
cmp
out
fiadd
loop
adc
fisttpl
js
mov
outsb
jo
nop
(bad)  
push
mov
scas
shl
mov
jo
xchg
pop
push
mov
xchg
mov
push
clc    
jbe
ja
jl
outsl
add
in
dec
xlat
iret   
lcall
das    
rclb
inc
xor
ret
push
pusha  
mov
cmp
inc
clc    
adc
test
call
cmpsl
push
pop
mov
jae
(bad)  
aaa    
ja
imul
cs pop
popf   
loop
mov
xchg
xchg
icebp  
add
sub
sub
sar
xor
pop
sub
dec
sti    
in
mov
pop
fisubrl
inc
or
(bad)  
or
xchg
adc
mov
jle
mov
and
sbb
in
push
outsl
aaa    
jp
xor
mov
leave  
mov
dec
dec
out
add
pop
mov
xchg
xor
shrl
pop
ss in
frstor
and
dec
je
add
dec
ret
outsb
mov
inc
push
popa   
add
cli    
ret
inc
xchg
lods
pop
add
pop
push
aam
jae
pop
add
mov
lea
pusha  
enter
in
push
mov
out
loopne
mov
inc
xor
(bad)
imulb
inc
mov
adc
int
xchg
xor
xchg
add
aas    
mov
or
lret
stos
add
pop
jmp
xchg
ljmp
push
inc
enter
fucomip
cs fs int3 
inc
fldenv
jno
xchg
outsb
cmp
dec
in
test
sbb
fwait
or
xchg
gs xchg
out
mov
push
pushf  
and
nop
jge
ja
arpl
xor
jnp
imul
mov
mov
hlt    
lods
sbb
pusha  
gs pop
dec
or
push
insl
mov
xorl
jmp
pop
mov
and
ss es insl
adc
scas
cmp
test
mov
push
rolb
std    
jecxz
jne
xchg
inc
ja
aad
sbb
mov
pop
xorb
notl
lods
xlat
or
mov
dec
push
ret    
jbe
fcomps
inc
stos
cli    
cli    
push
ret
jecxz
mov
std    
mov
and
addr16 lea
(bad)  
jae
stos
pop
jb
mov
repz inc
jns
lret   
mov
test
cmp
movsl
xchg
cs inc
xor
pop
pop
xchg
and
cs insl
test
or
pop
push
lds
inc
mov
push
adc
data16
loopne
sarl
(bad)  
cwtl   
ret    
hlt    
jmp
ret    
sbb
outsb
push
getsec 
in
sub
sbb
sub
repnz mov
fsubs
sub
scas
xchg
out
or
add
dec
push
sub
gs pop
mov
cltd   
sub
enter
lock sbb
push
and
fs cld 
add
mov
call
pushl
inc
mov
(bad)  
in
mov
bswap
push
pop
mov
dec
jge
sahf   
fiadd
mov
dec
fxch
add
adc
ds pop
cmp
stos
or
clc    
js
and
pop
pop
fwait
jmp
lret
mov
enter
idivl
arpl
cwtl   
adc
nop
push
xor
push
addr16 jbe
int
ds xchg
fwait
cmpsl
jmp
and
or
mov
cmp
mov
lahf   
xchg
push
rcrb
add
add
adc
pop
inc
jle
jmp
inc
jecxz
scas
repnz pop
xchg
mov
rclb
(bad)  
iret   
leave  
xchg
mov
(bad)  
mov
aam
hlt    
mov
cmpsb
(bad)  
fidivr
(bad)  
cmp
mov
stc    
mov
xchg
insl
outsb
cmpsl
mov
fbld
cmp
fisubl
or
les
jecxz
in
xlat
sarb
jno,pt
sbb
(bad)  {%k6}{z}
idivl
dec
cs aam
arpl
lods
mov
jb
inc
les
addr16 add
xor
jmp
loope
das    
in
enter
repnz cld 
xchg
cmp
std    
(bad)  
jmp
mov
orl
and
add
pop
pusha  
in
addr16 fucomi
jg
add
mov
not
mov
out
insl
add
pmulhuw
pop
call
in
insl
repz xchg
lds
add
lea
cmpb
pop
icebp  
push
dec
(bad)  
fdivs
call
pop
icebp  
pushf  
stc    
dec
sbb
jb
sbb
push
in
adc
jns
xchg
fsub
xchg
lcall
push
jae
sbb
das    
loop
int
xchg
inc
push
sti    
add
adc
adc
jecxz
addb
adc
gs or
fldt
pop
lods
xor
push
jbe
je
aaa    
jmp
push
push
sbb
adcb
fadds
cmp
or
std    
popf   
cmp
aad
cwtl   
(bad)  
mov
sahf   
jmp
dec
pop
mov
dec
push
xchg
fbstp
arpl
aaa    
in
(bad)  
sub
adc
and
sbb
xchg
adc
add
add
dec
inc
dec
inc
scas
inc
pusha  
(bad)  
or
add
add
(bad)  
(bad)  
(bad)  
incl
add
add
add
add
add
add
jns
je
insl
cs inc
jb
ja
outsb
addr16 sub
push
gs jb
imul
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
xor
data16 aaa 
xor
fs xor
add
adc
gs insl
cs inc
jb
ja
outsb
addr16 cs inc
imul
add
popa   
je
pop
add
add
add
add
add
lsl
add
jno
add
add
or
or
add
or
add
add
add
dec
or
add
add
(bad)  
and
add
add
inc
dec
inc
add
mov
or
popa   
add
jo
pop
jae
add
ret    
add
push
ret    
add
outsl
test
add
cmp
push
push
test
outsl
scas
add
mov
stc    
movsb
mov
push
shlb
leave  
fwait
sub
or
push
jmp
mov
xchg
aam
sub
into   
dec
ss dec
leave  
mov
inc
pop
je
enter
mov
popf   
icebp  
or
push
sbb
mov
add
sbb
cltd   
lods
icebp  
pop
pop
in
(bad)  
jle
pop
int
and
or
mov
mov
test
bound
xor
cmpsb
movsl
subb
jecxz
pop
ja
xchg
mov
insl
pop
insb
mov
popa   
xlat
inc
push
mov
enter
cmp
(bad)  
inc
jmp
add
addr16 pop
mov
xor
mov
mov
push
xlat
mov
push
sbb
or
fisubr
cmp
dec
js
jbe
addr16 out
pop
(bad)  
mov
dec
add
dec
orl
push
pop
(bad)  
xor
nopl
sbb
idivb
mov
ja
or
mov
lret
pop
clc    
dec
push
or
sub
mov
push
sbb
and
int
addr16 sub
popf   
cmp
faddl
inc
and
sub
xlat
pushf  
mov
push
mov
jns
cltd   
arpl
stc    
lea
aas    
inc
cmpsl
ja
lods
mov
loope
rolb
cmp
ss iret 
js
sbb
das    
sbb
lea
xor
popl
xchg
in
in
xor
cmp
stos
xchg
ja
popf   
lods
pusha  
adc
dec
adc
jmp
dec
lods
stos
cmp
mov
mov
rorb
int3   
mov
mov
lods
(bad)  
inc
sbb
sub
add
add
popf   
mov
push
cs int3 
out
sub
inc
lcall
aam
sti    
mov
adc
subl
lock pop
mov
cmpsb
mov
fsqrt  
mov
cmpsl
jmp
fsubrs
mov
lods
inc
insl
jo
fadd
ror
and
(bad)  
repz cli 
push
inc
sub
xchg
inc
pop
fist
dec
cld    
xchg
clc    
mov
mov
enter
std    
cli    
dec
jmp
mov
dec
mov
adc
nop
cld    
test
jbe
(bad)  
in
fsubrs
aaa    
scas
push
nop
mov
repz inc
sbb
fistp
subb
inc
lock add
clc    
xor
pop
mov
daa    
cld    
loopne
andl
into   
pop
mov
out
mov
pop
add
andb
aas    
cmp
adc
jl
mov
and
adc
flds
ds adc
sbb
adc
cwtl   
add
aaa    
pop
lret   
xchg
in
data16 fs int3 
iret   
ret    
xor
inc
rclb
hlt    
lock dec
dec
outsb
push
in
push
dec
js
pop
jbe
clc    
pop
sarl
jl
imul
insl
pop
fwait
jo
gs inc
mov
das    
dec
in
mov
xchg
lahf   
loop
jns
aas    
aad
es aam
pop
mov
cmpsb
adc
cmp
nop
scas
pop
movlps
add
out
push
adc
jb
adc
pop
mov
inc
(bad)  
arpl
fimull
jbe
imul
jg
and
cli    
fistpll
sbb
movsb
in
(bad)  
xchg
cmpsb
xchg
mov
scas
xor
xchg
mov
fisubrl
fadds
adc
cmp
and
rolb
in
xchg
jnp
pusha  
loope
fwait
cld    
cmpsl
mov
lds
aas    
(bad)  
mov
mov
js
decl
cltd   
inc
and
lcall
and
fucomp
aaa    
das    
fucomi
je
out
lea
stos
fs pop
pop
stos
cmp
xlat
ret
inc
dec
imulb
mov
add
fwait
push
xchg
popf   
(bad)  
xlat
in
call
cmp
xchg
in
dec
mov
stc    
pop
cltd   
fsub
lret
test
aas    
decl
sbb
xor
mov
sub
in
ja
popf   
pop
aad
outsb
in
imul
aam
jge
dec
fcoms
shl
pusha  
xchg
int3   
xlat
dec
dec
xor
sahf   
xchg
sbb
arpl
sbb
mov
jae
dec
push
stc    
(bad)  
mov
popa   
out
inc
dec
push
bound
cmp
jae
repz lcall
fs mov
lea
icebp  
daa    
push
push
xchg
int
pushf  
mov
inc
jge
xor
cld    
mov
or
in
lcall
jno
or
js
in
inc
dec
xor
out
sub
sub
(bad)  {%k6}{z}
push
cld    
icebp  
imul
inc
call
cwtl   
aam
sbb
(bad)  {%k6}{z}
lret   
mov
cltd   
jg
mov
add
insl
jno
jnp
gs pop
aad
or
mov
xor
xor
icebp  
and
stos
mov
loope
call
into   
xor
push
xchg
cld    
imul
ja
dec
pop
add
(bad)  
xor
test
fwait
lea
xchg
and
insb
nop
pusha  
js
(bad)  
jno
xchg
leave  
sub
in
inc
mov
mov
loop
stos
cmc    
mov
sub
(bad)  
inc
dec
push
inc
xchg
inc
(bad)  
mov
lock mov
push
enter
flds
lock pop
or
pop
pop
push
sbb
insl
jb
push
mov
lods
pop
mov
add
cmc    
mov
mov
or
push
aam
lds
mov
xor
inc
cmp
xor
(bad)  
mov
(bad)  
and
scas
inc
mov
es dec
in
int
scas
sbb
jo
imul
movsl
xchg
rcl
test
cmpsl
std    
out
mov
ret
kmovb
push
sahf   
xor
out
xchg
pop
int
rorl
adc
jnp
lds
inc
cltd   
jg
(bad)  
mov
loop
fcomp
addr16 xchg
lret   
rclb
inc
jge
es mov
out
xor
mov
(bad)  
cmp
(bad)  
mov
out
lds
out
(bad)  
call
fstpl
icebp  
xchg
sar
inc
and
rcrl
popl
in
imul
incl
(bad)  
xchg
mov
jae
fst
les
mov
lcall
dec
xchg
scas
fistpll
(bad)  
cmp
arpl
dec
push
rorb
mov
je
xchg
dec
dec
mov
test
add
xor
fs cmp
stos
scas
pop
cmp
out
sarb
and
mov
add
and
(bad)  
in
add
xor
dec
(bad)  
cwtl   
je
sub
aad
iret   
adc
xor
sbb
cmp
fwait
repz jno
pop
out
push
and
daa    
jge
jl
push
scas
and
out
mov
and
mov
xchg
sub
xchg
int
rorb
inc
jne
aaa    
jecxz
push
cmp
xchg
mov
(bad)  
pop
dec
aad
adc
movsb
aad
out
dec
and
dec
sub
xor
rol
xchg
cmc    
nop
add
xchg
push
imul
insb
jle
cmp
icebp  
outsl
es sub
mov
aad
or
bound
add
mov
cmc    
adc
test
daa    
and
add
mov
lods
push
rep outsb
adc
mov
jle
mov
addr16 jbe
(bad)  
jo
dec
pop
cwtl   
mov
ret
xchg
dec
rolb
jnp
push
xchg
jp
inc
out
outsb
sbb
xor
push
mov
inc
jle
sbb
ret
icebp  
mov
aas    
daa    
lods
push
xchg
pop
or
inc
iret   
hlt    
test
mov
cmp
scas
enter
repz pop
cs xchg
mov
mov
jno
mov
lahf   
(bad)  
ret    
dec
lret   
inc
inc
imul
lcall
clc    
fisubrl
das    
dec
hlt    
sbb
int3   
out
xchg
mov
js
mov
pusha  
cmc    
and
adc
(bad)  
(bad)  
shr
fiadd
aad
inc
into   
(bad)  
xor
adc
mov
jge
call
lods
dec
(bad)  
add
xchg
adc
sbb
inc
leave  
jl
ds mov
mov
jecxz
cs or
out
add
pop
adc
inc
mov
(bad)  
pop
cli    
jmp
(bad)  
mov
test
push
aas    
jo
ss out
mov
push
cmpsl
sub
cmp
cmp
imul
push
(bad)  
xor
sbb
xor
sahf   
mov
es push
fldcw
or
push
and
pop
jge
inc
sti    
cmp
or
cmc    
or
outsl
sbb
sub
cmpsb
repnz pop
leave  
(bad)  
and
or
jnp
test
xchg
xor
jp
inc
jae
xor
push
cmpsb
jge
addr16 test
inc
mov
xchg
pop
push
fsubl
(bad)  
mov
test
xchg
xor
xor
pop
cmpsb
cmp
scas
stc    
xor
js
in
jmp
insb
int
adc
cmp
jns
mov
lret
int
sbb
neg
out
ret
xchg
inc
mov
imul
out
(bad)  
dec
movsl
sub
jecxz
jnp
cmpsl
insl
mov
lret
add
or
mov
(bad)  
adc
js
jmp
test
insl
stos
ret    
inc
and
add
mov
and
or
inc
sub
adc
es push
jge
je
(bad)  
push
loop
add
loopne
xor
inc
xor
hlt    
jmp
sbb
cmpsl
sbb
popl
shlb
mov
addr16 jge
insb
or
add
rolb
dec
jg
mov
xchg
ret    
and
stos
mov
mov
outsl
lahf   
rorl
mov
decb
cmp
(bad)  
cmp
addr16 jg,pt
or
dec
sbb
test
mov
lahf   
jecxz
and
jle
xchg
mov
jbe
and
rcll
push
add
inc
test
(bad)  
pusha  
xchg
dec
or
mov
sti    
sub
std    
(bad)  
lahf   
ds pop
mov
xchg
lock int3 
shrl
and
xchg
(bad)  
addr16 mov
sahf   
nop
shlb
addl
add
mov
jmp
inc
mulb
xchg
add
cmp
out
outsb
xchg
lods
sub
popf   
rclb
adc
call
jl
mov
out
mov
(bad)  
jno
cmp
lds
mov
arpl
jle
sbb
jno
add
daa    
sbb
(bad)  
lcall
iret   
xchg
dec
mov
leave  
mov
lret
push
imul
xor
sbb
jp
jle
jle
shll
push
daa    
mov
cmp
dec
test
push
push
and
in
lret   
(bad)  
xchg
mov
rorl
popf   
sub
mov
mov
loop
cmp
je
ret
cmpsb
loop
xchg
cmp
pop
push
xchg
(bad)  
jmp
jbe
adc
insl
jnp
pusha  
mov
mov
sub
dec
imul
mov
push
sub
and
jno
movsl
rol
jg
mov
cmpl
push
(bad)  
(bad)  
jmp
insl
bswap
loopne
jl
mov
scas
cld    
pop
les
xor
mov
jns
mov
jecxz
inc
movsl
sbb
mov
(bad)  
movsb
icebp  
fsubr
loopne
pop
aas    
xchg
jo
mov
loop
inc
and
mov
add
or
daa    
cmpsb
cmp
addr16 out
sbb
cltd   
enter
xor
out
jno
mov
mov
sub
pop
jne
loop
adc
fprem1 
jp
lret   
cmpsb
movsl
inc
insb
in
testb
dec
mov
shrb
push
in
jnp
mov
cmp
cmp
xchg
(bad)  
mov
dec
in
pop
push
mov
xchg
sbb
imul
js
sbb
imul
mov
xor
fnsave
fsts
xor
inc
ja
jp
add
je
mov
xor
cmpsl
jbe
inc
jns
in
rol
pushf  
xlat
out
cwtl   
sti    
jg
aaa    
test
lods
rol
ljmp
imul
sarl
adc
(bad)  
paddq
(bad)  
mov
movsl
pop
push
add
iret   
pop
push
or
imul
fmuls
call
cmp
cmp
insb
es inc
cmpsl
out
repnz sbb
mov
ds xchg
jae
jbe
push
inc
cmpl
js
xchg
add
push
mov
or
push
push
mov
mov
xchg
call
loopne
add
adcl
pop
inc
jge
jg
test
or
rolb
inc
dec
test
mov
jno
sahf   
mov
fcmovbe
xor
(bad)  
ss
sbb
jecxz
pop
jbe
hlt    
adc
in
and
aaa    
xchg
pop
sub
mov
and
bound
cmp
push
cmp
dec
aas    
fisub
(bad)  
(bad)  
movsl
cmp
fisub
jp
mov
or
rcrl
mov
or
push
mov
jbe
pop
aaa    
(bad)  
jo
daa    
dec
fimull
insb
xchg
and
(bad)  {%k6}{z}
sti    
cs mov
lahf   
xchg
adc
mov
cmp
(bad)  
sbb
jmp
test
mov
sbb
pushf  
cmp
ja
and
inc
loopne
fsubrs
pop
(bad)  
push
pop
loop
das    
das    
call
(bad)  
and
inc
sbb
sbb
mov
push
sbb
sub
add
fnstenv
les
(bad)  
xor
xor
dec
jge
add
pushf  
mov
icebp  
out
push
dec
mov
and
sub
xor
scas
pop
adcb
call
adc
scas
loopne
stos
cmp
inc
fmuls
sub
mov
push
lret
stc    
mov
jge
sub
push
lret   
mov
out
je
mov
xchg
rcll
push
mov
mov
sub
mov
cld    
test
xchg
lods
hlt    
mov
in
jmp
dec
xor
enter
ficoml
and
stc    
jbe
lea
fcomps
cmp
imul
pop
mov
in
sbb
cmp
or
pusha  
or
je
insl
sub
fsubs
popa   
addr16 cld 
cmp
out
insl
rolb
movsb
loope
(bad)  
test
push
fcompl
loop
divl
xor
movsb
fnsave
movsl
pop
pop
push
jmp
adc
cmp
mov
popa   
shrl
bound
jne
in
jo
lock out
shl
into   
lds
stc    
and
dec
aaa    
int3   
jbe
dec
mov
or
pushf  
xchg
mov
push
test
insl
xor
push
and
inc
push
insb
xchg
add
aas    
xchg
xchg
push
sub
(bad)  
das    
(bad)  
aad
rolb
mov
fnop   
cmp
add
(bad)  
ljmp
push
hlt    
loopne
xor
sub
fwait
cmp
arpl
mov
xchg
sub
ret
mov
sahf   
xchg
mov
subb
fildl
adc
dec
push
sub
push
test
push
mov
xor
jmp
jl
cmp
aam
mov
pop
pop
xlat
xlat
and
scas
sub
dec
sub
clc    
rcr
pop
loop
push
mov
mov
lea
mov
mov
jnp
mov
fsubrp
xor
imul
dec
aaa    
out
nop
(bad)  
cli    
fadd
cld    
sub
adc
mov
jnp
adc
or
cmpsb
dec
iret   
out
push
sbb
mov
and
popf   
clc    
fistpl
andl
in
add
scas
cmpsl
int
popa   
faddp
movsl
sub
movsl
mov
cwtl   
jmp
sbb
adc
dec
std    
int
jo
xchg
rcrb
mov
es cmp
push
push
push
shl
mov
push
mov
(bad)  
adc
int
inc
mov
adc
xlat
lds
sbb
mov
inc
lds
and
pushf  
sar
lret   
rcrl
or
dec
ds sti 
loop
insb
leave  
cmp
dec
jo
mov
mov
mov
js
cld    
dec
es ja
push
push
push
icebp  
dec
lods
stos
mov
movsl
xchg
push
push
xchg
in
sbb
pop
fcom
(bad)  
(bad)  
je
inc
test
arpl
lret   
pop
mov
mov
inc
xchg
mov
dec
xchg
aad
mov
in
mov
clc    
or
mov
jns
and
rolb
mov
lods
lods
iret   
(bad)  
push
aad
adc
test
negl
mov
mov
hlt    
gs inc
xor
push
cs push
push
sahf   
out
pop
clc    
lahf   
fxtract 
addr16 je
clc    
xchg
je
cli    
and
fcmovnbe
ljmp
mov
daa    
mov
je
int
sahf   
mov
pop
popf   
pop
adc
popf   
ljmp
ret
ret
fwait
and
jecxz
sbb
loop
enter
jne
sbb
adc
fdivl
stos
jbe
push
push
sub
mov
jge
andb
jb
xlat
push
aas    
sub
enter
mov
inc
xchg
movsl
pop
fist
out
jbe
(bad)  
sub
sub
out
aaa    
add
(bad)  {%k6}{z}
dec
das    
or
sub
and
iret   
push
mov
pusha  
stc    
fs inc
pop
mov
pop
inc
test
shl
fmul
push
xchg
subl
repnz
cli    
mov
dec
sarl
xchg
cs add
mov
pop
add
in
sbb
dec
mov
mov
push
push
jb
jnp
xor
pop
lds
sahf   
out
adc
loopne
frstor
insl
jp
push
lret   
xchg
movsl
mov
pop
mov
data16 and
cmp
mov
pushf  
test
rclb
mov
inc
mov
call
pop
out
punpckhwd
ret    
clc    
mov
xor
lock inc
sbb
insl
aad
xchg
jns
lret   
mov
ljmp
psubsb
mov
push
sbb
fstps
add
nop
bound
sbb
dec
pop
les
ret
clc    
xchg
lock cltd 
lahf   
dec
imul
and
hlt    
mov
mov
or
cltd   
jle
ja
and
stos
cltd   
push
inc
movsb
leave  
sub
cmc    
hlt    
adc
cs dec
dec
pop
pop
xchg
or
dec
sbb
aad
(bad)  
shl
mov
push
fstpl
dec
nop
mov
or
sub
lret
ffree
xchg
inc
shl
mov
dec
mov
dec
dec
sub
loop
dec
test
pop
push
sbbl
dec
push
inc
add
insb
aam
in
push
out
mov
(bad)  
jbe
mov
(bad)  
mov
fsubrs
xchg
xor
inc
xor
into   
mov
in
(bad)  
fldcw
mov
mov
rorb
push
sbb
push
adc
xchg
cmpsl
xchg
dec
clc    
scas
in
pop
test
clc    
fwait
lock jae
mov
mov
push
gs lcall
pop
xchg
xor
pop
rcrl
and
xchg
fucomip
jmp
mov
xchg
adc
scas
gs repnz es inc
inc
mov
inc
xchg
push
fldt
add
xor
add
int3   
pop
mov
fbld
je
bound
out
cmpsl
push
adc
adc
jae
inc
imul
std    
xlat
cmc    
mov
sti    
cmp
jg
xchg
cmovle
popf   
sbb
(bad)  
dec
inc
les
inc
xor
nop
cld    
adc
cwtl   
lret   
incb
adc
mov
cmp
shl
jns
js
shrb
mov
sbb
sub
cmp
dec
in
xorl
leave  
mov
dec
add
pop
sub
shlb
hlt    
adc
jge
adc
fnstcw
mov
jecxz
fnstenv
jnp
xchg
cmp
jmp
(bad)  
xchg
jl
icebp  
shlb
in
fisubl
inc
pop
(bad)  
arpl
sbb
aas    
inc
lcall
jbe
insl
sub
add
mov
cmpb
lret   
cmpsb
sub
into   
js
addr16 pop
inc
push
pop
or
sbb
ret    
jno
push
stc    
and
arpl
add
arpl
sub
aad
int
dec
mov
fcomp
xchg
push
xchg
mov
mov
out
or
ret
sub
xchg
je
jne
and
cmp
or
fdivrs
dec
fimul
mov
pop
push
adc
cld    
mov
outsb
pop
mov
xchg
xor
mov
stos
(bad)  {%k6}{z}
(bad)  
es aaa 
fdivs
pusha  
mov
ret
xchg
xor
mov
xor
inc
je
je
cwtl   
rorb
repnz movsl
and
inc
(bad)  
sub
xchg
jb
inc
adc
repnz or
cmp
sti    
xorl
dec
mov
mov
ds adc
pop
sub
lret   
xchg
mov
cmp
mov
lods
mov
sbb
cmp
add
insl
dec
push
scas
cli    
sub
add
jmp
ja
xorl
fs sahf 
cmp
xchg
adc
adc
clc    
gs mov
xchg
or
cmc    
jp
out
inc
mov
add
mov
aas    
xor
ror
outsl
jp
in
cmc    
mov
gs mov
cmp
leave  
add
xchg
pop
test
sbb
cmpb
push
jl
adcb
into   
xorb
mov
mov
jmp
push
pusha  
shlb
inc
outsl
insb
test
adc
cs pop
sub
add
sbbb
sahf   
shrl
jecxz
sbb
in
dec
sub
xchg
(bad)  
pop
js
pop
shrl
lock add
mov
das    
das    
roll
sti    
push
pop
or
sub
arpl
sbb
mov
aas    
(bad)  
incb
imul
cli    
les
mov
fs dec
lea
adc
in
inc
dec
adc
in
hlt    
cwtl   
leave  
fwait
jb
inc
outsb
fdivl
add
sbb
bound
cltd   
nop
(bad)  
pop
call
cmp
loopne
inc
icebp  
(bad)  
jno
add
fldl
add
loope
adc
aas    
xor
dec
sbb
repz
shlb
push
inc
stc    
jb
pushf  
stos
dec
pop
adc
adc
out
push
sbb
push
rorb
pop
ret
js
push
xor
push
(bad)  
outsb
fs mov
inc
push
push
push
jo
mov
mov
jne
push
(bad)  
dec
xor
jle
loope
das    
in
stos
scas
mov
pushw
sar
ja
cmpsl
dec
into   
sbb
(bad)  
sbb
out
or
pop
jnp
inc
faddl
jg
xchg
clc    
insl
out
inc
popa   
imul
adc
cmpsb
jmp
and
lods
jae
xor
xchg
xlat
test
(bad)  
pop
sbb
pop
push
loop
dec
aas    
mov
repz jne
mov
mov
add
xor
insl
ds into 
aad
cltd   
icebp  
cld    
and
bound
enter
cli    
push
loopne
rcll
inc
cwtl   
xchg
out
xchg
sqrtps
cmp
dec
cltd   
or
mov
and
sbb
(bad)  
mov
sbb
ds es in
inc
aas    
or
test
fcmovb
movsl
sub
lcall
sahf   
loop
mov
jmp
lock call
imul
nop
cld    
leave  
ret
insl
rorb
cmp
lahf   
push
pop
nop
mov
mov
jb
sbb
push
xor
xor
jp
add
mov
cmpsl
sarb
sahf   
js
imul
push
push
jns
loope
dec
inc
cmp
pop
inc
mov
sbb
add
lcall
bound
mov
mov
pop
stc    
mov
sahf   
jae
stos
dec
dec
mov
pop
rcl
mov
ret
mov
mov
push
fldl
lods
bound
push
cmp
sub
jp
out
cmp
shrl
sub
cmpsl
jnp
xor
stos
mov
insl
mov
das    
js
or
or
subl
sbb
inc
shrb
sbb
and
mov
adc
xor
sub
scas
fdivr
and
add
jge
out
(bad)  
mov
cmpsl
(bad)  
inc
jno
cs pop
mov
xchg
adc
das    
dec
add
fmull
cmp
imul
push
call
mov
cs mov
rcrl
xor
add
clc    
cmpsl
(bad)  
icebp  
xor
and
inc
ljmp
nop
sub
(bad)
lahf   
jb
or
movsl
dec
xor
dec
dec
adc
or
(bad)  
adc
push
into   
cs dec
icebp  
mov
mov
scas
mov
dec
push
lahf   
nop
sbb
sbb
mov
leave  
sbb
test
adc
add
loope
mov
mov
daa    
stos
adc
int
lret
dec
push
inc
xchg
pop
rorb
xor
je
cs pop
inc
inc
jb
push
sub
lret
das    
jb
out
sub
xor
test
test
mov
movsl
dec
out
xchg
dec
stc    
fs pop
repnz mov
push
cmpb
in
and
cwtl   
push
push
shr
cltd   
pop
sti    
shr
sbb
loop
repnz dec
xchg
add
add
add
scas
add
int
pop
jl
test
lds
xchg
dec
xchg
sbb
xchg
mov
loopne
xchg
rolb
or
scas
or
lret
or
fdivrl
pop
arpl
inc
ja
adc
sub
loopne
xor
push
cmc    
cmpsl
leave  
lret
sbb
stos
arpl
jns
inc
cltd   
jg
(bad)  {%k6}{z}
fdivp
pushf  
movb
(bad)  
sub
cltd   
ds test
loop
fwait
mov
mov
sti    
imul
lock lods
out
jnp
test
sbb
mov
pop
adc
sub
out
nop
out
jb
rcrl
fbld
xor
cli    
inc
mov
outsb
fildl
mov
ljmp
pop
repnz clc 
outsl
sub
stos
pop
and
in
mov
xchg
jnp
pop
movsl
add
sbb
push
xchg
xor
mov
popf   
push
aas    
cmp
test
mov
stos
icebp  
mov
gs aad
fildl
leave  
aas    
jne
dec
(bad)  
into   
out
inc
insb
lea
lock cmc 
loopne
dec
shr
cli    
int
dec
jb
pushf  
out
mov
ret    
inc
into   
xchg
pop
fwait
jnp
xor
cmpsb
xor
sub
dec
popf   
andl
mov
ss pop
ret    
inc
pop
sarl
testb
mov
cmp
xchg
aas    
cld    
mov
je
imull
(bad)  
sub
or
lcall
fbstp
fsubr
jbe
inc
add
iret   
xor
xchg
iret   
xchg
add
mov
imul
or
jge
add
(bad)
jge
jmp
subl
mov
test
jo
jbe
push
xchg
xchg
mov
dec
mov
or
ss or
mov
aaa    
pusha  
mov
xchg
mov
pop
pop
xor
dec
scas
push
mov
arpl
rcr
das    
stc    
lret
repz or
sub
sbb
mov
ret    
xchg
mov
(bad)  
jb
adc
fimull
sub
not
cmc    
and
mov
imul
mov
rcrl
push
jns
jge
scas
clc    
dec
add
mov
dec
pop
push
fisttp
sbb
lret
cmpsl
sbb
or
adc
xor
cmp
stos
mov
and
add
aam
inc
das    
sbb
add
fdivrs
cld    
addl
cmpsb
roll
push
rorl
push
pop
inc
stc    
jne
and
mov
mov
outsb
jbe
nop
jno
leave  
icebp  
cmpsl
fnstsw
or
sti    
push
xor
rclb
rorl
cs mov
add
push
hlt    
leave  
jb
es clc 
pop
cmp
mov
sub
mov
shrb
(bad)  
testl
cli    
ja
adc
outsl
iret   
je
pop
inc
jmp
adc
jl
pop
(bad)  
cmpsl
lahf   
pushf  
lret
outsb
mov
mov
call
push
and
lods
cmp
cmp
pop
das    
jne
cmp
fstp
mov
roll
cwtl   
stos
jo
faddl
rclb
arpl
and
je
in
inc
clc    
daa    
(bad)  
mov
pop
pop
mov
cwtl   
cwtl   
hlt    
adc
les
inc
jns
and
out
sbbl
adc
pop
fdivrl
aaa    
jns
cmpsb
add
out
rorb
push
scas
jbe
lret   
cmpsb
dec
sub
(bad)  
test
call
push
arpl
pop
jle
mov
push
ror
test
inc
test
loop
mov
push
stos
inc
or
push
out
addr16
pushf  
enter
dec
adc
lods
movsl
push
lods
sub
dec
in
xor
sbb
(bad)
pop
stc    
or
rolb
loop
xchg
push
aas    
pop
dec
xor
fisttpll
ret
aas    
repnz mov
shrb
mov
fsubp
mov
(bad)  
mulb
push
xlat
mov
mov
dec
jg
cmc    
fdivrl
add
mov
shll
ret    
hlt    
shl
and
test
or
imul
fdivrl
add
jp
jecxz
add
sub
aas    
nop
in
pop
add
pop
adc
pop
and
out
shrb
inc
sub
dec
lahf   
scas
xor
mov
mov
inc
mov
push
aaa    
dec
orl
stos
adc
mov
mov
pop
push
pusha  
jmp
jne
or
repnz xchg
dec
mov
out
push
dec
cwtl   
or
lret
stc    
outsb
mov
cmp
and
daa    
adc
inc
insl
outsl
xor
in
mov
push
negb
rcrw
jmp
xor
sub
jo
fdivs
mov
fxch
and
adc
out
iret   
xchg
or
inc
mov
and
or
mov
dec
mov
lret
push
adc
add
xor
jmp
mov
shrb
jle
dec
jo
push
sub
ljmp
(bad)  
aas    
mov
push
repnz icebp 
rcll
and
mov
fildll
jne
adc
xchg
or
push
in
and
mov
add
in
push
(bad)  
cmc    
fisub
mov
or
jnp
dec
cltd   
(bad)  
mov
sub
inc
outsl
lds
mull
test
scas
add
(bad)  
push
push
cmp
pop
push
push
adc
xchg
ja
insl
iret   
inc
mov
xchg
cmc    
xchg
roll
bnd jno
ret
out
imul
lods
mov
fadds
jno
xchg
inc
test
mov
sbb
or
xchg
fs mov
std    
outsl
(bad)  
mov
movsl
xor
cmovle
mov
jge
pop
call
lcall
lret
rolb
out
mov
cmp
pop
jno
(bad)  
push
lock shrl
mov
or
int
rclb
test
cmp
jno
sub
and
call
sbb
aad
clc    
adc
inc
mov
push
sub
ljmp
push
and
mov
and
mov
rcrl
xor
or
mov
push
stc    
inc
inc
adc
ds scas
inc
inc
popa   
js
mov
iret   
cmpsb
incb
lret
cmp
sub
stc    
jnp
mov
xor
jecxz
mov
jne
jge
mov
mov
aam
popa   
insl
cld    
aam
ret    
cmp
outsb
sub
push
xor
mov
mov
dec
pop
push
sbb
bound
int3   
jl
mov
inc
sbb
mov
push
mov
into   
pop
or
movsb
std    
sbb
mov
mov
cmp
and
push
fadds
test
mov
in
xorl
dec
push
fbld
jge
inc
mov
mov
out
lahf   
les
loop
hlt    
and
cltd   
cmpsb
mov
pop
lods
cmc    
in
push
sub
push
iret   
enter
xchg
jae
icebp  
imul
or
mov
inc
or
out
(bad)  {%k6}{z}
fdivl
mov
cmp
outsl
jl
mov
adc
pop
inc
aas    
mov
dec
(bad)  
or
pop
cli    
sbb
and
imul
jns
repnz and
mov
xor
jae
loopne
push
fnop   
xchg
push
adc
lea
xchg
jnp
out
aam
dec
xor
mov
les
pop
cltd   
jmp
sub
cmpsl
cmpsl
cmp
dec
int3   
repz xor
lock mov
jmp
pop
sbb
and
xchg
dec
add
ss push
out
jns
std    
jmp
add
lock jge
out
inc
movsb
(bad)  
int3   
call
pop
inc
inc
push
mov
mov
fucomp
sbb
sbb
aam
add
insl
dec
sbb
xor
mov
pop
(bad)  
pop
xor
fbstp
nop
sub
sub
add
pushf  
imul
adc
push
mov
ljmp
xchg
lcall
test
inc
pop
cld    
xchg
cmpsb
in
adc
cli    
add
cmp
sbb
stc    
shrb
push
fsubr
xchg
stos
popf   
mov
mull
sar
mov
fidivr
out
sub
jecxz
mov
mov
pop
xchg
fs
je
sub
lock jo
cli    
fisubr
divb
or
or
xchg
xchg
jno
int
xlat
cmc    
pop
imul
int
mov
aam
and
popa   
je
push
pop
cld    
add
jecxz
addr16 in
sub
enter
add
inc
add
sub
jecxz
or
and
sub
cmp
lds
dec
loope,pt
jne
jno
ret    
and
mov
(bad)  
cmp
hlt    
inc
in
push
fldt
movl
mov
xor
into   
imulb
sub
or
jp
push
jle
xor
imul
faddp
push
jbe
in
ljmp
lods
push
mov
mov
scas
je
and
lds
in
push
(bad)
ds popf 
idiv
imul
mov
cmp
movsl
inc
xchg
movsb
pop
mov
and
pop
mov
loop
jmp
gs lahf 
inc
fistpl
pop
popa   
add
lcall
test
pusha  
hlt    
fwait
mov
pop
fiadd
repz xor
add
xor
lret   
(bad)  
nop
in
in
xor
or
loop
mov
std    
and
lret
sbb
iret   
push
push
xchg
push
add
mov
(bad)  
xchg
orl
or
test
mov
fcoms
fwait
add
in
test
iret   
std    
ret    
cmp
sbb
outsl
inc
mov
out
es mov
jmp
(bad)  
(bad)  
ja
insb
jno
dec
push
and
mov
inc
push
jecxz
das    
push
cmp
adc
lea
pop
cmp
fcoms
test
aaa    
sbb
jae
fsubp
jp
push
fidivl
(bad)  
adc
jmp
inc
jae
lods
mov
push
add
sahf   
pop
pop
inc
or
ljmp
sbb
bound
bound
xchg
pop
mov
add
mov
xor
ss and
push
push
cmp
sti    
mov
jo
xor
(bad)  
and
mov
mov
fdivp
mov
cli    
jle
mov
push
lods
xchg
mov
loopne
negl
aaa    
lea
lods
add
es cmp
push
lret
and
jl
les
cs inc
lds
jg
adc
cmp
sub
sub
dec
mov
push
mov
adc
(bad)  
stos
jecxz
sbb
cmp
sub
mov
or
js
popa   
outsl
cmc    
push
enter
(bad)  
dec
sub
add
mov
sbb
ljmp
bound
and
add
xchg
pop
sbb
mov
mov
sub
or
loope
ficom
pop
and
dec
mov
mov
stc    
in
test
dec
xchg
call
push
sbb
push
icebp  
fild
call
sub
xor
test
jl
bound
in
mov
adc
icebp  
sub
mov
or
pop
jno
xchg
std    
dec
icebp  
into   
cmpsl
jo
out
prefetch
add
int
int
xor
cmp
xchg
adc
stos
sar
(bad)  
icebp  
lret   
mov
stos
and
int3   
ja
mov
mov
add
mov
out
mov
test
cli    
jae
stos
xchg
ret
sub
scas
rcl
inc
outsb
adc
mov
add
rolb
jg
or
stos
inc
add
jae
lods
scas
sbb
mov
mov
dec
jmp
rcrb
add
daa    
lea
mov
xchg
jp
jl
mov
xlat
mov
(bad)  
xor
in
push
sahf   
or
fsubrl
insl
mov
in
jmp
lds
call
popa   
sahf   
shlb
jge
fldl
and
push
or
or
imul
fmuls
jl
cmp
mov
mov
pop
xor
xchg
mov
loop
inc
stos
aas    
loopne
cmp
imul
js
pushf  
popf   
clc    
xor
cmp
int
cmpsb
mov
aas    
push
cmp
es in
fs retw
mov
mov
xchg
mov
xlat
or
lret   
pop
fimul
mov
insb
xchg
mov
and
data16 aaa 
inc
cmpsb
xchg
jno
gs xchg
mov
xchg
sub
jbe
xor
popf   
xchg
jne
push
mov
push
(bad)  
mov
stos
out
ja
fidivrl
jecxz
loop
adc
jns
push
adc
lods
pop
imul
stos
aaa    
jbe
ret
pop
sbbb
addr16 jbe
sub
rorl
loop
mov
xlat
jns
pop
dec
jae
pop
(bad)  
popf   
in
fistp
mov
mov
fnop   
add
movsl
dec
pop
push
or
mov
idivl
pop
jbe
or
std    
lcall
push
bts
adc
rorl
addl
cmp
push
outsb
cltd   
jmp
(bad)  
or
test
lock xor
negl
push
mov
imul
xchg
addr16 pop
sub
xor
pop
popa   
cmp
cmp
push
or
jbe
xor
push
pop
insb
sbb
std    
push
xchg
jmp
adc
dec
mov
mov
add
out
push
xor
in
jmp
push
dec
rcl
mov
xchg
(bad)  {%k6}{z}
int3   
sahf   
popf   
adc
roll
cmp
dec
jnp
sbb
xchg
scas
sti    
cmpsb
jle
cmpsl
adc
lahf   
sbb
pop
mov
add
jg
das    
rorl
(bad)  
xchg
andb
add
(bad)  
lock inc
xlat
sbb
mov
clc    
lods
(bad)  
cmc    
fsubrl
lcall
adc
mov
int
xchg
pop
lahf   
fidiv
mov
aaa    
icebp  
mov
outsb
mov
sbb
aas    
in
add
(bad)  
xchg
cwtl   
jno
sub
and
mov
dec
dec
scas
add
stos
into   
push
insb
mov
pop
mov
scas
popa   
bnd jno
imul
inc
push
xlat
(bad)  
ljmp
push
push
(bad)  
mov
dec
mov
addr16 jp
out
mov
xchg
jge
cmp
aam
mov
test
in
inc
cld    
in
dec
out
and
rclb
cmpsb
mov
mov
jge
sbb
pop
lret
inc
js
loop
loop
test
in
push
mov
mov
and
imul
icebp  
or
pusha  
fwait
push
outsl
jp
inc
pop
jns
jl
push
sarb
push
out
mov
push
ret    
xchg
add
shrl
cwtl   
scas
sar
lcall
xor
sub
cmp
sbb
pop
mov
sub
cwtl   
repz adc
cld    
addl
mov
xchg
inc
jo
cmp
inc
es
movl
mov
or
dec
mov
xchg
shl
or
adc
inc
pop
repz rcrl
mov
mov
xlat
daa    
sbb
loopne
dec
jecxz
int3   
test
pop
shrl
mov
xchg
pop
repnz dec
push
sbb
mov
push
and
mov
call
adc
sahf   
adc
xchg
jo
xchg
sti    
scas
mov
pop
jecxz
in
mov
cmp
dec
cmp
fstps
mov
test
call
subl
lcall
xchg
(bad)  
es xchg
pop
jae
sbb
outsl
loope
pop
loop
sbb
xlat
add
lea
rorb
xorl
push
daa    
into   
stc    
aas    
fld1   
mov
dec
inc
inc
mov
orl
das    
fs pop
xchg
push
push
inc
add
fsubs
pop
fldcw
(bad)  
aas    
mov
add
push
pusha  
sub
push
xchg
inc
push
mov
pop
jo
xlat
sbb
push
dec
mov
pop
daa    
mov
lods
mov
and
loope
jo
fdivs
je
dec
adc
and
add
syscall 
in
sbb
sub
push
vpandn
pop
lahf   
mov
mov
mov
inc
scas
or
adc
bnd jmp
fist
dec
pop
jl
xor
pop
xchg
cmp
cmc    
adc
out
sbb
inc
fldl
xor
(bad)  
cld    
dec
push
sbb
mov
mov
pop
mov
dec
dec
(bad)  
stos
cmp
fnsave
rcrb
jne
movsb
push
psadbw
inc
inc
insb
and
sub
loopne
dec
jmp
das    
dec
jmp
mov
xchg
(bad)
std    
int
xchg
pop
lret
jns
call
push
cli    
adc
pop
inc
pop
fnstsw
movb
inc
popa   
mov
cmc    
in
jge
mov
or
push
outsb
out
cmp
adc
add
lcall
add
ja
push
sahf   
notl
jne
xchg
adc
nop
lds
xchg
jns
outsb
cmpsb
inc
loop
fs test
ja
add
or
pop
xorb
or
or
jne
lods
ljmp
push
lret   
mov
in
or
mov
(bad)  
stos
cmp
push
bound
mull
sbb
sbb
inc
dec
mov
ret
in
xor
push
or
fidivl
lcall
ret
inc
and
aad
add
mov
jnp
fcompl
ret
pop
jp
sbb
push
(bad)  {%k6}{z}
jmp
outsl
add
repnz sub
stc    
mov
out
stc    
jnp
mov
test
fstl
adc
sti    
xchg
cmp
dec
jecxz
aam
and
fldenv
pop
pop
xchg
inc
pop
mov
mov
insl
test
sbb
xchg
repnz clc 
icebp  
push
in
add
test
lret
jns
jnp
xor
outsb
lods
fs inc
insl
pop
repz mov
adc
xor
lds
aaa    
scas
mov
cmpl
nop
orl
add
cs insb
dec
mov
cmp
pop
mov
pushf  
inc
inc
mov
aam
fstl
icebp  
mov
inc
sti    
stos
pop
aas    
jae
jnp
clc    
sub
arpl
test
imul
popl
or
jp
push
hlt    
jb
(bad)  
rclb
inc
jl
pop
xchg
or
adc
aad
fadds
mov
into   
add
movsb
iret   
adc
dec
flds
mov
inc
arpl
jbe
mov
scas
(bad)  
js
xchg
lahf   
push
inc
and
mov
bound
rcll
rolb
mov
int3   
in
mov
mov
sbb
stc    
jge
lods
cmc    
sub
pop
into   
xor
in
fbstp
test
arpl
shrl
movd
dec
cmp
cmp
adc
mov
nop
cs sub
repnz adcl
test
inc
cs push
mov
sbb
push
gs loop
push
push
pusha  
cli    
scas
pop
dec
mov
and
sbb
mov
repz adc
rcr
dec
repz dec
subb
jp
stos
cmpsb
xor
mov
ja
loope
adc
add
or
roll
pop
push
pop
adc
or
mov
and
arpl
xor
ja
sbb
cmp
mov
loopne
pop
mov
lea
mov
xor
xor
pop
mov
pop
mov
and
sub
push
sub
aas    
lcall
(bad)  
insl
movl
nop
mov
sbb
mov
ljmp
xchg
add
cmp
or
loop
jne
test
dec
cmp
repz fnsave
xchg
lock add
sub
and
pop
push
cmp
pop
push
jmp
push
out
out
in
add
sbb
insb
inc
(bad)  
sub
xchg
test
(bad)
sub
and
xchg
outsb
lock imul
add
incl
icebp  
push
pcmpgtw
sbb
out
inc
xchg
(bad)  
jge
mov
das    
ss jo
adc
mov
addl
add
dec
inc
out
cmc    
push
sbb
xchg
cltd   
lahf   
jb
(bad)  
add
inc
inc
inc
mov
cld    
ss push
cmp
mov
and
sub
push
mov
(bad)  
xor
ljmp
jb
add
mov
inc
push
pop
ret
mov
call
cltd   
pushf  
stos
popa   
clc    
ficomp
bound
paddw
ret
adc
adcl
(bad)  
jno
adc
mov
mov
mov
mov
dec
or
loop
into   
cmpsl
aam
ss clc 
push
(bad)  
cmp
movnti
mov
or
push
out
movsl
je
enter
push
stos
jno
pop
adc
xchg
icebp  
out
imul
xchg
xor
iret   
and
xchg
loopne
mov
leave  
lahf   
movsl
and
inc
into   
mov
mov
mov
xchg
mov
cwtl   
jmp
push
(bad)  
out
mov
xor
xchg
push
les
push
adc
and
iret   
arpl
loop
sbb
imul
push
and
rorl
dec
mov
(bad)  
fisttpll
pop
(bad)  
setge
push
outsb
lcall
popa   
inc
out
sti    
lods
fistpll
out
jmp
push
lock cmp
out
or
out
scas
cwtl   
lea
loopne
mov
push
(bad)  
or
mov
adc
aas    
cwtl   
push
jno
mov
pusha  
es
leave  
pusha  
js
push
inc
adc
out
mov
cmp
lahf   
(bad)  
divl
push
and
jno
(bad)  
jle
push
aad
add
add
sbb
stos
int
lret
push
(bad)  
fs sbb
inc
xchg
mov
subl
lea
xor
repz xchg
insl
pop
mov
scas
push
mov
xchg
jnp
xchg
idivb
arpl
loopne
(bad)  
out
sub
insl
lcall
aam
mov
pop
sub
sbb
enter
jmp
cli    
out
adc
clc    
push
aad
loope,pn
mov
xchg
bound
iret   
push
dec
add
sub
pop
jp
pop
ljmp
sub
mov
xor
pushf  
aaa    
mov
mov
pop
dec
adc
pop
or
jle
sbb
mov
loope
and
and
mov
pop
sarl
insb
push
mov
sbb
bound
loop
sbbl
xchg
adc
outsl
xchg
lock scas
adc
loopne
jmp
mov
jne
imul
jbe
dec
(bad)  
jae
mov
pop
inc
out
jg
pop
pop
stos
add
or
pop
xchg
adc
popa   
inc
xor
mov
(bad)  
jno
(bad)  
adc
sbb
mov
ffree
dec
icebp  
xchg
inc
outsl
and
and
aaa    
cld    
(bad)  
mov
pop
cmpsb
sahf   
jle
sub
ret    
sbb
pop
pop
aaa    
xchg
lock ret 
ficom
and
stos
lods
adc
repz xor
call
cmp
cmc    
incb
int
push
or
(bad)  
ja
cmp
repnz mov
lahf   
xchg
xor
stos
mov
pop
xor
stos
call
cmp
mov
imul
sub
jnp
enter
push
fcomip
fsubrl
repnz aas 
push
lods
xor
sti    
repz xor
push
sbb
mov
lcall
jnp
clc    
test
fsubs
mov
xchg
insl
cwtl   
add
inc
lret   
repz jbe
dec
outsl
jcxz
sbb
mov
je
out
sbb
je
int
(bad)  
add
push
add
bnd jnp
inc
mov
push
lret   
movsb
or
adc
loope
in
sub
jge
or
cmp
lds
ljmp
cmp
mov
subb
loopne
sub
xor
mov
jno
xchg
sub
xlat
inc
inc
leave  
xchg
arpl
(bad)  
ss lret
lahf   
lods
mov
and
xor
imul
cmc    
xor
xor
pop
mov
xchg
aas    
mov
add
dec
pop
sub
dec
jne
xor
ror
jecxz
aaa    
idivb
fs jo
popf   
pop
lret
add
mov
aam
adc
cmp
sbb
and
or
lods
popf   
lret
mov
lock jl
mov
pop
cld    
add
iret   
ja
fsubrl
int3   
add
lea
bound
test
lds
test
pop
cwtl   
adc
pop
iret   
adc
cwtl   
nop
into   
addr16 pop
mov
cs int
pop
mov
ret
mov
aam
mov
pusha  
pop
sbb
out
lret   
rorl
ret
add
xchg
adc
leave  
fldenv
je
mov
mov
(bad)  
jb
cmp
fwait
movaps
int3   
or
jg
sbb
(bad)  
int
sub
xor
lcall
aaa    
aam
mov
nop
jns
test
mov
jbe
mov
adc
xor
mov
add
push
jo
in
adc
mov
add
jns
dec
jns
or
fdivrs
inc
(bad)  
mov
mov
and
aaa    
or
stos
sahf   
jecxz
add
repnz push
(bad)  
stos
ret    
clc    
cmp
int
fwait
out
hlt    
adc
int3   
add
mov
lods
pop
push
and
mov
sbb
idiv
mov
mov
jns
pop
cmp
lea
repnz sbb
jge
adc
mov
jg
pushf  
pop
fldl
push
(bad)  
pop
cs mov
ret    
jmp
mov
jbe
ret
and
jecxz
push
cld    
or
scas
mov
adc
dec
jb
ja
shrb
loop
or
add
mov
loope
insl
jae
lock xchg
push
mov
stos
add
jge
ds out
(bad)  
(bad)  
(bad)  
mov
xchg
mov
aas    
push
cmpsl
or
inc
inc
jg
xlat
sarl
ljmp
popa   
movsb
leave  
rcll
dec
mov
imul
xchg
stos
pushf  
add
mov
out
jge
sub
outsb
push
test
clc    
arpl
ds pop
data16 icebp 
js
in
(bad)  
stc    
mov
rclb
sub
imul
add
fwait
push
push
and
ret    
and
mov
push
rorb
pop
adc
sub
cmpsb
mov
fiaddl
or
bound
stc    
add
scas
dec
inc
jl
push
mov
mov
fdivs
xchg
out
fwait
icebp  
aas    
data16 fmuls
sbb
iret   
mov
adc
into   
push
inc
test
(bad)  
sti    
clc    
mov
adc
stos
inc
mov
mov
hlt    
fsubrs
pusha  
mov
scas
rcrb
push
bound
stc    
stos
or
push
add
jns
out
test
inc
outsb
jmp
ljmp
(bad)  
rorb
insl
(bad)  
push
adc
push
jae
add
xchg
fldl
dec
xchg
pop
cmp
and
push
push
addr16 inc
add
add
ret
push
xchg
add
insb
mov
movsb
mov
push
out
add
jl
fwait
lret
or
fcompl
fnop   
push
add
add
out
es nop
data16
sbb
sub
xor
adc
push
inc
or
fwait
movsl
add
test
mov
hlt    
add
xchg
inc
xor
test
and
mov
daa    
movsl
ja
neg
bound
sbb
mov
mov
cmpsl
orb
mov
xchg
in
lds
insl
add
jp
or
lret
jge
mov
or
sbb
xlat
fistpll
popf   
lods
add
stc    
jns
jns
ljmp
bswap
mov
pop
cmpsb
daa    
mov
ljmp
lahf   
add
jmp
cmp
sbb
xchg
xchg
mov
push
inc
sbb
jo
jp
into   
jnp
rcr
popf   
addr16 jno
cwtl   
aam
pop
lcall
add
lcall
call
sbb
loope
call
nop
and
sub
stos
and
and
inc
fsubrs
inc
add
pop
sti    
ret    
mov
push
and
stc    
ljmp
(bad)  
or
jo
lahf   
mov
fmull
pop
push
push
out
xchg
pusha  
ja
jns
frstor
out
mov
test
aam
cmp
push
iret   
(bad)  
shlb
xor
cmpsb
fs ljmp
test
pop
fidiv
adcb
outsb
lods
jle
jecxz
xchg
sbb
ret
in
cmp
add
xchg
xlat
xchg
icebp  
dec
xor
mov
inc
das    
ja
repnz push
push
mov
adc
add
in
ficompl
inc
(bad)  
or
in
lahf   
rcll
and
addr16 int
or
dec
cmp
lret   
mov
add
lret
in
xchg
lcall
jb
sub
xorl
sbb
push
xor
(bad)  
mov
imul
mov
xlat
loope
ss fwait
xchg
xlat
sub
bound
lock mov
ja
xchg
and
sbb
sti    
addl
pop
inc
xor
jb
(bad)  
ja
adc
and
pop
xchg
xor
mov
jnp
sbb
add
add
repnz add
andl
mov
lahf   
mov
addr16 add
in
std    
mov
xchg
mov
rolb
jecxz
cld    
cmp
arpl
test
pushf  
outsl
movsl
pop
popa   
xchg
in
pop
mov
inc
adc
inc
jbe
push
test
inc
mov
ds lahf 
xor
inc
mov
pusha  
loop
aad
daa    
jns
out
pop
jmp
std    
aad
cmp
cmc    
or
rol
std    
dec
xor
and
lret   
xchg
aaa    
push
xchg
into   
mov
insl
push
xchg
fucomp
dec
push
mov
outsb
(bad)  
sbb
ja
jl
jecxz
in
xlat
ss jno
or
jge
imul
mov
xchg
xor
inc
sbb
in
push
add
std    
cmp
and
leave  
mov
in
pop
sarl
and
cmpsb
pcmpgtb
add
push
jae
mov
stc    
and
pop
ret
aad
icebp  
arpl
(bad)  
xchg
push
push
daa    
and
jo
dec
mov
ret
test
lret   
push
add
inc
jb
stos
ljmp
aam
dec
(bad)  
in
loope
push
jmp
sbb
inc
lock test
shld
push
fidivl
lcall
js
push
mov
mov
lahf   
xchg
add
insb
adc
add
sub
iret   
iret   
and
push
imul
mov
stc    
ds dec
mov
movsb
mov
or
and
xor
dec
daa    
push
js
push
imul
cmpl
ss into 
stc    
cmp
xor
(bad)  
pop
cmp
(bad)  
dec
in
add
add
dec
inc
scas
inc
pusha  
(bad)  
or
add
add
(bad)  
(bad)  
(bad)  
incl
add
add
add
add
add
add
jns
je
insl
cs inc
jb
ja
outsb
addr16 sub
push
gs jb
imul
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
xor
data16 aaa 
xor
fs xor
add
adc
gs insl
cs inc
jb
ja
outsb
addr16 cs inc
imul
add
popa   
je
pop
add
add
add
add
add
lsl
add
jno
add
add
or
or
add
or
add
add
add
dec
or
add
add
(bad)  
and
add
add
inc
dec
inc
add
mov
or
popa   
add
jo
pop
jae
add
ret    
add
push
ret    
add
outsl
test
add
cmp
push
push
test
lcall
push
cmp
push
lcall
cwtl   
test
hlt    
(bad)  
fiadd
loop
jmp
mov
mov
xlat
out
enter
push
dec
mov
xchg
sbbl
lock push
inc
daa    
and
adc
xadd
mov
test
fwait
cmpsl
loopne
sub
testb
stc    
push
xchg
aad
psllw
movsl
das    
insl
jl
(bad)  
repnz sub
mov
pop
cmp
and
leave  
cmpsb
fsubs
leave  
lcall
mov
pop
aaa    
mov
mov
testl
leave  
dec
cmp
cmp
loop
loopne
mov
and
dec
xor
inc
xchg
movsb
icebp  
and
lret
lahf   
jmp
(bad)  
mov
leave  
or
cwtl   
mov
pop
sarl
addr16 cld 
mov
lret   
into   
push
gs push
xchg
fsubs
into   
jl
dec
pop
lret   
jb
adc
jg
mov
xchg
aaa    
push
loopne
mov
adc
cli    
std    
sbb
gs add
xor
xor
jl
sbb
fisttpl
lock ret
add
js
dec
jecxz
fldt
pop
ror
outsb
and
xchg
pop
lret
movsl
les
mov
jg
(bad)  
xlat
pushf  
fldl
xchg
pushf  
sahf   
test
hlt    
lahf   
pop
sub
mov
test
xor
inc
rcr
and
(bad)  
pop
lahf   
dec
sbb
js
mov
cmpsb
cmpsl
mov
ds lock sub
cmp
mov
mov
cmp
icebp  
push
gs lahf 
les
cmpsl
daa    
arpl
ffreep
aad
pop
call
in
adc
and
pushf  
xor
stos
and
sub
push
orl
cmc    
adc
adc
sbb
cmp
out
cwtl   
lods
cmp
jmp
cmpsl
jecxz
lea
inc
loope
out
je
xchg
mov
aam
sub
jbe
pusha  
sub
push
push
xchg
test
(bad)  
bound
adc
pusha  
inc
pop
jno
cli    
rcll
nop
add
sbb
push
stc    
das    
sub
sti    
les
sub
lret   
fimul
(bad)  
pop
fdivl
sti    
and
leave  
push
loopne
xchg
or
hlt    
inc
mov
ljmp
insl
push
adc
push
das    
dec
(bad)  
xor
push
imul
sahf   
js
dec
dec
xor
mov
xor
add
cmp
sar
mov
movsb
nop
ret    
push
xor
dec
loope
lret   
pop
iret   
in
imul
cltd   
jne
cmpsl
les
mov
rolb
xlat
inc
cli    
push
cmp
lea
mov
pop
in
(bad)  
je
and
cli    
mov
adc
test
fdivrl
sbb
pusha  
jnp
imul
lcall
popa   
(bad)  
(bad)  
jge
testb
loopne
sbb
push
lcall
imul
cli    
cld    
and
cmp
add
lahf   
mov
test
mov
ja
adc
lret
outsb
cs mov
cmp
aaa    
and
sbb
pop
cmp
imul
lcall
in
cmc    
cmp
cmpsb
mov
test
add
mov
and
idivb
push
stc    
push
pop
dec
and
mov
and
add
xor
xchg
add
mov
dec
out
cmp
fbstp
test
lahf   
push
mov
les
in
les
pop
loop
xor
mov
xchg
push
mov
mov
add
jmp
lods
inc
xor
enter
cli    
pusha  
sub
sub
setae
adc
mov
push
jle
cs xchg
mov
test
pop
mov
mov
arpl
cmp
(bad)  
jle
push
imul
or
aam
inc
in
mov
das    
sub
sub
sub
pop
jle
cltd   
je
in
sar
fisubr
(bad)  
ss xchg
rolb
and
test
dec
scas
sub
pop
jp
xchg
pop
mov
outsl
mov
or
adc
lcall
cmp
and
leave  
(bad)  
rcrb
xor
add
jb
pop
mov
and
int
clc    
das    
repz jnp
aas    
mov
sbb
cmp
add
xchg
icebp  
dec
cmpsl
dec
and
loop
dec
andb
mov
cmp
(bad)  
insl
xchg
cmp
sub
aad
sarl
movsl
mov
inc
pushf  
fs unpckhps
out
xchg
stos
aas    
bound
xchg
shll
stos
mov
(bad)  
pop
and
mov
out
fisttpl
icebp  
mov
dec
push
cmp
addl
repz push
sti    
pop
shlb
sbb
mov
add
insb
ret    
adc
imul
in
loop
into   
je
push
imul
dec
lea
mov
fsubrp
aaa    
lds
arpl
aad
dec
adc
mov
push
sub
mov
cmp
daa    
mov
sti    
pop
sti    
xchg
andb
ret    
push
adc
fs mov
mov
mov
pushf  
xor
popa   
repnz mov
(bad)  
mov
and
inc
movsl
out
add
and
xor
stc    
sti    
sbb
dec
jns
fistp
add
scas
cli    
insb
xor
dec
xor
push
push
adc
or
pop
mov
jle
dec
or
mov
xorl
cli    
xor
out
jp
jb
loop
(bad)  
cmp
push
and
imul
lods
inc
sbb
jno
mov
sub
cmp
pop
cld    
inc
mov
cmp
push
add
lds
and
or
pop
mov
push
nop
imul
andl
xchg
test
out
dec
and
sbb
dec
pop
fiaddl
out
in
clc    
cmpsb
xchg
leave  
jg
movsl
rolb
jmp
movsb
mov
pop
in
out
sbb
add
sbb
mov
push
das    
repz pop
rorb
hlt    
sub
dec
fnstenv
(bad)  
xlat
and
xchg
icebp  
ss insb
(bad)  
xor
stc    
inc
cmpl
arpl
es rol
les
cs mov
fwait
add
pop
and
push
sbb
fs fwait
dec
insb
jge
ss lods
jnp
rcll
dec
std    
test
jl
pop
lret
(bad)  
push
add
ficom
daa    
int
dec
cmpsl
mov
pop
sahf   
ret
call
orl
jb
imul
jo
cli    
fnstenv
xlat
cs lock popa 
mov
mov
fisubrl
shl
sbb
or
cs lret 
xchg
mov
paddsw
mov
js
or
mov
add
or
mov
arpl
(bad)
les
push
out
ss in
pop
les
bound
aaa    
add
xor
in
rcr
add
sub
xor
ret    
fisubrl
push
test
push
popf   
nop
pop
and
inc
jge
je
push
lods
add
sub
clc    
leave  
jmp
icebp  
scas
xchg
(bad)  
sbb
bt
leave  
popf   
inc
stos
ret    
lods
mov
jb
jg
es gs and
and
mov
sbb
and
push
les
in
push
and
mov
push
adc
(bad)  
jno
mov
lods
rcrl
xor
mov
add
(bad)  
lds
pop
and
lret
jg
sbb
push
popa   
popf   
sbb
push
jmp
pop
fbstp
in
push
lahf   
mov
push
push
(bad)  
int
and
xor
inc
pop
ljmp
xchg
xchg
adc
mov
or
jae
jo
or
sbb
xor
jg
loop
mov
shrl
ss mov
hlt    
(bad)  
cld    
and
outsb
lcall
addr16 sbb
inc
ret    
ss clc 
insb
add
dec
pop
push
pop
mov
and
ja
shl
stc    
jo
repnz or
incb
(bad)  
cmc    
stos
push
mov
sbb
rclb
push
outsl
push
rolb
hlt    
xor
ror
pop
sub
loope
cmp
xchg
fidivr
xchg
aad
cmp
cmc    
rorb
push
js
pop
jmp
and
arpl
notl
or
mov
lods
loop
ss cli 
das    
push
fnop   
lahf   
hlt    
loop,pt
std    
jle
push
fbstp
mov
mov
xor
stos
enter
cmc    
shrb
add
jge
int3   
pop
aam
push
movsl
cli    
jno
jno
pop
rcrb
movsb
mov
fs jns
mov
iret   
add
mov
mov
dec
cwtl   
movsb
push
mov
add
aad
lea
cmp
wrmsr  
and
sub
adc
aad
adc
add
push
cmc    
cwtl   
mov
std    
(bad)  
(bad)  
cmp
xchg
inc
cltd   
aas    
sbb
scas
cmp
js
mov
in
xchg
aam
(bad)  
aas    
lock cmp
(bad)  
mov
add
xor
or
pop
mov
loopne
lcall
repz imul
push
jbe
pusha  
push
(bad)  
jbe
mov
mov
arpl
dec
push
pop
and
bound
push
inc
pop
dec
fadds
movb
sbb
or
mulb
mov
repnz xor
out
ret
fildl
in
ja
dec
xor
(bad)  
mov
cs xchg
mov
pusha  
lock inc
and
mov
lock add
mov
add
xchg
and
test
das    
mov
daa    
ret
out
stos
cwtl   
inc
movsb
(bad)  
mov
adcl
add
repz or
jge
add
icebp  
dec
mov
mov
(bad)  {%k6}{z}
cmc    
xchg
fisubr
jnp
imul
inc
imul
cmp
adc
mov
out
sarl
scas
mov
daa    
addr16 sbb
fs mov
cmp
jns
popf   
outsl
clc    
lds
xchg
call
outsl
jle
mov
add
mov
repz es call
pop
jmp
test
ret
cmp
fsubrp
or
lea
add
fs sub
shlb
push
xchg
lods
stos
out
pop
daa    
out
mov
mov
xchg
test
lock push
imul
out
cltd   
and
sahf   
and
inc
jl
gs mov
fisubr
mov
dec
sbb
jl
imul
xor
int
dec
lods
jae,pt
sbb
in
es jo
cmpsl
nop
movsl
xchg
ds push
jp
xor
mov
push
inc
jmp
mov
subl
daa    
cwtl   
stos
inc
push
lret   
adc
cld    
(bad)  
clc    
push
lret
fsubrs
inc
icebp  
sub
pop
ficom
xor
pop
mov
fsubl
sub
mov
add
jge
js
cmc    
loop
jmp
loopne
(bad)  
popf   
into   
in
out
outsl
arpl
dec
xchg
js
es loope
add
test
mov
leave  
inc
dec
dec
lock daa 
(bad)  
mov
outsl
mov
push
enter
and
push
je
in
pop
sbb
(bad)  
sub
fistp
(bad)  
int3   
xor
mov
mov
push
push
orl
aam
stos
xor
(bad)  
xor
dec
push
lock or
adcb
fistl
add
lea
sub
test
shr
jae
arpl
stc    
mov
jns
push
lahf   
or
mov
or
xchg
mov
outsl
push
out
mulb
push
pop
jle
lea
(bad)  
add
push
ret    
push
mov
cmpsb
pushf  
jns
stc    
orl
push
jmp
inc
mov
outsl
dec
mov
xlat
xor
mov
sub
mov
dec
dec
cmpsb
rcll
loop
loop
out
mov
incb
xchg
roll
fcomp
out
xlat
xor
jmp
and
jge
jb
inc
(bad)  
mov
and
inc
fs cs dec
cmp
dec
push
xchg
xchg
je
push
push
adc
mov
xchg
enter
fwait
lods
xchg
add
ja
xchg
clc    
or
jno
lret   
mov
lret   
adc
mov
xchg
(bad)  
lock sbb
push
cmp
pop
cmp
push
inc
xchg
addr16 mov
gs lds
sub
mov
xchg
pop
pop
outsl
push
(bad)  
cs lahf 
cltd   
jo
pop
xor
mov
add
pop
sbb
or
test
cmc    
rcrb
shr
sbb
sub
mov
push
push
stos
stos
cmpsb
(bad)  
fnsave
add
sub
divl
sub
sbb
fs cmp
sarb
xor
adc
jnp
and
cmp
add
pop
es insl
cwtl   
repz ds pop
dec
rorb
(bad)  
mov
(bad)  
cmpl
ds mov
fisubl
push
stc    
xchg
add
gs push
stos
sti    
movsb
stos
push
les
sarl
cmp
repnz pop
addb
rolb
sti    
std    
sub
inc
adc
test
stos
or
fdivrl
mov
mov
(bad)  
cmp
and
xor
push
mov
cmp
pop
outsb
(bad)  
jecxz
jbe
pushf  
mov
adc
fdivl
and
push
in
mov
push
or
cwtl   
and
(bad)  {%k4}
mov
push
mov
push
lret
mov
inc
inc
fdivs
ret
jp
ficompl
sbb
fmuls
les
adc
mov
adc
fmull
ds gs mov
push
decl
(bad)  
imul
pop
push
cmp
loop
jne
jb
push
aad
jnp
aam
ret    
sbb
pop
sub
jb
pop
lds
aad
or
jo
rclb
adc
jnp
aaa    
push
or
icebp  
test
inc
popa   
or
loopne
stos
push
mov
jae
cmp
pop
aad
call
ss aaa 
sbb
int
nop
leave  
sub
and
js
in
(bad)  
pusha  
xor
and
push
subl
icebp  
dec
das    
inc
sub
loop
push
dec
xor
pop
enter
mov
in
mov
ret    
add
mov
pop
rclb
sti    
sbb
in
sahf   
mov
rcll
sub
int
mov
subl
pop
js
cmp
add
jne
pusha  
cs sahf 
push
and
leave  
or
jae
mov
repnz fwait
jecxz
sbb
mov
add
popa   
push
lds
sub
inc
dec
xchg
fstpl
mov
inc
mov
icebp  
mov
movsb
jg
cmc    
aaa    
(bad)  
movsb
insb
add
mov
bound
les
addr16 mov
jg
orb
fmuls
xor
call
stos
in
repnz push
push
std    
faddl
mov
insl
andl
mov
jle
pop
mov
lock inc
xor
aas    
mov
add
out
inc
out
mov
(bad)  
fstpt
adc
dec
repz inc
jecxz
data16 data16 jle
fisttp
repnz adc
jp
scas
inc
mov
xor
(bad)  
nop
mov
cmp
outsl
pop
pushf  
xor
outsb
pop
in
cmp
push
and
bound
rcrb
cmpsb
rcrb
cmp
mov
frstor
sti    
aaa    
jb
jne
mov
add
pop
cltd   
pop
mov
jno
xchg
adc
into   
movsl
jne
(bad)  
test
cld    
cmp
inc
adc
lock dec
xor
xor
sub
sub
inc
imul
inc
mov
mov
fistpll
pop
or
pop
and
sbb
mov
mov
xor
mov
mov
out
add
cli    
and
out
xchg
daa    
test
or
sub
mov
cmp
dec
jmp
das    
mov
lret
sub
inc
inc
ja
add
xor
xchg
in
cmc    
mov
xor
(bad)  
lret   
jbe
jno
inc
mov
mov
and
sbbl
lods
and
in
jle
inc
mov
aas    
pop
or
flds
call
leave  
pop
pop
mov
mov
dec
sbb
pop
out
js
adc
push
aas    
leave  
jle
cwtl   
xor
mov
pusha  
adc
mov
mov
aas    
sub
dec
lret
jo
dec
xor
adc
mov
pop
das    
movsb
jb
inc
loop
loop
xor
mov
dec
dec
cmp
lret
sub
fwait
scas
lahf   
insb
dec
addr16 sbb
push
pop
add
sub
gs mov
fsub
das    
(bad)  
sbb
mov
or
in
shll
lcall
ds or
or
lahf   
jnp
xchg
cmc    
push
pop
in
push
pop
dec
popf   
pop
(bad)  
lock and
imul
cmp
dec
mov
sbb
jg
add
sahf   
jp
xlat
in
mov
aad
jnp
lods
enter
pop
jo
cmp
adcl
ret    
lea
sub
dec
(bad)  
pop
test
addr16 mov
add
sub
push
cmc    
dec
jecxz
push
xchg
mov
out
cmp
mov
test
mov
xor
out
and
stos
add
mov
jp
mov
push
pop
xor
adc
mov
add
mov
dec
fbstp
sbb
rolb
aaa    
inc
dec
or
pop
mov
jne
aas    
aas    
jge
sbb
mov
sub
xor
pop
data16 std 
sbb
jle
xor
sbb
pop
push
out
rcrb
jne
nop
(bad)  
mov
fisubr
push
insb
xchg
frstor
dec
gs
sbb
aaa    
fisttp
push
pop
loopne
inc
inc
lcall
lea
aas    
mov
adc
xchg
push
dec
xchg
lahf   
lods
push
xchg
andl
xchg
scas
cmpsl
cltd   
mov
int
push
movsb
(bad)  
cmc    
xor
fnstsw
daa    
and
pop
and
add
stc    
mov
or
pop
(bad)  
or
push
ret
hlt    
in
xor
adc
sub
cmp
add
xchg
cmpsl
jge
movsb
cmpsl
xchg
sbb
mov
xchg
lcall
inc
je
adc
fcmovbe
das    
pop
insb
arpl
add
pop
into   
out
lods
pop
icebp  
test
jl
cmp
jnp
or
fsubrs
(bad)  
(bad)
push
mov
cld    
(bad)  
push
ss call
jge
sub
aas    
or
fsubs
test
cli    
adc
arpl
and
jl
sbb
inc
int3   
out
aaa    
xor
mov
(bad)  
xchg
out
insl
jae
std    
bound
std    
mov
sub
pop
lcall
aam
lret
or
cmp
mov
xor
mov
int3   
stc    
out
into   
jno
aam
stc    
inc
es lret
orb
lds
mov
push
mov
insb
jno
insl
paddq
fs pop
pop
scas
add
into   
mov
push
mov
jecxz
les
sub
repz inc
dec
and
ficoml
sub
mov
ljmp
sub
sti    
fimull
pushf  
adc
jecxz
add
push
jmp
les
aad
jle
or
inc
in
pop
sbb
idiv
fs pop
inc
add
mov
(bad)  
movsb
pop
and
into   
addr16 in
loop
lahf   
or
jbe
test
pusha  
cmpsl
insl
xor
test
jmp
imul
sbb
push
jg
enter
adc
in
cmpb
jmp
test
push
clc    
iret   
bound
div
mov
or
(bad)  
std    
loope
add
call
iret   
lcall
inc
fwait
adc
scas
sbb
lds
pop
cmpl
leave  
aaa    
insb
push
push
and
or
insb
jl
dec
inc
mov
call
lock call
mov
incb
lods
lcall
dec
xor
push
mov
push
lret   
dec
jnp
fcmovne
xor
in
int
dec
mov
lods
adc
(bad)  
inc
movsb
jp
mov
leave  
push
push
jo
pop
add
mov
das    
inc
push
insl
test
push
jg
arpl
daa    
xchg
sti    
cs xor
jmp
popl
dec
into   
push
xchg
lret   
sbb
aam
cmp
xor
bound
les
int
outsb
cmpsl
(bad)  
adc
mov
je
dec
add
sub
dec
sar
loopne
mov
sbb
pop
aas    
xor
cmp
sub
fimul
mov
inc
leave  
cltd   
inc
lds
dec
push
daa    
mov
pusha  
rcrb
divl
mov
hlt    
or
iret   
aas    
or
cwtl   
popa   
gs or
pop
cmpsb
sub
out
je
adc
jecxz
int
add
ficoml
mov
inc
stos
insl
aas    
mov
fwait
enter
cmp
sub
fldl
hlt    
cmp
test
out
sub
pushf  
sub
adc
(bad)  
aam
adc
mov
sahf   
sbb
cmp
ret    
out
hlt    
sbb
mov
roll
jo
fcomi
mov
pop
xchg
outsl
outsl
dec
pop
mov
inc
pop
push
sbb
loop
stos
insl
sti    
(bad)  
pop
push
jmp
out
mov
popa   
cmc    
lcall
ljmp
mov
lcall
in
rcll
or
ret    
ss imul
sub
adc
bound
and
fdivr
sbb
xchg
xchg
xchg
mov
dec
movsb
cmp
std    
stos
xchg
stos
jo
push
mov
sub
xor
xchg
dec
aas    
pop
mov
loopne
jp
jle
lcall
mov
mov
faddp
xor
fnstsw
sete
aaa    
add
xchg
lea
and
lret
xor
cli    
xchg
lock jmp
mov
ja
arpl
fisttpll
(bad)  
xlat
lcall
pop
push
or
xor
ss loop
shl
adc
dec
push
and
push
fwait
arpl
aad
cmpsb
lods
push
aas    
or
nop
xchg
adc
pop
roll
icebp  
jmp
call
iret   
imul
sbb
xchg
lock xchg
aas    
movb
sbb
lods
es
mov
sbb
push
aaa    
iret   
and
lcall
scas
jecxz
lds
push
add
fist
mov
add
notb
jecxz
aam
mov
mulb
sbb
inc
cwtl   
testl
sahf   
inc
addl
cld    
fistpl
push
dec
in
popa   
inc
dec
inc
enter
das    
mov
xchg
lds
fnstenv
insl
mov
(bad)  
loopne
testl
sahf   
std    
xchg
mov
loope
pop
push
and
jmp
jb
add
aas    
call
imul
sbb
or
sub
rolb
sub
add
jno
push
ljmp
in
mov
mov
(bad)
jbe
mov
movsl
xlat
ret
je
cmp
mov
or
inc
sub
pop
push
lcall
and
mov
shrb
aam
xchg
mov
jge
sbb
xchg
push
(bad)  
(bad)  
imull
mov
pop
cli    
shrl
stos
rcrb
sub
inc
repnz test
aam
dec
xchg
xor
test
ja
mov
pop
subb
fcompl
sbb
mov
aaa    
mov
pop
sub
ss stos
lock push
mov
dec
insb
mov
ss je
push
sahf   
jl
cmp
dec
mov
xlat
xor
hlt    
sub
lcall
pop
pop
push
xchg
or
mov
pop
pop
mov
push
shrl
ret    
(bad)  {%k4}
rolb
cmp
jae
in
add
(bad)  
jno
inc
xchg
fwait
hlt    
adc
add
mov
pop
dec
pop
fwait
rol
adc
jg
jb
mov
mov
(bad)
add
push
lahf   
push
adc
inc
jle
push
cmp
xor
jl
mov
into   
hlt    
jno
sub
jg
divl
jmp
js
pop
enter
mov
add
fwait
add
push
add
xor
outsb
dec
pop
cmc    
out
mov
push
fstps
aas    
mov
sbb
mov
jo
lahf   
jo
std    
xchg
dec
movsb
cmp
and
jmp
jle
sbb
xchg
pop
fmuls
pop
mov
(bad)
xor
in
inc
mov
lahf   
loope
sarb
jg
fsubr
rcrl
mov
dec
(bad)  
lods
mov
sbb
hlt    
addr16 in
mov
mov
xor
mov
loope
(bad)  
xchg
adc
dec
mov
xchg
loope
repnz pop
xlat
das    
push
adc
lahf   
xchg
movsl
fidivl
dec
cmpsl
mov
in
fdivr
scas
jns
mov
pop
xchg
lods
push
repz pop
lods
cmp
dec
or
sbb
dec
arpl
(bad)
or
sub
fist
repnz cmc 
sub
sub
lods
mov
insl
test
popf   
dec
mov
insl
je
and
loop
ffreep
adc
and
adc
mov
sub
fcomp
(bad)  
add
stc    
pop
sbb
fmul
js
and
scas
adc
clc    
aaa    
jmp
fbld
loop
pop
sbb
lds
cli    
shl
lods
repnz push
jbe
xchg
add
(bad)  
cmpsl
mov
push
jmp
(bad)  
(bad)  
inc
inc
pop
pusha  
jnp
mov
imul
or
call
lret
xlat
out
int3   
(bad)  
mov
aaa    
(bad)  
xchg
lret
(bad)  
mov
pop
lret   
fldl
dec
mov
jnp
jbe
add
notl
cld    
xor
outsl
cli    
imul
and
push
out
push
(bad)  
cmpsb
sub
add
pop
rcr
lcall
int3   
add
(bad)  
into   
add
adc
xchg
stc    
in
or
popf   
lods
add
cltd   
jb
adc
push
xchg
mov
out
sub
sub
ret    
sub
sbb
(bad)  
insl
sub
xor
push
sti    
mov
js
mov
cmpsl
xchg
mov
ds cmp
cmc    
stos
aam
lret   
ret
fcoml
cltd   
mov
and
addr16 not
push
push
movsl
or
fsubl
add
pusha  
sbb
rep outsb
daa    
ja
and
ficom
mov
inc
dec
push
xor
repnz inc
adc
pop
dec
push
adc
sahf   
dec
out
repz cmpsb
aad
push
loop
add
imul
mov
stos
repz adc
push
fdivr
(bad)  
mov
loope
xor
in
and
out
(bad)  
pop
test
scas
(bad)  
enter
test
daa    
(bad)  
shrl
dec
les
pushf  
daa    
(bad)  {%k4}
xor
je
sarl
and
mov
inc
out
sbb
rclb
shrb
(bad)  
jbe
ljmp
cmc    
or
and
jb
xchg
js
sub
idivb
xchg
bound
push
pop
adc
adcl
cmp
into   
and
push
add
push
and
jge
jle
lds
cli    
adc
imull
shlb
jno
jo
sbb
add
add
jns
lods
mov
sbbl
push
pop
mov
adc
sarb
sahf   
pusha  
ret    
int3   
lcall
fisubrl
dec
sub
insb
in
ljmp
mov
out
jp
enter
inc
cli    
inc
mov
cmp
rcr
lea
test
aad
mov
lds
aad
ds inc
icebp  
movsb
cmpsb
push
pushf  
sub
pop
jg
mov
xchg
mov
and
out
add
mov
stos
adc
xor
imul
insb
mov
mov
jl
mov
mov
outsb
pop
nop
daa    
adc
pop
push
mov
jns
les
cld    
insb
sbb
mov
xchg
xor
test
test
mov
inc
sbb
and
jecxz
dec
sahf   
imul
subl
sbb
arpl
sub
nop
arpl
jmp
fnstcw
push
xchg
dec
mov
pusha  
mov
(bad)  
call
enter
arpl
xor
loopne
cmp
xor
lret   
lret
sub
data16 cmp
push
(bad)  
(bad)  
mov
fcmovnbe
mov
pop
push
push
gs pushf 
std    
mov
mov
cld    
ljmp
push
(bad)  
repnz add
lahf   
jno
pushf  
std    
lcall
and
push
xchg
xchg
or
sti    
mov
pop
scas
fcmovu
ds into 
cmpsb
in
jp
(bad)  
jo
imul
adc
addr16 jmp
jmp
cmp
mov
adc
insb
push
push
adc
jbe
mov
pop
in
fwait
jo
fsubl
mov
add
int3   
inc
mov
aas    
dec
lahf   
test
mov
iret   
add
int3   
mov
movsl
adc
mov
popf   
call
in
ja
xor
int3   
orl
xchg
cltd   
(bad)  
mov
xchg
(bad)  
cmp
pop
jns
or
sti    
mov
pop
push
test
fstpl
or
sbb
xchg
xchg
xchg
pop
ret    
mov
insl
(bad)  
push
pop
test
aad
push
mov
push
push
ja
and
das    
add
dec
mov
repz or
mov
popa   
dec
xchg
and
repnz lahf 
lahf   
aas    
lea
cmp
dec
fwait
and
push
pop
or
repnz pop
cwtl   
pop
imul
fimul
js
xchg
pop
inc
or
xlat
loop
or
rcll
inc
xchg
xchg
or
push
adc
xor
pop
divb
nop
push
mov
dec
lahf   
push
mov
lods
fimull
fcompl
jnp
jecxz
and
pop
mov
lahf   
and
pop
fcmovne
cli    
dec
cld    
fbstp
mov
les
ja
repz cmp
repnz push
sub
jo
js
add
push
lahf   
cmp
push
(bad)  
xchg
cmpsb
push
pop
and
jle
ret    
(bad)  
pop
mov
int3   
dec
push
cmp
and
(bad)  
lret   
aaa    
mov
test
insb
push
in
cmc    
mov
iret   
jmp
xor
cwtl   
(bad)  
and
push
in
sbb
sub
das    
ffree
jae
jo
cwtl   
mov
pop
mov
call
xor
iretw  
pop
jbe
cmp
sub
shrb
or
pop
call
xor
fistpll
out
(bad)  
cmc    
in
mov
mov
adc
xor
ret    
(bad)  
sahf   
fimull
sbb
in
sbb
sahf   
mov
imul
and
int
push
fnstcw
jecxz
xchg
in
inc
lret   
outsb
clc    
mov
mov
(bad)  
flds
pop
fwait
pop
sti    
cmp
mov
sbb
xor
sub
push
jmp
jp
and
pop
scas
pusha  
inc
aas    
mov
sti    
out
cld    
in
clc    
popl
gs
sbb
jo
call
ret    
xchg
push
testl
inc
jnp
daa    
cli    
ds mov
test
push
jp
std    
pop
(bad)  
cmp
js
push
loope
(bad)  
mov
pop
pop
sbb
loope
mov
(bad)
jno
mov
addl
clc    
ret
ljmp
pop
cli    
cmp
mov
jmp
mov
sarl
or
dec
into   
dec
inc
or
cmp
mov
adc
inc
lods
sahf   
out
sub
aad
jge
and
xor
sbb
lea
(bad)  
mov
les
mov
lods
push
push
scas
xor
mov
cmp
(bad)  
cld    
sub
adc
loope
sarl
jg
sub
hlt    
(bad)  
jmp
adc
jl
sahf   
fucomp
(bad)  
pop
push
lock les
cli    
add
dec
jmp
mov
inc
lahf   
es jnp
cwtl   
mov
stos
xor
sub
and
(bad)  
(bad)  
inc
je
mov
cs inc
xchg
push
nop
sbb
cwtl   
je
lock mov
stc    
jle
jo
ret
push
fimull
in
sub
add
pushf  
ficom
movl
out
mov
repz jae
mov
fist
sub
leave  
cmp
bnd je
gs scas
imul
imul
pop
mov
into   
shrb
lods
adc
test
jno
pextrw
or
clc    
fbld
mov
mov
rolb
in
imul
neg
movsl
cmpsl
dec
jae
xlat
cmp
divl
insl
and
mov
cmp
inc
mov
sbb
sbb
mov
push
fbstp
adc
sarb
in
add
add
das    
cmp
sarb
ljmp
pop
loopne
cli    
inc
test
out
insb
xlat
(bad)  
(bad)  
ss insb
xor
jle
mov
cmc    
sbb
(bad)  
xor
sub
pop
cmc    
cmp
popa   
sbbb
xor
jle
add
sub
shrb
inc
test
jmp
orl
frstor
lea
pushf  
mov
cmp
sbb
cld    
mov
or
jbe
jne
pop
push
rcrb
push
(bad)  
in
jbe
xor
cld    
jae
roll
lret
rcr
dec
rorl
aam
js
rorb
test
jo
in
xor
(bad)  
jb
cwtd   
or
mov
xor
out
pusha  
gs xchg
xor
mov
pop
insl
add
fwait
push
dec
mov
pop
xor
cs or
cwtl   
int
jne
mov
insb
sbb
(bad)  
and
or
ficompl
pusha  
or
dec
jmp
xchg
out
stc    
outsb
pop
ja
adc
pop
aam
(bad)  
xor
ds into 
jns
pop
adc
insl
cmp
ret
jns
je
movsl
mov
xchg
loop
negl
dec
sub
lret
(bad)  
pop
mov
push
imul
aad
fbstp
in
jb
mov
sbb
push
mov
add
mov
outsb
add
fstpt
push
movsl
repz mov
(bad)  
mov
cmp
mov
and
mov
mov
shrb
mov
sbb
cwtl   
lea
adc
lea
rcr
inc
fs sbb
lea
jnp
cmpsl
ret    
cmp
pop
enter
pop
xor
sub
adc
sbb
ret    
cmp
jge
out
rcll
ss lret
push
jno
imul
movsb
push
adcl
push
adc
push
out
and
adc
in
pop
dec
imull
mov
cmp
mov
inc
clc    
(bad)  
incl
iret   
inc
pop
and
ret
imul
mov
sbb
mov
sub
xchg
roll
pop
fmuls
popf   
les
ljmp
sub
or
sub
cmp
aaa    
movsl
in
cmp
lock jg
aam
int
je
fmull
lods
ljmp
xchg
or
jecxz
ret
inc
push
shl
and
cmpsb
xchg
add
jo
push
or
push
dec
push
ljmp
adc
xor
ja
ffree
mov
jno
hlt    
jae
int3   
ret    
bound
sbb
sbb
mov
mov
iret   
addr16 inc
mov
ret    
jnp
mov
and
or
cmp
cli    
sub
insb
(bad)  
test
xchg
mov
repnz sub
cmp
aad
aam
out
jmp
ret
and
adc
in
mov
ret
dec
add
gs in
in
push
rolb
push
sub
mov
push
inc
cs push
outsl
lret   
movsb
mov
fist
cmpsb
scas
mov
jno
cli    
shrb
in
fbld
movsl
xor
(bad)  
jnp
adc
add
push
mov
rorb
mov
dec
push
scas
loop
or
movsl
and
subl
and
faddl
and
mov
sbb
in
lahf   
(bad)  
add
lods
sbb
fldcw
das    
into   
sahf   
aad
xchg
pop
xor
stos
push
sub
inc
sahf   
(bad)  
mov
mov
mov
inc
out
je
imul
push
pop
xor
std    
scas
pop
dec
es xor
mov
stos
or
or
hlt    
int3   
mull
es das 
cwtl   
mov
rcrb
mov
les
mov
popf   
lods
inc
cmp
jne
push
in
sbb
gs dec
imul
pop
shrb
lods
and
cmpl
pop
inc
shrb
iret   
or
inc
add
(bad)  
in
lea
out
push
dec
movsl
jl
pop
(bad)  
or
and
scas
and
sahf   
mov
push
sub
outsb
jle
es ds std 
arpl
mov
or
rdpmc  
ret
sub
stos
je
push
xchg
gs out
cs adc
je
nop
or
hlt    
daa    
in
xchg
add
mov
cmpsl
push
sbb
cmc    
mov
sbb
and
xor
sbb
cmp
js
insb
mov
jg
mov
mov
mov
jp
xlat
gs mov
addb
cmp
out
repnz insl
(bad)  
int3   
pop
sbb
push
jge
sti    
mov
adc
shl
push
dec
iret   
mov
jecxz
jb
std    
std    
inc
aam
cmpsb
push
out
adcb
outsb
jecxz
mov
addr16 inc
outsb
sub
stos
jns
adc
dec
lea
sbb
cmp
outsl
loop
insb
subl
cli    
(bad)  
sbb
or
lcall
add
pop
fistp
adc
dec
sahf   
pop
je
mov
jne
push
push
out
(bad)  
aaa    
mov
push
pop
jge
xor
cwtl   
lahf   
mov
arpl
sar
cli    
jne,pn
cmp
jns
test
cmpsb
mov
add
sbb
ds mov
sti    
inc
aad
pop
(bad)  
sbb
(bad)  
or
scas
push
bound
cmp
inc
pop
mov
jmp
jg
jl
addb
lods
cld    
bound
(bad)  
jl
aam
jbe
sbb
lret   
cmp
popa   
jbe
outsl
or
mov
in
cli    
ret    
(bad)  
hlt    
xor
sbb
test
movsb
or
push
jge
pushf  
jmp
aam
mov
mov
dec
push
dec
jg
pop
fdiv
mov
sub
dec
add
aad
inc
dec
sub
lock scas
subl
scas
pushf  
int
cmp
mov
mov
cmp
aas    
adc
inc
xchg
adc
sub
xchg
in
push
cs sub
push
lret
mov
gs insl
xchg
cmpsl
outsl
bound
or
fs jo
or
mov
(bad)  
je
xchg
in
jecxz
push
mov
add
add
lret
push
xor
jne
adc
outsb
lea
mov
cltd   
rorl
or
dec
es sbb
mov
(bad)  
cmp
or
and
and
jle
push
and
sub
and
push
jp
jge
pushf  
jo
inc
test
mov
mov
inc
inc
jp
ficoml
(bad)  
out
sbb
inc
jo
adc
into   
ret    
xchg
insb
and
lods
icebp  
jnp
cmp
xor
or
and
dec
test
mov
dec
and
loop
fmuls
pop
test
jnp
jmp
sti    
loop
lret
xchg
pop
cmp
in
jmp
fdivs
sub
fist
ret    
mov
int
sbb
inc
add
insl
lds
xchg
xchg
repnz fdiv
mov
orl
mul
std    
push
negb
fcom
push
outsl
outsl
int3   
lret
push
jmp
cmp
xchg
xchg
orb
pop
xchg
cli    
pusha  
pop
dec
scas
xlat
xor
data16 fninit 
push
cwtl   
lahf   
add
pop
hlt    
cli    
cltd   
mov
mov
adc
cmp
insl
mov
adc
(bad)  
jne
inc
push
sbb
ret    
push
push
cmp
jbe
add
xchg
and
nop
inc
adc
(bad)  
icebp  
cmpsl
xchg
notl
lret   
mov
les
int
adc
jae
or
repnz leave 
sub
popa   
mov
mov
lea
les
jg
out
mov
jp
das    
into   
and
or
mov
mov
ljmp
mov
or
push
sbb
cmp
(bad)  
ja
mov
test
jl
clc    
outsb
inc
sahf   
dec
sahf   
(bad)  
enter
jg
int
hlt    
fmuls
mov
jl
dec
jp
test
idiv
pop
pusha  
imul
dec
xchg
xor
jl
jno
lahf   
out
std    
adc
dec
rol
add
add
cmpsl
xor
jge
mov
mov
in
aad
out
xchg
repnz cmp
push
(bad)  
mov
xchg
lea
sti    
pop
pop
add
call
out
enter
stc    
std    
xchg
mov
lcall
push
aam
nop
es cltd 
in
loop
cmp
imul
ret    
sbb
shll
sarb
dec
call
mov
mov
jbe
or
(bad)  {%k4}
adc
data16 insb
lahf   
out
push
add
adc
je
ret    
and
xchg
ss pushf 
sub
in
sub
xchg
cmp
dec
inc
bound
aam
clc    
movsl
push
(bad)  
mov
add
sub
adc
fistpll
add
and
jle
sti    
mov
pushf  
push
mov
ds cs push
mov
test
and
ret    
dec
sub
xchg
cmc    
lcall
jnp
xchg
add
int
and
aas    
shl
xchg
cmpsl
xchg
jnp
add
(bad)  
fdiv
lcall
in
sbb
inc
pop
cmpb
out
shlb
fcmovnb
std    
dec
adc
xor
push
mov
mov
pop
jbe
imul
jecxz
jo
scas
rorb
rorb
lahf   
je
stos
mov
pop
inc
js
addr16 aam
scas
jnp
fbstp
fstps
jp
daa    
adc
mov
jle
into   
pop
sbb
or
in
mov
sbb
xchg
jnp
pop
mov
mov
sbb
ficomp
mov
bound
sbb
mov
daa    
test
push
or
cmpl
xchg
sub
and
fistp
push
jmp
aaa    
sub
mov
pop
xlat
popa   
ss jns
mov
fldcw
stos
xchg
adc
pop
push
or
sub
andl
sub
mov
sbb
sbb
(bad)  
(bad)  
jae
mov
jo
dec
std    
add
cs scas
dec
or
test
cmc    
mov
mov
mov
insl
fdivl
mov
xor
fucom
js
sbb
cmc    
outsb
aam
push
(bad)  
ds enter
test
in
ja
inc
cmp
das    
pop
and
or
clc    
xor
mov
pop
ss push
and
(bad)  
sbbl
fst
mov
push
aam
mov
push
jne
sub
xor
sahf   
xchg
jp
aad
mov
test
rcr
cld    
and
ret
jbe
and
pop
in
jns
cmp
loop
or
xor
sti    
or
dec
(bad)  
jmp
fs dec
fwait
lock hlt 
and
int
xchg
loop
sub
js
jae
sbb
add
les
arpl
js
cwtl   
sub
outsl
add
aaa    
in
(bad)  
sahf   
inc
mov
mov
pop
icebp  
movsl
sbb
cli    
or
roll
mov
mov
cmp
add
jg
in
pop
sbbl
out
pop
add
xchg
(bad)  
loope
int
mov
dec
rorb
stos
fdivl
stos
mov
movl
push
inc
ja
es
cli    
in
mov
repnz dec
xor
fist
jge
ja
xchg
inc
jnp
sbb
xchg
push
pop
cmp
stos
adc
adc
jmp
ljmp
push
popa   
gs mov
ret
cmpsl
adc
sub
xchg
mov
jne
mov
jnp
into   
push
sub
cmpsb
jne
xchg
cmpsb
cltd   
(bad)  
dec
or
pop
mov
scas
add
gs push
mov
loope
or
imul
lods
(bad)  
test
loope
add
fisub
aad
xchg
iret   
test
std    
rcr
dec
hlt    
cld    
fcomi
inc
mov
das    
xabort
xor
pop
out
fwait
pop
stc    
enter
pop
std    
jb
enter
pop
pop
jae
mov
sub
mov
pop
mov
mov
pop
push
aad
pop
and
lea
dec
ja
push
mov
cltd   
das    
mov
or
jne
and
std    
imul
cmp
push
inc
ret    
aam
insl
push
cmpsl
(bad)  
cmp
(bad)  
sub
mov
mov
aam
inc
sbb
ljmp
adc
xchg
int3   
sbb
xchg
cwtl   
decl
ja
jae
test
sbb
xchg
xor
lods
repnz loopne
sub
(bad)  
push
mov
sub
push
adc
xchg
jae
in
lahf   
pop
mov
inc
ret    
xchg
imul
aad
mov
es shr
je
cmpsl
aaa    
push
nop
(bad)
pop
(bad)  
repz cmp
imul
fistpl
and
dec
imul
add
push
(bad)  
pop
int
ss js
and
lcall
xchg
adc
sub
xchg
rcll
fwait
das    
sub
fnsave
in
(bad)  
push
in
jmp
cli    
mov
stos
cmc    
mov
jge
mov
adc
insb
adc
jb
inc
jp
add
int3   
sbb
cmp
sbb
adc
lds
cmp
dec
cmp
cmp
out
mov
dec
add
lea
outsl
jbe
shrl
and
inc
jecxz
xor
and
push
jno
cs xchg
int
sub
or
mov
enter
hlt    
not
inc
mov
mov
loope
mov
and
insb
mov
fcmovnbe
xchg
icebp  
pop
xchg
bound
xchg
lods
(bad)  
leave  
mov
fwait
dec
cld    
scas
and
js
js
xchg
add
or
jns
es push
adcl
xor
das    
shrb
repnz mov
pushf  
xchg
fadds
sbb
sbb
shrb
fildl
mov
call
lock dec
jns
and
jle
jg
or
push
(bad)  
sbbl
scas
xor
cmp
push
(bad)  
insl
es
sbb
sub
cli    
jecxz
push
lahf   
ds hlt 
aam
fdivrl
jne
mov
int3   
popa   
inc
(bad)  
aaa    
inc
lret   
fidivrl
hlt    
push
arpl
mov
repnz fwait
imul
call
icebp  
cmp
mov
xchg
add
xchg
les
jns
jnp
mov
popa   
mov
add
paddd
jge
loopne
mov
cmp
(bad)
mov
sub
dec
fwait
pushf  
outsl
push
mov
mov
ljmp
aas    
xchg
push
ror
push
inc
jge
orl
pushl
jmp
hlt    
bound
and
cmp
add
mov
adc
sub
aaa    
jne
jo
stos
sahf   
adc
mov
fldenv
jmp
bound
aam
mov
fldcw
les
mov
dec
rclb
clc    
cmp
push
mov
lret   
push
roll
loope
cltd   
sub
fiaddl
into   
mov
xchg
iret   
in
test
stos
adc
ss mov
xor
jb
or
jecxz
in
jbe
jp
sbb
and
ja
repz mov
outsl
sub
mov
adc
inc
setge
push
dec
and
inc
jae
push
jl
inc
dec
xor
pop
lods
pop
push
pop
rorb
int
pop
cmp
and
cmp
shrl
das    
mov
dec
cmp
aam
xor
ds push
cmpsb
xlat
and
imul
sub
adc
push
iret   
and
mov
jl
in
xor
(bad)  
xor
insb
xor
pop
sti    
mov
xchg
loope
(bad)  
out
ja
ret
jns
inc
mov
call
(bad)  
scas
es pop
xchg
aaa    
mov
scas
fs and
sub
jge
data16 cmpsb
mov
mov
popl
out
rcl
xor
push
(bad)  
cmp
xor
sbbl
mov
xor
mov
add
test
add
in
lds
push
mov
scas
mov
outsl
mov
in
mov
push
jns
mov
imul
fs cmp
xchg
aas    
pop
xor
int3   
jmp
repz xchg
jp
call
call
call
les
std    
and
fwait
stc    
push
lods
fild
xor
mov
test
lds
fs int3 
aas    
and
pop
cld    
imul
repz pop
out
jle
lods
(bad)  
out
and
mov
xor
cli    
or
mov
sti    
repz sbb
daa    
adc
mov
notl
xor
inc
sub
pop
out
(bad)  
or
xchg
or
jmp
mov
lcall
mov
mov
fs fs ret
add
cmp
or
pop
ds test
add
mov
out
addr16 add
adcl
mov
jmp
mov
dec
cmp
jmp
mov
sub
jle
shlb
ds pushf 
cmc    
pop
add
xchg
cmc    
dec
lods
pop
mov
(bad)  
cli    
xchg
fiaddl
outsb
or
xchg
std    
adc
repz in
dec
outsl
sub
add
push
push
pop
cld    
les
aad
and
xchg
mov
in
outsb
adc
ret    
scas
add
rorb
sub
mov
mov
mov
lock push
sbb
notl
icebp  
out
mov
dec
(bad)  
mov
add
xchg
stos
ret    
mov
repz rcrb
mov
ljmp
test
push
rolb
inc
sbb
sbb
jae
(bad)
adc
pop
xor
inc
mull
jmp
rorb
jns
clc    
push
mov
inc
mull
in
sub
jns
lahf   
jbe
mov
mov
mov
into   
sub
jle
mov
xchg
int
arpl
in
sub
leave  
fstl
fwait
sub
or
adc
cli    
add
mov
in
loopne
xor
dec
cmpl
outsb
movsb
mov
int
sub
jbe
jbe
pop
fisttp
scas
test
xchg
or
cmpsl
lret
cmp
cmp
repnz pop
pusha  
inc
mov
out
lahf   
inc
dec
mov
roll
into   
icebp  
push
inc
pop
mov
inc
sbb
mov
inc
faddl
dec
inc
call
repnz
int
(bad)  
adc
cmpsl
movsl
stos
mov
icebp  
aaa    
push
cmpsl
fsub
mov
sbb
icebp  
mov
enter
mov
mov
lret   
popf   
lds
jae
fwait
sbb
xchg
cld    
test
cmpsb
cwtl   
pushf  
push
insb
jo
cmp
int3   
mov
scas
sbb
je
into   
(bad)  
cmpsb
mov
orl
loopne
jb
(bad)  
(bad)  
push
and
adc
mov
out
sub
enter
inc
daa    
or
mov
dec
imul
mov
(bad)  
mov
jb
cmp
fdivl
jnp
pop
(bad)  
cmp
sub
pop
push
aam
mov
and
dec
mov
(bad)  
rcrl
scas
sub
gs dec
int3   
inc
mov
or
data16 daa 
arpl
sti    
mov
lea
les
sbb
jg
imul
pop
sahf   
and
adc
pop
(bad)  
jne
in
fbld
call
mov
dec
add
loope
mov
pop
popa   
push
arpl
jp
sbb
mov
jbe
in
pop
sub
cmpsb
divl
orl
xchg
sti    
add
lods
adc
outsl
sbb
idivb
rcrb
les
xor
arpl
das    
mov
iret   
add
lods
out
inc
jmp
test
sbb
imul
jae
inc
cwtl   
pop
fwait
cmp
lret   
(bad)  
mov
das    
and
jne
push
mov
insl
movsb
or
rcll
add
mov
cmc    
imul
sub
ret    
cmp
in
cmp
sub
cmp
into   
or
sub
loop
pop
cld    
push
push
and
jbe
mov
inc
xchg
in
xor
data16 arpl
sahf   
add
hlt    
mov
push
ja
jge
seta
ljmp
push
mov
and
cwtl   
rol
adc
dec
add
stos
mov
push
sub
jbe
imul
add
mov
mov
sub
icebp  
fiaddl
and
std    
and
popa   
or
outsb
dec
enter
sub
es dec
sub
stos
xor
cs scas
jge
es lret 
adc
xchg
leave  
(bad)  
or
sbb
or
stos
push
cmpsl
movl
clc    
cltd   
mov
and
loopne
pop
daa    
popf   
and
lock fiadd
inc
mov
pushf  
and
imul
xorl
cmp
jl
std    
rcll
push
jns
fs jo
xlat
jnp
mov
xlat
sbb
dec
push
cmp
loope
or
mov
mov
add
sub
inc
subl
dec
mov
out
icebp  
pop
mov
cs or
add
push
jae
xchg
cwtl   
outsb
fimul
jns
xchg
adc
lret   
mov
mov
rol
aaa    
loop
mov
mov
mov
pop
out
shlb
xor
xor
add
std    
push
pusha  
test
lods
fwait
dec
or
adc
dec
mov
les
sub
sub
(bad)  
mov
xchg
cmp
rcl
pop
xchg
or
sbb
cltd   
xchg
fcompl
jne
mov
xchg
mov
imul
lds
mov
lea
mov
push
clc    
sbbl
popf   
xor
mov
int3   
sub
add
test
faddl
mov
sbbl
sbbl
dec
jge
insl
push
pop
jle
out
sarb
icebp  
mov
mov
mov
adc
aaa    
pop
data16 in
(bad)  {%k4}
lds
int
add
pop
mov
mov
in
out
sbbl
repz mov
sbb
test
negl
in
dec
scas
jl
or
dec
fwait
jbe
xchg
imul
mov
sub
mov
inc
jmp
mov
adc
inc
xchg
xor
xor
xor
mov
enter
and
cmp
mov
scas
jge
(bad)  
pop
pop
xchg
aam
xchg
xchg
jmp
jnp
mov
push
fs cmc 
out
pop
mov
add
jo
insb
nop
enter
(bad)  
and
xchg
lret
stc    
ja
mov
mov
mov
sbb
jnp
lret   
and
adc
stos
sub
sub
aas    
pusha  
pop
stos
in
push
push
lcall
fisubl
cmc    
push
movsb
repz les
scas
dec
loopne
roll
popa   
lods
jmp
pop
stos
(bad)  
sbb
push
cmp
jb
addr16 jo
push
scas
lea
pop
push
xchg
sub
sub
shl
xchg
xor
push
stos
push
pusha  
xchg
pop
dec
lds
sbb
imul
fistl
data16 mov
sahf   
cmc    
cmpsl
mov
in
sub
popa   
mov
lcall
or
in
inc
nop
cmc    
xor
stos
xchg
(bad)  
adc
cwtl   
inc
insl
mov
mov
arpl
add
jnp
jge
test
inc
lock sbb
cmp
movsb
gs pushf 
into   
add
imul
add
loope
xor
lds
mov
fiaddl
mov
in
or
xchg
xchg
jnp
pop
aad
lret   
lcall
inc
outsl
test
iret   
idivb
jae
(bad)  {%k4}
(bad)  
push
adc
push
jb
sub
jnp
push
mov
jns
inc
adc
xchg
inc
sub
ja
xchg
pop
out
pop
cmpsl
roll
scas
lea
test
stos
or
imul
add
dec
inc
scas
inc
pusha  
(bad)  
or
add
add
(bad)  
(bad)  
(bad)  
incl
add
add
add
add
add
add
jns
je
insl
cs inc
jb
ja
outsb
addr16 sub
push
gs jb
imul
xor
xor
inc
jne
je
jb
cmp
jb
insb
sub
push
jne
insb
imul
imul
bound
xor
data16 aaa 
xor
fs xor
add
adc
gs insl
cs inc
jb
ja
outsb
addr16 cs inc
imul
add
popa   
je
pop
add
add
add
add
add
lsl
add
jno
add
add
or
or
add
or
add
add
add
dec
or
add
add
(bad)  
and
add
add
inc
dec
inc
add
mov
or
popa   
add
jo
pop
jae
add
ret    
add
push
ret    
add
outsl
test
add
cmp
push
push
test
xchg
add
fidivr
sbb
int3   
sbb
es loopne
pop
fcompl
push
push
aad
and
out
mov
flds
fwait
js
repnz cmpsl
or
inc
fiaddl
(bad)  
ss jle
pop
add
repz sub
jb
sub
daa    
mov
push
(bad)  
std    
sub
out
sbb
push
add
push
sub
mov
add
xchg
int
rclb
data16 jne
test
outsb
xchg
leave  
jge
mov
cwtl   
jg
xchg
ljmp
jns
in
dec
aaa    
inc
or
ss cltd 
addr16 hlt 
sbb
inc
and
mov
arpl
adc
jle
or
pushf  
addb
xchg
or
lds
xchg
add
lret   
sbb
adc
lcall
mov
cmpsl
cmpsl
mov
aas    
xor
sarl
je
jl
popa   
test
sub
cmp
xor
jecxz
subb
addr16 es pop
pushf  
cmp
incb
add
mov
subb
call
mov
aad
mov
shlb
xchg
sub
icebp  
xchg
push
aaa    
(bad)  
aas    
xchg
push
clc    
jecxz
sbb
jnp
mul
out
jge
jecxz
ffree
leave  
je
sub
repnz repnz pop
adc
cmp
hlt    
frstor
stc    
fisub
add
xor
or
inc
rclb
add
xchg
mov
jp
jecxz
arpl
xchg
push
divl
pop
mov
jne
fdivs
rcr
scas
in
cmpsb
(bad)  
mov
mov
(bad)  
ja
ret
sbb
leave  
int3   
movsb
rorb
jl
movsb
inc
push
(bad)  
enter
adc
dec
add
or
mov
jb
aam
repz mov
loope
add
subl
lock in
sub
pop
fcomps
ja
push
rcl
xchg
mov
arpl
jl
jno
xchg
js
xchg
movsl
or
mov
sbb
icebp  
pop
lock mov
repnz test
hlt    
in
ss
outsb
mov
ljmp
aas    
jbe
mov
mov
(bad)  
xlat
arpl
imul
ss
xor
xor
mov
movhlps
add
inc
shlb
shl
xor
cmp
seta
push
push
int
push
sbb
outsb
stc    
in
mov
andb
aad
add
adc
jb
jmp
xchg
xchg
adc
push
dec
mov
test
data16 add
jmp
stos
jl
clc    
jo
xchg
xchg
and
xor
iret   
test
or
ret    
or
push
add
push
sub
int
add
push
or
ja
push
arpl
int3   
adc
and
repnz
jl
out
and
test
jg
mov
nop
xor
in
inc
scas
gs pop
xchg
xchg
cmpsb
std    
xchg
int
test
int3   
lcall
scas
mov
jbe
add
rclb
fcoms
loope
and
xchg
inc
sub
xchg
mov
mov
mov
aas    
int
jmp
cwtl   
xchg
movsl
mov
xor
xchg
cwtl   
in
mov
mov
sbb
push
enter
cmp
in
cmpsb
mov
mov
mov
cltd   
andl
pop
xchg
lahf   
js
cmp
mov
pop
mov
lock cs sbb
lret
dec
jns
(bad)  
int
push
mov
sti    
clc    
inc
aas    
push
nop
pusha  
mov
movsb
jne
and
scas
fdivrp
inc
lret
sbb
(bad)
mov
int
outsb
rol
(bad)  
roll
notl
cmp
xlat
sarl
mov
mov
pop
mov
mov
mov
pusha  
xor
cmp
in
bts
mov
das    
dec
pop
arpl
arpl
sar
ret    
jp
cli    
jnp
adc
rcll
stos
scas
dec
and
mov
jb
lock mov
lods
scas
loopne
imul
jae
in
(bad)  
adc
xchg
pop
(bad)  
stc    
sti    
aad
mov
dec
iret   
cltd   
movsl
(bad)  
arpl
mov
add
mov
mov
jecxz
pop
sbb
aam
xor
or
inc
inc
(bad)  
mov
in
pop
inc
repz imul
rcrb
sti    
repz mov
dec
shlb
in
mov
cli    
daa    
or
inc
insl
repnz sar
cmp
dec
(bad)  
sbb
or
imul
xlat
fwait
jbe
sbb
test
mov
ljmp
mov
mov
fsubl
inc
dec
xchg
jmp
mov
mov
jl
imul
xchg
(bad)  
insb
hlt    
loopne
adc
mov
xchg
add
test
mulb
inc
lods
mov
jnp
fisub
cwtl   
mov
repnz dec
ror
scas
movsb
add
xor
cmpsl
and
xor
ret    
sahf   
or
xor
mov
or
js
shll
fldt
jnp
negb
and
and
mov
(bad)  
fsubrl
mov
sub
ret
sbb
scas
test
lods
iret   
mov
xchg
in
or
push
divl
add
dec
and
stos
add
popf   
insl
ja
loopne
lds
push
inc
cmp
sbb
mov
push
outsb
and
in
mov
mov
xor
adc
iret   
call
mov
ja
xor
mov
push
aam
add
xchg
ret    
xchg
repz xor
or
push
clc    
dec
or
icebp  
xor
push
std    
cs fs imul
outsl
jmp
xchg
gs test
cld    
add
test
fs push
(bad)  
out
cli    
xor
cmp
sti    
add
(bad)  
fildll
pop
adc
fwait
jecxz
xor
(bad)  
push
lret
and
lock ficom
scas
fimul
(bad)  
sbb
jb
add
popl
decb
jg
xchg
and
inc
(bad)
(bad)  
icebp  
add
push
sub
insl
daa    
pop
push
ucomiss
mov
shrb
out
bound
call
and
dec
sbb
or
pop
xchg
mov
adcl
add
jl
add
pop
rcrb
adc
movsl
adc
sbb
sbb
xor
push
mov
add
pop
popf   
jmp
in
fdivl
xchg
xor
fcomi
push
push
mov
pusha  
loop
jo
jb
xchg
dec
imul
loope
aaa    
stc    
pop
lock mov
add
mov
jmp
outsb
push
cwtl   
mov
sbb
ret    
mov
or
or
xchg
push
jb
cmpsl
lods
std    
or
or
fdivs
(bad)  
cltd   
mov
mov
jnp
jecxz
pusha  
push
test
dec
sbb
sbb
xchg
sub
pop
dec
cmp
pop
clc    
call
jp
jle
mov
mov
test
add
pushf  
jne
loop
repnz pop
pop
imul
inc
lods
lds
xchg
xor
dec
add
xchg
fisttpll
cmp
movsl
ret
dec
pop
sub
(bad)  
cmp
test
fsts
push
xorl
pop
js
xlat
insl
aam
stc    
cwtl   
fdivrl
leave  
aam
xchg
bound
int3   
fmuls
aad
and
cmp
mov
dec
mov
int3   
xchg
cmpsl
add
in
lods
test
popf   
cmpsb
push
push
xor
out
fsubs
xor
paddsb
and
or
mov
je
repz add
test
mov
(bad)  
mov
jge
push
inc
sbb
lahf   
jno
inc
push
ja
jle
jb
out
pop
lods
inc
outsl
mov
lcall
xor
ret
out
cld    
in
cmpsl
sub
sbb
jge
ret    
fistl
in
or
pusha  
pop
jne
jae
notl
or
pop
mov
call
stos
mov
sar
je
mov
call
ljmp
push
sbb
and
jnp
and
push
std    
mov
es mov
movb
mov
aam
cwtl   
or
je
iret   
lret   
xchg
loopne
(bad)  {%k4}
std    
dec
imulb
push
shlb
fs jae
ror
mov
lds
aam
mov
pop
cmp
mov
inc
addb
cmp
fbld
pushf  
(bad)  
lret
adc
jo
lret   
pop
and
(bad)  
xchg
sub
mov
pop
add
mov
mov
inc
xchg
fdivs
lock out
leave  
and
push
(bad)  
outsl
sub
data16 stos
mov
outsl
push
mov
ret    
sub
push
xchg
stos
lret   
xchg
test
push
ret    
cmpl
aaa    
mov
mov
dec
bound
mov
jnp
jne
sub
mov
shrb
ret    
xor
test
push
stos
cmp
test
sbb
je
ss or
nop
iret   
jae
mov
xchg
dec
movsl
jno
aaa    
arpl
jns
mov
stos
adc
mov
xchg
pop
inc
scas
nop
sbb
mov
outsl
test
fsubrs
dec
or
mov
fdivl
or
mov
test
repnz fldl2t 
cmp
cltd   
mov
test
add
mul
cld    
popf   
pop
adc
or
sbb
xchg
sub
divps
pop
xor
cmc    
cmp
inc
stc    
testb
cmc    
fs xor
add
xchg
jno
mov
sbb
sti    
inc
inc
pushf  
outsl
dec
xor
push
dec
icebp  
xor
sub
in
data16 out
mov
lret
jge
pop
mov
dec
xchg
fucomi
flds
pusha  
dec
icebp  
(bad)  
popf   
inc
mov
(bad)  
fstpl
adc
pop
mov
mov
out
and
sahf   
out
inc
mov
xchg
je
push
xor
mov
mov
mov
(bad)  
je
jbe
mov
and
jnp
enter
addr16 add
mov
dec
xchg
out
in
push
cltd   
pop
xchg
data16 sbb
xor
jne
clc    
inc
daa    
test
dec
fisub
pop
inc
mov
into   
(bad)  
mov
ss push
loope
push
bound
test
loopne
xlat
xchg
iret   
xchg
pop
stos
xchg
mov
insl
js
mov
adc
std    
sub
cmc    
les
dec
popf   
lds
add
adc
ljmp
mov
icebp  
data16
cmp
in
cli    
pop
(bad)  
jmp
sub
mov
mov
mov
test
adc
loopne
movsb
inc
enter
(bad)  
in
or
sub
(bad)  
mov
test
xor
add
adc
jae
clc    
push
dec
or
in
add
clc    
insl
push
pop
outsb
cltd   
movb
jmp
(bad)  
push
mov
jle
xchg
mov
jne
lret   
push
mov
or
mov
adc
cmp
lcall
insl
insl
ja
inc
and
xor
std    
lea
mov
xchg
jmp
ret    
in
stc    
push
jle
cmpsb
mov
mov
mov
cmp
mov
inc
in
or
jns
ficom
(bad)  
and
lahf   
xorl
jo
movsl
xchg
mov
das    
and
adc
xor
fptan  
jmp
repz
sahf   
jno
inc
andl
aam
or
mov
add
mov
jecxz
fistpll
out
sbb
int
std    
or
xchg
xlat
sub
and
fidivrl
or
xor
iret   
jno
or
sbb
add
xchg
insl
test
jmp
mov
mov
ljmp
mov
in
jae
cli    
and
lcall
sub
adc
fwait
add
aam
outsl
cli    
lret   
pop
xchg
add
push
repz push
enter
(bad)
pop
inc
add
call
fs or
xor
loopne
pushf  
test
dec
andb
add
push
add
mov
adc
outsl
movd
mov
pop
fidivl
cwtl   
jge
cmp
and
enter
test
leave  
mov
icebp  
std    
mov
pop
imul
call
rorl
adc
push
stos
pop
xlat
stos
push
add
xor
loopne
sbb
out
xor
xchg
mov
or
data16
int3   
inc
and
sbb
mov
or
daa    
sbb
fild
arpl
xchg
sti    
gs add
dec
cmp
mov
ret    
test
jae
fwait
mov
mov
out
call
push
mov
cwtl   
add
xchg
in
fwait
idiv
mov
das    
sub
pop
dec
cltd   
cmp
inc
xchg
jno
pop
fnop   
cli    
movsl
sub
ret    
sub
into   
pop
scas
and
add
je
xor
popf   
adc
arpl
divl
dec
mov
lods
cmp
jnp
out
jge
ret
pop
mov
sbb
into   
adc
stc    
jo
enter
in
xor
mov
pushw
sbb
push
mov
fldt
sub
mov
pusha  
ds bswap
inc
adc
pop
xor
inc
xchg
add
xchg
int3   
ja
pusha  
int3   
and
lock out
inc
sub
gs clc 
int
add
(bad)  {%k4}
jmp
enter
or
sbb
enter
das    
add
mov
push
jp
(bad)  
jge
xchg
outsl
sub
mov
cmc    
push
in
inc
iret   
mov
in
aaa    
inc
std    
shrl
sbb
test
inc
mov
sbb
data16 cmp
rcrl
out
(bad)  
hlt    
fild
lock loopne
mov
xor
adc
(bad)  
rcl
mov
or
xor
xchg
cmp
mov
xchg
adc
jo
lock cmp
xchg
dec
stos
inc
mov
dec
cmp
mov
in
testl
test
sbbl
cs pop
rcr
das    
inc
(bad)  
out
mov
dec
pop
add
inc
(bad)  
xchg
and
sbb
fcmovu
stc    
lcall
aam
pop
movsl
push
ret
dec
rorb
mov
fimull
push
sarl
lahf   
inc
pushf  
repnz inc
lods
pop
mov
ja
aaa    
stos
adc
mov
xchg
cmpsl
sub
aaa    
jecxz
roll
dec
push
mov
xchg
add
das    
cmpsl
pushf  
mov
xchg
mov
cmp
cmpsb
cwtl   
mov
sahf   
pop
dec
or
iret   
imull
outsl
lahf   
lods
clc    
bound
mov
inc
cmp
ret
and
xchg
push
or
cmpsl
cmpsb
push
lea
pop
jns
mov
xchg
std    
leave  
decb
jecxz
add
sub
mov
adc
xchg
jb
scas
or
sub
dec
in
(bad)  
mov
fcmovbe
fistp
data16 xor
icebp  
in
sub
inc
push
rcll
ljmp
jmp
xlat
in
mov
test
in
loopne
adc
jbe
ja
mov
jle
mov
adc
into   
pusha  
cmp
aaa    
imul
andl
enter
sti    
mov
or
inc
mov
subl
sub
push
xor
insl
out
cli    
lret
fisttp
sahf   
mov
sbb
pop
in
push
js
outsb
int3   
iret   
jmp
mov
imul
push
xor
push
adc
pop
xchg
sub
pop
add
loope
inc
add
movl
and
movb
push
movsb
jo
xchg
push
addr16 cli 
subl
ret    
jp
cmc    
lret   
xlat
mov
xor
jb
lock mov
xchg
xor
gs fwait
mov
test
ss xchg
cli    
ficompl
xchg
test
leave  
xchg
push
iret   
push
in
push
or
mov
nop
test
mov
pop
mov
aaa    
xor
xor
(bad)  
outsl
sti    
cld    
les
sbb
test
cltd   
fstl
jnp
mov
cmp
hlt    
pop
add
repz xchg
dec
mov
rol
mul
push
int
into   
sbb
stc    
cs inc
jnp
outsl
or
xor
add
test
sub
jno
xchg
add
push
xor
jo
ljmp
and
movb
mov
data16
pusha  
xor
sbb
push
push
sub
dec
add
cmp
jnp
cmp
dec
pop
test
push
bound
aam
cmpl
loope
cmpsw
fmuls
sub
jmp
mov
cli    
adcb
xchg
cmp
push
jecxz
jne
cmp
xchg
pusha  
pop
jge
jae
jno
sbb
insb
inc
xor
in
jne
rclb
addb
iret   
sbb
clc    
dec
xchg
xchg
sub
test
mov
jo
xchg
pop
sub
push
jg
imul
(bad)  
mov
jg
jb
mov
cmp
mov
pop
out
mov
repnz lret
les
xor
mov
mov
push
sbbl
cli    
mov
clc    
pop
flds
faddl
daa    
pop
pop
ja
mov
fisubr
jecxz
sbbb
mov
push
add
insb
jbe
(bad)  
sarl
scas
mov
jns
mov
lods
or
xchg
bound
mov
mov
push
ret    
inc
fdiv
push
divb
xor
cmc    
cli    
inc
iret   
sbb
add
jbe
jno
mov
pop
pop
into   
cmp
jmp
movsl
mov
fwait
lds
xchg
test
xor
in
(bad)  
popa   
mov
enter
push
imul
pop
mov
adc
sbb
xchg
inc
inc
xor
test
addr16 aam
stos
jge
sbb
mov
add
into   
sbb
and
je
stos
jns
dec
push
xor
stos
or
(bad)  
in
movsb
lahf   
inc
pop
adc
fstpt
mov
(bad)  
pop
loopne
pop
(bad)  {%k4}
fldl
dec
dec
xchg
imul
in
lcall
sub
add
(bad)  
push
lods
icebp  
jp
fpatan 
sbb
(bad)  
xor
mov
sub
jo
(bad)  
push
ljmp
xor
fcomps
and
mov
ffree
push
scas
cmp
scas
adc
jle
aad
dec
and
sbb
sbb
jle
jle
jg
push
adc
adc
cmp
jle
push
arpl
lea
inc
iret   
jno
les
and
mov
je
jns
ja
jp
cmpsl
or
jbe
fildll
push
jmp
cmovnp
inc
and
(bad)  
in
aaa    
and
loopne
aaa    
pop
ret
loopne
jge
push
inc
(bad)  
scas
and
sbb
sub
lea
cld    
inc
repnz adc
mov
xor
clc    
rolb
add
das    
or
sbb
dec
int
popf   
jg
lahf   
sbb
cmpsb
pop
(bad)  
push
jecxz
pop
enter
or
cmp
das    
pop
out
sbb
cmc    
mov
xchg
outsl
mov
xchg
out
lret
aaa    
fidivl
pop
adc
shlb
xchg
nop
sub
jmp
fst
add
hlt    
dec
sbb
mov
(bad)  
xor
push
and
and
mov
ret    
mov
cmc    
movsl
mov
inc
outsl
dec
sub
lahf   
sbb
inc
adc
lret
jbe
(bad)  
xor
and
test
popf   
sahf   
cli    
pushf  
cmp
pushf  
cmpsb
outsl
adc
xchg
mov
(bad)  
dec
rclb
lds
push
inc
(bad)  {%k4}
hlt    
sub
inc
adc
push
push
test
(bad)  
xadd
cmp
sbb
push
hlt    
xchg
jnp
insl
mov
(bad)  
pop
jg
or
sbb
aas    
cld    
cmpl
loopne
push
push
cmp
xor
(bad)  
pop
or
push
pop
nop
push
or
sbb
mov
out
aam
add
int3   
or
(bad)  
mov
fwait
stos
xor
rol
fwait
jbe
out
fcmovnbe
add
lahf   
mov
cmpsl
xchg
push
jnp
sub
pop
jmp
jbe
mov
ja
jmp
and
in
(bad)  
(bad)  
int3   
push
rcl
cmp
cmc    
sub
test
test
jae
in
js
mov
fdivp
scas
bound
cmpsb
mov
movsb
pusha  
arpl
and
das    
jns
jecxz
add
cmc    
or
pop
lods
and
add
popf   
(bad)  {%k7}{z}
in
lods
adc
pusha  
push
xchg
ds ret
stc    
in
inc
or
mov
xlat
(bad)  
es inc
repz jb
xor
lcall
mov
jae
cmp
rcr
faddp
cmpsb
cs or
mov
(bad)  
cmp
fiadd
mov
fimull
lret   
jmp
(bad)  
cmp
mov
jnp
pop
mov
lods
sbb
jp
insb
in
lret
sbb
xor
jge
out
xchg
mov
and
test
add
test
into   
xchg
icebp  
(bad)  
daa    
push
xor
ljmp
lcall
aaa    
mov
xchg
mov
xor
notl
(bad)  
sbb
fcomi
bound
aad
hlt    
cmp
test
mov
mov
jle
mov
pop
ljmp
(bad)  
pop
outsl
xchg
mov
mov
scas
jns,pt
mov
mov
gs clc 
ds iret 
push
aam
mov
lcall
inc
xchg
xor
out
(bad)  
dec
mov
cmp
lsl
xchg
add
pop
xorl
inc
lahf   
or
call
sbbl
(bad)  
xchg
push
ret
js
out
ret
cmp
adc
adc
inc
adc
mov
lds
jge
add
ret
cli    
mov
inc
mov
lods
mov
push
mov
imul
rcrb
add
jno
mov
mov
xchg
dec
or
ja
fsubs
adc
pop
je
mov
jl
(bad)  
jo
inc
stos
inc
jnp
push
lods
pop
dec
nop
je
mov
mov
shl
adc
mov
mov
dec
stc    
or
dec
mov
mov
mov
push
jbe
or
mov
cmpl
jl
xor
out
and
fdivl
sub
fwait
lds
lcall
xchg
mov
jno
fwait
add
and
xorb
jl
ljmp
dec
cltd   
jmp
nop
lock sub
les
jmp
(bad)  
adc
xchg
xor
fwait
xchg
inc
popf   
negb
(bad)  
inc
mov
in
mov
not
sar
add
addr16 and
mov
decl
xchg
mov
lea
pop
dec
scas
mov
mov
iret   
fildll
inc
jae
pop
push
outsb
imull
xor
xor
movsb
cmp
roll
add
push
xchg
inc
mov
sub
cld    
addr16 inc
popf   
fisubl
outsb
cld    
testl
mull
lea
add
ret    
cmp
mov
nop
lret
and
dec
pop
aam
push
fisubrl
cmpsl
or
xor
insl
push
out
adc
insl
out
adcl
scas
into   
push
int
data16 loope
cmpsb
(bad)  
cmpsb
xchg
and
pop
xor
fmull
repnz es mov
adc
lcall
xchg
mov
je
add
(bad)  
jge
jl
(bad)  
xor
dec
mov
pop
mov
and
sub
movl
mov
(bad)  
push
movsl
ds inc
mov
inc
outsl
xor
in
rcrl
icebp  
(bad)  
add
or
in
and
or
jle
pop
cmp
divb
pop
shrl
jmp
sahf   
arpl
jbe
push
inc
stos
sub
cwtl   
push
into   
arpl
inc
fildll
les
cli    
movb
fwait
cld    
dec
xchg
sbb
xchg
or
(bad)  
lods
punpckhbw
aas    
xor
mov
xchg
je
adc
xor
dec
movsb
in
and
xchg
int3   
pushl
jno
adc
add
add
sub
xor
cmp
xchg
mov
add
es and
cltd   
pop
sbb
pop
andl
sub
aas    
xchg
and
and
pop
je
push
mov
and
imul
shlb
in
mov
mov
lds
icebp  
and
mov
fsubs
imul
das    
mov
cmc    
(bad)  
cmp
jl
iret   
jle
jno
in
sub
cmpsb
imul
pusha  
adc
in
(bad)  
mov
sub
sbb
ficoml
mov
push
out
sbb
cmp
sbb
sub
ret    
ret
clc    
fistl
xchg
in
repnz xor
xor
dec
fnstcw
jo
rcl
push
xchg
mov
cld    
mov
je
rol
push
mov
push
xchg
into   
adc
fldcw
mov
adc
fistl
ss jno
rcrb
stos
icebp  
stos
std    
mov
sub
jnp
push
cmpsl
add
stos
int3   
fisubr
and
adc
leave  
push
cltd   
dec
mov
and
dec
sbb
mov
mov
rolb
xor
xchg
inc
dec
lods
push
notl
push
mov
stc    
ljmp
push
and
leave  
mov
jo
jno
adc
scas
cmpsl
in
mov
mov
cmc    
dec
or
push
lcall
and
int3   
add
xchg
xor
or
sub
or
push
(bad)  
xchg
ficoml
mov
iret   
popf   
cmp
push
inc
add
addr16 inc
fildll
mov
in
adc
fldt
bndldx
aad
mov
cld    
mov
lea
mov
xchg
outsl
shrl
(bad)
mov
mov
mov
cmp
cmp
ja
mov
nop
loopne
mov
stos
push
adc
cmp
imul
bound
fisub
xor
adc
jbe
cmpsl
pop
sbb
cld    
xor
inc
aaa    
popfw  
pop
mov
pop
add
inc
mov
push
xlat
jl
loop
cmp
(bad)  
mov
int3   
jbe
cmc    
(bad)  
jb
and
ss sbb
dec
pop
enter
jae
dec
leave  
nop
repz add
inc
xchg
xchg
jg
movsl
pop
add
inc
adc
mov
adc
push
inc
sbb
xor
and
fwait
jl
dec
mov
add
call
xor
pop
push
add
into   
sub
jmp
scas
gs jmp
insl
mov
mov
loopne
dec
inc
clc    
push
mov
std    
out
and
test
xchg
arpl
jae
loopne
push
in
cmp
std    
imul
xor
insl
push
and
inc
call
fcmovbe
ds or
mov
aam
sbb
push
fldt
ret
sbb
jbe,pt
ljmp
add
xor
sbb
fcmovnu
mov
inc
into   
sub
mov
xchg
addr16
mov
adc
jp
popa   
stos
insl
cltd   
pusha  
(bad)  
mov
lods
fsubl
mov
lret
sbb
das    
popf   
sbb
sbb
repz sarb
fwait
int
xlat
mov
popa   
insb
mov
sub
and
add
int
pop
inc
push
(bad)  
int
aam
or
or
enter
lret
(bad)  
dec
or
scas
dec
adc
jbe
cmp
or
inc
xor
mov
dec
fs push
push
loopne
mov
pop
sbb
ds in
push
mov
push
sbb
add
insl
imul
cmp
cmp
leave  
fild
or
push
inc
dec
mov
mov
dec
ljmp
xchg
jno
bound
mov
xchg
and
fwait
mov
cmp
ljmpw
jl
and
xchg
inc
iret   
pop
mov
jp
xor
sub
cmpsl
inc
movsb
lret
pop
daa    
pop
gs sti 
lcall
and
shlb
cmpsb
xor
jbe
pushf  
and
divb
aas    
(bad)  
jp
test
lods
push
inc
(bad)
jnp
add
xor
xor
mov
sub
loope
insb
pop
in
xor
pop
mov
jmp
sahf   
(bad)  
scas
movsb
sub
jns
adc
imul
xchg
mov
data16 gs je
sbb
shrl
jb
cmpl
jnp
xchg
hlt    
repnz inc
xchg
mov
and
pop
cltd   
sbb
pushf  
jo
dec
sbb
leave  
test
cmp
call
push
pushf  
ja
mov
jnp
es loopne
adc
into   
adc
popf   
jnp
add
dec
sbb
(bad)  
pop
(bad)  
or
imul
rolb
lock jg
xchg
push
arpl
adc
adc
add
enter
cmp
clc    
inc
pop
shrl
xor
les
jae
outsb
movsl
jnp
adc
push
int
inc
(bad)  
icebp  
roll
add
out
mov
test
lcall
outsb
mov
imul
add
in
ficompl
mov
sbb
mov
mov
data16 sub
fwait
jne
fldenv
movsb
xchg
jge
add
lret   
loopne
cwtl   
(bad)  
lods
xor
int3   
xchg
iret   
insb
pop
jns
cmpsl
sub
nop
sub
mov
gs adc
aad
jns
xchg
(bad)  
popa   
loope
push
dec
push
in
or
cwtl   
mov
bound
ja
cmpl
aas    
(bad)  
push
xchg
test
inc
pushf  
lcall
push
daa    
lret
adc
mov
pop
in
fldt
cmp
xor
xchg
mov
and
jmp
inc
xchg
lret   
cmp
jae
mov
pusha  
mov
fcomps
shrl
mov
cmc    
maskmovq
mull
(bad)
mov
inc
lods
mov
loopne
mov
adc
xor
mov
inc
push
into   
in
mov
mov
iret   
in
or
mov
inc
ss xchg
loop
pop
mov
lods
mov
hlt    
pop
int3   
mov
mov
jge
dec
and
push
sarb
sti    
stc    
push
sbb
push
fbstp
add
add
(bad)  
inc
push
movsl
inc
pminub
or
mov
push
or
push
lahf   
pop
sub
mov
add
adc
mov
xchg
js
sbb
inc
mov
cltd   
sahf   
add
test
xor
jge
insl
jg
mov
outsb
cmc    
xchg
(bad)  
dec
mov
sahf   
scas
fisub
push
fdivs
dec
inc
dec
and
push
in
outsb
jecxz
jle
cli    
cmc    
sub
pop
xor
imul
dec
mov
jg
enter
out
adc
sub
dec
movsb
jae
rcrl
push
sahf   
cmp
xor
hlt    
jnp
pop
test
mov
sub
fistl
xor
cwtl   
dec
movsl
fistl
lea
xchg
push
je
jle
sbb
in
int3   
sub
arpl
dec
xchg
inc
mov
mov
mov
or
jecxz
fnop   
test
aam
pop
add
jge
mov
mov
jns
pop
idivl
stos
mov
pop
test
cmp
(bad)  
int
or
lret
mulb
jmp
mov
movsb
imul
xchg
ja
inc
fs
and
mov
xchg
movlhps
push
in
inc
in
add
cmpsl
sbb
popf   
js
out
pop
negl
mov
xor
jns
outsl
mov
shl
sub
leave  
and
out
mov
stos
lds
jbe
xchg
sarl
jg
cld    
pop
ret    
push
mov
xchg
dec
fbld
rcrb
dec
dec
inc
sub
or
inc
or
pop
(bad)  
outsl
jmp
imul
mov
cmp
sarl
js
mov
sub
and
mov
inc
fidivr
pop
lods
ss sbb
(bad)  
enter
call
out
pop
shrb
sbb
shrb
(bad)  
sbb
or
xor
add
daa    
mov
jg
xlat
push
dec
xor
icebp  
xchg
pop
sub
mov
arpl
cmpsl
out
cld    
(bad)  
push
stc    
xor
lret   
loopne
movsb
subl
xor
or
xlat
inc
jmp
or
mov
(bad)  
stos
ret    
into   
xor
inc
pop
sbb
xor
gs call
addr16 ljmp
xchg
mov
pop
popa   
fdivs
inc
(bad)  
mov
add
xor
sahf   
imulb
pop
mov
jle
loop
mov
mov
(bad)  
sahf   
hlt    
dec
cs add
cmp
add
inc
into   
insb
fs push
in
repz das 
mov
push
(bad)  
fwait
ljmp
xor
adc
sbb
add
loope
mov
sbb
test
aaa    
mov
cld    
sub
adc
sahf   
jne
mov
rcrl
lods
imul
mov
in
sbb
sub
jb
dec
repz mov
test
jg
js
nop
push
repnz
(bad)  
jmp
or
mov
mov
xchg
movsl
xor
jle
push
sbb
inc
arpl
push
push
(bad)  
cmc    
mov
xchg
pusha  
pop
push
stos
push
sub
sub
lods
xor
repnz aaa 
lds
xchg
or
dec
inc
in
out
mov
test
mov
lret
add
aam
fdivrs
fsts
aas    
(bad)  
cmp
add
cs mov
insb
fdivs
jge
in
sbb
pop
mov
inc
and
add
add
and
sbb
es mov
and
outsb
ds add
std    
outsw
xchg
inc
lret
fdivrs
in
dec
arpl
outsl
repnz pop
inc
xor
negb
push
mov
loop
push
int3   
loop
pop
mov
fistpl
jge
cmpsl
mov
(bad)  
mov
test
jns
sbb
je
test
fwait
mov
inc
xchg
xchg
dec
xor
xchg
sub
inc
(bad)  
dec
sahf   
sti    
push
popa   
repz xor
xchg
call
dec
(bad)  
outsb
sub
leave  
cmp
ret    
sbb
lcall
mov
xor
lea
out
xchg
add
xlat
lods
loop
xchg
inc
push
test
popf   
push
ja
ret    
les
stc    
stos
fisubr
rcrl
push
xor
pop
mov
sbb
icebp  
lods
sbb
aad
lods
cmc    
cltd   
cmpsw
insl
test
out
pop
cltd   
or
adc
int3   
mov
lret   
pop
pop
jle
aas    
std    
xchg
mov
pop
loope
in
push
ss daa 
movsb
jle
aam
ret    
aam
scas
iret   
inc
stc    
leave  
dec
(bad)  
sahf   
sub
jne
repnz mov
popa   
cmp
sti    
xchg
bnd jo
jg
and
dec
icebp  
or
(bad)  
xlat
jbe
movb
les
and
sbb
ret
int3   
or
adc
cmp
add
and
(bad)  
xchg
mov
decl
dec
add
sub
pop
popf   
adc
push
addr16 mov
mov
push
jae
jno
cs icebp 
add
ljmp
push
iret   
aam
out
in
testl
(bad)  
sbb
fdivrs
sti    
icebp  
in
sbb
xchg
xor
nop
and
xlat
lret
jmp
jo
mov
add
fwait
xor
push
pop
xchg
dec
inc
xor
sub
xor
mov
jle
xchg
or
push
lods
clc    
jl
xor
shrl
int
pop
mov
lret   
jg
xor
cwtl   
mov
adc
mov
push
pop
subl
dec
leave  
lcall
icebp  
dec
push
sbb
rcl
xor
mov
xchg
xor
lret
sub
ljmp
in
or
sbb
xchg
pushf  
leave  
aaa    
ljmp
fnstsw
movb
(bad)  
cld    
lds
push
adc
adc
imul
addb
add
cmp
lods
sti    
mov
ja
mov
sbb
mov
and
pop
mov
pop
inc
cmp
in
pop
insb
mov
mov
sub
mov
testb
(bad)  
pop
lahf   
lgs
das    
jmp
lods
out
notb
xchg
mov
outsb
dec
std    
aam
call
jne
imul
fdivs
jge
push
dec
jo
xchg
fisttpl
mov
js
fmul
loop
or
xchg
mov
std    
xor
add
mov
out
add
pusha  
outsl
pop
fcoms
out
iret   
fdiv
or
xor
(bad)  
leave  
xchg
pop
xor
sub
xchg
xor
xor
movsb
out
and
mov
push
pop
popf   
loope
mov
outsl
push
inc
ljmp
adc
rcll
and
adc
sahf   
mov
mov
mov
fisttpl
mov
or
pusha  
fxch
lahf   
or
in
outsb
icebp  
(bad)  
jnp
xlat
adc
sub
and
push
out
(bad)  
(bad)  
les
icebp  
push
pop
idivb
push
mov
mov
fsubl
xor
cmp
sti    
mov
fs loopne
mov
ds mov
xchg
std    
add
call
pop
mov
(bad)  
popf   
stos
je
inc
sbb
cld    
cmc    
(bad)  
cld    
scas
xlat
pop
add
fstp
mov
mov
clc    
mov
dec
xor
(bad)  
js
mov
enter
or
dec
dec
sarb
leave  
enter
bound
popa   
pop
mov
roll
popa   
ja
repnz xchg
push
dec
imul
add
jmp
mov
iret   
cltd   
mov
adc
in
mov
push
sub
cld    
cmp
into   
int
int3   
jnp
push
jae
ja
inc
cli    
loopne
ret
aas    
xor
mov
add
incl
in
imul
sbb
shl
inc
or
movsb
xchg
jnp
inc
pop
pop
cmpl
mov
xchg
shr
les
ror
call
push
int3   
xor
int3   
popf   
xor
daa    
push
out
(bad)  
(bad)  
arpl
sub
shlb
pop
aaa    
ljmp
push
ds and
xchg
xchg
imul
jbe
sahf   
aas    
les
and
cmc    
and
(bad)  
fldt
sub
and
push
repz
add
jnp
fcomps
(bad)  
cmpsl
lret   
bound
cmp
mov
push
shrb
xlat
push
insb
push
adc
jae
mov
sub
or
aas    
jl
aaa    
ss jae,pn
orl
(bad)  
je
adc
mov
push
(bad)  
stos
push
jmp
mov
stos
pusha  
sbb
push
cwtl   
xchg
xchg
xchg
xchg
in
sbb
push
aam
out
out
xchg
xchg
subb
hlt    
add
push
rorb
gs sahf 
or
adc
bound
cmpsl
xchg
aam
adc
std    
mov
or
aad
jno
in
jl
mov
aad
xchg
mov
incb
pusha  
int
addr16 push
mov
lods
roll
insl
mov
mov
jg
lahf   
cmp
mov
lods
popa   
(bad)  
adc
inc
mov
dec
add
jmp
push
ds popf 
xorl
or
and
xor
sbb
cltd   
stc    
ds lret 
push
pop
jno
cmp
std    
pop
pop
loop
addr16 dec
mov
xchg
jo
mov
push
dec
pop
mov
jbe
mov
stos
cmp
sar
pop
inc
pop
jb
sarl
test
inc
ficomp
loopne
out
in
aas    
jge
in
fcmovbe
adc
roll
fcoms
sub
mov
outsb
sub
xor
popa   
mov
sti    
and
aaa    
subb
movsb
adc
test
popa   
push
cmp
enter
lret   
inc
cli    
mov
addl
mov
cltd   
in
or
mov
jbe
sahf   
mov
or
jbe
or
add
push
sbb
outsb
lret   
pop
test
lret   
dec
lods
pop
cmc    
lods
je
sbb
repz mov
(bad)  
or
mov
dec
(bad)  
loope
xchg
daa    
cmp
xchg
xchg
popf   
scas
lahf   
ret
popa   
push
stos
inc
aam
sub
ja
mov
mov
outsl
adc
pop
into   
xchg
sub
xchg
add
(bad)  
js
lret   
aaa    
(bad)  
push
sbb
in
adc
dec
dec
push
inc
test
mov
iret   
xchg
cmp
in
adc
pop
xchg
les
std    
in
int3   
imulb
insl
xchg
add
loope
pop
data16 sbb
lahf   
inc
(bad)  
lods
or
sbb
sub
mov
movsl
sub
add
in
jg
(bad)  
imull
daa    
lods
mov
xchg
insl
dec
dec
je
add
or
outsl
pop
sbb
fucomip
cmp
rcl
adc
mov
jg
insb
dec
(bad)  
lods
(bad)  
xlat
sub
and
and
sub
js
js
loop
stc    
outsb
push
xor
inc
cli    
or
jae
in
ss cmp
and
test
imul
and
xchg
scas
pushf  
stos
jbe
clc    
add
ficompl
mull
pop
in
subl
sbb
cmp
test
das    
ret
push
(bad)  
push
xor
cmp
cltd   
add
add
hlt    
jns
addr16 sub
hlt    
dec
pop
xchg
push
push
or
add
mov
imull
or
sbb
inc
ds sti 
cwtl   
jl
xchg
insb
inc
cmp
int3   
and
in
das    
add
movsb
mov
pop
push
fwait
jno
pusha  
je
xchg
cmp
jp
icebp  
pop
cmp
stos
lahf   
popa   
lea
mov
inc
fs scas
fidivrl
clc    
add
lods
push
outsb
add
das    
imull
mov
lock clc 
xor
(bad)  
(bad)  
mov
adc
sub
ficompl
out
pop
je
fmull
into   
jle
push
(bad)  
dec
out
jl
sub
decb
cmp
rcll
(bad)  
lods
add
cltd   
mov
mov
xchg
push
mov
mov
mov
ljmp
mov
add
(bad)  
dec
jl
ss dec
push
je
mov
mov
adc
xchg
ss jmp
aas    
ljmp
scas
repnz mov
push
xchg
arpl
add
sti    
push
aam
or
jnp
idivb
in
je
rcrl
repz push
pop
pushf  
pop
push
or
xor
fsts
xor
rolb
pop
sbb
sahf   
sarb
rorl
rcrb
insb
push
data16
push
dec
cmc    
in
aas    
out
push
scas
repnz test
lahf   
xchg
mov
(bad)  
add
cmp
or
mov
test
dec
and
sub
(bad)  
sbb
sahf   
arpl
push
cmp
lret   
in
clc    
jns
outsl
das    
mov
cmc    
ss es leave 
mov
mov
xlat
adc
mov
adc
cmp
(bad)  
cmp
addl
(bad)  
lret   
lcall
insl
rolb
ljmp
push
mov
dec
pop
popf   
add
pop
push
add
push
cs dec
pop
inc
fimul
(bad)  
mov
push
out
lcall
int
or
xor
inc
aas    
data16 fwait
in
pushw
inc
inc
fcompl
stos
adc
ja
push
pop
rclb
inc
and
jne
into   
xchg
sahf   
cmpsb
jns
icebp  
int
and
rcll
nop
add
sbb
lock sbb
mov
das    
pop
mov
inc
jge
sbb
enter
jle
and
jo
sub
push
adcb
pop
add
out
lcall
mov
jge
daa    
pop
push
push
lret
jb
add
xchg
sub
and
ja
stos
and
push
lea
xchg
rolb
jnp
out
dec
(bad)  
push
push
mov
shrl
lret   
and
in
stc    
jns
mov
cmp
fsubs
mov
sub
lcall
lea
add
xor
mov
and
movsb
sti    
sbb
(bad)  
aam
jge
mov
ss jno
inc
push
pop
daa    
loopne
js
rcrl
pop
cmc    
jae
push
inc
in
cmpsl
mov
or
inc
lcall
(bad)  
popa   
push
test
or
aas    
in
ljmp
xor
loop
xchg
xchg
mov
add
lods
ljmp
cmp
push
and
add
xchg
roll
push
in
js
repnz
sahf   
stos
insl
xor
and
loope
xor
or
fwait
mov
add
ja
test
outsl
jmp
mov
int3   
mov
inc
or
jmp
jp
adc
lds
jmp
outsl
or
jmp
popa   
outsb
push
loopne
inc
hlt    
fbstp
mov
pop
addr16 adc
nop
mov
xchg
mov
pop
adc
or
push
pop
arpl
xchg
mov
pop
inc
sub
mov
lret
sbb
gs loopne
sub
xor
jne
fisttpll
mov
mov
(bad)  
cmc    
xchg
inc
test
push
test
insb
push
cld    
cld    
mov
push
sbb
mov
ss in
mov
(bad)  
in
bound
cmpsb
inc
popa   
sub
cs mov
mov
loop
dec
mov
xchg
rorb
add
mov
dec
push
or
cwtl   
bound
mov
dec
push
xchg
das    
repz xchg
inc
dec
aam
add
fisubrl
notb
sbbb
mov
jp
(bad)  
xor
addr16 in
xchg
out
sbb
test
rcrl
mov
push
stc    
lcall
jp
xor
sti    
(bad)  
push
pop
in
cmpsl
and
imul
mov
push
adc
dec
lcall
xchg
or
and
sbb
cmp
sti    
mov
cwtl   
xchg
and
scas
jmp
hlt    
adc
scas
mov
sub
dec
popa   
adc
(bad)  
jbe
xorl
fwait
int
test
sbb
data16 jnp
jecxz
paddw
outsb
and
cmp
push
aaa    
inc
bswap
shlb
(bad)  
insl
mov
xchg
mov
dec
loope
sbb
jno
shr
xor
and
cmpsl
mov
dec
cmc    
daa    
fbstp
pop
(bad)  
fisubl
aas    
push
pop
add
add
pusha  
push
out
mov
lcall
mov
jl
cmpsl
xchg
movsb
nop
addb
mov
sub
jmp
lods
fdivrs
iret   
mov
mov
in
clc    
adc
xchg
push
outsl
xlat
je
(bad)  
cmc    
iret   
iret   
(bad)
cmp
push
push
sbb
scas
cmp
data16 or
adc
push
add
lret
jno
out
jae,pt
loope
mov
cwtl   
(bad)  
and
cmp
add
xchg
stos
xor
add
adc
inc
xor
mov
stos
inc
sbb
add
pop
fiadd
mov
and
das    
pop
enter
std    
inc
dec
jp
insl
adc
add
jbe
fstpt
xor
sbbl
xchg
xchg
js
adc
(bad)  
les
ja
dec
xor
sub
inc
popf   
pop
pop
scas
lds
or
cwtl   
add
push
fistl
incl
sub
and
ss fwait
inc
scas
sahf   
sub
mov
xchg
adc
in
jge
mov
rcrb
es xor
adc
dec
or
sub
lods
mov
test
xchg
xchg
mov
out
gs push
jo
lahf   
mull
lds
rcl
mov
and
sbb
stc    
cmp
in
in
ljmp
stc    
jp
ss dec
add
enter
jae
pushf  
xor
aad
divl
test
or
cmp
pop
xchg
cmp
cmp
add
loop
and
dec
pop
sub
popf   
pop
add
dec
inc
inc
sub
shr
fbld
sbb
inc
push
add
cmc    
nop
imul
aam
fdivrs
jp
sti    
jmp
notl
hlt    
out
sbb
sub
pop
xchg
int3   
jmp
(bad)
fsubr
fsubrl
dec
adcb
(bad)
loopne
xlat
rcrb
decl
and
test
xchg
and
mov
imul
sbb
leave  
out
idiv
scas
cmp
cmp
insl
shrl
jne
and
fldl
in
repz arpl
and
jo
std    
pop
dec
cmpsl
xchg
sub
es out
lods
roll
and
addr16 into 
xor
addr16 ljmp
sub
push
dec
mov
shrb
shrl
nop
imul
dec
shrl
idivl
cmpsl
in
leave  
sbb
(bad)  
mov
mov
mov
cli    
ret
mov
rol
test
stc    
xchg
outsb
pop
push
sbb
nop
sub
iret   
sub
(bad)  
xor
push
cltd   
ss dec
push
mov
es inc
inc
scas
sbb
jns
(bad)  
inc
dec
jo
pop
add
sub
movsl
add
jnp
pusha  
repz in
xchg
push
xchg
mov
xchg
cld    
mov
cs pop
bound
call
dec
out
ja
adc
jecxz
jl
add
test
push
movsl
loope
add
jg
inc
sahf   
ss sub
adc
xchg
mov
fsubs
mov
pop
fsubr
lock pop
jecxz
loopne
xchg
xor
int
(bad)  
mov
pop
pop
push
dec
lock repz js
xchg
sub
mov
hlt    
mov
dec
outsl
fmuls
lahf   
mov
(bad)  
sub
mov
xchg
cmp
sbb
mov
call
lods
cmc    
repnz mov
(bad)  
idivl
in
clc    
or
and
cmp
stos
dec
scas
es stos
ret    
or
icebp  
fstps
dec
xor
dec
int
sbb
daa    
(bad)  
lcall
repnz pop
sub
cmc    
xchg
gs jle
and
enter
aad
inc
out
sbb
roll
dec
ljmp
aam
mov
pop
negl
sti    
lock int
popa   
mov
in
xlat
es fwait
jle
mov
rolb
enter
lret   
xchg
jno
test
decb
not
push
mov
xlat
lret   
cmpsb
xor
add
jns
xor
add
ror
rcrb
(bad)  
cmpb
mov
(bad)  
ds stos
js
aad
dec
xchg
pop
js
xor
scas
clc    
sbb
mov
and
pop
(bad)  
icebp  
cmp
push
dec
pusha  
cld    
les
imul
mov
lock mov
inc
xor
(bad)  
iret   
pop
push
fwait
in
test
xchg
pusha  
xor
jge
xchg
in
jmp
stos
pushf  
sahf   
loop
push
(bad)  
call
fucomi
bnd ja
lods
loop
sub
ds inc
pop
imul
cmp
add
mov
lret   
and
inc
mov
loopne
(bad)  
lock push
xor
mov
addb
sub
push
cmc    
imul
push
dec
sub
or
mov
xor
push
data16 jne
xchg
cli    
addr16 lock out
mov
or
xchg
jecxz
xor
in
int3   
push
cmp
fcoml
cmpb
pop
(bad)
jnp
pop
sbbb
sbb
jmp
ja
stos
xor
push
mov
jecxz
or
stos
or
jmp
(bad)  
xor
int
cli    
jg
mov
or
inc
mov
add
repz push
add
bound
in
call
sbb
pop
mov
sbb
sub
sub
enter
xor
cmp
fwait
cmpb
in
pop
popa   
xor
xchg
int3   
jno
mov
pop
pop
pushf  
gs ret
dec
jbe
add
mov
and
dec
adc
sub
add
sbb
pop
xchg
hlt    
rcrb
mov
fisub
sahf   
pop
push
bound
cltd   
adc
fld
cmp
pop
sbb
mov
fnsave
xchg
cmp
stos
(bad)  
xor
mov
inc
(bad)  
out
jne
outsb
or
loop
pop
fst
(bad)  
imull
insb
jae
divb
mov
pop
adc
jg
bound
jle
adc
test
sbb
bnd jge
add
(bad)  
pop
nop
ficompl
idivl
jl
xchg
or
in
add
push
(bad)  
std    
push
(bad)  
aas    
cmc    
add
mov
shrb
add
sbb
(bad)  
lcall
call
push
mov
outsl
pop
test
clc    
fwait
xor
adc
push
inc
add
cmp
push
int
movsb
stos
adc
js
les
xor
out
les
mov
push
add
ss mov
call
xchg
or
push
in
sbb
inc
mov
mov
mov
movsl
cmp
daa    
out
xorb
pop
(bad)
or
cmp
loope
inc
stos
push
(bad)  
dec
inc
push
jge
fs into 
add
xlat
in
sbb
insb
bound
leave  
fs pop
mov
les
xor
sbb
test
leave  
sahf   
cmp
add
xor
cmp
nop
clc    
add
cwtl   
inc
dec
mov
inc
dec
xor
inc
dec
out
outsb
mov
cltd   
rcrb
pop
sbb
jp
loop
push
push
adc
addb
test
or
and
or
sub
cmp
ret    
sahf   
ljmp
mov
mov
cmp
cmp
dec
rcrl
push
lock cmp
shrl
(bad)  
outsb
aad
(bad)
int
(bad)  
popa   
aad
adc
lds
pop
mov
push
sub
les
pop
cmpsl
hlt    
pop
outsl
adc
je
stos
dec
jle
stc    
movsb
in
movsb
and
mov
sbb
sbb
ret    
pop
mov
loop
cmp
aad
ss pop
add
push
in
xchg
ret    
fnstenv
outsb
xchg
testl
in
mov
imul
push
mov
icebp  
xlat
cmc    
scas
das    
lahf   
es inc
fldlg2 
scas
xor
sbb
xor
jle
pop
mov
cmp
ds
or
sti    
(bad)  
loope
jne
mov
and
cmp
add
push
aam
loope
cmpl
sub
dec
outsl
jbe
sbb
in
sarb
push
pop
in
int3   
pop
push
jbe
stos
and
movsb
neg
inc
xor
lock cltd 
or
xchg
jge
xchg
lcall
(bad)  
pop
mov
in
es scas
cs push
cmc    
push
xlat
lea
in
cmpsb
insb
xchg
jp
dec
cltd   
mov
push
lds
and
xor
imul
xorb
gs mov
movsl
inc
mov
fwait
aam
lods
adc
mov
push
dec
in
nop
sub
push
cmp
adc
out
sarb
dec
sbbl
cmp
sub
mov
mov
and
icebp  
lcall
adc
sbb
inc
imul
test
mov
pop
mov
or
sub
int
ret    
movsl
movsb
stc    
mov
adc
data16 sbb
(bad)
jecxz
adc
pop
fbld
mov
cmp
jnp
in
insl
sub
in
mov
ja
pop
mov
push
outsl
and
movsl
cmp
dec
in
cmp
das    
bound
jno
and
pop
addb
pop
and
repz jb
mov
pop
sbb
inc
imul
add
gs ret
in
popa   
mov
lds
pop
stc    
sbb
push
dec
data16 mov
sbb
adc
xor
ret    
sbb
dec
xchg
popa   
xor
adc
fisub
mov
sbbl
mov
pop
aas    
and
dec
jle
fmul
dec
mov
inc
xor
lret   
pushf  
aas    
sub
cmp
sbb
pop
push
stos
and
(bad)  
mov
cltd   
stos
addl
imul
push
stos
(bad)  
into   
xchg
dec
cmp
sbbb
push
outsl
(bad)  
arpl
push
dec
rcrb
mov
rorl
arpl
les
mov
jns
pop
out
bound
orb
lret
cmpsb
fmuls
imul
in
xchg
cwtl   
div
or
scas
out
push
xor
je
xchg
xchg
add
add
dec
inc
dec
inc
scas
inc
pusha  
(bad)  
or
add
add
dec
rcr
pop
clc    
inc
push
sbb
push
cmpsb
fcomp
mov
mov
sbb
jl
imul
pop
xor
inc
cmpsb
test
and
mov
ja
ficom
adc
mov
mov
enter
or
mov
or
push
int
cmc    
scas
nop
mov
jl
sbb
xor
les
jns
mov
adc
mov
gs pushf 
sub
mov
sub
jbe
push
pop
add
xor
lods
pop
mov
sub
fyl2x  
out
(bad)  
iret   
mov
jle
das    
sbb
daa    
add
int
das    
sbbl
clc    
jo
rorl
jbe
repnz aad
imul
lahf   
int
sbb
xchg
scas
push
test
xor
icebp  
adc
or
or
arpl
jo
dec
daa    
mov
pop
mov
inc
mov
xor
out
int
fadds
add
bound
adc
pop
loop
ror
adc
rcrb
pop
dec
jg
inc
fisub
push
or
xlat
insb
and
out
xchg
daa    
pop
jne
sti    
movups
push
dec
mov
xchg
mov
dec
or
pop
mov
(bad)  
notb
(bad)  
sbb
enter
add
or
and
inc
int
aaa    
dec
xchg
push
insl
dec
(bad)  
scas
enter
xor
adc
xchg
test
movl
das    
or
mov
mov
sbb
mov
add
xchg
pop
js
inc
in
hlt    
cmpsb
repnz sbbl
jmp
sbb
inc
lock pop
test
xchg
xchg
icebp  
sub
and
jecxz
jecxz
jle
repz test
fnsave
xchg
push
push
xchg
popf   
les
insl
sbb
inc
and
sub
enter
or
xchg
mov
ja
fdivrl
push
cmpsb
dec
iret   
jle
ffree
hlt    
bnd jae
jne
cmp
enter
inc
dec
fildl
mov
mov
leave  
adc
dec
clc    
subl
sbb
cmp
fisubl
and
insb
xor
adc
xor
in
or
inc
mov
add
cmp
cwtl   
jmp
and
sbb
in
mov
je
mov
repnz push
lods
mov
aam
(bad)  
adc
lcall
inc
jns
adc
in
jp
xchg
fwait
std    
xchg
xor
jecxz
lods
mov
imul
rdtsc  
test
pop
ljmp
sbb
inc
ds and
fdiv
rorl
roll
in
inc
dec
xor
adc
and
add
(bad)  
lock inc
bound
lret   
popf   
enter
push
push
rolb
dec
push
shrl
dec
cmp
js
jge
xor
(bad)  
mov
adc
and
rorl
test
inc
or
add
and
pushf  
loop
pusha  
ret    
xchg
aam
add
and
ja
je
push
aad
incb
push
sbb
fisubr
out
cmc    
aam
push
imul
shr
je
sti    
cmp
adc
(bad)  
xchg
out
rorb
loopne
xchg
pop
(bad)  
jle
inc
test
int
js
insl
out
aaa    
or
push
fwait
push
push
mov
data16 mov
adc
movsl
mov
je,pn
outsl
inc
movsl
(bad)  
jmp
sahf   
cli    
mov
repnz scas
cs pushf 
and
call
or
imul
inc
in
xor
jp
sub
pop
and
outsb
dec
fisttp
movsl
sti    
das    
loopne
sub
scas
push
jle
gs mov
xchg
jae
iret   
rorl
jnp
sbb
inc
icebp  
clc    
sbb
lret
repnz scas
cmp
or
adc
cmp
movsl
sbb
loop
fucom
int
adc
jbe
outsl
mov
lcall
lods
jne
insb
repnz into 
leave  
lods
sub
sarb
adc
fnstsw
xchg
lret   
push
hlt    
lea
sbb
in
insl
loop
jl
mul
dec
insl
dec
or
pop
test
xchg
call
mov
scas
inc
push
push
pushf  
jne
test
je
stc    
or
push
ljmp
adc
pushf  
sub
or
push
bound
arpl
(bad)  
dec
jns
push
in
repz push
popa   
cli    
or
std    
je
mov
leave  
cmp
inc
ss dec
push
(bad)  
pop
cmp
subl
unpckhps
and
inc
cltd   
ss mov
pop
mov
inc
test
cmp
imul
push
ljmp
mov
icebp  
mov
mov
dec
xchg
lret
inc
dec
lret   
aas    
rcrl
mov
cwtl   
fcoml
outsb
jmp
movb
sbb
cld    
mov
xchg
pop
xchg
lods
push
je
int
popa   
cmpsl
cmp
iret   
or
leave  
dec
loope
mov
cmp
add
pop
sbb
stc    
arpl
inc
int
mov
jecxz
ret    
dec
nop
cs gs
cmp
insl
fidivl
jp
rcl
insb
adc
fimull
mov
mov
cmp
add
xchg
cltd   
fyl2x  
push
push
add
test
mov
subl
fldl
push
push
movsl
ss pop
test
push
mov
bound
xor
inc
imul
lock push
xor
dec
sbb
cltd   
inc
cmc    
pop
lods
pop
dec
add
aaa    
and
dec
and
test
sub
lods
aas    
push
pop
sbb
int
es scas
and
jnp
sub
mov
and
jmp
icebp  
jmp
push
cmp
mov
push
add
adc
push
lcall
cmpsl
popa   
cmc    
xchg
inc
xchg
pop
imul
(bad)  
jo
(bad)  
mov
ljmp
sub
int
adc
inc
xchg
xor
and
jb
fwait
dec
dec
push
mov
jo
cmp
xor
sub
sub
dec
inc
cmp
or
jns
insl
pop
push
stc    
mov
push
mov
int
pop
mov
xor
icebp  
out
fnstcw
pop
inc
add
ret
push
sub
mov
addr16 pop
or
movsl
sbb
shll
ficom
jle
pop
in
aas    
push
rcl
dec
mov
cmpsb
and
out
int
pop
xor
jnp
lret
adc
jne
lock cld 
pop
ret    
sarb
xchg
pop
or
jae
sub
js
and
sub
lock adc
xor
mov
xor
cwtl   
movsb
mov
out
arpl
mov
subb
mov
dec
ds stos
sahf   
and
jne
js
bound
stos
rcrb
imul
stos
test
inc
sub
and
das    
call
mov
cmp
adc
lcall
pop
scas
push
or
(bad)  
mov
cwtl   
pop
aas    
sbb
pop
mov
test
and
xchg
in
cmp
aam
mov
sbb
(bad)  
arpl
popf   
cwtl   
inc
mov
cmp
aaa    
ficompl
out
adc
mov
xchg
xlat
in
aas    
js
dec
out
notl
enter
dec
add
xchg
in
mov
sahf   
mov
jb
fs enter
sahf   
xor
jo
cmp
sub
jl
aam
in
sysret 
and
and
push
(bad)  
int3   
stos
inc
test
pop
inc
test
mov
popa   
in
into   
sbb
out
mov
pminsw
xor
test
(bad)  
insl
xchg
cmc    
push
inc
lea
xchg
fadds
imul
(bad)  
repnz cmp
aaa    
out
jbe
add
(bad)  
fidivrl
inc
mov
lods
divl
xchg
fstp
cmp
repnz in
mov
sbb
iret   
adc
stc    
insl
ljmp
dec
add
mov
test
sub
xchg
dec
(bad)  
sarl
mov
imul
mov
or
(bad)  
sbb
jecxz
cli    
pop
das    
adc
movsl
mov
aad
hlt    
fxtract 
push
cltd   
outsl
cld    
andb
stc    
jne
in
cmp
hlt    
das    
adc
jle
les
pop
int3   
and
jo
xor
int3   
jne
int3   
or
jb
fbld
cmp
divl
jo
cmp
insb
jae
pop
push
out
out
jbe
cmp
dec
mov
mov
pop
imul
push
sarl
and
and
pop
cmp
cmp
das    
adc
int3   
xchg
loope
push
push
push
data16 cmp
adc
cmp
enter
lret   
ds in
test
xor
test
mov
pop
pop
es out
(bad)  
into   
dec
jmp
lret
fnstenv
(bad)  
jge
(bad)  
ss push
sbb
sub
outsl
and
push
xlat
cld    
xor
jb
or
popl
test
out
sbb
jg
adc
sub
or
lahf   
sub
push
movsb
add
rol
and
aam
add
dec
or
jns
and
mov
pop
(bad)  
sar
stos
sub
aaa    
std    
arpl
dec
ficom
lods
stos
pop
cmp
or
(bad)
shr
ds inc
sbb
lret   
insl
pusha  
push
and
push
xchg
inc
mov
repz in
pop
pushf  
ss pop
cmp
rol
clc    
push
loop
test
cmp
int3   
lret
scas
imul
lea
or
cmp
inc
das    
or
mov
iret   
fistpll
adc
pop
inc
outsb
jp
push
cmp
cmpsb
sub
lret
ljmp
xchg
aam
jmp
mov
adc
push
sub
mov
repz and
aas    
jns
mov
std    
jecxz
xor
mov
orl
pop
push
aaa    
fiadd
jecxz
icebp  
das    
and
xchg
or
std    
shll
shrl
aad
stos
mov
jp
nop
clc    
cmp
cmp
push
out
scas
movsb
in
jmp
pusha  
fs js
mov
pushf  
sbb
sar
xor
inc
rorl
cmpsl
std    
in
aad
or
insb
jns
sub
cmp
les
mov
rolb
aam
cli    
or
cwtl   
je,pn
jo
ja
stc    
fimul
mov
jno
cmc    
(bad)  
fwait
cmp
test
sbb
aaa    
sub
push
pushf  
inc
(bad)  
js
stos
add
mov
jmp
fsts
or
rolb
pop
stc    
cs mov
popf   
mov
xchg
cld    
sub
das    
push
std    
xor
pop
sbb
adc
ret    
sti    
push
ljmp
xor
(bad)  
jb
push
jmp
icebp  
sbb
gs pop
dec
ret
rcrl
xchg
(bad)  
xor
mov
xchg
inc
(bad)  
jae
mov
inc
cmp
and
jp
sbb
adc
ficomp
mov
or
stc    
jbe
cmpsb
enter
test
sub
mov
(bad)  
aad
xor
lock loope
adc
mov
rclb
repz sbb
inc
mov
pusha  
mov
mov
ret    
dec
sub
sarl
adc
inc
(bad)  
push
aaa    
mov
dec
int3   
insl
pushf  
mov
movsl
mov
daa    
cmp
mov
cltd   
or
jns
mov
push
and
inc
icebp  
sub
push
std    
stos
push
(bad)  
push
jo
(bad)  
mov
imul
dec
arpl
lret   
hlt    
repnz xor
xor
add
stos
fcomi
sbb
push
out
push
mov
loop
xchg
jne
incb
inc
outsb
test
fdivrs
cmpsl
push
ret    
rcrl
enter
mov
mov
inc
jae
jecxz
(bad)  
(bad)  
aam
mov
mov
clc    
dec
sub
lcall
nopl
aaa    
stos
xchg
pop
ret    
or
fstps
mov
xchg
inc
fwait
lds
pusha  
dec
xchg
xchg
mov
stc    
pusha  
mov
hlt    
xchg
sub
daa    
and
push
outsl
(bad)  
ss scas
enter
jecxz
jns
mov
ds xchg
sbb
sub
data16 sub
popf   
jg
jecxz
aaa    
pop
cltd   
cmp
jo
xchg
pushl
test
and
adc
pop
xchg
inc
jno
aaa    
cmpsb
rorb
pop
pop
jge
adc
xchg
out
negb
dec
outsl
push
sbb
cmpsb
and
aam
fisttpll
aaa    
lret
push
daa    
dec
testb
pop
xor
mov
in
xchg
add
jnp
mov
int
pop
inc
xchg
add
(bad)  
and
sub
push
pop
xor
repnz sbbb
mov
jno
add
scas
js
rep insb
mov
cli    
out
test
cmp
mov
inc
in
int
pop
movsb
mov
sahf   
fcmovb
(bad)  
sbb
mov
fnop   
fwait
mov
aam
jmp
sarl
scas
or
idivl
rol
push
stos
fsubl
leave  
mov
gs jns
and
dec
mov
inc
mov
xorl
cmp
adc
adc
icebp  
jle
mov
jg
mov
mov
adc
inc
movl
cmpsl
and
push
inc
lret
xchg
lods
sub
in
lahf   
mov
jmp
push
mov
jo
xchg
(bad)  
int3   
mov
rol
lods
pop
xor
xchg
inc
and
in
shlb
xchg
mov
pop
push
shl
das    
in
xlat
xchg
mov
shlb
and
mov
sbb
pop
lcall
insl
daa    
adc
xor
mov
adc
pop
sbb
(bad)  
into   
pop
inc
push
xchg
dec
in
daa    
xchg
pop
bnd jg
(bad)  
lock scas
out
or
adc
sub
inc
add
push
xchg
mov
mov
ljmp
cmp
mov
inc
sbb
mov
sub
iret   
adc
lods
mov
cwtl   
gs push
sti    
dec
loope
mov
cmpsb
jb
(bad)  
cltd   
movsb
movsb
or
xor
sar
mov
or
mov
aas    
call
or
mov
adcb
movq
call
xor
cwtl   
xchg
cmp
das    
in
fwait
mov
and
popa   
mov
data16 shrb
rorl
jbe
int3   
lea
repnz adc
jle
fbld
repz sub
stc    
in
test
lods
xor
cmp
or
shlb
js
test
and
fadd
mov
out
push
loopne
and
ret    
pop
xor
popa   
and
jae
sub
insb
add
lret   
icebp  
fwait
pop
mov
inc
jg
mov
fisubr
pop
inc
ret
sub
loopne
cmp
lea
pop
mov
mov
int3   
inc
mov
or
je
mov
pop
dec
stc    
psubq
sub
jge
mov
fadd
fstps
mov
in
mov
cs lret 
mov
jge
clc    
or
sub
ljmp
push
pop
(bad)  
cmp
fs pop
inc
fdiv
pusha  
arpl
cmp
loopnew
jp
mov
mov
fsubrs
insl
mov
xor
push
mov
aaa    
push
ret
sarb
inc
out
rorb
or
inc
dec
sarl
and
dec
xchg
xor
push
and
pop
int
test
xlat
das    
(bad)  
cmp
jl
pop
inc
cwtl   
pop
push
aas    
lcall
xor
outsb
push
or
lock sar
and
ret    
ljmp
mov
push
ljmp
into   
imul
test
pop
add
and
push
mov
insb
pop
sbb
sub
insb
xor
mov
sbb
daa    
dec
lods
ret    
push
fstps
mov
nop
cmpsl
mov
call
aad
pop
aaa    
scas
loop
out
and
jbe
fsubr
rol
iret   
dec
xor
ljmp
lea
pop
lcall
pop
stos
cmpb
or
mov
and
scas
sub
test
in
mov
jns
push
dec
or
shrb
xor
jns
aad
pushf  
(bad)  
cmp
clc    
pop
loope
mov
pushl
dec
xor
ja
sarb
pop
mov
cmp
repnz cmp
or
and
(bad)  
in
iret   
jmp
mov
stos
mov
mov
mov
imull
jb
stos
xor
or
repz mov
(bad)  
int3   
xchg
fs sbb
test
and
sub
push
jmp
add
mov
hlt    
cmp
add
inc
cmp
mov
mov
roll
es jmp
sbb
cmpsb
lock ret 
sbb
cmp
popf   
xor
adc
sbb
jmp
in
lods
push
scas
add
jecxz
test
aad
fs push
test
sbb
aaa    
orl
push
jbe
int3   
and
gs xchg
inc
inc
mov
and
rclb
pop
mov
xchg
push
or
pushf  
mov
test
test
or
cmp
movsb
dec
push
mov
inc
cmpsb
pop
fsubrl
pop
mov
pop
das    
rclb
cmp
enter
lret   
imul
xchg
cmp
mov
mov
ds cmp
stos
cmp
xlat
jb
subl
push
add
popl
(bad)  
(bad)  
call
sbb
js
ffree
clc    
dec
jns
and
and
pop
loop
imul
(bad)  
add
mov
push
test
lock push
or
(bad)  
out
lret
add
lret
pop
add
(bad)  
fwait
in
or
pushf  
push
pop
loopne
jmp
xchg
hlt    
(bad)  
sahf   
pop
loop
sub
fidivr
outsb
jns
jle
cmpsb
jmp
insl
aam
mov
and
dec
or
cmpsl
jbe
cmc    
jl
mov
xlat
pop
orb
sbb
std    
in
scas
call
or
mov
mov
xor
(bad)
cwtl   
sbb
ficompl
jns
push
cmpsl
gs xor
hlt    
lret   
pop
fcmove
dec
cmc    
sbb
mov
mov
dec
adc
xchg
xlat
inc
int3   
or
push
clc    
daa    
push
ret
in
clc    
rclb
adc
repnz loope
sbb
aas    
cmpsb
sbb
mov
dec
pop
jl
out
mov
xchg
fcmovu
arpl
jle
dec
stos
and
xlat
outsb
push
jbe
push
or
leave  
test
(bad)  
push
test
fmull
or
les
fnstcw
jge
push
cmp
imul
xchg
dec
and
mov
mov
loop
fldl
ficompl
int
leave  
cmp
mov
or
sbb
call
sti    
xor
and
test
jp
aam
xchg
add
dec
pop
(bad)  
fmuls
enter
in
dec
mov
(bad)  
in
negl
mov
jnp
and
in
push
jle
lods
int
sti    
test
adc
add
or
das    
(bad)  
(bad)  
lahf   
imul
mov
(bad)  
lcall
xchg
gs xchg
sub
js,pn
movl
or
sbb
xchg
test
xchg
pop
jmp
aas    
sub
fildll
cltd   
jns
jo
push
lea
lahf   
out
data16 aaa 
out
or
and
mov
test
sub
(bad)  
mov
fstps
aad
imul
jo
dec
sub
xchg
jnp
das    
movsl
mov
mov
and
jae
outsl
pop
xor
mov
ja
popf   
rclb
xchg
(bad)  
sub
dec
test
inc
cmp
adc
cmc    
sbb
xor
mov
mov
hlt    
push
mov
pop
push
je
stos
jl
fstpt
cmp
or
pop
dec
les
push
ss ret 
cltd   
lds
imul
or
jo
sahf   
iret   
xor
movsl
cmp
in
out
adc
sbb
mov
(bad)  
mov
push
pusha  
push
sub
mov
insb
push
mov
js
jmp
or
or
xor
pop
out
adc
xchg
and
inc
outsb
gs aam
jmp
push
jmp
and
mov
mov
dec
push
ds push
jbe
jb
rcr
outsb
lret
cmp
leave  
mov
lods
(bad)  
ja
popl
pop
out
aad
add
enter
xor
cwtl   
mov
push
sbb
xor
hlt    
and
dec
call
je
sub
daa    
jae
sbb
or
leave  
xorl
fdivs
jne
(bad)  
divl
int
hlt    
scas
pop
in
lock push
mov
and
mov
xchg
mov
popa   
and
pushf  
in
xchg
add
insb
xchg
and
fbld
jp
hlt    
(bad)  
ja
lret   
mov
gs dec
mov
sub
pop
push
sbb
mov
xor
mov
movsl
fs xor
xchg
adc
sbb
notb
push
dec
xor
(bad)  
dec
in
cmp
aaa    
xchg
and
mov
out
push
or
lea
mov
or
psubusw
mov
or
pop
cmpsl
cmpsb
(bad)  
cmc    
cmp
addr16 or
jns
sub
fbld
mov
xchg
cmp
dec
adc
add
out
mov
mov
push
dec
fistpl
sbb
out
out
jbe
ss insb
xchg
mov
ljmp
je
dec
enter
inc
mulb
add
cmpsb
xor
sbb
and
xor
add
scas
(bad)  
cmp
iret   
dec
insb
test
mov
rcrb
add
test
jl
enter
sub
in
pop
adcb
test
in
dec
xlat
mov
dec
fistp
mov
dec
xchg
pop
sub
das    
mov
or
xchg
mov
rolb
pop
jne
outsl
mov
out
fnstenv
and
cmp
bound
js
sbb
xchg
jb
mov
lods
jmp
repnz rol
sub
iret   
repz mov
sahf   
sub
(bad)  
aaa    
mov
inc
jp
inc
lret   
mov
sub
mov
jns
mov
aad
sbb
insl
adc
(bad)  
in
sub
fdivs
out
cmp
or
loope
mov
adc
cmp
not
stos
sub
lret
mov
ret
push
outsl
jp
aam
(bad)  
dec
push
test
pusha  
repz sbb
push
add
sbbl
add
adcl
sbb
int
sahf   
mov
ffreep
(bad)  
leave  
mov
xchg
cmp
pop
fsub
hlt    
mov
xchg
push
adc
imul
aad
les
(bad)  
(bad)  
inc
leave  
inc
mov
xchg
test
ret    
out
xor
lods
jbe
cmp
and
mov
pop
pop
int3   
jae
adc
sbb
decb
aam
cmp
rcrb
pushf  
sub
addr16 lahf 
out
xchg
push
mov
jge
das    
stos
movb
add
iret   
imul
cmpsb
enter
addl
lcall
lods
ss sti 
push
fisubl
mov
cmp
push
dec
sbb
inc
or
lds
es mov
(bad)  
push
inc
cmp
lahf   
mov
lret
out
insl
xor
(bad)  
lcall
test
mov
imul
sub
(bad)  
data16 stc 
xlat
es inc
adc
jmp
sti    
lods
leave  
inc
pop
test
out
jb
mov
pop
xchg
mov
cmp
(bad)
mov
mov
sbb
sbb
push
cmp
into   
jmp
out
mov
push
(bad)  
cli    
(bad)  
jno
jecxz
cmp
add
scas
insb
xchg
call
daa    
jo
mov
pop
popf   
push
jbe
aad
pop
push
dec
out
xchg
cmpsb
xor
xchg
fiadd
imull
dec
sbb
hlt    
xor
and
cmp
fcmovnu
outsb
or
xor
mov
sub
jp
mov
xchg
xchg
fimul
movsl
loop
ss xchg
or
sub
pop
stos
scas
mov
fs dec
lds
scas
inc
mov
xlat
add
scas
mov
sbb
inc
pop
mov
loope
js
cmc    
sub
aaa    
push
mov
xor
xor
jae
xor
rorl
dec
jnp
jecxz
mov
jecxz
mov
rcl
or
lock xor
dec
push
test
inc
in
xchg
ret
dec
mov
push
dec
lahf   
aas    
jo
xchg
jg
add
pusha  
call
add
test
pop
jns
push
lahf   
mov
das    
shrl
cmc    
pop
adc
je
or
lahf   
mov
jle
lcall
xor
negb
jle
(bad)  
pop
subl
mov
sbb
fsubr
testb
or
mov
fcompl
xchg
dec
dec
and
cmp
call
hlt    
fnstcw
pop
mov
jge
(bad)  
cwtl   
push
sub
cmp
mov
aam
mov
dec
sub
in
ja
cmp
test
loope
fwait
add
loop
mov
or
shlb
mov
call
inc
in
lret   
aas    
js
add
jmp
xchg
fsubr
out
scas
scas
pop
aad
daa    
mov
jle
xchg
fdiv
lods
jo
add
xor
dec
pop
add
sbb
das    
adc
imul
jge
xor
jb
int
pop
xlat
cmp
sbb
loope
fbstp
cmc    
cmp
(bad)  
cmpsl
push
(bad)  
mov
and
ret    
ret
imul
(bad)  
push
mov
pop
divl
mov
arpl
jecxz
sub
xchg
pop
(bad)  
adc
pop
imull
(bad)  
push
(bad)  
aad
(bad)  
pushl
adc
aam
addl
stos
cmp
jns
xchg
std    
cmc    
sbb
das    
sub
pop
or
(bad)  
or
lcall
adc
rcrb
stos
xchg
lcall
daa    
(bad)  
mov
loope
mov
pop
cmpsl
in
mov
mov
gs xchg
pop
imul
stos
(bad)
aam
dec
enter
mov
test
mov
idivl
xor
in
enter
push
cmp
test
std    
dec
(bad)  
repnz cmp
add
jg
cli    
inc
xor
(bad)  
outsb
fcomip
pop
stc    
int
add
pop
inc
mov
(bad)  
out
divb
addr16
fidivl
cmp
cmpsl
out
inc
pop
es in
push
repz inc
dec
mov
into   
bound
pusha  
pop
sbb
test
aaa    
cld    
cmp
into   
jmp
(bad)  
ljmp
notb
test
out
imulb
data16 outsb
pop
mov
outsl
push
add
(bad)  
sub
mov
dec
ljmp
xor
repnz mov
adc
mov
add
cmp
stc    
jle
aad
sub
inc
imul
sti    
std    
fdivrl
jge
stc    
xchg
mov
pop
mov
cwtl   
and
enter
sti    
cltd   
adcb
bound
dec
add
xor
inc
cli    
jmp
fild
mov
outsb
les
fs jmp
sbb
lock outsb
push
out
vpshab
les
adc
ljmp
adc
hlt    
jno
add
(bad)  
xchg
cltd   
cmp
cmc    
outsb
cmpsl
xchg
icebp  
push
push
jo
and
pop
lock imul
and
push
push
pop
xchg
in
adc
outsl
pop
xor
mov
push
mov
movsb
or
cs mov
cmp
push
les
outsb
or
sar
fs js
mov
sbb
jns
jnp
and
mov
sub
(bad)  
cmp
sbb
sub
(bad)  
sub
adc
mov
dec
push
mov
jmp
scas
or
(bad)  
js
cmp
(bad)  
and
imull
sub
cmpsb
outsl
out
cmpsl
data16
lods
cmp
mov
mov
outsl
les
add
(bad)  
(bad)  
hlt    
cwtl   
in
cmpsb
push
dec
cwtl   
or
imul
fwait
das    
leave  
xchg
sub
fist
cli    
ret    
pop
cmp
sub
lock fcoms
call
dec
lret   
mov
push
push
jbe
mov
jecxz
jg
stos
lods
fstl
mov
mov
movsb
sub
adc
sub
bound
lods
xchg
icebp  
cmp
mov
mov
imul
cs lahf 
add
fstps
pop
pop
sub
cmp
inc
ss test
mov
push
insl
inc
push
arpl
loope
rcrl
mov
fsubs
out
cmp
xchg
xor
push
dec
or
ret
das    
ljmp
and
leave  
(bad)  
scas
mov
pusha  
aaa    
xlat
cmp
(bad)  
mov
add
scas
and
lret   
js
cltd   
movsb
and
shll
push
and
jae
or
(bad)  
sti    
adc
pop
and
xlat
add
ja
xchg
inc
test
rep outsb
imul
pop
xchg
or
je
out
xchg
mov
lea
lret
mov
sahf   
jl
sbb
and
dec
adc
js
arpl
mov
add
lods
xchg
mov
or
fldenv
jmp
(bad)  
mov
sbb
sbb
or
les
adc
xor
push
fnstenv
fcoml
bound
inc
and
or
outsb
pushf  
jo
sahf   
xchg
xor
jns
aam
cmp
(bad)  
fisubrl
jne
inc
aas    
mov
mov
(bad)  
jmp
pop
(bad)  
jge
rol
pushf  
mov
clc    
xor
mov
shlb
roll
pop
faddl
outsl
cltd   
stc    
and
push
in
sbb
inc
loop
dec
xchg
ja
sbb
cli    
adc
pusha  
inc
mov
dec
das    
sbb
xor
movsl
lea
mov
sub
inc
add
push
dec
cmpsl
rcrb
xchg
xchg
xor
inc
mov
xchg
jle
inc
mov
hlt    
xor
enter
pop
mov
xchg
das    
xor
jns
movsb
or
inc
mov
mov
addb
stc    
xchg
(bad)  
in
fs js
mov
test
mov
sub
adc
mov
sbb
cltd   
sahf   
or
xor
movsl
stos
cs into 
ret    
(bad)  
out
push
mov
test
sarb
mov
je
or
aas    
xor
repz push
mov
mov
jns
mov
sub
mov
(bad)  
aad
mov
xchg
and
(bad)  
rorl
push
sbb
adc
jb
cmp
xorl
adc
add
icebp  
push
(bad)  
xor
mov
mov
inc
test
cmp
or
in
mov
pop
add
sbb
push
out
dec
orb
or
es mov
lods
cmpsl
mov
cmp
jne
aaa    
sbb
push
jmp
push
mov
mov
mov
sahf   
add
lahf   
fcoms
test
xchg
push
sub
rclb
cltd   
jae
fstpl
jg
int3   
jge
cmp
add
test
daa    
push
(bad)  
jmp
fidiv
shrl
lock dec
cmp
popa   
movsb
mov
mov
push
pop
cmp
call
xlat
sub
(bad)  
cs dec
xchg
push
clc    
sar
add
ss and
dec
enter
jl
inc
scas
test
sbb
jne
imul
jl
popf   
stos
cmp
or
pop
push
cmp
out
dec
and
mov
sub
jne
flds
(bad)  
sbb
js
xor
es and
or
adc
loope
push
sbb
popf   
or
or
fwait
shrl
push
mov
sbb
stc    
push
sub
pop
aam
cmp
inc
push
in
push
sub
int
mov
or
mov
adc
out
mov
mov
aad
or
flds
(bad)  
pop
fs jo
xchg
jp
inc
jmp
rclb
scas
sbb
inc
mov
mov
add
out
test
outsb
cmc    
movsb
jne
mulb
fs xchg
or
mov
sub
xor
inc
cli    
cmp
imul
cmp
jb
rcrb
push
pop
or
mov
cwtl   
in
invlpg
mov
(bad)
adc
std    
in
pop
sbb
jg,pt
mov
into   
inc
and
xchg
lock mov
lock cmp
push
cmp
das    
jnp
xchg
push
sti    
mov
add
inc
pop
les
(bad)  
mov
mov
add
ret    
push
and
push
push
icebp  
arpl
jecxz
pop
inc
lahf   
xchg
frstor
aas    
sahf   
pushf  
iret   
(bad)  
and
cmp
cmp
cmc    
cmpsl
in
cmp
enter
xchg
xchg
jnp
push
out
xor
dec
fisubl
out
mov
ljmp
sub
fimull
fbld
lock imul
scas
push
xor
in
push
xchg
inc
cmp
push
mull
mov
cmpsl
imul
xchg
pop
fild
sti    
cmp
iret   
repz jno
pusha  
loopne
sahf   
mov
mov
sub
in
nop
jmp
push
fisubrl
std    
insb
xchg
pop
push
add
adc
repz mov
mov
push
inc
xchg
addr16 iret 
loope
and
addr16 sahf 
jl
inc
xchg
les
dec
pop
xchg
shr
cmpsl
push
inc
jle
fwait
push
inc
test
ret    
cmp
mov
jae
pop
leave  
jb
ss mov
cs xchg
and
stos
repz sbb
mov
sarl
(bad)  
mov
and
lock sbbb
or
mov
pop
adc
in
shll
testl
cmp
ljmp
in
in
push
clc    
and
je
mov
add
ret
movb
ja
aaa    
adc
add
cli    
cmp
pop
lcall
jo
mov
test
adc
fsubrl
aas    
test
icebp  
add
mov
mov
repz xchg
fimul
ljmp
icebp  
fwait
adc
add
bnd jno
sbb
or
andb
orb
mov
mov
in
inc
pop
mov
or
int
stos
fsubp
out
add
adc
mov
movsb
sbb
(bad)  
cmp
jecxz
lock jo
add
out
sub
jle
call
hlt    
cs dec
lods
xchg
push
adc
sbb
mov
popa   
adc
movsb
push
shll
xor
or
jne
int3   
les
and
inc
das    
ror
out
pop
and
mov
pop
or
xchg
cwtl   
sub
mov
xorl
in
jp
leave  
hlt    
xchg
add
xor
add
or
andl
cmp
loopne
sbb
sbb
xor
pusha  
inc
bound
adc
lock dec
fwait
cli    
cmp
call
roll
xchg
(bad)  
es mov
pop
testl
movsl
lret   
cltd   
add
sub
rcrl
decb
test
test
fst
lcall
in
xor
push
lret
sahf   
cmp
sti    
lods
test
xor
and
stos
repnz flds
adc
popf   
cmc    
and
rorl
pop
pusha  
loopne
push
cmp
push
adc
and
xlat
xchg
xchg
icebp  
jle
test
jbe
pop
fsts
in
xchg
push
ss and
xchg
ja
sub
frstor
in
jmp
jg
and
and
arpl
aad
into   
fadd
cmp
in
mov
addr16 push
loop
pusha  
and
mov
or
pop
push
sub
pop
fildll
inc
push
xchg
xchg
lock cs ret
lea
dec
xor
stos
mov
scas
push
inc
sub
sbb
js
or
loop
xchg
jae
jecxz
xchg
sahf   
inc
movsl
ror
cmp
fs cld 
popf   
cmp
and
pop
loopne
pop
ja
ret    
mov
lcall
add
inc
pop
imul
iret   
cmc    
sbb
mov
cmp
cmpsb
dec
sbb
cwtl   
sbb
js
imul
insb
dec
data16 mov
cwtl   
xor
pop
aam
mov
movsb
mov
jb
int
add
int
fwait
ds dec
cmp
into   
jg
or
adc
lods
and
sub
lods
aas    
js
mov
scas
pop
(bad)  
mov
xor
sub
repnz dec
xor
add
call
mov
data16 and
xlat
inc
xchg
or
sbb
iret   
cmp
nop
inc
(bad)  
jo
add
fs
in
push
(bad)  {%k7}{z}
aam
enter
sub
jle
add
sub
jne
es lahf 
rorb
mov
mov
lods
cmc    
addr16 popf 
mov
adc
sub
(bad)  
mov
mov
add
mov
mov
scas
out
repnz adc
(bad)  
mov
test
jno
movsl
mov
rolb
popf   
sub
orl
dec
sbb
push
sarw
push
(bad)  
mov
push
or
mov
mov
jae
xor
sbb
(bad)  
xchg
pop
adc
and
xor
sub
mov
dec
jns
inc
and
js
fnstcw
mov
xchg
cmp
jb
ja
xchg
(bad)  
int
adc
pop
jbe
dec
xor
lcall
add
lods
out
mov
out
sub
pop
mov
cmp
mov
rcrb
cwtl   
dec
push
add
push
(bad)
andl
dec
push
ljmp
popf   
pop
sbb
ss jp
out
mov
dec
jl
lods
bswap
lret   
push
bound
sbb
rolb
add
xchg
mov
cmp
xchg
scas
in
push
je
sub
(bad)  
ja
in
daa    
jle
nop
push
repz jb
jp
test
inc
xor
xor
(bad)  
xor
cmp
mov
stc    
aad
inc
lds
mov
mov
(bad)  
xchg
pop
jle
mov
xchg
jl
cmp
in
cmp
cltd   
fsubrs
or
ret
pop
out
cltd   
int
cld    
(bad)  
popf   
stos
nop
dec
mov
pcmpeqd
add
sbb
(bad)  
mov
sub
pop
and
pop
sbbb
scas
mov
push
mov
push
push
lds
push
outsl
aad
push
sahf   
adc
imul
daa    
fisttp
mov
mov
cmc    
(bad)  
push
stos
mov
push
sbb
sbb
ret
or
aas    
xchg
sub
push
fdivl
bound
cmp
in
lods
fimull
jge
pop
into   
aad
and
mov
sub
rorb
outsl
adc
mov
xorl
(bad)  
stc    
pop
and
push
fwait
adc
sahf   
call
js
jmp
sbb
nop
ljmp
out
mov
xchg
and
xchg
sub
aaa    
mov
mov
cmc    
shrb
sbb
sbb
inc
adc
stos
out
leave  
dec
repz dec
or
(bad)  
push
mov
mov
fcom
mov
or
pop
xchg
or
(bad)  
dec
mov
pop
dec
aas    
dec
cmp
std    
daa    
mov
arpl
rcl
xlat
xor
mov
outsl
mov
push
xchg
loopne
dec
jns
movsl
push
jle
push
add
jae
push
out
inc
das    
pop
lea
addb
cld    
jp
dec
loop
call
and
push
(bad)  
pop
jae
mov
and
xor
pop
cmpsl
pop
das    
fwait
and
iret   
jp
movsb
dec
mov
repnz sbb
and
jp
sbb
les
subl
pushf  
add
(bad)  
rolb
push
movsb
xchg
push
pop
add
mov
or
xor
mov
stos
mov
std    
repnz sbb
dec
or
les
ret
sub
jns
in
dec
push
pop
xchg
negl
push
mov
test
(bad)  
and
xchg
imul
jle
gs jp
(bad)  
cmp
shrl
xchg
lret
outsl
jb
(bad)  
push
pop
xor
(bad)  
mov
mov
cmp
icebp  
stos
push
(bad)  
cld    
push
in
repnz stos
and
icebp  
jno
(bad)  
popf   
nop
sub
fistp
jo
pop
fisttpll
(bad)  
dec
adc
jle
pusha  
stc    
clc    
outsl
stos
inc
mov
jmp
pop
inc
pop
fidivl
aaa    
stos
loopne
sub
add
inc
inc
dec
stc    
fisttpll
adc
push
lds
cmpsl
and
mov
das    
cmpsb
in
fadd
clc    
out
orb
cmc    
rorl
mov
mov
inc
lds
pop
mov
pop
and
enter
jnp
loop
sbb
mov
cmovns
sahf   
adc
sahf   
and
xor
ret
fcomps
inc
flds
pushf  
add
cmp
outsb
clc    
cmp
xor
pop
xor
(bad)  
and
out
sub
(bad)  
fucomip
sbb
shll
out
push
mov
cld    
sub
add
in
imul
mov
inc
in
fidiv
dec
lret   
nop
cmpsw
add
sub
and
mov
mov
sbb
jne
ljmp
idivl
sbbb
aaa    
sbb
test
icebp  
addr16 mov
lock mov
mov
jnp
fistl
mov
and
adc
pop
mov
xchg
out
jge
push
cmp
gs enter
dec
lods
adc
sub
lods
mov
hlt    
imul
push
mov
and
mov
mov
sbb
mov
jmp
icebp  
popf   
repnz pop
and
test
add
push
pop
sbb
popf   
insl
test
mov
sti    
xlat
clc    
push
lret
or
xchg
lock lret 
and
mov
sub
ds push
addr16 mov
and
inc
mov
fistp
aas    
jg
inc
in
je
daa    
adc
rorl
leave  
sbb
push
mov
xchg
dec
xchg
push
pop
mov
into   
xchg
pop
popa   
into   
lret
repnz mov
inc
push
mov
push
js
push
insl
or
cmp
cmp
jecxz
pop
std    
bound
xchg
adc
and
lods
sbb
test
lds
(bad)  
inc
sbb
mov
jbe
inc
pusha  
shll
inc
cmc    
shl
inc
xorl
pop
outsb
ret
jae
cmc    
imulb
fdivr
imul
fistp
mov
mov
xlat
xlat
jne
mov
pmullw
inc
lret
or
cmpsb
ds or
pop
cmc    
or
in
pop
xchg
and
pop
stos
xchg
adc
jno
subl
pop
add
(bad)  
jle
pop
inc
mov
sub
jecxz,pn
or
and
sub
push
push
pop
arpl
sbbl
xchg
xor
insb
push
rorb
jo
je
iret   
lock outsl
sub
pop
pop
sbb
inc
pushf  
inc
dec
mov
popf   
adcb
adc
daa    
scas
lret
test
(bad)  
in
sbbb
sbb
or
jmp
dec
fistpl
inc
aaa    
shrl
fildll
xor
ret    
sbb
and
popa   
jnp
int3   
movups
aad
dec
mul
mov
out
dec
mov
aas    
aas    
nop
cmp
add
into   
lea
out
mov
test
decl
mov
icebp  
notl
adc
nop
mov
add
daa    
cmp
cmp
xchg
sub
sbb
cmp
push
inc
pusha  
leave  
dec
pop
push
cmp
movsb
dec
mov
in
fildl
push
test
mov
rorb
fnstsw
mov
xchg
dec
xchg
inc
xchg
shlb
jne
data16 js
add
or
lahf   
pushf  
subb
push
adc
push
mov
cmp
cwtl   
cmp
sbb
dec
cltd   
mov
and
or
insl
push
std    
(bad)  
aaa    
or
aas    
push
shll
fdivr
aas    
fstl
les
sub
das    
scas
(bad)  
or
mov
xchg
jne
out
loop
sub
lahf   
int
mov
and
cmp
xor
mov
(bad)  
xchg
lcall
jbe,pt
popf   
(bad)  
dec
fcoms
mov
xor
push
(bad)  
jno
fisubl
(bad)  
iret   
or
lea
(bad)  
cmp
dec
stos
test
(bad)  
daa    
cltd   
aaa    
fdivrl
xor
pop
xor
lret
adc
sub
pop
enter
and
ficom
les
stos
adc
lcall
xor
jae,pt
cmc    
cli    
mov
test
xor
out
fsts
jns
ds pushf 
mov
and
push
(bad)  
ljmp
push
lret   
fisttpll
and
ret    
gs int
rorl
inc
sbb
rcrb
lcall
je
cmpl
xchg
pop
adc
loope
pop
mov
mov
repz cmp
push
shll
jbe
movsl
in
scas
test
mov
inc
mov
imul
pop
loopne
add
add
imul
push
cmp
sti    
sub
dec
or
push
repz cld 
pop
pushf  
fisubr
(bad)  
test
(bad)  
cmp
mov
cmpsl
xlat
aad
sahf   
mov
adc
mov
xor
(bad)  
repz out
(bad)  
and
and
fstpt
inc
or
ficom
insl
pop
cmpsb
in
subl
jg
lods
add
push
jl
jl
xchg
pop
pop
fsubrs
lret
mov
push
pop
leave  
clc    
add
dec
cmp
or
popf   
adc
addr16 jmp
mov
and
jge
xchg
cli    
and
mov
or
es
in
and
cs pop
and
scas
fcompp 
aam
cmpsl
fwait
sub
dec
aas    
xor
insb
icebp  
pusha  
and
xchg
push
stc    
data16 rolb
inc
mov
xor
mov
lods
subb
scas
je
sub
lahf   
aas    
xchg
mov
push
cmp
ss mov
lea
and
mov
jno,pt
push
inc
int
movb
jl
(bad)  
nop
adc
inc
add
ja
hlt    
(bad)  
popa   
and
negl
fs loope
mov
lahf   
shrl
rep lods
test
jne
dec
mov
scas
dec
pop
icebp  
daa    
jae
cmp
jo
dec
cmpsb
aaa    
xlat
leave  
shl
sti    
fwait
xor
jl
jle
aam
cmpsb
dec
pop
and
enter
sbb
call
rorb
rcrb
xchg
rorl
sbb
mov
add
fnstcw
daa    
stos
shr
stc    
mov
hlt    
adc
lods
int3   
mov
aaa    
sbb
addr16 push
lcall
lea
sbb
mov
jae
outsb
and
cmp
and
sub
cld    
or
fs in
fisubrl
ds sbb
pusha  
pop
movl
inc
sub
loop
sbb
outsb
mov
pop
sbb
mov
negl
ds test
in
mov
mov
(bad)
or
stc    
mov
mov
inc
xchg
and
mov
adc
(bad)  
rol
aas    
mov
lock subb
nop
or
and
(bad)  
xlat
iret   
jg
pop
cmp
sub
xchg
test
mov
add
test
movsb
push
shl
les
mov
into   
aas    
rolb
int
(bad)  
bndstx
pushl
popf   
jl
fildll
scas
cltd   
mov
sub
pop
addr16 lock mov
imull
(bad)  
adc
aaa    
stc    
(bad)  
je
cmp
xor
shll
mov
dec
and
sbb
dec
icebp  
cmp
inc
xchg
dec
int
dec
sbb
test
cmpsl
je
gs pop
jge
je
out
jg
in
aam
sbb
add
push
or
mov
leave  
incb
les
inc
and
cmp
cmp
fdivs
sahf   
push
jb
fimul
es
dec
push
(bad)  
dec
inc
and
lahf   
or
jge
mov
and
mov
push
ss pop
les
dec
cli    
das    
pop
push
stos
call
cmpsb
cli    
js
popa   
sets
add
popf   
sbbb
xor
fs or
(bad)  
loope
jns
loope
(bad)  
dec
lods
outsb
add
decl
push
(bad)  
(bad)  
icebp  
mov
jp
add
and
(bad)  
cmpsl
push
cmp
or
dec
ds xor
icebp  
mov
outsl
push
inc
mov
mov
fistl
push
mov
inc
fisub
lret   
aad
mov
clc    
push
push
pop
imul
aad
or
lret   
xchg
out
cmp
rolb
lods
(bad)  
sbb
sub
fstl
(bad)  
lret
xchg
push
mov
mov
sub
test
inc
addl
and
cmp
pop
call
push
outsl
mov
insl
outsb
movsl
or
push
call
jns
test
pop
lret   
(bad)  
aas    
jo
push
push
out
mov
iret   
mov
lahf   
mov
mov
mov
add
fldl
sub
mov
sbb
sahf   
xor
daa    
ret
int3   
repz f2xm1 
add
in
testl
out
sti    
ficompl
push
(bad)  
incl
pusha  
(bad)  {%k7}{z}
stos
mov
jnp
(bad)  
in
iret   
mov
mov
pop
sub
(bad)  
cmpsl
(bad)  
jnp
imul
xlat
pop
ds push
ss aad
mov
loopne
xchg
mov
xlat
mov
int
insl
xor
jmp
or
sahf   
mov
add
repz
xor
jp
ret    
scas
aas    
mov
enter
jno
mov
or
loop
xlat
add
mov
leave  
lock
je
mov
mov
add
lahf   
or
cmp
ficomp
in
mov
enter
mov
int
hlt    
push
or
adc
insl
scas
sub
aad
mov
xchg
sbb
xchg
adc
stc    
cvtpi2ps
pop
insb
xchg
(bad)  
adc
fmul
movsb
dec
push
(bad)  {%k7}{z}
loopne
add
push
pushf  
jge
es pop
cmp
shrl
sub
push
cmp
cmp
sarl
out
jecxz
pop
sub
mov
call
jbe
jne
push
(bad)  
or
loopne
test
lret   
cli    
in
lea
ret    
dec
cwtl   
arpl
dec
aad
sbb
mov
jno
clc    
pusha  
pop
jae
sub
mov
push
dec
idivl
add
daa    
xor
loopne
aaa    
daa    
jb
pushf  
adc
stos
add
sti    
xchg
add
lcall
add
xor
and
lret   
mov
push
stos
jg
insl
cmp
int3   
stos
push
mov
and
mov
repz test
fdivl
test
add
(bad)  
arpl
or
ja
mov
mov
add
mov
sbb
and
lret
les
fwait
xor
fnstsw
outsb
mov
loopne
mov
sbbb
sbb
mov
and
jo
add
enter
xchg
push
push
mov
rcl
fstpt
dec
sbb
cwtl   
mov
sahf   
lcall
jg
push
xor
aad
mov
pop
imul
fnsave
adc
(bad)  
pusha  
cmpsb
push
int3   
jno
jb
mov
push
sahf   
ret
mov
pop
dec
sbb
sub
gs inc
arpl
dec
sbb
push
sbb
(bad)  
pop
jg
xchg
popa   
jge
cmc    
dec
mov
leave  
mov
stos
inc
fldl
(bad)  
jb
inc
mov
notb
js
jp
add
add
loope
add
add
fcompl
repz bound
and
mov
jne
psrld
xchg
clc    
(bad)  
cmp
rolb
lock and
xchg
mov
xchg
daa    
(bad)  
jno
bound
stos
xor
xor
ret    
cs xchg
mov
ja
gs inc
xor
add
or
sti    
insb
lahf   
scas
aad
ret
addr16 push
mov
push
ss push
ds and
popl
cmpsl
adc
dec
pop
daa    
lds
adc
add
xlat
lret   
sbb
pop
cmc    
cmp
jbe
and
inc
inc
test
movsb
lods
insb
inc
stc    
sbb
stc    
movsb
mov
lahf   
je
clc    
mov
or
adc
ds pop
ret    
adc
cmp
xor
(bad)  
xor
xchg
mov
pop
add
xor
cld    
xchg
add
and
outsb
inc
inc
mov
addb
push
push
clc    
sub
pusha  
or
pop
ja
gs and
or
(bad)  
lods
ret    
shrb
fldcw
(bad)  
ja
ret
pop
int
adc
inc
xchg
js
pop
(bad)  
mov
and
enter
push
fndisi(8087 only) 
pop
pop
mov
fcmovne
xor
pop
inc
clc    
jecxz
and
(bad)  
sbb
in
pop
mov
jg
adc
lret
cmp
push
out
pop
mov
jl
inc
xor
mov
enter
push
pop
js
mov
push
mov
push
push
ds
mov
mov
mov
fstps
mov
mov
test
add
lret
sahf   
fwait
push
fldcw
in
sub
jb
mul
daa    
(bad)  
or
call
xor
iret   
divl
fbld
stc    
dec
pop
sbb
cmp
fiaddl
push
and
xchg
ret    
cmc    
es jo
push
mov
or
in
mov
xor
cltd   
push
mov
push
aad
lock lds
push
dec
stc    
push
and
push
or
xor
cmc    
sbb
clc    
cmpsl
cmp
adcb
xchg
inc
or
sbb
cmpsb
xchg
mov
cmp
in
dec
insb
add
leave  
jnp
unpcklps
jmp
rcrl
inc
out
popa   
pop
repnz dec
ret
rcrl
xlat
jno
jae
adc
inc
(bad)  
loop
fdivrl
add
mov
and
aam
xor
mov
push
jnp
push
push
mov
cmp
leave  
out
sub
jo
ss lret
scas
jle
jbe
and
add
movb
add
jno
lea
xchg
push
xchg
pop
(bad)  
fidivrl
hlt    
mov
push
pop
cmp
cltd   
imull
dec
lahf   
ljmp
push
jle
inc
insb
or
loop
jnp
loop
call
fcomps
enter
(bad)  
push
sbb
sbb
sbb
jl
jmp
dec
arpl
xor
icebp  
and
inc
and
xchg
lea
add
movsl
popf   
fcmovu
lcall
aam
cmpsl
push
je
ds mov
int
fildll
out
cwtl   
and
cmpl
adc
popf   
ljmp
std    
outsl
cmpsl
mov
lock sarb
cmp
push
dec
xor
add
or
pop
push
aad
xchg
push
aas    
push
aas    
rcrl
push
mov
push
add
jl
in
push
xchg
enter
mov
jo
inc
cmpsb
lock aas 
jmp
xor
(bad)  
dec
and
xlat
cld    
inc
xchg
cmp
or
ljmp
dec
inc
stos
mov
repz jge
and
xchg
nop
lahf   
(bad)  
mov
push
lods
jb
insl
pop
mov
into   
add
clc    
push
fwait
pop
pop
sub
inc
mov
aad
outsb
mov
xor
mov
jae
push
add
pop
test
sub
sahf   
push
or
nop
in
aad
daa    
mull
jne
jno
arpl
mov
out
movsb
(bad)  
popf   
pusha  
fiadd
xchg
mov
jns
dec
fsubs
daa    
xor
rcrl
inc
jl
sub
sbb
sub
outsb
fisttpll
outsb
push
lods
cmp
out
push
mov
(bad)  
cld    
test
daa    
js
rclb
aas    
add
inc
sbb
mov
shr
rcll
flds
loope
adc
and
sarl
insb
arpl
jb
leave  
inc
xchg
dec
ret    
add
add
inc
sbb
push
iret   
sub
dec
out
xchg
cltd   
cltd   
jnp
in
jge
xchg
in
(bad)  
popa   
(bad)  
sahf   
dec
jg
nop
cmpsl
rolb
jb
adc
xchg
scas
lret
je
xchg
xchg
ss dec
aam
out
inc
adc
fwait
cli    
dec
or
push
mov
ss ret 
repz xchg
sahf   
pop
icebp  
pusha  
sbb
decb
sub
leave  
pop
dec
js
lea
pop
pextrw
mov
fs sar
xchg
sub
popa   
(bad)  {%k3}
inc
in
push
out
and
jecxz
imul
pop
sbb
xchg
inc
push
sbb
or
in
shrl
push
popa   
jb
pop
xchg
(bad)  
jbe
lahf   
sub
jge
jns
enter
fldenv
inc
pop
push
ljmp
jge
xor
jae
inc
push
lods
(bad)  
and
dec
rcl
mov
sub
aaa    
push
sub
dec
imul
mov
and
xchg
mov
xor
inc
es out
test
xchg
jo
xor
pop
mov
inc
lds
imul
shrb
dec
mov
ljmp
xorps
test
jae
push
pop
loop
aas    
add
or
jmp
aaa    
popa   
sub
cmp
inc
daa    
cwtl   
fdivs
fmull
add
sub
mov
add
and
or
pushf  
jne
clc    
insb
or
fcmove
test
jne
popf   
xor
test
push
int3   
dec
sub
xchg
cmp
xor
jge
sub
test
cld    
push
or
or
push
loope
xlat
jns
fldt
xlat
in
inc
jne
xchg
fcompl
dec
fadd
mov
loop
xchg
mov
add
or
js
popa   
xor
mov
sbb
mov
mov
pop
sub
dec
cmpsl
fadds
pop
repnz lods
repnz sbb
sahf   
cmpsb
and
imul
arpl
scas
jnp
mov
hlt    
fbld
cmp
enter
pusha  
push
cmp
sbb
or
adc
xor
and
add
sub
add
dec
inc
out
out
ret
in
fidivl
mov
pusha  
adc
repz stc 
enter
mov
(bad)  
cmp
push
enter
(bad)  
fiadd
sbb
fldt
hlt    
push
bound
rcr
xor
cltd   
sub
aam
lock inc
push
shl
aad
sub
push
mov
mov
pop
xor
xor
xchg
sbb
xchg
jns
cmp
mov
stos
gs adc
sbb
xor
push
jbe
add
jmp
mov
nop
dec
ja
into   
stos
xor
ret
je
sub
fdivl
loop
jne
xchg
sub
int
(bad)  
mulb
outsl
jecxz
dec
or
xor
xor
ljmp
sub
cmp
fisubrl
insb
jb
push
ret
push
xor
dec
inc
inc
hlt    
inc
or
pop
ds mov
push
int3   
in
fistpll
shl
rcrl
jmp
test
xchg
lcall
xor
add
mov
jl
jb
out
push
inc
lods
enter
dec
pop
fisttp
jo
ss out
js
mov
movsl
js
inc
inc
rcll
jl
jb
push
daa    
fs out
movsb
jns
fwait
mov
call
jp
inc
and
mov
cmp
shrl
mov
mov
in
mov
(bad)  
and
imul
(bad)  
insb
mov
pop
push
xor
adcb
mov
jp
(bad)  
ja
(bad)  
test
fstpt
test
test
leave  
arpl
scas
push
cmc    
jo
dec
ret    
decl
jb
fdivrl
aad
or
sbb
adc
push
loope
and
bound
or
inc
jg
xor
(bad)  
(bad)  
mov
fs mov
out
mul
push
nop
in
cli    
push
fs mov
mov
jb
pusha  
imul
test
cmp
mov
imul
jge
iret   
fadd
cltd   
push
mov
pop
cmpsb
pop
fwait
inc
or
xchg
sbb
push
jno
adc
hlt    
pop
xchg
pop
cmp
inc
fdivrl
enter
or
adc
lods
inc
sbb
or
jmp
pop
and
cmc    
test
cmp
iret   
adc
andb
xchg
cmp
cmpsl
cs imul
fnstenv
ficoml
sahf   
scas
aas    
jp
(bad)  
or
dec
push
lods
fidiv
scas
in
pop
js
adc
leave  
jmp
lret   
jnp
lret
cmp
in
dec
add
sti    
dec
ds pop
gs jnp
mov
push
mov
in
ret
pop
data16
sub
in
mov
aaa    
mov
fnstcw
cld    
sbb
dec
push
je
cmpsl
loopne
movsl
stos
mov
stos
xchg
lret   
xlat
(bad)  {%k3}
out
jnp
int3   
lret   
jne
mov
dec
pop
mov
or
sub
in
push
insl
dec
repnz lds
add
sbb
stc    
rcll
inc
push
nop
inc
cmp
pop
adc
mov
movsb
ret
cwtl   
out
xor
je
popf   
fstl
jle
orl
add
int3   
mov
loopne
gs jmp
inc
pop
(bad)  
scas
mov
pop
sub
aad
js
sahf   
cs and
ret
xor
add
sub
jne
and
je
xchg
and
mov
ja
psllw
jno
adc
aad
setno
fsubr
into   
test
add
ret    
push
xor
push
outsl
mov
lea
mov
pop
call
data16 jo
mov
andl
or
loop
adc
ja
cmp
(bad)  
imulb
nop
movsb
sub
in
repz push
aam
xor
jo
ret
dec
icebp  
outsb
(bad)  
inc
xor
outsl
(bad)  
pop
mov
or
fcmovnb
dec
pop
stc    
test
or
loope
inc
scas
mov
sbb
lret   
pop
add
js
sub
les
cwtl   
movl
(bad)
outsl
pusha  
mov
xor
mov
xchg
(bad)  
xchg
jl
jp
inc
mov
daa    
xchg
js
jo
insb
pushf  
rorb
sub
xor
jns
xor
mov
out
fnstsw
push
or
push
lods
adc
subl
dec
and
mov
mov
(bad)  
mul
lcall
xchg
pop
leave  
sub
xor
subl
inc
(bad)  
pop
std    
dec
repnz adc
pop
cld    
push
arpl
and
jo
sbb
pop
lret   
lods
or
mov
loop
in
mov
arpl
icebp  
cmpsb
jl
loopne
mov
or
sub
xchg
xchg
ja
outsb
cmp
jae
fwait
icebp  
jecxz
cs pop
cmpsb
and
loop
mov
xor
mov
rorl
lcall
fnstenv
sub
outsb
scas
je
scas
cmc    
test
neg
push
xorl
or
jae
sub
inc
(bad)  
cmc    
rorb
jbe
pop
lret   
or
lahf   
cli    
mov
dec
mov
push
je
pop
sbb
dec
jg
jnp
cmp
xchg
and
sbb
adc
push
mov
jnp
add
push
jmp
loop
repz fisub
cld    
pop
or
daa    
cmp
in
xor
pop
inc
outsb
nop
repnz aam
sbb
mov
adc
add
test
sub
movsb
push
stos
cmpsb
test
cmp
ffree
jle
mov
jle
jne
adcl
dec
setns
xchg
mov
and
lds
in
or
cmp
(bad)  
xchg
adc
rcrb
(bad)  
inc
gs adc
out
or
adc
sbb
cmpsb
mov
adc
cli    
dec
dec
and
mov
push
sub
mov
cmp
cmp
dec
movsb
cmp
aaa    
loop
inc
insl
adc
loope
pop
cmc    
cmp
repz fsubl
or
push
adc
cli    
das    
imul
stc    
mov
int3   
pop
adc
fistl
test
daa    
add
add
lock and
outsl
or
rcl
pushf  
rol
sub
in
sbb
add
fstpl
add
mov
jae
test
push
nop
push
mov
push
dec
mov
mov
sbb
loopne
sub
push
push
push
fwait
jns
dec
(bad)  
insb
clc    
imul
lret   
or
inc
sbb
and
jb
shll
xchg
cwtl   
adc
and
pop
mov
out
xor
lret
out
mov
and
test
push
lret
or
xor
cwtl   
and
push
test
stos
sbb
mov
(bad)  
hlt    
lahf   
sti    
cmovge
dec
pop
mov
sbb
push
sub
call
inc
sbb
mov
push
xchg
rcrb
jg
nop
shrl
mov
out
push
mov
mov
dec
pushf  
adc
push
stc    
lea
aaa    
lds
push
repnz mov
mov
and
insl
jnp
lds
add
out
xchg
pop
dec
mov
fisttp
jo
ja
mov
out
data16 and
ror
ja
test
shl
in
outsl
lods
(bad)  
mov
add
out
or
or
in
mov
in
mov
subl
xchg
jp
mov
std    
inc
jns
sub
ja
mul
stos
fistl
mov
call
jge
(bad)  
jno
adc
outsl
int
je
out
mov
int3   
nop
pop
cltd   
(bad)  
adc
mov
lock addl
or
(bad)  
push
daa    
addr16 icebp 
xor
cmp
dec
cld    
sbb
rolb
aam
cmp
insb
xchg
outsl
pushf  
pop
adc
mov
push
mov
je
call
in
bnd jb
das    
mov
sbb
rcll
add
cmp
xchg
mov
mov
or
rolb
fsubl
rorl
push
fstps
dec
push
ss push
mov
xchg
sahf   
add
gs
mov
xor
test
stc    
mov
popf   
out
test
pop
clc    
sbb
movsl
and
pushf  
and
push
bnd jbe
push
push
pop
das    
mov
pop
jl
shrl
mov
xchg
int3   
xor
outsb
std    
dec
inc
fcomip
std    
ficoml
push
(bad)  
jno
mov
in
mov
jae
iret   
imul
pop
hlt    
push
in
push
xor
mov
(bad)  
icebp  
sarl
jl
pop
mov
loopne
lock lret
add
adc
sbbl
jle
mov
loop
imul
bound
xor
mov
add
mov
mov
pushf  
xchg
push
std    
(bad)  
dec
mov
add
insb
mov
xor
lods
js
cld    
mov
pop
out
aaa    
lods
js
(bad)  
in
lods
inc
jns
aad
sub
fwait
rorl
mulb
inc
and
popf   
pop
add
in
pop
aas    
(bad)  
fisttpl
ret
gs or
(bad)  
cld    
test
nop
sub
aam
addr16 mov
int3   
dec
movsb
enter
roll
js
cs pop
add
in
jle
sahf   
lret   
js
(bad)  
ljmp
lcall
fcmove
in
orb
sbb
jecxz
aas    
mov
aad
push
cmp
lret
adc
rcrb
out
mov
out
adc
ds insb
popf   
jno
fwait
arpl
lcall
sbb
push
mov
nop
inc
inc
jg
jne
pop
(bad)  
pop
in
adc
pop
dec
imul
movb
or
jnp
dec
xor
and
jne
mov
push
or
cmp
and
add
mov
jmp
and
ja
(bad)
sbb
jge
mov
xor
mov
cmpsl
mov
and
lea
jl
loope
repz
lock adc
fisttpl
fcom
jp
icebp  
sti    
xchg
xchg
jmp
fsubrs
es pop
sahf   
jg
mov
(bad)  
fwait
(bad)  
fild
fdiv
testl
xchg
test
test
gs push
syscall 
mov
popf   
stos
jnp
loope
or
ja
pop
jo
mov
adc
pop
xchg
dec
cmpsl
(bad)  
test
xchg
dec
xchg
xor
mov
fisttpll
jno
(bad)  
xchg
mov
lret   
(bad)  
icebp  
mov
push
sbb
fs mov
in
and
xlat
popf   
rclb
test
(bad)  
sbb
jmp
dec
dec
daa    
popf   
ljmp
pop
lret   
mov
mov
je
mov
aaa    
dec
inc
dec
sbb
(bad)  
rcll
mov
push
sub
inc
bound
jno
push
mov
mov
or
dec
in
inc
faddl
xchg
and
cs adc
stc    
cmp
xchg
mov
push
movsb
add
pop
aas    
dec
cs push
pop
ret
sub
push
push
push
jb
lret
xchg
decb
jle
addr16 js
in
lcall
ss cli 
rolb
cmc    
imul
dec
int
pop
stos
mov
mov
push
mov
push
mov
mov
adc
movsl
je
xchg
(bad)  
sarl
mov
mov
lahf   
fsubs
aas    
pop
xchg
cmc    
cli    
int
shlb
stos
fcompp 
pop
rcl
add
dec
and
jb
mov
xchg
push
sub
cmp
mov
sub
hlt    
mov
mov
insb
daa    
cwtl   
arpl
inc
int
out
out
push
(bad)  
sub
jp
inc
call
xor
(bad)  
bsf
push
aad
outsb
sbb
xor
push
add
xchg
pop
xchg
push
imul
mov
aad
dec
enter
mov
jns
repz pushf 
sbb
mov
je
push
das    
pop
arpl
lock jle
test
stos
mov
inc
pop
cmp
les
js
scas
or
test
jae
push
xchg
jno
ds int3 
xor
inc
mov
and
xchg
fistp
jle
inc
pop
add
ljmp
adc
mov
xor
pop
jmp
out
ja
cmpsb
mov
mov
cmpsb
repnz push
jns
xor
sarb
outsb
push
arpl
fnstsw
xchg
jo
cld    
test
lods
xchg
jecxz
daa    
mov
cmp
mov
and
in
cli    
bound
jl
xchg
push
xor
scas
inc
mull
xor
outsb
(bad)  
jae
dec
orl
and
push
rcl
aam
mov
xchg
fcomip
scas
lea
leave  
pop
jb
inc
int3   
lret
fildll
ficompl
aam
fidiv
jmp
inc
xchg
push
cmp
inc
sbb
sahf   
dec
xlat
adcb
cmp
cmp
movsl
inc
pushf  
mov
repnz pop
sub
addr16 cwtl 
and
sbb
repnz mov
jnp
dec
xor
cmp
xchg
rorb
adc
aaa    
insl
repnz push
mov
lret
xor
xlat
adc
push
xchg
fcomps
pop
adc
cltd   
adc
(bad)  
movsb
fimull
ret
pop
xchg
xchg
add
xchg
and
adc
dec
repnz xchg
ret    
sub
rclb
test
inc
test
addb
in
dec
pop
push
inc
and
push
xor
xorb
push
aam
insb
adc
xchg
fsubl
cmp
mov
sar
adc
push
mov
xor
adc
mov
push
movaps
jmp
add
int3   
(bad)  
fnstsw
mov
sub
mov
dec
xlat
xchg
ret
and
push
jle
mov
(bad)  
fsubrs
test
shll
insb
jno
mov
pushf  
pop
fmull
sbb
fild
mov
rorl
mov
rcrl
and
cmpsb
in
stos
sahf   
(bad)  
xor
sbb
daa    
jbe
scas
sbb
fisub
fisttp
add
jo
lods
push
pop
push
loop
xlat
xchg
hlt    
mov
xchg
jb
loope
xchg
sub
sbb
mov
add
iret   
pop
nop
mov
and
leave  
sarl
ss pop
mov
mov
clc    
push
in
jno
out
fldenv
fs daa 
xchg
sub
or
push
push
inc
cmpsb
ret
jl
jnp
enter
cmp
flds
int
ret
test
lahf   
call
test
leave  
stc    
lret   
ret    
movb
pushf  
fist
outsb
cmp
mov
mov
jb
cmpb
mov
push
adc
sbb
repz adc
test
in
sarb
das    
iret   
loope
pop
scas
push
jl
and
dec
xchg
popf   
call
std    
inc
push
fimul
cmp
sbb
outsb
stc    
hlt    
test
adc
bound
test
sbb
mov
push
xor
lret   
pop
cmp
inc
in
push
test
jbe
add
pop
inc
test
icebp  
cmp
sub
hlt    
or
and
lods
movsl
or
pop
sahf   
sbb
sbb
mov
xchg
sbb
nop
in
cld    
mov
cwtl   
xlat
insl
fcos   
mov
or
mov
sbb
inc
sarb
jmp
and
(bad)  
pop
or
cmp
dec
test
inc
pushf  
or
sbb
jns
imul
jecxz
push
mov
jg
or
bound
frstor
(bad)  
jo
iret   
das    
in
cmp
mov
dec
(bad)  
jno
cld    
les
stc    
aas    
inc
xor
sub
sahf   
xor
fcoml
mov
mov
lahf   
add
lods
and
fbld
adc
mov
and
sub
out
outsl
pop
add
in
sub
mov
sub
fld
cs
out
movsb
push
bnd jp
(bad)  
pop
xchg
lds
in
clc    
std    
mov
jne
dec
cmp
jl
pop
xchg
insb
push
in
dec
lea
cmpsl
add
add
jl
fwait
outsl
(bad)  
(bad)  
ss test
xchg
pushf  
dec
int
out
loopne
insl
lahf   
js
test
cmpsl
add
push
jbe
adc
cs std 
push
imul
adc
scas
sub
insb
or
jo
inc
jge
xchg
stc    
(bad)  
push
and
xchg
jge
sbb
push
iret   
rcrl
add
(bad)  
mov
inc
pop
jo
and
popf   
pop
scas
adc
push
in
push
in
sbb
ja,pn
mov
sub
inc
pop
add
dec
movsl
mov
dec
jns
call
(bad)  
xor
sbb
out
xchg
cwtl   
and
test
jb
or
xor
dec
push
outsl
ljmp
loope
mov
adc
ret    
lahf   
outsb
mov
jae
shld
or
push
cmc    
fcoml
lret
adc
mov
cmpsl
cld    
adc
leave  
cmpsb
or
and
push
pushf  
dec
xchg
aaa    
loop
in
pusha  
fdivs
pusha  
sar
or
sbb
xchg
ret
or
ret    
xor
popa   
mov
(bad)  
mov
mov
inc
(bad)  
or
in
cmc    
nop
pop
fidivr
or
or
xchg
push
arpl
(bad)  
vunpckhps
pop
xor
ror
in
jge
repnz mov
push
sbb
(bad)  
ss push
daa    
mov
js
inc
into   
rcrb
jbe
sbb
stos
pop
mov
jp
mov
sahf   
(bad)  
mov
mov
pop
mov
push
sti    
fnstcw
js
cwtl   
test
into   
add
sbb
ja
mov
add
add
cmp
mov
arpl
mov
(bad)  
pop
insb
or
and
sbb
fwait
xor
testb
xchg
test
aam
inc
jmp
stos
stc    
jbe
in
jge
sub
cmp
cmp
(bad)  
enter
jno
aad
cltd   
push
and
shl
mov
mov
pop
fdivrs
push
sahf   
clc    
or
add
popf   
mov
int
ret
or
lret   
arpl
test
mov
es mov
mov
int3   
lock out
scas
inc
sti    
fwait
fwait
cmp
outsb
insb
xchg
xor
into   
xchg
cmp
(bad)  
data16 cmpsb
dec
mov
aad
pop
sbb
rorl
push
arpl
xor
sub
lea
mov
push
aas    
movsl
pop
sub
(bad)  
into   
cli    
sub
inc
sbb
xchg
inc
mov
fcomps
decl
add
add
ret    
lock inc
rorl
sub
adc
clc    
pop
cmpsb
es sub
dec
rcl
out
pop
mulb
pop
mov
outsl
dec
sbb
mov
mulps
add
adc
dec
cmp
jns
insb
sub
jae
inc
cmc    
pushf  
popf   
aaa    
inc
pop
test
xor
pop
pop
outsw
sbb
jae
(bad)  
inc
dec
jmp
sbb
dec
mov
cmp
adc
leave  
mov
popa   
leave  
cs stc 
(bad)  
cmp
pushf  
(bad)  
(bad)  
xor
mov
sbb
xlat
mov
sbb
cmp
fs pop
fwait
xchg
mov
fisttpl
cmp
in
jge
add
or
fimull
lret   
mov
(bad)  
or
loope
bound
loope
jno
sub
jp
xchg
jb
je
imul
push
fildll
loopne
push
mov
adc
shll
push
fpatan 
addr16 xchg
es jg
and
xor
outsb
arpl
out
iret   
pushf  
add
jbe
pop
or
sarl
repz jg
(bad)  
and
inc
cwtl   
or
out
xor
jno
mulb
and
fwait
add
jb
adc
mov
sbb
or
push
cmp
repnz fimul
movsb
clc    
mov
movsl
aad
les
insb
fistp
fisttp
cmp
dec
jae
rclb
into   
adc
out
mov
dec
inc
popa   
sbb
addb
mov
jp
into   
nop
cmp
int
shl
fiadd
(bad)  
hlt    
pop
inc
jno
sbb
adc
mov
test
(bad)  
mov
cmc    
nop
ds cmp
inc
xchg
test
mov
mov
leave  
int3   
push
in
out
cli    
xchg
and
dec
sbb
ds cmc 
ja
sbb
loope
gs hlt 
pop
icebp  
inc
xchg
xlat
xor
repnz movsb
gs test
out
sub
and
ret    
rolb
mov
adc
out
sub
jp
xchg
(bad)  
jmp
cmp
inc
sub
out
ret
jmp
cltd   
inc
dec
in
pop
aaa    
ret    
and
es mov
(bad)  
inc
mov
lret   
shrl
xor
rcll
jns
sti    
popa   
fstpt
and
flds
cmp
ret    
cmp
dec
mov
neg
(bad)  
jns
(bad)  
mov
data16 rolb
lret   
cmp
sub
mov
sarb
cli    
daa    
leave  
xchg
dec
pop
dec
fisubrl
mov
push
clc    
ret
test
mov
push
out
and
push
cmpsl
hlt    
xchg
mov
lea
inc
dec
out
adc
cmpsl
rdpmc  
leave  
add
add
sub
(bad)  
popa   
inc
scas
xor
push
sti    
mov
ret
push
push
ss xor
adcl
inc
xchg
mov
add
sub
jno
sbb
fisubl
or
iret   
ljmp
or
stos
mov
enter
mov
das    
push
xchg
add
dec
adc
pop
fwait
inc
xor
mov
xchg
dec
fcmovnbe
sbb
cltd   
add
pop
xchg
sar
enter
adc
inc
dec
test
sub
adc
lods
push
into   
lret   
test
cli    
inc
mov
adc
push
sti    
jbe
loopne
and
jg
(bad)  
std    
stos
jge
out
add
sub
mov
xchg
pop
fwait
mov
lret
mov
mov
and
test
jmp
mov
imul
inc
js
pop
fiadd
push
push
mov
test
mov
mov
in
idiv
out
and
rclb
(bad)  
mov
xor
imul
(bad)  
xor
loope
sbb
push
orl
adc
out
sub
inc
mov
push
aad
and
sub
ss ret 
push
mov
mov
addr16
in
push
push
jmp
mov
push
add
(bad)  
mov
aaa    
dec
(bad)  
out
jle
inc
or
adc
das    
xchg
loop
loopne
inc
inc
push
ss jne
rorl
inc
nop
add
je
jb
sub
mov
mov
leave  
je,pt
movsb
mov
icebp  
sbb
lahf   
inc
and
dec
(bad)  
jae
and
(bad)  
mov
xor
js
xchg
sub
sbb
mov
(bad)
and
std    
in
cli    
repz
test
mov
ljmp
mov
or
xor
sbbl
jb
fs aas 
out
lods
repnz test
roll
enter
xchg
ds sahf 
cmp
or
(bad)  
cmp
or
push
pop
mov
fwait
cld    
cmp
data16 or
mov
in
icebp  
shll
mov
stos
mov
ds iret 
lods
mov
into   
cmc    
and
or
mov
stos
inc
xor
out
jno
test
adc
jecxz
les
les
scas
mov
bnd jo
or
mov
test
aas    
stos
mov
(bad)  
shrl
inc
push
push
daa    
mov
in
test
popf   
fisub
push
jns
and
lods
in
fsub
xchg
cmpsb
cltd   
xchg
pop
cmpl
loope
fdivrp
jns
imul
or
xchg
and
aaa    
dec
add
cmp
mov
(bad)  
cmp
fiadd
sar
cmp
mov
xchg
jnp
jge
mov
mov
imul
lea
add
jno
imul
bound
jns
div
fdivrs
adcl
imul
mov
sbb
sbb
inc
xchg
mov
cmc    
pop
adc
scas
in
(bad)  
xchg
inc
addb
sarl
cmp
outsb
(bad)  
cs cmp
dec
icebp  
fsub
lcall
mov
in
mov
ljmp
mov
pop
cmp
adc
dec
dec
jg
popa   
ja
inc
test
mov
(bad)  
push
sub
test
ljmp
cmpsl
loop
jo
pop
ret
aaa    
xchg
mov
es xchg
cmp
stos
jge
testb
daa    
fidivl
movsb
fimul
andl
xchg
jge
icebp  
dec
mov
mov
sbb
lods
xchg
mov
cwtl   
pushw
iret   
fwait
pop
push
adc
adc
xchg
imul
js
outsb
adc
test
orl
jne
push
push
cltd   
push
cmp
lret
cltd   
xlat
hlt    
cmpsb
shll
ret
fcompl
ja
pop
push
addw
or
andb
dec
ss xchg
pushf  
pusha  
or
push
hlt    
fwait
rep lods
lret
mov
stc    
adc
or
add
or
pusha  
jb
orl
add
mov
inc
(bad)  
cmc    
lea
push
ss push
in
icebp  
jl
stc    
mov
mov
xchg
cli    
xor
aaa    
push
scas
sbbl
dec
scas
(bad)  
and
js
pop
push
sbb
int3   
or
aas    
movsl
dec
lretw
aas    
test
push
jno
jb
push
nop
jecxz
clc    
xchg
inc
adc
in
leave  
in
js
cmp
rcrb
sahf   
adc
bound
add
add
fwait
popf   
add
mov
addr16 adc
cmp
push
cmpsl
call
bound
fucomip
je
sub
addl
je
push
mov
je
imul
outsb
int
maxps
xorl
sub
pusha  
mov
(bad)  
mov
cmp
fldl
arpl
adc
or
jae
inc
jno
daa    
aaa    
enter
mov
fs inc
in
push
dec
xchg
jno
cmc    
mov
repnz lret
xor
loopne
jnp
addr16 out
notl
or
mov
xor
es jl
push
mov
mov
jne
push
mov
pop
inc
fs xchg
mov
rcr
push
mov
lods
xchg
jg
jle
dec
fidiv
popa   
mov
sbb
jmp
pop
push
mov
pop
loope
mov
or
rorb
les
inc
sub
jno
add
je
inc
or
ljmp
cmp
pop
test
push
pop
pop
xchg
lahf   
ja
push
nop
iret   
jmp
adc
inc
xchg
sbb
xchg
in
mov
xor
ds mov
roll
lods
mov
ds es add
in
imul
fdivr
pop
data16 stc 
xchg
and
xor
cwtl   
jecxz
stos
push
jle
imul
out
shll
adc
test
and
push
cmp
xor
jmp
xchg
pop
imul
lret   
fcompl
adc
fidivl
in
pop
pop
lcall
popa   
push
and
mov
addr16 lcall
xchg
repz mulb
push
adc
push
add
jecxz
inc
adc
rcrl
ret    
jl
sbb
jno
mov
data16 sbb
testl
fmull
jg
(bad)  
faddp
xchg
sub
loop
xor
dec
mov
jns
lods
and
not
in
(bad)  
aam
mov
lods
push
mov
cli    
dec
ljmp
(bad)  
mov
mov
int3   
xor
xor
(bad)  
pop
mov
stc    
and
int3   
push
lds
popf   
fnsave
(bad)  
repnz pop
movsl
cmp
shr
pop
repnz jecxz
and
jo
loop
cmpl
inc
clc    
pop
popf   
aas    
divb
dec
pop
inc
stc    
arpl
mov
xlat
stc    
movsb
pop
aaa    
sub
ja
jns
dec
call
outsb
mov
jns
icebp  
leave  
dec
and
aam
sub
(bad)  
mov
and
test
push
adc
xchg
gs int
mov
clc    
js
lret
push
std    
bound
mov
orl
lcall
int3   
shl
lahf   
enter
in
mov
and
push
inc
xor
loop
sbb
lods
pop
sub
scas
(bad)
cs inc
(bad)  
pop
sbb
mov
pop
mov
aas    
add
cmp
sahf   
lahf   
cmp
adcb
inc
adc
icebp  
mov
ret
aaa    
cmpsb
add
(bad)  
es ss ret
insl
jb
(bad)  
mov
add
jecxz
imull
push
(bad)  
xor
or
mov
imul
cmpsb
xchg
lahf   
jns
(bad)  
jne
xchg
loop
or
rcrl
pop
pop
cs out
pop
mov
or
(bad)  
cli    
jb
movsb
jge
es arpl
and
and
divb
into   
cmp
jb
xchg
dec
mov
jl
push
sbb
jae
stos
adc
mov
icebp  
fisubrl
push
rorb
jbe
jns
int3   
lds
loop
cmpsl
cmp
mov
inc
and
je
jl
lcall
inc
and
stos
lret   
mov
pop
fcmovbe
mov
lret
xchg
loop
cmp
dec
mov
lret   
sub
or
sub
mov
ficomp
mov
pop
inc
scas
hlt    
cwtl   
push
mov
addr16 jnp
imul
mov
out
mov
call
popa   
lds
xor
sub
movsl
inc
xchg
insl
test
push
inc
sub
fucomi
fistpl
sub
out
pop
cmp
xor
test
lods
cmp
sbb
sbb
mov
test
clc    
cmp
push
cmp
aam
aaa    
stos
mov
pushf  
sarb
push
cli    
addr16 sbb
cmp
xchg
add
xor
lea
imul
adc
inc
mov
jo
push
mov
jmp
pushf  
in
push
pop
mov
xchg
js
cmp
and
cmp
mov
loop
adc
popf   
and
(bad)  
notl
jecxz
sbb
cmp
jne
xchg
int
lret
inc
xchg
int
imul
fisttpl
loopne
int3   
loope
xchg
repz inc
pushf  
dec
xor
fmulp
jo
dec
xor
and
popa   
cmp
ret    
les
std    
out
push
mov
shrb
dec
push
into   
xorl
out
xchg
jno
hlt    
push
and
in
add
mov
xor
sbb
nop
cmp
cmp
jnp
push
leave  
movsl
pop
sbb
inc
out
andb
sbb
mov
jl
out
push
jno
sahf   
adc
test
outsb
ja
ret    
dec
nop
repz cmp
imul
fist
adcb
pop
lods
lret   
cmp
inc
js
je
inc
je
scas
xor
icebp  
or
(bad)  
mov
mov
arpl
pop
bound
pop
addr16 inc
push
and
xor
add
mov
sbb
es std 
in
jp
inc
icebp  
adc
push
cmp
jl
add
and
sbb
push
rorl
cltd   
jno
(bad)  
pop
lcall
not
adc
adc
(bad)  
in
arpl
outsb
decb
xor
push
sarl
mov
mov
sbb
pop
jmp
das    
dec
repz rorl
mov
dec
pushf  
cmpsl
push
dec
loop
insb
lods
lds
ret
mov
sub
int3   
cmpsb
sub
push
(bad)  
lret   
xchg
mov
push
mov
pavgw
repz jmp
pop
jl
jg
jecxz
fwait
in
mov
sub
mov
fs mov
movsl
data16 jge
push
jg
das    
mov
xor
dec
mov
cld    
pop
dec
fdivrs
cmpsb
fcompl
push
bound
mov
sahf   
jecxz
mov
gs je
stos
enter
pop
mov
lret   
mov
jmp
mov
in
(bad)  
lret   
ds test
adc
pushl
cwtl   
adc
jg
push
popl
popl
dec
enter
dec
jmp
fmulp
iret   
stos
leave  
pop
cli    
in
addr16 mov
xor
mov
push
mov
adc
xchg
inc
sti    
sbb
jmp
push
ret
inc
popa   
push
xor
stos
lcall
adc
push
sub
outsb
outsl
mov
pusha  
jb
or
lahf   
xchg
mov
outsb
ljmp
lret
dec
(bad)  
mov
mov
fdivp
cmpsb
mov
jmp
pop
aam
xchg
scas
ds push
(bad)  
ja
(bad)  
out
inc
incl
ljmp
(bad)  
push
subb
in
cmp
movsl
adc
movsl
repnz xadd
repz cmp
or
and
add
push
repnz mov
jns
jmp
mov
lret
xor
mov
cmpsl
xchg
push
and
sbb
jbe
test
in
test
movsl
movsl
in
xchg
repz or
cmc    
mov
mov
or
mov
xchg
loop
sti    
lea
adc
push
mov
dec
xchg
scas
sbb
xor
dec
in
mov
nop
mov
inc
(bad)  
push
ficom
jbe
test
sub
lea
js
sbb
xor
jae
pop
ret
(bad)
mov
arpl
int3   
(bad)  
push
mov
fs iret 
fisub
int3   
xor
sub
jne
push
xchg
sbb
and
xor
inc
out
mov
scas
test
out
fstpt
sbb
je
test
fdivl
mov
loopne
daa    
push
sti    
xor
or
hlt    
lds
incb
enter
enter
idivb
(bad)  
data16 mov
movsl
add
faddl
pop
(bad)  
xor
or
sub
pushl
cmpsl
jge
and
into   
add
out
or
int
call
les
mov
push
loopne
insl
jg
mov
mov
std    
mov
push
cmpsb
add
test
mov
sub
mov
(bad)  
push
dec
pop
mov
pop
mov
sbb
mov
int
mov
jl
cmp
pop
add
jae
ret
fimul
ret
imul
or
ja
in
es cltd 
adc
cmp
mov
out
test
and
or
jmp
sub
cld    
push
mov
mov
(bad)  
add
push
(bad)  
mov
cmp
imul
inc
mov
cmp
std    
ds aam
inc
in
mov
push
jecxz
lahf   
adc
add
shrb
(bad)  
lds
test
jge
jp
or
mov
add
jnp
fadd
aas    
test
repz pusha 
insl
data16 mov
or
popa   
xor
cmc    
mov
cwtl   
dec
mov
mov
mov
lret   
lods
mov
mov
jne
sarb
xchg
adc
add
mov
call
cmpsb
dec
dec
popa   
movsl
mov
fcomps
subl
xorl
fcom
mov
jge
lods
add
push
push
jo
jb
out
loopne
push
(bad)  
sahf   
lret   
rorb
movsb
mov
mov
data16 mov
stos
das    
popa   
dec
lods
(bad)  
fldt
jns
dec
std    
add
aas    
push
and
jae
loopne
mov
xlat
push
lds
fcomps
push
jno
mov
(bad)  
rep outsl
and
lods
cmc    
xchg
movsb
or
(bad)
enter
into   
addr16 test
dec
push
inc
adc
mov
pop
pop
xor
sti    
arpl
clc    
jnp
adc
stos
sbb
jnp
sub
lock int3 
adc
cmp
dec
or
popa   
adc
xor
fs push
mov
mov
xchg
movsl
pop
fcmove
mov
push
pop
push
pop
out
(bad)  
in
and
notb
push
in
jl
pop
add
in
jg
and
add
jge
mov
and
stos
clc    
mov
data16 idiv
jecxz
movsb
pop
mov
fimul
and
psubw
jp
dec
(bad)  
int3   
(bad)  
xchg
and
xor
and
gs aaa 
sbb
cld    
mov
sahf   
mov
lret   
inc
mov
dec
cmp
scas
sub
loopne
(bad)
adc
pop
gs jle
insb
jne
in
(bad)  
(bad)  
stc    
cmpsl
jno
xchg
scas
aas    
xor
lea
pop
imul
push
mov
xchg
cmpsb
fimull
mov
push
cli    
pop
and
mov
daa    
mov
pop
scas
xchg
std    
add
mov
xlat
test
xchg
insl
and
cmpsl
movsb
push
std    
lods
mov
add
inc
pop
lret   
pop
into   
xchg
mov
push
push
rcrb
pinsrw
movsb
(bad)  
test
fstpl
inc
mov
and
mov
stos
sub
lods
invd   
xor
test
jno
leave  
out
(bad)  
lret
mov
dec
dec
aas    
dec
adc
dec
(bad)  
mov
ja
xchg
or
add
sbb
lock inc
mov
orl
cmc    
in
cwtl   
add
inc
cli    
push
or
push
iret   
cmp
adc
lock stc 
cmp
test
icebp  
lea
add
ds mov
cmp
xchg
jae
lods
pop
(bad)  
xor
mov
sub
nop
lret
inc
pop
dec
push
(bad)  
jb
xor
psubd
mov
add
lock ret
inc
pop
(bad)  
fbstp
xchg
lcall
scas
pop
lds
jno
outsb
inc
and
pop
in
mov
jne
or
xchg
adc
xchg
aam
xlat
cmpsb
test
push
and
mov
inc
cmpsl
mov
bound
popf   
inc
pushf  
inc
and
sbb
inc
cmp
push
push
push
jns
outsl
inc
cld    
jo
icebp  
(bad)  
je
insl
cmp
(bad)  
mov
aam
inc
add
scas
insl
test
xchg
mov
mov
popa   
xor
nop
inc
sti    
jno
pop
mov
jp
pop
test
movsb
lahf   
mov
dec
mov
xchg
push
cmp
movsb
and
fistpll
pusha  
lods
sbb
inc
push
popf   
mov
mov
mov
dec
dec
(bad)  
lock xor
or
sarl
inc
out
or
pop
mov
es xchg
pop
lods
flds
je
or
mov
jbe
jb
push
pop
lock push
andps
mov
sub
mov
cmc    
jg
bound
push
xor
and
pop
jae
xchg
ss cld 
add
je
mov
or
inc
pop
addr16 stc 
imul
cmpsb
mov
jne
(bad)  
xor
add
sti    
inc
sub
sub
mov
jnp
pop
dec
push
xchg
push
push
mov
es or
and
rolb
xchg
cmp
int3   
xor
cmpsb
mov
push
push
or
mov
dec
add
mov
pop
imul
dec
mov
jb
or
adc
js
out
repz popf 
std    
push
sbb
fdivrs
push
fstps
or
mov
mov
(bad)  
(bad)  
xlat
loop
mov
mov
adc
mov
xchg
jne
mov
jecxz
mov
lods
sbb
outsl
(bad)
out
dec
enter
out
fdiv
repz cli 
or
out
fs jl
scas
xchg
sub
push
in
dec
jp
(bad)  
lock pop
addr16 dec
cmpsl
in
jecxz
push
jle
push
pop
mov
pop
mov
mov
mov
es mov
mov
loop
mov
add
ret    
dec
mov
sbb
test
stc    
jecxz
add
test
push
pop
clc    
lret   
pop
jecxz
in
xchg
je
lds
shrl
cmpsb
xchg
mov
cmp
jmp
test
imul
mov
lret
daa    
(bad)  
mov
jbe
mov
rorl
lock ret 
sub
xchg
jne
mov
repz push
dec
mov
mov
push
js
rcll
sarl
mov
ss adc
jbe
fsub
in
in
out
(bad)  
in
popa   
jnp
adc
jne
add
push
sahf   
pushf  
call
clc    
cld    
leave  
aam
insb
fcomip
or
and
outsb
(bad)
cs
push
arpl
test
ret
int
cmc    
mov
iret   
test
inc
mov
push
mov
pop
outsb
and
add
jge
inc
ds out
or
cmp
push
jmp
sbb
adc
mov
and
pushf  
mov
out
fdivrs
(bad)  
stos
xor
mov
aam
movl
out
and
jl
jge
sbb
sar
fisubrl
fwait
mov
inc
inc
into   
(bad)
scas
icebp  
adc
or
adc
notb
cmp
push
hlt    
sahf   
pushf  
sbb
repnz and
pop
or
mov
adc
fldl
mov
int3   
or
fcomp
ret
dec
cwtl   
cwtl   
cld    
or
inc
sub
lock inc
mov
inc
and
outsl
adc
repnz iret 
ja
mov
inc
jge
sub
incl
ss push
pop
push
jge
adcl
daa    
cmp
push
pop
adc
pop
fstl
in
pop
mov
aaa    
xchg
add
lret
rcr
movsb
mov
dec
sarl
inc
(bad)  
jle
fstpt
(bad)
sub
out
ret
mov
dec
push
push
xchg
xchg
mov
pop
loope
(bad)  
rcr
cmpsl
or
pop
jp
mov
in
dec
cwtl   
jne
je
mov
jg
jl
sti    
std    
aaa    
repz jecxz
aas    
xchg
adc
xchg
int
cmp
adc
cmpsl
mov
lods
mov
ficomp
dec
roll
lahf   
jns
mov
lock jecxz
sbb
xor
xor
outsl
mov
lret
inc
cmp
(bad)  
dec
sub
es inc
mov
or
pop
arpl
in
jne
data16 aad
inc
pusha  
js
dec
popl
cmp
mov
cmc    
jno
push
adc
fwait
ds xchg
xor
stos
inc
out
mov
jno
mov
jle
push
out
rcrb
clc    
or
test
sub
or
add
mov
inc
pop
in
cmp
adc
mov
popf   
mov
mov
cli    
aaa    
stos
inc
mov
xchg
out
(bad)  
dec
and
pop
pop
pusha  
pop
xor
jge
nop
rol
mov
xchg
sub
push
sub
xor
es lret
data16 aas 
xchg
popl
(bad)  
fwait
outsl
mov
loopne
mov
push
aam
rolb
jle
stos
notb
lea
dec
inc
aas    
push
push
outsb
shll
out
test
in
int
xchg
or
sbb
in
shlb
xor
mov
xor
dec
cwtl   
pop
(bad)  
pop
xlat
cmp
fldenv
inc
(bad)  
mov
push
lcall
and
(bad)  
aam
sbb
jns
in
lret   
icebp  
adc
xchg
fnstcw
fwait
or
fcmovne
in
jp
xlat
push
and
jae
subl
mov
loop
sbbl
mov
sub
rol
mov
and
outsb
mov
lds
shr
jl
cmpsl
test
push
std    
push
cli    
or
jbe
xor
bound
mov
dec
shrl
add
jns
jle
mov
insb
push
sbb
cli    
out
jg
sbb
call
dec
ret
sub
xchg
mov
cli    
divl
popa   
(bad)  
dec
jno
cmc    
push
sub
pop
dec
les
enter
mov
outsl
jb
mov
popf   
add
xor
jle
or
cmp
sbb
cmpsb
xor
inc
sub
clc    
adc
xor
lahf   
movsb
push
xchg
in
cmpb
mov
out
push
xchg
aam
add
gs cli 
cmpsb
das    
fsub
jae
cmp
cmp
mov
hlt    
push
xchg
clc    
sbb
rcrl
roll
fscale 
std    
out
push
add
pop
scas
call
dec
aam
in
push
mov
orb
insb
inc
out
call
jl
mov
xchg
(bad)  
insb
out
and
jnp
xor
clc    
adc
aas    
push
xchg
dec
sti    
push
into   
dec
enter
das    
ljmp
pop
add
inc
aad
and
(bad)  {%k3}
hlt    
rcrl
jle
or
std    
push
ret    
pop
xlat
mov
adc
scas
int
lds
xchg
dec
aas    
mov
insb
xor
movsl
imul
and
mov
in
ret
mov
push
xlat
es cmp
out
dec
sbb
leave  
inc
daa    
fwait
aam
ljmp
push
mov
pop
pop
and
sub
mov
mov
(bad)  
xchg
out
out
in
outsl
lret   
(bad)  
decb
and
jmp
and
sbb
inc
(bad)  {%k3}
aam
push
cmp
jl
aaa    
xchg
aaa    
cmp
clc    
inc
xor
pushf  
(bad)  
icebp  
test
cmpsb
lret
push
jo
scas
sarl
or
pop
out
dec
mov
repnz cltd 
xchg
insl
cmp
sti    
dec
push
inc
sbb
je
dec
jmp
cmp
sbb
xchg
adc
xor
inc
leave  
insl
lcall
mov
(bad)  
call
popa   
es
mov
lods
push
xor
(bad)  
rorb
jbe
inc
fmull
xchg
or
inc
out
call
aaa    
sub
aaa    
int
iret   
or
add
push
cld    
loope
xor
stc    
pop
xchg
fiaddl
pop
mov
test
or
imul
adc
sarl
pop
cld    
mov
repnz out
pop
mov
pop
into   
hlt    
fdivl
(bad)  
dec
jae
mov
jnp
out
ror
adc
outsb
loope
pop
ja
mov
ss cltd 
push
aam
add
mov
mov
cmpsb
(bad)  
xor
mov
push
outsl
outsb
lcall
(bad)  
mov
test
xor
fimull
out
das    
hlt    
mov
lods
add
gs add
decl
aas    
xchg
inc
mov
in
xchg
fbstp
leave  
aad
push
push
mov
insb
mov
and
sbb
inc
cmp
push
or
lock les
lods
sub
aas    
(bad)  
adc
js
mov
mov
adc
sbbl
push
jl
jb
xor
mov
scas
gs mov
dec
stos
je
pop
mov
sub
push
insl
pop
dec
sub
mov
xor
xchg
and
sub
leave  
dec
out
andl
ret    
push
mov
mov
and
ljmp
xchg
jg
mov
lahf   
pop
(bad)  
out
pop
dec
jbe
outsb
and
fs jbe
fs gs jbe
mov
dec
xchg
lcall
sbb
lds
cmp
clc    
jecxz
js
adc
je
sbb
jle
arpl
mov
in
cmp
pop
or
or
inc
jmp
inc
xlat
adc
and
pop
add
pop
adcb
ret    
and
mov
pop
loop
xchg
aad
lds
aas    
outsb
dec
lods
or
fistpll
or
push
in
jp
mov
jmp
cs
call
push
or
sbbb
mov
into   
and
jnp
mov
inc
out
fchs   
fucom
push
cmpsl
cmpsl
mov
popf   
and
push
pusha  
add
fs pushf 
daa    
lea
or
cwtl   
xchg
imul
ret    
nop
cmc    
sbb
int3   
pop
pop
shrl
or
xor
fs cmp
aas    
icebp  
pusha  
cmpsl
lret
cmp
mov
bound
xor
adc
stos
lahf   
mov
xchg
or
sbb
add
mov
pusha  
and
lcall
add
jle
lods
loopne
push
mov
jl
inc
sub
cmpsb
stc    
inc
sub
roll
dec
mov
push
les
cs adc
inc
mov
mov
pushf  
cmpl
les
push
(bad)  
in
out
mov
pop
adc
shll
add
rolb
fdivrs
xchg
js
mov
popf   
jg
mov
sbb
mov
pushf  
bound
lds
movsl
and
sahf   
dec
add
mov
data16 adc
xchg
test
xchg
jg
ret    
ss sar
jle
outsl
push
lds
jle
fdivrl
in
jne
lock lahf 
add
fidivl
jb
fs cld 
or
jnp
and
repnz clc 
lcall
pop
sbb
jecxz
push
aad
dec
sub
call
mov
push
jp
push
inc
pop
lret
jl
pop
mov
push
(bad)  
jno
sbb
xchg
sub
xor
pop
fld
add
pop
mov
mov
inc
rclb
jmp
xchg
add
test
aaa    
lock mov
cwtl   
stos
mov
(bad)  
jae
in
imul
pop
shll
jne
aam
cmpsl
or
add
rorl
sti    
sbb
cmp
pop
adc
mov
pusha  
into   
aaa    
stos
idivb
pop
or
xchg
fwait
xchg
sub
(bad)  
std    
stos
xor
loope
stos
(bad)
inc
imul
jecxz
xchg
jge
stos
mov
aas    
sub
jle
adc
jmp
inc
cmpsb
aas    
mov
ret
jl
mov
lock mov
mov
cmp
jmp
nop
in
cli    
bound
movsb
std    
jecxz
inc
dec
dec
dec
pop
cli    
scas
mov
cmpsb
jne
and
pop
gs in
test
pop
pop
aam
mov
xor
aam
or
call
in
push
push
cld    
xor
xor
out
sbb
sahf   
test
pop
(bad)
(bad)  
xchg
sbb
or
sbb
pop
and
pop
insb
shrb
ret
mov
mov
adc
add
bound
in
call
lock jmp
push
hlt    
adc
in
clc    
jo
jae
pusha  
stos
xor
pop
fwait
cmp
hlt    
sub
loop
test
gs pop
mov
iret   
xchg
push
daa    
and
add
xor
sbb
push
xchg
stc    
sub
push
cmc    
loope
xor
inc
lds
lret   
jecxz
sbb
imul
push
mov
xor
and
dec
xchg
add
(bad)  
and
in
aam
dec
xor
xor
ds cmp
popa   
xlat
shl
sub
inc
xor
mov
jle
test
enter
dec
or
loope
(bad)  
push
pop
mov
push
sub
dec
sbb
xchg
cwtl   
adc
fs iret 
mov
mov
in
(bad)  
cld    
jo
inc
es xchg
mov
cmc    
call
test
sbb
or
addl
(bad)  
mov
dec
subl
inc
adc
popf   
inc
push
leave  
aad
lock cmp
mov
sahf   
inc
movsb
in
push
jl
test
stos
sbb
jnp
xchg
sub
bound
(bad)  
cmp
pop
mov
mov
lahf   
fisub
xor
inc
iret   
ret
(bad)  
mov
mov
popa   
pop
test
sbb
lcall
add
fisttpll
pop
cmp
mov
jns
jns
sub
or
adc
adcl
test
or
add
(bad)  
js
mov
mov
sub
aam
loop
scas
sbb
or
arpl
push
test
mov
(bad)  
outsb
das    
hlt    
loop
into   
inc
or
clc    
mov
dec
rcrl
cs dec
xchg
ret
push
je
jp
inc
sbb
sub
add
aad
js
outsl
daa    
les
cmp
pusha  
fldt
pop
in
sbb
cmp
and
je
dec
insb
cmp
xchg
mov
ret    
cli    
mov
pop
int3   
test
enter
sub
inc
inc
out
mov
ds
jb
icebp  
popf   
or
xor
mov
sub
xchg
add
pop
hlt    
mov
cltd   
lods
imul
push
pop
pusha  
xor
cmp
aam
sbb
bound
mov
push
inc
or
cmp
jmp
jbe
scas
mov
xor
mov
mov
arpl
repz call
mov
xchg
shrb
pusha  
adcl
aam
jl
mov
mov
lods
sbb
sub
aam
fnstcw
stc    
clc    
mov
mov
movsb
fs push
ljmp
(bad)  
sbb
testl
pusha  
dec
scas
xchg
js
inc
pusha  
cmp
int
lods
outsl
lock ret 
testl
popa   
cld    
stc    
mov
xchg
mov
and
popa   
lret   
add
lcall
out
cmp
cmp
rcll
pop
sbbb
fdivrs
aas    
sbb
push
lcall
mov
lcall
nop
es push
xor
xor
add
cld    
(bad)  
dec
ret
jmp
dec
das    
xchg
out
mov
aas    
ficomp
push
push
stos
sbb
fs sbb
adc
jge
stos
and
jb
repz jns
arpl
loopne
iret   
lods
inc
adc
mov
fisubl
xchg
std    
inc
mov
xor
outsl
sbb
out
std    
sbb
icebp  
jp
or
in
idivb
push
out
and
fcompl
mov
jle
mov
push
scas
inc
dec
jmp
add
sarl
mov
mov
out
shr
push
or
data16 ja
inc
pop
inc
lock cmovp
pop
int3   
or
mov
movsb
insb
sbb
(bad)  
sub
addr16 or
xchg
dec
mov
shlw
incb
stos
pop
sub
insb
loopne
fcom
add
fcmove
imul
push
push
loop
mov
add
mov
(bad)  
lods
cmp
mov
and
aad
(bad)  
out
ja
ret
es cmc 
dec
ficom
mov
in
jnp
pushf  
lds
lds
mov
out
xchg
jle
add
pushf  
pop
dec
sub
nop
sbb
and
add
loop
faddl
add
(bad)  
fsubr
(bad)  
mov
or
dec
cmp
mov
pop
add
and
adcb
leave  
jae
ficoml
ss
mov
lds
fdivrp
(bad)  
loop
adc
enter
lcall
int3   
add
outsl
add
sbb
ds aad
push
pop
mov
call
sti    
pusha  
inc
sbb
insl
ret
pop
int3   
pop
das    
mov
and
dec
fild
mov
cmpsb
mov
imul
adc
out
setg
sbb
cwtl   
push
test
bound
inc
mov
adc
leave  
jmp
icebp  
adc
xchg
enter
pop
adc
ja
mov
ficomp
adc
popa   
or
outsl
rolb
dec
jae
push
ss dec
add
in
cltd   
cmp
mov
fwait
sub
or
xchg
int
fcmovne
adc
mov
repz xor
mov
mov
push
mov
push
bound
pop
call
sbb
ss lret
lret
sub
pop
and
cmp
jnp
and
jg
push
test
(bad)  
fldcw
sbb
cltd   
(bad)  
cmp
sbb
cli    
xchg
pushf  
in
fidivl
jp
(bad)  
xchg
inc
mov
pop
dec
or
push
test
xorl
mov
cmc    
(bad)  
dec
pop
insb
push
ffreep
lahf   
xor
cmc    
outsl
sarb
xor
cmp
gs sbb
xlat
data16 loope
xor
mov
ds dec
lahf   
stos
mov
xchg
loope,pt
popf   
pop
mov
out
sbb
cmp
popa   
xor
or
mov
push
pop
push
sub
jae
add
(bad)  
jp
in
mov
push
dec
in
push
mov
adc
mov
add
inc
adc
adc
xchg
mov
cwtl   
in
outsb
jno
lock jns
out
test
push
fs int
mov
mov
cmp
das    
stos
push
daa    
js
std    
mov
add
faddl
mov
mov
iret   
fldcw
popf   
cmp
outsb
outsb
ret
jb
dec
xchg
repz push
sub
sbb
jno
push
imul
lds
cwtl   
pop
add
rorb
stos
cmp
add
stos
pop
int
enter
jbe
stos
(bad)  
xor
imul
adc
mov
sub
mov
mov
in
cmpsl
jnp
in
xchg
inc
lods
add
inc
pushf  
pop
and
adc
add
insb
aad
insl
xchg
aam
nop
enter
push
pop
push
lcall
in
cmp
mov
int
(bad)  
test
xorb
dec
xchg
cmpsl
stc    
ja
out
mov
mov
out
fcompl
dec
movsl
fdivrs
or
add
push
enter
std    
push
jge
cmc    
lret
cmpsb
pushf  
xor
popf   
lods
ret    
pop
enter
aas    
int
loop
or
push
cmpsl
pop
test
xlat
mov
fidiv
push
aaa    
(bad)  
cmc    
mov
inc
mov
scas
and
pop
cmp
pop
push
jb
ret    
es dec
xor
icebp  
ss dec
xchg
ret
das    
adc
clc    
sbb
xor
mov
xor
pop
insl
adc
mov
enter
test
pop
push
cwtl   
iret   
inc
inc
les
aas    
xchg
fdivrs
sbb
iret   
xchg
lcall
ja
xchg
push
mov
movsb
mov
in
push
ss je
jecxz
jle
gs in
jb
loope
nop
mov
in
ss js
das    
mov
xor
pop
stos
inc
jnp
shll
xchg
aas    
cmp
outsl
xchg
xchg
scas
push
sti    
adc
insl
pop
std    
add
lahf   
dec
sahf   
sbb
mov
jle
test
sbb
jne
je
sub
shll
(bad)  
rcl
or
ss cli 
loopne
xchg
jge
sbb
cmp
mov
cltd   
push
insb
add
mov
or
test
cmp
xchg
(bad)  
in
mov
movsb
cmp
mov
(bad)  
loopne
in
hlt    
mov
cmp
inc
(bad)  
ss pop
(bad)  
and
test
mov
in
dec
js
sbb
ss repz sbb
and
xchg
orb
hlt    
int
cmp
adc
xchg
jnp
in
and
(bad)  
jne
push
cmp
sub
sbb
cli    
adc
dec
stos
mov
and
inc
ljmp
sahf   
aaa    
mov
mov
rcrl
xchg
xor
lods
inc
pushf  
repz
ror
sbb
or
in
fsubrs
call
dec
cld    
(bad)  
jno
add
sub
pop
ret    
or
fbld
fwait
dec
loop
(bad)  
aam
jnp
and
scas
repnz bound
and
pop
sbb
imul
enter
adc
aad
xchg
std    
pusha  
or
inc
xor
loopne
(bad)  
mov
push
add
(bad)  
pop
lret
int3   
call
ret    
movsl
dec
mov
std    
les
rorb
cli    
fldenv
and
in
mov
jnp
in
jno
mov
(bad)  
mov
repz
out
imul
pop
fistpl
mov
pop
adc
(bad)  
arpl
push
cmc    
loope
adc
push
popa   
inc
icebp  
pop
arpl
jg
inc
(bad)  
(bad)  
sub
adc
push
or
mov
out
addr16 lret 
inc
bound
cmp
popa   
aaa    
or
sbb
ret
dec
dec
and
(bad)  
mov
out
mov
out
fwait
dec
push
sbbl
rcr
fsubrs
fcomip
pop
inc
sahf   
mov
imul
jmp
mov
or
mov
cmc    
pop
repnz xchg
stos
push
xor
cmp
ret    
adc
jo
ljmp
cmpsb
xchg
push
or
test
pop
shrl
dec
in
mov
sbb
mov
inc
insl
insl
lods
push
jne
and
repz mov
sahf   
inc
cmpsl
cli    
sbb
fwait
daa    
mov
jns
dec
scas
mov
xchg
and
mov
ss push
pop
sbb
or
and
jno
mov
pop
ja
jae
repnz lahf 
adc
push
mov
imul
mov
inc
xchg
xchg
sbb
jne
outsl
xchg
xor
jnp
lods
jmp
xchg
pop
test
mov
jecxz
inc
sub
pop
sbb
push
cli    
addb
pop
aad
or
(bad)  
and
push
xchg
in
push
insb
mov
mov
add
cmc    
fwait
cmp
lods
roll
pop
sbb
xor
ja
cmpsl
sahf   
js
mov
outsb
lock jns
jns
jno
popf   
in
jae
out
sub
imul
push
xchg
push
lods
mov
mov
adc
mov
mov
repz xor
cld    
clc    
cmp
jge
cmpsb
mov
mov
and
ret    
fsubs
or
sahf   
mov
mov
sbb
mov
lret   
pop
fsub
ljmp
mov
movsb
test
pop
loope
iret   
xor
clc    
adc
mov
mov
decl
in
(bad)  
outsb
ret    
and
inc
dec
je
jl
mov
arpl
mov
cltd   
dec
and
repnz push
jbe
repz imull
sbb
or
(bad)  
push
es mov
unpckhps
and
lock sub
adc
pop
mov
mov
push
in
and
jne
push
sub
mov
popl
idivb
add
popa   
pop
subl
mov
mov
in
jns
lret   
pop
pop
icebp  
test
stc    
push
mov
pushf  
jmp
cmp
push
into   
outsl
repz sti 
push
push
test
adc
gs stos
pop
jl
dec
movsb
xchg
mov
rcrb
jno
xchg
aaa    
popa   
test
dec
sub
cli    
pop
cld    
pop
pop
jno
jb
sarl
fisttp
add
cmpsl
iret   
sbb
adc
dec
mov
addl
inc
jns
es sti 
ret    
mov
addb
mov
pop
xor
(bad)  
jp
ret    
inc
repz xor
adc
jb
sbb
push
jmp
xor
repz cmpsl
out
aam
lcall
sbb
gs push
lcall
adc
cs pop
dec
add
(bad)  
ret
push
mov
lahf   
jne
rclb
mov
mov
gs mov
(bad)  
mov
pop
inc
pop
cld    
popa   
cmp
mov
or
jns
jae
ss pushf 
imul
or
popf   
fwait
mov
ljmp
enter
pop
out
ret    
enter
xor
addr16 aad
xor
inc
jno
sub
mov
mov
push
(bad)  
lcall
jae
movsl
dec
negb
gs push
push
scas
mov
mull
adcl
inc
stos
stos
lahf   
mov
mov
pop
cmp
in
js
push
loop
cmp
outsb
dec
xor
dec
or
mov
pop
in
or
sub
xor
cmp
pop
inc
pop
pop
and
and
adc
fnstenv
dec
addr16 fs test
roll
out
nop
lret
add
fistpll
sahf   
mov
out
dec
jbe
jmp
push
mov
jl
iret   
and
push
cmp
lock
scas
dec
xor
mov
inc
shrl
cli    
sbb
js
xchg
or
add
pop
fsts
cmp
add
pop
dec
jno
pextrw
pop
cwtl   
imul
dec
mov
cmp
push
pushf  
and
out
mov
out
sti    
adc
xor
mov
add
js
jl
iret   
repz mov
icebp  
adc
lods
mov
sub
inc
push
(bad)  
jne
and
fistpl
stos
int
addr16 mov
repnz or
pushf  
fbstp
addr16 mov
sbb
jns
nop
adc
pop
dec
mov
ds mov
adc
xchg
cs pushf 
fisubr
or
es mov
test
dec
xchg
faddp
loop
loop
rcll
fwait
xchg
aam
outsb
aad
or
adc
loope
mov
cld    
movsb
xchg
xor
mov
std    
adc
clc    
mov
push
inc
inc
int3   
pop
loopne
cmpsl
cs or
lods
stos
daa    
bound
gs ljmp
inc
gs dec
aad
cli    
int3   
xor
cmp
mov
xchg
icebp  
dec
cmp
and
into   
xchg
movsl
xchg
add
stos
mov
cmpsl
not
movsb
xor
or
les
or
clc    
and
decl
repz xlat
out
mov
add
push
push
scas
sar
cmp
cli    
mov
(bad)  
jns
sub
es adc
popa   
aam
pop
rcrl
push
fs pop
cld    
push
adc
sub
(bad)  
inc
xor
adc
xchg
rcrl
push
test
aaa    
or
nop
arpl
loop
ror
push
sahf   
stc    
sbb
jecxz
inc
clc    
push
add
mov
sbb
test
sbb
fucom
push
test
fnstenv
inc
mov
(bad)  
fcmovnbe
jb
inc
(bad)  
dec
out
sbb
inc
lea
imulb
aaa    
mov
in
or
(bad)  
pop
outsl
pop
les
outsl
leave  
dec
mov
and
sbb
pop
jnp
rorl
pop
dec
push
loope
xor
ss test
int3   
and
mov
or
test
jnp
ja
pop
xor
std    
jg
mov
addr16 ret 
mov
ds mov
test
mov
mov
pop
push
data16
cmp
arpl
ret
mov
frstor
out
mov
xor
out
pop
fdivl
aad
loopne
sbb
dec
daa    
shrb
fmull
mov
pushf  
loope
rcr
fdivrl
sbbl
add
push
test
xor
movsb
(bad)  
xor
and
addr16 or
or
lret   
mov
std    
rcrb
cmc    
cmpsb
dec
outsl
out
adc
sub
daa    
sub
mov
adc
mov
scas
or
jl
out
or
aaa    
add
into   
inc
jg
or
in
xchg
fdivs
fwait
mov
ss push
add
jecxz
stos
dec
inc
fcomi
loope,pn
andl
jl
pop
xchg
xchg
add
popa   
inc
push
xchg
cmp
push
(bad)  {%k3}
lds
jmp
rcr
sub
or
outsl
sub
adc
or
cmpsl
add
sbb
xor
cmp
pop
xor
int
push
ret
aas    
(bad)  
cli    
cmpl
jp
lcall
dec
xlat
fidivrl
xchg
je
inc
and
outsl
ret    
fs jo
xlat
scas
xchg
leave  
xchg
ficom
lahf   
pop
sbb
mov
int
(bad)  
fisub
aas    
cld    
xor
lods
cli    
xchg
addl
in
cwtl   
cli    
inc
or
xchg
in
(bad)  
loope
pop
test
in
adc
inc
pop
jecxz
mov
inc
lods
mov
in
jg
sar
clc    
mov
cli    
xor
mov
push
push
jg
mov
pop
std    
push
lods
xchg
inc
(bad)  
addb
mov
lods
cmp
push
js,pn
mov
fs xchg
shr
fadds
cmp
popa   
or
jg
dec
jl
dec
loop
ret
rolb
mov
pop
push
xor
(bad)
(bad)  
sbb
fmuls
in
into   
inc
test
aas    
or
mov
imul
int3   
daa    
das    
sbb
scas
fcomps
inc
fidiv
outsl
dec
cltd   
in
dec
sub
fistl
push
(bad)  
xchg
lret
popf   
(bad)  
mov
ret
jbe
aam
rcl
cmpsl
mov
movsb
inc
sub
push
sub
jnp
jmp
xor
mov
adc
lret   
out
xor
jge
jecxz
mov
jno
inc
dec
xlat
(bad)  
xlat
or
mov
sbb
ljmp
aas    
test
lods
cwtl   
inc
iret   
fnstsw
mov
xlat
rolb
inc
sar
mov
fidivrl
mov
add
dec
inc
add
add
add
add
or
add
jbe
xor
xor
add
add
add
add
add
add
add
insb
or
add
push
je
imul
add
add
add
and
add
sbb
add
add
add
inc
push
dec
inc
add
add
sbb
add
add
add
inc
insb
outsl
add
add
add
push
xchg
mov
add
cli    
add
add
add
add
add
add
add
add
pop
add
add
add
jp
add
cmp
add
adc
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
push
add
add
add
add
add
add
add
add
add
add
add
push
add
add
add
xor
or
xchg
add
add
add
add
add
add
add
add
add
add
add
add
je
push
add
rolb
xor
push
add
add
add
add
add
add
add
add
push
add
add
jl
push
add
add
add
add
add
add
add
add
add
add
add
add
add
push
add
add
push
add
add
add
add
add
add
add
pop
add
dec
add
fs add
js
xor
adc
test
or
dec
add
add
push
dec
add
add
push
xor
push
add
pop
jl
push
add
add
pop
movb
add
pop
movb
add
movb
add
add
bound
push
add
movb
add
add
add
or
pop
push
add
or
add
add
or
add
add
or
pop
push
add
or
or
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
or
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
insb
pop
add
add
add
add
jbe
add
add
add
add
addb
add
add
add
add
test
mov
add
add
add
add
add
add
add
add
cltd   
pop
sahf   
pop
add
add
add
add
add
add
add
add
add
add
or
or
jne
xor
pop
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
or
xchg
fiaddl
adc
add
pusha  
and
add
add
add
add
add
or
xchg
add
add
add
jl
add
or
xchg
fiaddl
adc
add
mov
add
or
xchg
fiaddl
adc
add
pushf  
and
add
add
add
add
xchg
fiaddl
adc
add
mov
add
add
add
and
add
add
add
add
and
add
add
add
add
and
add
add
add
add
add
or
xchg
fiaddl
adc
add
pusha  
and
add
add
add
add
add
add
add
add
add
add
add
add
add
or
xchg
add
add
or
les
add
or
xchg
fiaddl
adc
or
aam
add
or
xchg
sbb
add
or
clc    
and
add
add
add
add
add
or
xchg
add
add
add
and
add
add
add
add
and
add
add
add
add
and
add
add
add
add
add
or
nop
add
add
add
dec
and
add
add
add
push
and
add
add
add
push
add
add
add
add
or
nop
add
inc
add
add
add
add
shlb
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
or
nop
add
add
add
insb
and
nop
add
inc
add
add
add
add
add
add
add
mov
add
or
nop
add
add
nop
add
add
and
nop
add
add
and
nop
add
add
and
nop
add
hlt    
and
nop
add
add
add
add
and
nop
add
add
add
add
add
or
nop
add
add
add
sbb
add
or
nop
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
or
nop
add
add
add
or
nop
add
add
test
add
or
nop
add
add
nop
add
or
nop
add
add
pushf  
add
or
nop
add
add
nop
add
add
mov
add
add
add
add
or
nop
add
add
add
add
or
nop
add
sbb
xor
in
add
or
nop
add
jle
xor
add
add
add
add
add
or
nop
add
lock add
add
add
or
nop
add
add
add
or
nop
add
add
add
add
add
add
add
add
add
add
add
add
add
test
add
or
nop
add
add
nop
sub
add
add
add
add
nop
add
add
enter
or
nop
add
add
aam
add
or
nop
add
add
loopne
add
or
nop
add
add
in
sub
add
add
add
clc    
sub
add
add
add
or
add
or
nop
add
add
sub
add
add
add
sub
add
add
add
cmp
add
or
nop
add
sbb
dec
add
add
or
nop
add
sbb
dec
add
add
add
add
pusha  
sub
add
add
add
push
add
add
dec
sub
add
add
add
pop
sub
add
add
add
sub
add
add
add
insb
sub
add
add
add
je
add
or
nop
add
faddl
push
add
nop
add
jmp
sub
add
add
add
movsb
sub
add
add
add
mov
add
or
nop
add
mov
add
add
in
add
or
nop
add
add
sub
add
add
add
sbb
add
or
nop
add
add
sub
add
add
add
cmp
add
or
nop
add
push
faddl
popa   
add
add
add
add
push
sub
add
add
add
pop
sub
add
add
add
push
add
add
js
add
or
nop
add
push
faddl
imul
or
nop
add
push
jmp
sub
add
add
add
sub
add
add
add
mov
add
add
enter
or
nop
add
pop
adc
jo
fsubrs
add
or
nop
add
add
sub
add
add
add
clc    
sub
add
add
add
or
add
add
add
adc
add
or
nop
add
faddl
ja
and
add
or
nop
add
inc
add
xor
add
or
nop
add
mov
sub
add
add
sbb
add
add
add
add
lock add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
lock add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
lock add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
lock add
add
add
add
add
add
add
add
add
add
add
lock add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
lock add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
lock add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
lock add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
xor
sbb
jle
cmp
cmp
mov
add
add
add
add
add
dec
add
dec
add
add
add
fiaddl
insb
add
fiaddl
adc
jno
or
loope
mov
push
add
xchg
add
add
add
add
add
add
add
add
add
add
add
add
dec
add
add
add
add
add
add
add
add
add
add
and
stc    
add
adc
or
fiaddl
test
sbb
imul
sbb
fiaddl
xchg
add
add
add
add
add
out
add
push
push
rolb
xor
ss push
inc
add
add
add
add
add
push
adc
mov
add
add
sbb
jmp
add
add
add
add
cmp
inc
add
add
add
fiaddl
pop
add
fiaddl
pop
add
fiaddl
pop
add
fiaddl
pop
add
fiaddl
pop
add
fiaddl
pop
add
fiaddl
pop
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
cs add
add
add
add
add
cs add
add
add
add
add
add
add
add
add
add
add
add
add
jb
ret    
add
push
add
add
push
add
add
add
add
or
add
add
pop
add
adc
add
add
add
adc
add
hlt    
inc
add
adc
sub
push
add
add
add
add
add
add
add
add
add
sbb
pop
add
add
inc
lea
add
add
add
pop
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
add
pop
add
add
add
add
add
jo
add
add
add
mov
add
add
add
add
add
add
add
add
dec
jns
push
gs js
add
jo
outsl
outsb
add
arpl
insb
imul
gs insl
cs push
imul
inc
outsl
jb
jae
push
jns
je
insl
add
jae
gs insl
cs inc
jb
ja
outsb
add
arpl
jae
data16 je
push
imul
jae
arpl
ret
xchg
ret
jb
jae
jne
arpl
add
push
jne
xor
inc
bound
xor
data16 arpl
cs fs inc
push
cmp
outsb
pop
pop
pop
jae
pop
aaa    
pop
inc
inc
aaa    
xor
jb
jae
jne
arpl
add
dec
gs data16 insb
push
cs push
gs jae
jne
arpl
jb,pn
jae
jne
arpl
add
gs ds add
mov
ret
dec
bound
arpl
mov
ret
arpl
add
mov
ret
inc
je
jb
bound
add
add
mov
ret
ret
ret
ret
ret
ret
ret
ret
ret
ret
ret
ret
ret
ret
ret
arpl
outsl
jb
ret
ret
xchg
inc
outsl
jb
add
xchg
mov
dec
inc
outsl
outsb
je
imul
jae
gs insl
cs inc
outsl
insl
jo
outsb
outsb
je
outsl
fs gs insb
add
jbe
jb
outsb
insl
outsb
je
inc
js
je
ret
xchg
inc
jbe
outsb
je
jb
jae
add
inc
imul
ret
mov
ret
mov
ret
mov
inc
jo
insb
imul
add
outsb
add
popa   
bound
imul
jns
gs jae
push
gs je
outsl
insl
jo
je
bound
gs js
push
outsb
fs gs jb
outsb
addr16 inc
gs popaw 
jne
je
ret
mov
push
push
inc
push
push
inc
je
jb
bound
add
je
imul
jo
outsl
outsb
gs cs push
jb
jo
jb
imul
insb
imul
push
gs je
imul
add
jae
gs insl
cs inc
outsl
outsb
imul
je
outsl
outsb
add
je
imul
add
outsb
arpl
outsl
outsb
imul
popaw  
jne
je
inc
outsb
gs jb
je
fs inc
outsl
fs gs inc
je
jb
bound
add
jae
gs insl
cs inc
outsl
fs gs inc
outsl
insl
cs inc
outsl
insl
jo
insb
gs jb
inc
outsl
insl
jo
insb
gs jb
outsb
gs jb
je
fs inc
je
jb
bound
add
jae
gs insl
cs push
jne
je
insl
gs cs inc
outsl
insl
jo
insb
gs jb
gs jb
imul
add
ret
lea
push
popa   
insb
jne
push
jns
gs add
xchg
mov
ret
popl
ret
nop
add
xchg
xchg
add
xchg
xchg
add
xchg
xchg
add
xchg
xchg
add
outsb
je
insl
gs dec
gs insb
jo
jb
add
imul
inc
jb
popa   
jns
inc
jb
popa   
jns
push
jne
je
insl
gs inc
imul
fs insb
gs add
xchg
xchg
add
xchg
xchg
add
xchg
xchg
add
xchg
cwtl   
add
xchg
cltd   
add
outsb
je
outsl
insb
add
jae
insl
gs dec
popa   
jns
jne
add
xchg
lcall
outsl
jb
inc
gs jb
jbe
inc
jns
gs jae
push
jns
je
insl
cs push
arpl
imul
je
addr16 jb
jo
jns
ret
fwait
add
xchg
pushf  
add
xchg
popf   
add
push
fs popa 
gs insb
add
insl
outsl
jb
push
je
gs popa 
insl
add
jae
gs insl
cs dec
dec
add
insl
insl
gs je
imul
imul
pop
dec
push
add
jns
je
push
je
gs popa 
insl
add
jb
popa   
insl
add
jb
jo
outsl
push
jb
outsb
jae
outsl
jb
add
jns
je
push
je
gs popa 
insl
dec
outsl
fs gs add
xchg
sahf   
add
je
dec
popa   
insl
gs add
mov
xchg
ret
xchg
push
jne
jo
outsb
fs dec
popa   
jns
jne
add
mov
mov
ret
mov
inc
outsl
outsb
je
imul
je
outsl
insb
add
je
inc
jne
outsl
push
arpl
gs dec
outsl
fs add
je
push
arpl
gs dec
outsl
fs gs add
mov
mov
ret
mov
ret
mov
ret
lea
jae
je
push
gs js
add
mov
mov
inc
jo
inc
outsl
insl
popa   
imul
inc
jne
jb
outsb
je
outsl
insl
popa   
imul
add
mov
nop
add
mov
xchg
add
outsl
arpl
jae
push
jns
je
insl
cs inc
imul
imul
pop
dec
jo
arpl
jns
ret
xchg
add
mov
xchg
add
mov
xchg
add
mov
xchg
add
mov
xchg
add
mov
xchg
add
je
add
mov
cwtl   
add
mov
cltd   
add
mov
lcall
outsl
jae
bound
ret
fwait
add
mov
pushf  
add
mov
popf   
add
mov
sahf   
add
mov
xchg
ret
xchg
ret
mov
push
je
imul
mov
ret
mov
ret
mov
push
imul
pop
inc
insb
imul
add
outsb
je
popa   
outsb
fs insb
gs jb
push
imul
ret
ret
lea
jae
je
dec
gs jns
ret
mov
jae
je
inc
jne
outsl
push
arpl
gs inc
imul
outsb
jae
ret
popl
ret
nop
add
mov
xchg
add
mov
xchg
add
mov
xchg
add
mov
xchg
add
mov
xchg
add
mov
xchg
add
gs popa 
je
add
mov
xchg
add
je
push
push
push
popa   
jae
bound
add
mov
cwtl   
add
mov
cltd   
add
je
jb
arpl
outsb
add
insb
insb
inc
jns
popa   
insl
add
insb
insb
push
jns
gs add
mov
lcall
jb
inc
insb
outsl
arpl
outsl
jo
add
mov
fwait
add
mov
pushf  
add
mov
popf   
add
mov
sahf   
add
mov
xchg
ret
xchg
ret
mov
ret
mov
ret
mov
ret
mov
ret
mov
ret
lea
ret
mov
push
jb
je
add
mov
popl
ret
nop
add
mov
xchg
add
mov
xchg
add
mov
xchg
add
mov
xchg
add
fs pop
dec
outsl
popa   
fs add
mov
xchg
add
gs popa 
je
inc
arpl
jo
outsl
jb
ret
xchg
add
mov
xchg
add
mov
cwtl   
add
outsl
jae
add
mov
cltd   
add
mov
lcall
popa   
jns
ret
fwait
add
mov
pushf  
add
mov
popf   
add
mov
sahf   
add
mov
xchg
ret
xchg
inc
gs jb
jbe
inc
jns
gs jae
inc
gs je
jns
gs jae
ret
mov
inc
gs je
jb
arpl
jae
jae
jns
popa   
insl
gs add
mov
mov
ret
mov
ret
mov
inc
outsl
outsb
arpl
add
mov
mov
jae
je
push
push
outsl
outsb
add
mov
lea
ret
mov
ret
popl
ret
nop
add
mov
xchg
add
mov
xchg
add
mov
xchg
add
mov
xchg
add
mov
xchg
add
mov
xchg
add
mov
xchg
add
mov
cwtl   
add
mov
cltd   
add
mov
lcall
ret
pushf  
add
jae
insl
bound
jb
fs jne
je
je
jb
bound
add
jae
gs insl
cs push
gs data16 insb
arpl
outsb
add
jae
insl
bound
imul
outsl
outsb
inc
je
jb
bound
add
jae
insl
bound
imul
imul
jae
gs insl
bound
outsl
insl
jo
outsb
jns
je
jb
bound
add
jae
insl
bound
outsl
jo
jb
addr16 push
jb
bound
add
jne
jb
insb
push
gs jae
jne
arpl
dec
popa   
outsb
addr16 jne
addr16 gs inc
je
jb
bound
add
jae
gs insl
cs push
gs jae
jne
arpl
add
jae
insl
bound
gs jae
jb
jo
imul
imul
jne
fs inc
je
jb
bound
add
jae
gs insl
cs push
jne
je
insl
gs cs dec
outsb
je
jb
jo
gs jb
imul
insl
push
imul
je
jb
bound
add
jae
insl
bound
jb
fs gs insl
popa   
jb
inc
je
jb
bound
add
jne
addr16 popa 
bound
je
jb
bound
add
jne
imul
jae
inc
jae
gs insl
bound
outsl
outsb
imul
je
outsl
outsb
inc
je
jb
bound
add
outsb
je
insl
gs inc
outsl
insl
jo
je
bound
imul
bound
add
insl
jo
insb
popa   
je
outsl
outsb
push
gs insb
popa   
js
je
outsl
outsb
jae
je
jb
bound
add
or
ja
outsl
add
add
or
add
add
or
je
add
add
je
jb
jns
push
add
imul
add
insl
add
jae
add
je
jo
popa   
add
add
add
jne
imul
outsl
add
insl
add
add
or
imul
add
jbe
outsl
add
add
add
fs scas
lcall
in
mov
mov
pop
push
sbb
mov
mov
pop
jg
aad
cmp
and
add
add
push
add
add
sbb
push
push
add
add
add
adc
add
add
add
add
or
and
add
sbb
add
add
add
or
add
add
add
push
adc
push
add
adc
adc
add
add
cmp
add
cmp
push
pop
add
dec
dec
imul
je
push
imul
jne
imul
outsl
jb
cs push
gs je
imul
imul
gs je
imul
insb
gs inc
imul
popa   
je
jb
xor
xor
xor
xor
add
push
adc
adc
push
adc
push
adc
add
pop
add
add
cmp
add
sbb
inc
add
add
add
add
or
add
or
add
add
add
add
dec
push
and
add
sbb
sbb
add
sbb
pop
add
dec
add
add
adc
popa   
adc
add
sbb
add
add
sbb
or
add
adc
add
adc
add
add
insl
add
add
jno
add
sbb
add
or
sbb
add
or
or
or
or
and
add
addb
sbb
or
add
add
xor
push
push
and
add
orb
adc
sbb
pop
add
sbb
adc
sbb
add
adc
add
sbb
adc
add
sbb
adc
add
add
sbb
add
sbb
or
push
and
add
orb
add
add
add
sbb
sbb
and
sbb
add
or
add
sbb
add
pop
dec
jns
push
add
add
or
xor
cs aaa 
add
adc
jb
jbe
and
arpl
jo
imul
add
add
sbb
add
inc
outsl
jo
jb
addr16 push
and
xor
xor
sub
add
daa    
add
add
add
add
add
dec
add
sub
add
xor
aaa    
ss sub
data16 arpl
sub
xor
xor
cmp
popa   
add
push
and
add
or
add
add
add
add
push
add
add
push
add
push
jb
jo
outsl
outsb
inc
js
gs jo
imul
ja
add
add
or
add
or
add
add
add
add
add
add
add
add
add
add
add
add
outsl
jb
js
dec
popa   
imul
jb
gs cs fs insb
insb
add
add
add
add
add
add
add
xor
add
dec
add
adcb
add
pusha  
add
sbbb
add
js
add
add
xor
add
nop
add
add
add
add
test
add
add
add
add
rolb

