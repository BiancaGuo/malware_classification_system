# -*- coding: UTF-8 -*-
import re
from collections import *
import os
import pandas as pd
import json

def getOpcodeSequence(filename):
    opcode_seq = []
    with open(filename) as f:
        for line in f.readlines():
            line=line.rstrip('\n').strip()
            opcode_seq.append(line)
    return opcode_seq

def getOpcodeNgram(ops, n=4):#n-gram，决定n的大小 可以改进！！
    opngramlist = [tuple(ops[i:i+n]) for i in range(len(ops)-n)]
    opngram = Counter(opngramlist)
    return opngram

def getStaticFeatures():
    file = open('D:\\大四稳定起航\\毕设\\malware_classification_system\\malware_classification_by_static_feature\\selected_static_features_4gram.txt', 'r')
    js = file.read()
    dic = json.loads(js)
    file.close()
    return dic

if __name__=="__main__":
    basepath = "E:\\PE_opcode_file\\" #opcode文件夹
    map3gram = defaultdict(Counter)

    subtrain = pd.read_csv('static_trainLabels.csv')#训练集文件与类别对应关系
    count = 1
    for Id, Class in zip(subtrain.Id, subtrain.Class):#id：文件md5值，class：对应类别（6类）
        print("counting the 3-gram of the {0} file...".format(str(count)))
        count += 1
        filename = basepath + str(Class)+"\\"+Id #所有文件
        ops = getOpcodeSequence(filename) #当每个文件中的opcode放入list中
        op3gram = getOpcodeNgram(ops) #获得ngram组
        map3gram[Id] = op3gram #将每个文件的ngram组（opcodes：个数）防暑map3gram列表中

    cc = Counter([])

    count=1
    for d in map3gram.values():
        print(count)
        count=count+1
        cc += d

    #cc:Counter({('push', 'add'): 84, ('push', 'mov'): 80})
    selectedfeatures = {}
    tc = 0
    for k,v in cc.iteritems():
        if v >= 500:#ngram出现次数大于500次 特征选取的方式 可以改进！！！
            selectedfeatures[str(k)] = v
            print(k,v)
            tc += 1

    js = json.dumps(selectedfeatures)
    file = open('selected_static_features_4gram.txt', 'w')
    file.write(js)
    file.close()

    dataframelist = []
    #将每个文件中在selectedfeatures中的ngram挑选出来
    for fid,op3gram in map3gram.iteritems():#{txt1: Counter({('push', 'add'): 84}), txt2: Counter({('push', 'mov'): 80})})
        standard = {}
        standard["Id"] = fid
        for feature in selectedfeatures:
            temp = feature.replace('(', '').replace(')', '').replace('\'', '')
            feature_tuple = tuple([str(i).strip() for i in temp.split(',')])
            if feature_tuple in op3gram:
                standard[feature_tuple] = op3gram[feature_tuple]
            else:
                standard[feature_tuple] = 0
        dataframelist.append(standard)
    df = pd.DataFrame(dataframelist)
    df.to_csv("4gramfeature.csv",index=False)