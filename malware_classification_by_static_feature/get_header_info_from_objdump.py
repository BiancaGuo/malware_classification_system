# -*- coding: UTF-8 -*-
import os
import re
import pandas as pd
'''
1、adwares
2、backdoors
3、rootkits
4、spywares
5、trojans
6、worms
7、benign
'''
def get_all_files(rootdir):
    files = []
    list = os.listdir(rootdir)  # 列出文件夹下所有的目录与文件
    for i in range(0, len(list)):
        path = os.path.join(rootdir, list[i])
        if os.path.isdir(path):
            files.extend(get_all_files(path))
        if os.path.isfile(path):
            files.append(path)
    return files

if __name__=="__main__":

    key_list = {}
    # for i in range(0, 32):
    #     key_list.append([])
    key_list["Name"]=[]
    key_list["Malware"] = []
    key_list["Magic"] = []
    key_list["MajorLinkerVersion"] = []
    key_list["MinorLinkerVersion"] = []
    key_list["SizeOfCode"] = []
    key_list["SizeOfInitializedData"] = []
    key_list["SizeOfUninitializedData"] = []
    key_list["AddressOfEntryPoint"] = []
    key_list["BaseOfCode"] = []
    key_list["BaseOfData"] = []
    key_list["ImageBase"] = []
    key_list["SectionAlignment"] = []
    key_list["FileAlignment"] = []
    key_list["MajorOSystemVersion"] = []
    key_list["MinorOSystemVersion"] = []
    key_list["MajorImageVersion"] = []
    key_list["MinorImageVersion"] = []
    key_list["MajorSubsystemVersion"] = []
    key_list["MinorSubsystemVersion"] = []
    key_list["Win32Version"] = []
    key_list["SizeOfImage"] = []
    key_list["SizeOfHeaders"] = []
    key_list["CheckSum"] = []
    key_list["Subsystem"] = []
    key_list["DllCharacteristics"] = []
    key_list["SizeOfStackReserve"] = []
    key_list["SizeOfStackCommit"] = []
    key_list["SizeOfHeapReserve"] = []
    key_list["SizeOfHeapCommit"] = []
    key_list["LoaderFlags"] = []
    key_list["NumberOfRvaAndSizes"] = []
    for num in range(1,8):
        # if num==7:
        #     dir = "E:\\PE_dataset\\" + str(num) + "\\small\\"  # backdoors\rootkits\spywares\trojans\worms
        # else:
        dir="E:\\PE_dataset\\"+str(num)+"\\"#backdoors\rootkits\spywares\trojans\worms
        file_list=get_all_files(dir)

        for file in file_list:
            print(file)
            #保存该文件的文件名和类型
            # print(os.path.basename(file).split('.')[0]+".txt")
            if num==7:
                print(os.path.basename(file)[0:-4]+".txt")
                key_list["Name"].append(os.path.basename(file)[0:-4]+".txt")
            else:
                print(os.path.basename(file) + ".txt")
                key_list["Name"].append(os.path.basename(file) + ".txt")
            key_list["Malware"].append(num)
            #存储出现的头信息的名称
            exit_key_list=[]
            exit_key_list.append("Name")
            exit_key_list.append("Malware")
            #反汇编获得PE头信息
            command = 'objdump -x ' + file
            header_info = os.popen(command).read().strip()
            p = r'.*\n'
            header_info=re.findall(p,header_info)
            for i in range(0,len(header_info)):
                if re.match(r'Magic*',str(header_info[i]).strip('\n')):
                    for j in range(i,i+30):
                        if str(header_info[j]).strip('\n')=="":
                            break
                        s=str(header_info[j]).strip('\n')
                        s=s.split("\t")
                        key = [x.strip() for x in s if x.strip() != ''][0]
                        value=[x.strip() for x in s if x.strip() != ''][1]
                        exit_key_list.append(key)
                        # print(value)
                        if key=="MajorLinkerVersion" or key=="MinorLinkerVersion" or key=="MajorOSystemVersion" or key=="MinorOSystemVersion" or key=="MajorImageVersion" or key=="MinorImageVersion" or key=="MajorSubsystemVersion" or key=="MinorSubsystemVersion":
                            key_list[key].append(int(value))
                        else:
                            key_list[key].append(int(value, 16))
                    break
            for k in key_list:
                if k not in exit_key_list:
                    key_list[k].append(0)

    #存入csv文件

    # dataframe = pd.DataFrame({'Id': key_list['Name'], 'Class': key_list['Malware'],'Magic': key_list['Magic'],'MajorLinkerVersion': key_list["MajorLinkerVersion"],'MinorLinkerVersion': key_list["MinorLinkerVersion"],'SizeOfCode': key_list["SizeOfCode"],'SizeOfInitializedData': key_list["SizeOfInitializedData"],'SizeOfUninitializedData': key_list["SizeOfUninitializedData"],
    #                           'AddressOfEntryPoint': key_list["AddressOfEntryPoint"],'BaseOfCode': key_list["BaseOfCode"],'BaseOfData': key_list["BaseOfData"],'ImageBase': key_list["ImageBase"],'SectionAlignment': key_list["SectionAlignment"],'FileAlignment': key_list["FileAlignment"],'MajorOSystemVersion': key_list["MajorOSystemVersion"],
    #                           'MinorOSystemVersion': key_list["MinorOSystemVersion"],'MajorImageVersion': key_list["MajorImageVersion"],'MinorImageVersion': key_list["MinorImageVersion"],'MajorSubsystemVersion': key_list["MajorSubsystemVersion"],'MinorSubsystemVersion': key_list["MinorSubsystemVersion"],'Win32Version': key_list["Win32Version"],'SizeOfImage': key_list["SizeOfImage"],
    #                           'SizeOfHeaders': key_list["SizeOfHeaders"],'CheckSum': key_list["CheckSum"],'Subsystem': key_list["Subsystem"],'DllCharacteristics': key_list["DllCharacteristics"],'SizeOfStackReserve': key_list["SizeOfStackReserve"],'SizeOfStackCommit': key_list["SizeOfStackCommit"],'SizeOfHeapReserve': key_list["SizeOfHeapReserve"],'SizeOfHeapCommit': key_list["SizeOfHeapCommit"],'LoaderFlags': key_list["LoaderFlags"],'NumberOfRvaAndSizes': key_list["NumberOfRvaAndSizes"]})
    # # 将DataFrame存储为csv,index表示是否显示行名，default=True
    # dataframe.to_csv("PE_header_feature.csv", index=False, sep=',')

    dataframe = pd.DataFrame({'Id': key_list['Name'], 'Magic': key_list['Magic'],
                              'MajorLinkerVersion': key_list["MajorLinkerVersion"],
                              'MinorLinkerVersion': key_list["MinorLinkerVersion"],
                              'SizeOfCode': key_list["SizeOfCode"],
                              'SizeOfInitializedData': key_list["SizeOfInitializedData"],
                              'SizeOfUninitializedData': key_list["SizeOfUninitializedData"],
                              'AddressOfEntryPoint': key_list["AddressOfEntryPoint"],
                              'BaseOfCode': key_list["BaseOfCode"], 'BaseOfData': key_list["BaseOfData"],
                              'ImageBase': key_list["ImageBase"], 'SectionAlignment': key_list["SectionAlignment"],
                              'FileAlignment': key_list["FileAlignment"],
                              'MajorOSystemVersion': key_list["MajorOSystemVersion"],
                              'MinorOSystemVersion': key_list["MinorOSystemVersion"],
                              'MajorImageVersion': key_list["MajorImageVersion"],
                              'MinorImageVersion': key_list["MinorImageVersion"],
                              'MajorSubsystemVersion': key_list["MajorSubsystemVersion"],
                              'MinorSubsystemVersion': key_list["MinorSubsystemVersion"],
                              'Win32Version': key_list["Win32Version"], 'SizeOfImage': key_list["SizeOfImage"],
                              'SizeOfHeaders': key_list["SizeOfHeaders"], 'CheckSum': key_list["CheckSum"],
                              'Subsystem': key_list["Subsystem"], 'DllCharacteristics': key_list["DllCharacteristics"],
                              'SizeOfStackReserve': key_list["SizeOfStackReserve"],
                              'SizeOfStackCommit': key_list["SizeOfStackCommit"],
                              'SizeOfHeapReserve': key_list["SizeOfHeapReserve"],
                              'SizeOfHeapCommit': key_list["SizeOfHeapCommit"], 'LoaderFlags': key_list["LoaderFlags"],
                              'NumberOfRvaAndSizes': key_list["NumberOfRvaAndSizes"]})
    # 将DataFrame存储为csv,index表示是否显示行名，default=True
    dataframe.to_csv("PE_header_feature_for_mix.csv", index=False, sep=',')
    '''
    for test
    '''
    # file="E:\\PE_dataset\\adwares\\038cbe00178254638c76635798498f15"
    #
    # command = 'objdump -x ' + file
    # header_info = os.popen(command).read().strip()
    # p = r'.*\n'
    # header_info=re.findall(p,header_info)
    # for i in range(0,len(header_info)):
    #     # if re.match(r'Time/Date*',header_info[i].strip('\n')):
    #     #     print(header_info[i+1].strip('\n'))
    #     print(header_info[i].strip('\n'))

